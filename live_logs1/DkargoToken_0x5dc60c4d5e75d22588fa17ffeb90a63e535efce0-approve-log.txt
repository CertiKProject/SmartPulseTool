This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 13:59:43,650 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 13:59:43,651 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 13:59:43,659 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 13:59:43,659 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 13:59:43,660 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 13:59:43,660 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 13:59:43,661 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 13:59:43,662 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 13:59:43,663 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 13:59:43,663 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 13:59:43,663 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 13:59:43,664 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 13:59:43,665 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 13:59:43,666 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 13:59:43,667 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 13:59:43,668 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 13:59:43,670 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 13:59:43,673 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 13:59:43,675 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 13:59:43,676 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 13:59:43,678 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 13:59:43,680 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 13:59:43,681 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 13:59:43,681 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 13:59:43,681 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 13:59:43,682 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 13:59:43,682 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 13:59:43,682 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 13:59:43,683 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 13:59:43,683 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 13:59:43,683 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 13:59:43,684 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 13:59:43,684 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 13:59:43,685 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 13:59:43,685 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 13:59:43,686 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 13:59:43,686 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 13:59:43,686 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 13:59:43,687 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 13:59:43,687 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 13:59:43,687 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 13:59:43,695 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 13:59:43,695 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 13:59:43,696 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 13:59:43,696 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 13:59:43,696 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 13:59:43,696 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 13:59:43,696 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 13:59:43,696 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 13:59:43,697 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 13:59:43,697 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 13:59:43,697 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 13:59:43,697 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 13:59:43,697 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 13:59:43,697 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 13:59:43,697 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 13:59:43,697 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 13:59:43,697 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 13:59:43,698 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 13:59:43,698 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 13:59:43,698 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 13:59:43,698 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 13:59:43,698 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 13:59:43,698 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 13:59:43,698 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 13:59:43,698 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 13:59:43,698 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 13:59:43,718 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 13:59:43,728 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 13:59:43,730 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 13:59:43,731 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 13:59:43,732 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 13:59:43,732 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_approve.bpl
[2020-11-25 13:59:43,732 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_approve.bpl'
[2020-11-25 13:59:43,838 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 13:59:43,839 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 13:59:43,840 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 13:59:43,840 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 13:59:43,840 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 13:59:43,856 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:59:43" (1/1) ...
[2020-11-25 13:59:43,857 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:59:43" (1/1) ...
[2020-11-25 13:59:43,893 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:59:43" (1/1) ...
[2020-11-25 13:59:43,894 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:59:43" (1/1) ...
[2020-11-25 13:59:43,922 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:59:43" (1/1) ...
[2020-11-25 13:59:43,936 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:59:43" (1/1) ...
[2020-11-25 13:59:43,948 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:59:43" (1/1) ...
[2020-11-25 13:59:43,962 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 13:59:43,963 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 13:59:43,963 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 13:59:43,965 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 13:59:43,969 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:59:43" (1/1) ...
[2020-11-25 13:59:43,990 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20Safe.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20Safe.approve(spender, value), return == true && _allowances_ERC20[this][msg.sender][spender] == value &&  _supply_ERC20[this] == old(_supply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2]) && _name_DkargoToken[this] == old(_name_DkargoToken[this]) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this]) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this]) && _infcs_ERC165[this] == old(_infcs_ERC165[this]) && _slist_AddressChain[this] == old(_slist_AddressChain[this]) && _owner_Ownership[this] == old(_owner_Ownership[this]))))
[2020-11-25 13:59:43,996 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20Safe.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20Safe.approve(spender, value), return == true && _allowances_ERC20[this][msg.sender][spender] == value &&  _supply_ERC20[this] == old(_supply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2]) && _name_DkargoToken[this] == old(_name_DkargoToken[this]) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this]) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this]) && _infcs_ERC165[this] == old(_infcs_ERC165[this]) && _slist_AddressChain[this] == old(_slist_AddressChain[this]) && _owner_Ownership[this] == old(_owner_Ownership[this]))))
[2020-11-25 13:59:44,003 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20Safe.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20Safe.approve(spender, value), return == true && _allowances_ERC20[this][msg.sender][spender] == value &&  _supply_ERC20[this] == old(_supply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2]) && _name_DkargoToken[this] == old(_name_DkargoToken[this]) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this]) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this]) && _infcs_ERC165[this] == old(_infcs_ERC165[this]) && _slist_AddressChain[this] == old(_slist_AddressChain[this]) && _owner_Ownership[this] == old(_owner_Ownership[this]))))
[2020-11-25 13:59:44,011 INFO  L636   opiaSpecLangObserver]: Parsed ( p1!=msg.sender || p2!=spender_s1084 ) to BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Safe>]],BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[spender_s1084,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Safe>]]]
[2020-11-25 13:59:44,015 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( __ret_0_==true && _allowances_ERC20[this][msg.sender][spender_s1084]==amount_s1084 ) && _supply_ERC20[this]==( old(_supply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this][p1][p2]==( old(_allowances_ERC20[this][p1][p2]) ) ) && _name_DkargoToken[this]==( old(_name_DkargoToken[this]) ) ) && _symbol_DkargoToken[this]==( old(_symbol_DkargoToken[this]) ) ) && _dkargoPrefix_DkargoPrefix[this]==( old(_dkargoPrefix_DkargoPrefix[this]) ) ) && _infcs_ERC165[this]==( old(_infcs_ERC165[this]) ) ) && _slist_AddressChain[this]==( old(_slist_AddressChain[this]) ) ) && _owner_Ownership[this]==( old(_owner_Ownership[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,approve~address~uint256_ERC20Safe>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Safe>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Safe>]]],[IdentifierExpression[spender_s1084,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Safe>]]],IdentifierExpression[amount_s1084,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Safe>]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_supply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Safe>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_supply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Safe>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Safe>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Safe>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Safe>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Safe>]]],[IdentifierExpression[p1,GLOBAL]]],[IdentifierExpression[p2,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_DkargoToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Safe>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_DkargoToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Safe>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_DkargoToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Safe>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_DkargoToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Safe>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_dkargoPrefix_DkargoPrefix,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Safe>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_dkargoPrefix_DkargoPrefix,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Safe>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_infcs_ERC165,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Safe>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_infcs_ERC165,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Safe>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_slist_AddressChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Safe>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_slist_AddressChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Safe>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_owner_Ownership,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Safe>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_owner_Ownership,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,approve~address~uint256_ERC20Safe>]]]]]]
[2020-11-25 13:59:44,021 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20Safe.approve(spender, value), p1 != msg.sender || p2 != spender) ==> <>(finished(ERC20Safe.approve(spender, value), return == true && _allowances_ERC20[this][msg.sender][spender] == value &&  _supply_ERC20[this] == old(_supply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2]) && _name_DkargoToken[this] == old(_name_DkargoToken[this]) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this]) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this]) && _infcs_ERC165[this] == old(_infcs_ERC165[this]) && _slist_AddressChain[this] == old(_slist_AddressChain[this]) && _owner_Ownership[this] == old(_owner_Ownership[this]))))
[2020-11-25 13:59:44,021 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_approve_ERC20Safe0) ==> ( <>AP(success_approve_ERC20Safe0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 13:59:44,037 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:59:44 PropertyContainer
[2020-11-25 13:59:44,038 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 13:59:44,038 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 13:59:44,038 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 13:59:44,038 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 13:59:44,039 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:59:43" (1/2) ...
[2020-11-25 13:59:44,040 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 13:59:44,040 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 13:59:44,062 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:59:44" (2/2) ...
[2020-11-25 13:59:44,062 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 13:59:44,063 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 13:59:44,063 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 13:59:44,063 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 13:59:44,064 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:59:43" (1/2) ...
[2020-11-25 13:59:44,116 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 13:59:44,116 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeInfo_ctor__success
[2020-11-25 13:59:44,118 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeList_ctor__success
[2020-11-25 13:59:44,118 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix_NoBaseCtor__success
[2020-11-25 13:59:44,119 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix
[2020-11-25 13:59:44,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix
[2020-11-25 13:59:44,119 INFO  L130     BoogieDeclarations]: Found specification of procedure getDkargoPrefix_DkargoPrefix
[2020-11-25 13:59:44,119 INFO  L138     BoogieDeclarations]: Found implementation of procedure getDkargoPrefix_DkargoPrefix
[2020-11-25 13:59:44,119 INFO  L130     BoogieDeclarations]: Found specification of procedure _setDkargoPrefix~string_DkargoPrefix__success
[2020-11-25 13:59:44,119 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership_NoBaseCtor__success
[2020-11-25 13:59:44,119 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership
[2020-11-25 13:59:44,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership
[2020-11-25 13:59:44,120 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownership
[2020-11-25 13:59:44,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownership
[2020-11-25 13:59:44,120 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownership
[2020-11-25 13:59:44,120 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownership
[2020-11-25 13:59:44,121 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownership
[2020-11-25 13:59:44,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownership
[2020-11-25 13:59:44,121 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 13:59:44,121 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 13:59:44,121 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 13:59:44,121 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 13:59:44,121 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 13:59:44,121 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 13:59:44,121 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 13:59:44,121 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 13:59:44,122 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain_NoBaseCtor__success
[2020-11-25 13:59:44,122 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain
[2020-11-25 13:59:44,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain
[2020-11-25 13:59:44,122 INFO  L130     BoogieDeclarations]: Found specification of procedure count_AddressChain
[2020-11-25 13:59:44,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure count_AddressChain
[2020-11-25 13:59:44,122 INFO  L130     BoogieDeclarations]: Found specification of procedure head_AddressChain
[2020-11-25 13:59:44,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure head_AddressChain
[2020-11-25 13:59:44,122 INFO  L130     BoogieDeclarations]: Found specification of procedure tail_AddressChain
[2020-11-25 13:59:44,122 INFO  L138     BoogieDeclarations]: Found implementation of procedure tail_AddressChain
[2020-11-25 13:59:44,122 INFO  L130     BoogieDeclarations]: Found specification of procedure nextOf~address_AddressChain
[2020-11-25 13:59:44,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure nextOf~address_AddressChain
[2020-11-25 13:59:44,123 INFO  L130     BoogieDeclarations]: Found specification of procedure prevOf~address_AddressChain
[2020-11-25 13:59:44,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure prevOf~address_AddressChain
[2020-11-25 13:59:44,123 INFO  L130     BoogieDeclarations]: Found specification of procedure isLinked~address_AddressChain
[2020-11-25 13:59:44,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLinked~address_AddressChain
[2020-11-25 13:59:44,123 INFO  L130     BoogieDeclarations]: Found specification of procedure _linkChain~address_AddressChain__success
[2020-11-25 13:59:44,123 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlinkChain~address_AddressChain__success
[2020-11-25 13:59:44,123 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165_NoBaseCtor__success
[2020-11-25 13:59:44,123 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165
[2020-11-25 13:59:44,123 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165
[2020-11-25 13:59:44,124 INFO  L130     BoogieDeclarations]: Found specification of procedure supportsInterface~bytes4_IERC165
[2020-11-25 13:59:44,124 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165_NoBaseCtor__success
[2020-11-25 13:59:44,124 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165
[2020-11-25 13:59:44,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165
[2020-11-25 13:59:44,124 INFO  L130     BoogieDeclarations]: Found specification of procedure supportsInterface~bytes4_ERC165
[2020-11-25 13:59:44,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure supportsInterface~bytes4_ERC165
[2020-11-25 13:59:44,124 INFO  L130     BoogieDeclarations]: Found specification of procedure _registerInterface~bytes4_ERC165__success
[2020-11-25 13:59:44,124 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 13:59:44,124 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 13:59:44,124 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 13:59:44,125 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 13:59:44,125 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 13:59:44,125 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 13:59:44,125 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 13:59:44,125 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 13:59:44,125 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 13:59:44,125 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 13:59:44,125 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 13:59:44,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 13:59:44,125 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 13:59:44,125 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 13:59:44,126 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 13:59:44,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 13:59:44,126 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 13:59:44,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 13:59:44,126 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 13:59:44,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 13:59:44,126 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 13:59:44,126 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 13:59:44,126 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 13:59:44,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 13:59:44,127 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 13:59:44,127 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 13:59:44,127 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 13:59:44,127 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 13:59:44,127 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe_NoBaseCtor__success
[2020-11-25 13:59:44,127 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe
[2020-11-25 13:59:44,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe
[2020-11-25 13:59:44,127 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Safe
[2020-11-25 13:59:44,127 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Safe
[2020-11-25 13:59:44,127 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Safe
[2020-11-25 13:59:44,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Safe
[2020-11-25 13:59:44,128 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Safe
[2020-11-25 13:59:44,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Safe
[2020-11-25 13:59:44,128 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken_NoBaseCtor__success
[2020-11-25 13:59:44,128 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken
[2020-11-25 13:59:44,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken
[2020-11-25 13:59:44,128 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_DkargoToken
[2020-11-25 13:59:44,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_DkargoToken
[2020-11-25 13:59:44,128 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DkargoToken
[2020-11-25 13:59:44,128 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DkargoToken
[2020-11-25 13:59:44,128 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DkargoToken
[2020-11-25 13:59:44,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DkargoToken
[2020-11-25 13:59:44,129 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DkargoToken
[2020-11-25 13:59:44,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DkargoToken
[2020-11-25 13:59:44,129 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DkargoToken
[2020-11-25 13:59:44,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DkargoToken
[2020-11-25 13:59:44,129 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DkargoToken
[2020-11-25 13:59:44,129 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DkargoToken
[2020-11-25 13:59:44,129 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 13:59:44,129 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 13:59:44,129 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 13:59:44,130 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 13:59:44,130 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DkargoPrefix
[2020-11-25 13:59:44,130 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_DkargoPrefix
[2020-11-25 13:59:44,130 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownership
[2020-11-25 13:59:44,130 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownership
[2020-11-25 13:59:44,130 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 13:59:44,130 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 13:59:44,130 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_AddressChain
[2020-11-25 13:59:44,130 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_AddressChain
[2020-11-25 13:59:44,130 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC165
[2020-11-25 13:59:44,131 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC165
[2020-11-25 13:59:44,131 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC165
[2020-11-25 13:59:44,131 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC165
[2020-11-25 13:59:44,131 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 13:59:44,131 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 13:59:44,131 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 13:59:44,131 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 13:59:44,131 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Safe
[2020-11-25 13:59:44,131 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Safe
[2020-11-25 13:59:44,132 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DkargoToken
[2020-11-25 13:59:44,132 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 13:59:44,132 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 13:59:44,132 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeInfo_ctor__fail
[2020-11-25 13:59:44,132 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeList_ctor__fail
[2020-11-25 13:59:44,132 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix_NoBaseCtor__fail
[2020-11-25 13:59:44,132 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix__success
[2020-11-25 13:59:44,132 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix__fail
[2020-11-25 13:59:44,132 INFO  L130     BoogieDeclarations]: Found specification of procedure getDkargoPrefix_DkargoPrefix__success
[2020-11-25 13:59:44,132 INFO  L130     BoogieDeclarations]: Found specification of procedure getDkargoPrefix_DkargoPrefix__fail
[2020-11-25 13:59:44,133 INFO  L130     BoogieDeclarations]: Found specification of procedure _setDkargoPrefix~string_DkargoPrefix__fail
[2020-11-25 13:59:44,133 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership_NoBaseCtor__fail
[2020-11-25 13:59:44,133 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership__success
[2020-11-25 13:59:44,133 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership__fail
[2020-11-25 13:59:44,133 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownership__success
[2020-11-25 13:59:44,133 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownership__fail
[2020-11-25 13:59:44,133 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownership__success
[2020-11-25 13:59:44,133 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownership__fail
[2020-11-25 13:59:44,133 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownership__success
[2020-11-25 13:59:44,133 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownership__fail
[2020-11-25 13:59:44,134 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 13:59:44,134 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 13:59:44,134 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 13:59:44,134 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 13:59:44,134 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 13:59:44,134 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 13:59:44,134 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 13:59:44,134 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 13:59:44,134 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain_NoBaseCtor__fail
[2020-11-25 13:59:44,134 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain__success
[2020-11-25 13:59:44,135 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain__fail
[2020-11-25 13:59:44,135 INFO  L130     BoogieDeclarations]: Found specification of procedure count_AddressChain__success
[2020-11-25 13:59:44,135 INFO  L130     BoogieDeclarations]: Found specification of procedure count_AddressChain__fail
[2020-11-25 13:59:44,135 INFO  L130     BoogieDeclarations]: Found specification of procedure head_AddressChain__success
[2020-11-25 13:59:44,135 INFO  L130     BoogieDeclarations]: Found specification of procedure head_AddressChain__fail
[2020-11-25 13:59:44,135 INFO  L130     BoogieDeclarations]: Found specification of procedure tail_AddressChain__success
[2020-11-25 13:59:44,135 INFO  L130     BoogieDeclarations]: Found specification of procedure tail_AddressChain__fail
[2020-11-25 13:59:44,135 INFO  L130     BoogieDeclarations]: Found specification of procedure nextOf~address_AddressChain__success
[2020-11-25 13:59:44,135 INFO  L130     BoogieDeclarations]: Found specification of procedure nextOf~address_AddressChain__fail
[2020-11-25 13:59:44,135 INFO  L130     BoogieDeclarations]: Found specification of procedure prevOf~address_AddressChain__success
[2020-11-25 13:59:44,135 INFO  L130     BoogieDeclarations]: Found specification of procedure prevOf~address_AddressChain__fail
[2020-11-25 13:59:44,136 INFO  L130     BoogieDeclarations]: Found specification of procedure isLinked~address_AddressChain__success
[2020-11-25 13:59:44,136 INFO  L130     BoogieDeclarations]: Found specification of procedure isLinked~address_AddressChain__fail
[2020-11-25 13:59:44,136 INFO  L130     BoogieDeclarations]: Found specification of procedure _linkChain~address_AddressChain__fail
[2020-11-25 13:59:44,136 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlinkChain~address_AddressChain__fail
[2020-11-25 13:59:44,136 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165_NoBaseCtor__fail
[2020-11-25 13:59:44,136 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165__success
[2020-11-25 13:59:44,136 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165__fail
[2020-11-25 13:59:44,136 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165_NoBaseCtor__fail
[2020-11-25 13:59:44,136 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165__success
[2020-11-25 13:59:44,136 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165__fail
[2020-11-25 13:59:44,136 INFO  L130     BoogieDeclarations]: Found specification of procedure supportsInterface~bytes4_ERC165__success
[2020-11-25 13:59:44,137 INFO  L130     BoogieDeclarations]: Found specification of procedure supportsInterface~bytes4_ERC165__fail
[2020-11-25 13:59:44,137 INFO  L130     BoogieDeclarations]: Found specification of procedure _registerInterface~bytes4_ERC165__fail
[2020-11-25 13:59:44,137 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 13:59:44,137 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 13:59:44,137 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 13:59:44,137 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 13:59:44,137 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 13:59:44,137 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 13:59:44,137 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 13:59:44,137 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 13:59:44,137 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 13:59:44,137 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 13:59:44,138 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 13:59:44,138 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 13:59:44,138 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 13:59:44,138 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 13:59:44,138 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 13:59:44,138 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 13:59:44,138 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 13:59:44,138 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 13:59:44,138 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 13:59:44,138 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 13:59:44,138 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 13:59:44,138 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 13:59:44,139 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe_NoBaseCtor__fail
[2020-11-25 13:59:44,139 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe__success
[2020-11-25 13:59:44,139 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe__fail
[2020-11-25 13:59:44,139 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Safe__success
[2020-11-25 13:59:44,139 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Safe__fail
[2020-11-25 13:59:44,139 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Safe__success
[2020-11-25 13:59:44,139 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Safe__fail
[2020-11-25 13:59:44,139 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Safe__success
[2020-11-25 13:59:44,139 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Safe__fail
[2020-11-25 13:59:44,139 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken_NoBaseCtor__fail
[2020-11-25 13:59:44,139 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken__success
[2020-11-25 13:59:44,139 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken__fail
[2020-11-25 13:59:44,140 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_DkargoToken__success
[2020-11-25 13:59:44,140 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_DkargoToken__fail
[2020-11-25 13:59:44,140 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DkargoToken__success
[2020-11-25 13:59:44,140 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DkargoToken__fail
[2020-11-25 13:59:44,140 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DkargoToken__success
[2020-11-25 13:59:44,140 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DkargoToken__fail
[2020-11-25 13:59:44,140 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DkargoToken__success
[2020-11-25 13:59:44,140 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DkargoToken__fail
[2020-11-25 13:59:44,140 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DkargoToken__success
[2020-11-25 13:59:44,140 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DkargoToken__fail
[2020-11-25 13:59:44,140 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DkargoToken__success
[2020-11-25 13:59:44,140 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DkargoToken__fail
[2020-11-25 13:59:44,141 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 13:59:44,141 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 13:59:44,141 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 13:59:44,141 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 13:59:44,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 13:59:44,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 13:59:44,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeInfo_ctor__fail
[2020-11-25 13:59:44,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeInfo_ctor__success
[2020-11-25 13:59:44,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeList_ctor__fail
[2020-11-25 13:59:44,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeList_ctor__success
[2020-11-25 13:59:44,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix_NoBaseCtor__fail
[2020-11-25 13:59:44,141 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix_NoBaseCtor__success
[2020-11-25 13:59:44,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix__fail
[2020-11-25 13:59:44,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix__success
[2020-11-25 13:59:44,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure getDkargoPrefix_DkargoPrefix__fail
[2020-11-25 13:59:44,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure getDkargoPrefix_DkargoPrefix__success
[2020-11-25 13:59:44,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setDkargoPrefix~string_DkargoPrefix__fail
[2020-11-25 13:59:44,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setDkargoPrefix~string_DkargoPrefix__success
[2020-11-25 13:59:44,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership_NoBaseCtor__fail
[2020-11-25 13:59:44,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership_NoBaseCtor__success
[2020-11-25 13:59:44,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership__fail
[2020-11-25 13:59:44,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership__success
[2020-11-25 13:59:44,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownership__fail
[2020-11-25 13:59:44,142 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownership__success
[2020-11-25 13:59:44,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownership__fail
[2020-11-25 13:59:44,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownership__success
[2020-11-25 13:59:44,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownership__fail
[2020-11-25 13:59:44,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownership__success
[2020-11-25 13:59:44,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 13:59:44,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 13:59:44,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 13:59:44,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 13:59:44,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 13:59:44,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 13:59:44,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 13:59:44,143 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 13:59:44,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 13:59:44,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 13:59:44,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 13:59:44,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 13:59:44,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 13:59:44,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 13:59:44,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain_NoBaseCtor__fail
[2020-11-25 13:59:44,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain_NoBaseCtor__success
[2020-11-25 13:59:44,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain__fail
[2020-11-25 13:59:44,144 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain__success
[2020-11-25 13:59:44,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure count_AddressChain__fail
[2020-11-25 13:59:44,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure count_AddressChain__success
[2020-11-25 13:59:44,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure head_AddressChain__fail
[2020-11-25 13:59:44,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure head_AddressChain__success
[2020-11-25 13:59:44,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure tail_AddressChain__fail
[2020-11-25 13:59:44,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure tail_AddressChain__success
[2020-11-25 13:59:44,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure nextOf~address_AddressChain__fail
[2020-11-25 13:59:44,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure nextOf~address_AddressChain__success
[2020-11-25 13:59:44,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure prevOf~address_AddressChain__fail
[2020-11-25 13:59:44,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure prevOf~address_AddressChain__success
[2020-11-25 13:59:44,145 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLinked~address_AddressChain__fail
[2020-11-25 13:59:44,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLinked~address_AddressChain__success
[2020-11-25 13:59:44,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure _linkChain~address_AddressChain__fail
[2020-11-25 13:59:44,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure _linkChain~address_AddressChain__success
[2020-11-25 13:59:44,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlinkChain~address_AddressChain__fail
[2020-11-25 13:59:44,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlinkChain~address_AddressChain__success
[2020-11-25 13:59:44,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165_NoBaseCtor__fail
[2020-11-25 13:59:44,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165_NoBaseCtor__success
[2020-11-25 13:59:44,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165__fail
[2020-11-25 13:59:44,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165__success
[2020-11-25 13:59:44,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165_NoBaseCtor__fail
[2020-11-25 13:59:44,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165_NoBaseCtor__success
[2020-11-25 13:59:44,146 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165__fail
[2020-11-25 13:59:44,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165__success
[2020-11-25 13:59:44,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure supportsInterface~bytes4_ERC165__fail
[2020-11-25 13:59:44,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure supportsInterface~bytes4_ERC165__success
[2020-11-25 13:59:44,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure _registerInterface~bytes4_ERC165__fail
[2020-11-25 13:59:44,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure _registerInterface~bytes4_ERC165__success
[2020-11-25 13:59:44,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 13:59:44,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 13:59:44,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 13:59:44,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 13:59:44,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 13:59:44,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 13:59:44,147 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 13:59:44,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 13:59:44,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 13:59:44,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 13:59:44,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 13:59:44,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 13:59:44,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 13:59:44,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 13:59:44,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 13:59:44,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 13:59:44,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 13:59:44,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 13:59:44,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 13:59:44,148 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 13:59:44,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 13:59:44,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 13:59:44,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 13:59:44,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 13:59:44,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 13:59:44,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 13:59:44,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 13:59:44,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 13:59:44,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe_NoBaseCtor__fail
[2020-11-25 13:59:44,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe_NoBaseCtor__success
[2020-11-25 13:59:44,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe__fail
[2020-11-25 13:59:44,149 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe__success
[2020-11-25 13:59:44,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Safe__fail
[2020-11-25 13:59:44,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Safe__success
[2020-11-25 13:59:44,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Safe__fail
[2020-11-25 13:59:44,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Safe__success
[2020-11-25 13:59:44,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Safe__fail
[2020-11-25 13:59:44,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Safe__success
[2020-11-25 13:59:44,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken_NoBaseCtor__fail
[2020-11-25 13:59:44,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken_NoBaseCtor__success
[2020-11-25 13:59:44,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken__fail
[2020-11-25 13:59:44,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken__success
[2020-11-25 13:59:44,150 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_DkargoToken__fail
[2020-11-25 13:59:44,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_DkargoToken__success
[2020-11-25 13:59:44,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DkargoToken__fail
[2020-11-25 13:59:44,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DkargoToken__success
[2020-11-25 13:59:44,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DkargoToken__fail
[2020-11-25 13:59:44,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DkargoToken__success
[2020-11-25 13:59:44,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DkargoToken__fail
[2020-11-25 13:59:44,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DkargoToken__success
[2020-11-25 13:59:44,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DkargoToken__fail
[2020-11-25 13:59:44,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DkargoToken__success
[2020-11-25 13:59:44,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DkargoToken__fail
[2020-11-25 13:59:44,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DkargoToken__success
[2020-11-25 13:59:44,151 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 13:59:44,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 13:59:44,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 13:59:44,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 13:59:44,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 13:59:44,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 13:59:44,152 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 13:59:44,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 13:59:44,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DkargoPrefix
[2020-11-25 13:59:44,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_DkargoPrefix
[2020-11-25 13:59:44,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownership
[2020-11-25 13:59:44,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownership
[2020-11-25 13:59:44,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 13:59:44,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 13:59:44,153 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_AddressChain
[2020-11-25 13:59:44,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_AddressChain
[2020-11-25 13:59:44,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC165
[2020-11-25 13:59:44,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC165
[2020-11-25 13:59:44,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC165
[2020-11-25 13:59:44,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC165
[2020-11-25 13:59:44,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 13:59:44,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 13:59:44,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 13:59:44,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 13:59:44,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Safe
[2020-11-25 13:59:44,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Safe
[2020-11-25 13:59:44,154 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DkargoToken
[2020-11-25 13:59:44,155 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 13:59:44,155 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 13:59:44,155 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 13:59:44,869 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:59:44,869 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:59:44,870 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:59:45,052 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 13:59:45,265 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 13:59:45,265 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 13:59:45,267 INFO  L202        PluginConnector]: Adding new model DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:59:45 BoogieIcfgContainer
[2020-11-25 13:59:45,267 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:59:44" (2/2) ...
[2020-11-25 13:59:45,267 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 13:59:45,268 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@2b13d271 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:59:45, skipping insertion in model container
[2020-11-25 13:59:45,268 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 13:59:45,268 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 13:59:45,268 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 13:59:45,269 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 13:59:45,269 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:59:43" (1/3) ...
[2020-11-25 13:59:45,269 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@38019c9c and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:59:45, skipping insertion in model container
[2020-11-25 13:59:45,269 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:59:44" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 13:59:45,299 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:59:45 NWAContainer
[2020-11-25 13:59:45,299 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 13:59:45,299 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 13:59:45,299 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 13:59:45,300 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 13:59:45,300 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:59:45" (3/4) ...
[2020-11-25 13:59:45,301 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@3f375fd9 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:59:45, skipping insertion in model container
[2020-11-25 13:59:45,301 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:59:45" (4/4) ...
[2020-11-25 13:59:45,303 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 13:59:45,308 INFO  L110   BuchiProductObserver]: Initial RCFG 3096 locations, 4214 edges
[2020-11-25 13:59:45,308 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 13:59:45,317 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 13:59:47,574 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 13:59:47,583 INFO  L110   BuchiProductObserver]: BuchiProgram size 7638 locations, 13675 edges
[2020-11-25 13:59:47,584 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:59:47 BoogieIcfgContainer
[2020-11-25 13:59:47,584 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 13:59:47,584 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 13:59:47,584 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 13:59:47,585 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 13:59:47,586 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:59:47" (1/1) ...
[2020-11-25 13:59:47,716 INFO  L313           BlockEncoder]: Initial Icfg 7638 locations, 13675 edges
[2020-11-25 13:59:47,717 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 13:59:47,717 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 13:59:47,717 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 13:59:47,718 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 13:59:47,733 INFO  L70    emoveInfeasibleEdges]: Removed 288 edges and 23 locations because of local infeasibility
[2020-11-25 13:59:47,749 INFO  L70        RemoveSinkStates]: Removed 200 edges and 133 locations by removing sink states
[2020-11-25 13:59:47,766 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 13:59:47,771 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 13:59:47,776 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 13:59:47,776 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 13:59:47,780 INFO  L313           BlockEncoder]: Encoded RCFG 7446 locations, 13134 edges
[2020-11-25 13:59:47,780 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:59:47 BasicIcfg
[2020-11-25 13:59:47,780 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 13:59:47,780 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 13:59:47,780 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 13:59:47,782 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 13:59:47,782 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:59:47,782 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_approve.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:59:43" (1/6) ...
[2020-11-25 13:59:47,784 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2e484817 and model type DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:59:47, skipping insertion in model container
[2020-11-25 13:59:47,784 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:59:47,784 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:59:44" (2/6) ...
[2020-11-25 13:59:47,784 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2e484817 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:59:47, skipping insertion in model container
[2020-11-25 13:59:47,784 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:59:47,784 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:59:45" (3/6) ...
[2020-11-25 13:59:47,785 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2e484817 and model type DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_approve.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:59:47, skipping insertion in model container
[2020-11-25 13:59:47,785 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:59:47,785 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:59:45" (4/6) ...
[2020-11-25 13:59:47,785 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2e484817 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:59:47, skipping insertion in model container
[2020-11-25 13:59:47,785 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:59:47,785 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:59:47" (5/6) ...
[2020-11-25 13:59:47,785 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@2e484817 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 01:59:47, skipping insertion in model container
[2020-11-25 13:59:47,786 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 13:59:47,786 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:59:47" (6/6) ...
[2020-11-25 13:59:47,786 INFO  L404   chiAutomizerObserver]: Analyzing ICFG DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_approve.bpl_BEv2
[2020-11-25 13:59:47,820 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 13:59:47,821 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 13:59:47,821 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 13:59:47,821 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 13:59:47,821 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 13:59:47,821 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 13:59:47,821 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 13:59:47,821 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 13:59:47,821 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 13:59:47,872 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7446 states.
[2020-11-25 13:59:47,940 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:59:47,940 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:59:47,940 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:59:47,947 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:59:47,947 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:59:47,947 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 13:59:47,948 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7446 states.
[2020-11-25 13:59:47,978 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:59:47,978 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:59:47,978 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:59:47,980 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:59:47,980 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Safe0 := false;
[L3]                 call_approve_ERC20Safe0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8441]              assume null == 0;
[L8442]  CALL        call this := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L8442]  RET         call this := FreshRefGenerator__success();
[L8443]              assume now >= 0;
[L8444]              assume DType[this] == DkargoToken;
[L8445]              assume msgvalue_MSG == 0;
[L8446]              gas := gas - 53000;
[L8447]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2404]              havoc __exception;
[L2405]              revert := false;
[L2406]  COND FALSE  !(__exception)
[L2439]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5754]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4087]              assume msgsender_MSG != null;
[L4088]              Balance[this] := 0;
[L4089]              _owner_Ownership[this] := null;
[L4091]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4092]              _owner_Ownership[this] := msgsender_MSG;
[L4105]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4106]  COND FALSE  !(revert)
[L5754]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]  COND TRUE   revert
[L2439]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2440]              assume !revert && gas >= 0;
[L8447]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8448]              assume !revert && gas >= 0;

Loop:
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND TRUE   choice == 23
[L8287]              gas := gas - 21000;
[L8288]  COND FALSE  !(gas >= 0)
[L8451]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 13:59:47,993 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:59:47,993 INFO  L82        PathProgramCache]: Analyzing trace with hash -1231599572, now seen corresponding path program 1 times
[2020-11-25 13:59:47,997 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:59:48,020 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:59:48,062 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 13:59:48,064 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:59:48,064 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 13:59:48,397 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:59:48,405 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 13:59:48,406 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 13:59:48,407 INFO  L87              Difference]: Start difference. First operand 7446 states. Second operand 3 states.
[2020-11-25 13:59:48,735 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:59:48,735 INFO  L93              Difference]: Finished difference Result 6496 states and 10631 transitions.
[2020-11-25 13:59:48,735 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 13:59:48,737 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6496 states and 10631 transitions.
[2020-11-25 13:59:48,793 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 13:59:48,851 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6496 states to 6496 states and 10631 transitions.
[2020-11-25 13:59:48,851 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 15
[2020-11-25 13:59:48,856 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1333
[2020-11-25 13:59:48,857 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6496 states and 10631 transitions.
[2020-11-25 13:59:48,879 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:59:48,879 INFO  L728         BuchiCegarLoop]: Abstraction has 6496 states and 10631 transitions.
[2020-11-25 13:59:48,900 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6496 states and 10631 transitions.
[2020-11-25 13:59:49,005 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6496 to 5798.
[2020-11-25 13:59:49,005 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5798 states.
[2020-11-25 13:59:49,018 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5798 states to 5798 states and 9399 transitions.
[2020-11-25 13:59:49,019 INFO  L751         BuchiCegarLoop]: Abstraction has 5798 states and 9399 transitions.
[2020-11-25 13:59:49,019 INFO  L631         BuchiCegarLoop]: Abstraction has 5798 states and 9399 transitions.
[2020-11-25 13:59:49,020 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 13:59:49,020 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5798 states and 9399 transitions.
[2020-11-25 13:59:49,034 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:59:49,034 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:59:49,034 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:59:49,036 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:59:49,036 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Safe0 := false;
[L3]                 call_approve_ERC20Safe0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8441]              assume null == 0;
[L8442]  CALL        call this := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L8442]  RET         call this := FreshRefGenerator__success();
[L8443]              assume now >= 0;
[L8444]              assume DType[this] == DkargoToken;
[L8445]              assume msgvalue_MSG == 0;
[L8446]              gas := gas - 53000;
[L8447]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2404]              havoc __exception;
[L2405]              revert := false;
[L2406]  COND FALSE  !(__exception)
[L2439]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5754]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4087]              assume msgsender_MSG != null;
[L4088]              Balance[this] := 0;
[L4089]              _owner_Ownership[this] := null;
[L4091]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4092]              _owner_Ownership[this] := msgsender_MSG;
[L4105]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4106]  COND FALSE  !(revert)
[L5754]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]  COND FALSE  !(revert)
[L5758]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5758]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5759]  COND FALSE  !(revert)
[L5762]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4914]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L4914]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]  COND FALSE  !(revert)
[L4918]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4869]              assume msgsender_MSG != null;
[L4870]              Balance[this] := 0;
[L4871]              _supply_ERC20[this] := 0;
[L4872]              _balances_ERC20[this] := zeroRefintArr();
[L4873]              sum__balances1[this] := 0;
[L4874]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4875]              sum__allowances2[this] := 0;
[L4877]              pebs_s747 := supply_s747;
[L4878]  COND TRUE   DType[this] == DkargoToken
[L4879]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5283]              __var_24 := null;
[L5284]  COND TRUE   !(account_s999 != null)
[L5285]              revert := true;
[L4879]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4880]  COND TRUE   revert
[L4918]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4919]  COND TRUE   revert
[L5762]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5763]  COND TRUE   revert
[L2439]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2440]              assume !revert && gas >= 0;
[L8447]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8448]              assume !revert && gas >= 0;

Loop:
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND TRUE   choice == 23
[L8287]              gas := gas - 21000;
[L8288]  COND FALSE  !(gas >= 0)
[L8451]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 13:59:49,039 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:59:49,039 INFO  L82        PathProgramCache]: Analyzing trace with hash -311861479, now seen corresponding path program 1 times
[2020-11-25 13:59:49,040 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:59:49,049 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:59:49,076 INFO  L134       CoverageAnalysis]: Checked inductivity of 2 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 13:59:49,076 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 13:59:49,076 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-11-25 13:59:49,078 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:59:49,078 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 13:59:49,078 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 13:59:49,078 INFO  L87              Difference]: Start difference. First operand 5798 states and 9399 transitions. cyclomatic complexity: 3603 Second operand 4 states.
[2020-11-25 13:59:49,691 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:59:49,691 INFO  L93              Difference]: Finished difference Result 5199 states and 5992 transitions.
[2020-11-25 13:59:49,691 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 13:59:49,692 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5199 states and 5992 transitions.
[2020-11-25 13:59:49,712 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:59:49,734 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5199 states to 5199 states and 5992 transitions.
[2020-11-25 13:59:49,734 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1079
[2020-11-25 13:59:49,735 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1079
[2020-11-25 13:59:49,735 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5199 states and 5992 transitions.
[2020-11-25 13:59:49,739 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:59:49,739 INFO  L728         BuchiCegarLoop]: Abstraction has 5199 states and 5992 transitions.
[2020-11-25 13:59:49,743 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5199 states and 5992 transitions.
[2020-11-25 13:59:49,780 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5199 to 5199.
[2020-11-25 13:59:49,780 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5199 states.
[2020-11-25 13:59:49,786 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5199 states to 5199 states and 5992 transitions.
[2020-11-25 13:59:49,786 INFO  L751         BuchiCegarLoop]: Abstraction has 5199 states and 5992 transitions.
[2020-11-25 13:59:49,786 INFO  L631         BuchiCegarLoop]: Abstraction has 5199 states and 5992 transitions.
[2020-11-25 13:59:49,786 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 13:59:49,786 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5199 states and 5992 transitions.
[2020-11-25 13:59:49,793 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:59:49,793 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:59:49,793 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:59:49,795 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:59:49,795 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Safe0 := false;
[L3]                 call_approve_ERC20Safe0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8441]              assume null == 0;
[L8442]  CALL        call this := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L8442]  RET         call this := FreshRefGenerator__success();
[L8443]              assume now >= 0;
[L8444]              assume DType[this] == DkargoToken;
[L8445]              assume msgvalue_MSG == 0;
[L8446]              gas := gas - 53000;
[L8447]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2404]              havoc __exception;
[L2405]              revert := false;
[L2406]  COND FALSE  !(__exception)
[L2439]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5754]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4087]              assume msgsender_MSG != null;
[L4088]              Balance[this] := 0;
[L4089]              _owner_Ownership[this] := null;
[L4091]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4092]              _owner_Ownership[this] := msgsender_MSG;
[L4105]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4106]  COND FALSE  !(revert)
[L5754]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]  COND FALSE  !(revert)
[L5758]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5758]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5759]  COND FALSE  !(revert)
[L5762]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4914]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L4914]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]  COND FALSE  !(revert)
[L4918]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4869]              assume msgsender_MSG != null;
[L4870]              Balance[this] := 0;
[L4871]              _supply_ERC20[this] := 0;
[L4872]              _balances_ERC20[this] := zeroRefintArr();
[L4873]              sum__balances1[this] := 0;
[L4874]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4875]              sum__allowances2[this] := 0;
[L4877]              pebs_s747 := supply_s747;
[L4878]  COND TRUE   DType[this] == DkargoToken
[L4879]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5283]              __var_24 := null;
[L5284]  COND TRUE   !(account_s999 != null)
[L5285]              revert := true;
[L4879]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4880]  COND TRUE   revert
[L4918]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4919]  COND TRUE   revert
[L5762]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5763]  COND TRUE   revert
[L2439]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2440]              assume !revert && gas >= 0;
[L8447]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8448]              assume !revert && gas >= 0;
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND FALSE  !(choice == 12)
[L8359]  COND TRUE   choice == 11
[L8360]              gas := gas - 21000;
[L8361]  COND TRUE   gas >= 0
[L8362]              assume amount_s1084 >= 0 && amount_s1084 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8363]              assume msgvalue_MSG == 0;
[L8364]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s1084;
[L3]                 call_approve_ERC20Safe0 := true;
[L3]                 call_approve_ERC20Safe0 := false;
[L3]                 revert := revert_hold;
[L2146]              havoc __exception;
[L2147]              revert := false;
[L2148]  COND FALSE  !(__exception)
[L2181]  CALL        call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5436]  COND TRUE   DType[this] == DkargoToken
[L5437]  CALL        call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5146]              __ret_0_ := _allowances_ERC20[this][approver_s857][spender_s857];
[L5437]  RET         call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5438]  COND FALSE  !(revert)
[L5449]  COND TRUE   !(amount_s1084 == 0 || __var_30 == 0)
[L5450]              revert := true;
[L2181]  RET         call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L2182]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s1084] == amount_s1084) && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L3]                 revert := revert_hold;
[L8364]  RET         call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L8451]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND FALSE  !(choice == 12)
[L8359]  COND TRUE   choice == 11
[L8360]              gas := gas - 21000;
[L8361]  COND TRUE   gas >= 0
[L8362]              assume amount_s1084 >= 0 && amount_s1084 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8363]              assume msgvalue_MSG == 0;
[L8364]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s1084;
[L3]                 call_approve_ERC20Safe0 := true;
[L3]                 call_approve_ERC20Safe0 := false;
[L3]                 revert := revert_hold;
[L2146]              havoc __exception;
[L2147]              revert := false;
[L2148]  COND FALSE  !(__exception)
[L2181]  CALL        call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5436]  COND TRUE   DType[this] == DkargoToken
[L5437]  CALL        call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5146]              __ret_0_ := _allowances_ERC20[this][approver_s857][spender_s857];
[L5437]  RET         call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5438]  COND FALSE  !(revert)
[L5449]  COND TRUE   !(amount_s1084 == 0 || __var_30 == 0)
[L5450]              revert := true;
[L2181]  RET         call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L2182]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s1084] == amount_s1084) && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L3]                 revert := revert_hold;
[L8364]  RET         call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L8451]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 13:59:49,799 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:59:49,799 INFO  L82        PathProgramCache]: Analyzing trace with hash 410868230, now seen corresponding path program 1 times
[2020-11-25 13:59:49,800 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:59:49,809 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:59:49,857 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 13:59:49,857 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:59:49,857 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 13:59:49,857 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:59:49,858 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 13:59:49,858 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 13:59:49,858 INFO  L87              Difference]: Start difference. First operand 5199 states and 5992 transitions. cyclomatic complexity: 795 Second operand 8 states.
[2020-11-25 13:59:49,962 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:59:49,962 INFO  L93              Difference]: Finished difference Result 5219 states and 6016 transitions.
[2020-11-25 13:59:49,962 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 13:59:49,962 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5219 states and 6016 transitions.
[2020-11-25 13:59:49,977 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:59:50,005 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5219 states to 5198 states and 5990 transitions.
[2020-11-25 13:59:50,006 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1079
[2020-11-25 13:59:50,006 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1079
[2020-11-25 13:59:50,006 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5198 states and 5990 transitions.
[2020-11-25 13:59:50,011 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:59:50,011 INFO  L728         BuchiCegarLoop]: Abstraction has 5198 states and 5990 transitions.
[2020-11-25 13:59:50,017 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5198 states and 5990 transitions.
[2020-11-25 13:59:50,075 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5198 to 5198.
[2020-11-25 13:59:50,076 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5198 states.
[2020-11-25 13:59:50,085 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5198 states to 5198 states and 5990 transitions.
[2020-11-25 13:59:50,085 INFO  L751         BuchiCegarLoop]: Abstraction has 5198 states and 5990 transitions.
[2020-11-25 13:59:50,085 INFO  L631         BuchiCegarLoop]: Abstraction has 5198 states and 5990 transitions.
[2020-11-25 13:59:50,086 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 13:59:50,086 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5198 states and 5990 transitions.
[2020-11-25 13:59:50,097 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:59:50,098 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:59:50,098 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:59:50,100 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:59:50,101 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Safe0 := false;
[L3]                 call_approve_ERC20Safe0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8441]              assume null == 0;
[L8442]  CALL        call this := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L8442]  RET         call this := FreshRefGenerator__success();
[L8443]              assume now >= 0;
[L8444]              assume DType[this] == DkargoToken;
[L8445]              assume msgvalue_MSG == 0;
[L8446]              gas := gas - 53000;
[L8447]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2404]              havoc __exception;
[L2405]              revert := false;
[L2406]  COND FALSE  !(__exception)
[L2439]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5754]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4087]              assume msgsender_MSG != null;
[L4088]              Balance[this] := 0;
[L4089]              _owner_Ownership[this] := null;
[L4091]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4092]              _owner_Ownership[this] := msgsender_MSG;
[L4105]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4106]  COND FALSE  !(revert)
[L5754]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]  COND FALSE  !(revert)
[L5758]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5758]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5759]  COND FALSE  !(revert)
[L5762]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4914]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L4914]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]  COND FALSE  !(revert)
[L4918]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4869]              assume msgsender_MSG != null;
[L4870]              Balance[this] := 0;
[L4871]              _supply_ERC20[this] := 0;
[L4872]              _balances_ERC20[this] := zeroRefintArr();
[L4873]              sum__balances1[this] := 0;
[L4874]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4875]              sum__allowances2[this] := 0;
[L4877]              pebs_s747 := supply_s747;
[L4878]  COND TRUE   DType[this] == DkargoToken
[L4879]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5283]              __var_24 := null;
[L5284]  COND FALSE  !(!(account_s999 != null))
[L5288]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND TRUE   !(c_s130 >= a_s130)
[L4215]              revert := true;
[L5288]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5289]  COND TRUE   revert
[L4879]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4880]  COND TRUE   revert
[L4918]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4919]  COND TRUE   revert
[L5762]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5763]  COND TRUE   revert
[L2439]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2440]              assume !revert && gas >= 0;
[L8447]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8448]              assume !revert && gas >= 0;
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND FALSE  !(choice == 12)
[L8359]  COND TRUE   choice == 11
[L8360]              gas := gas - 21000;
[L8361]  COND TRUE   gas >= 0
[L8362]              assume amount_s1084 >= 0 && amount_s1084 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8363]              assume msgvalue_MSG == 0;
[L8364]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s1084;
[L3]                 call_approve_ERC20Safe0 := true;
[L3]                 call_approve_ERC20Safe0 := false;
[L3]                 revert := revert_hold;
[L2146]              havoc __exception;
[L2147]              revert := false;
[L2148]  COND FALSE  !(__exception)
[L2181]  CALL        call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5436]  COND TRUE   DType[this] == DkargoToken
[L5437]  CALL        call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5146]              __ret_0_ := _allowances_ERC20[this][approver_s857][spender_s857];
[L5437]  RET         call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5438]  COND FALSE  !(revert)
[L5449]  COND TRUE   !(amount_s1084 == 0 || __var_30 == 0)
[L5450]              revert := true;
[L2181]  RET         call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L2182]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s1084] == amount_s1084) && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L3]                 revert := revert_hold;
[L8364]  RET         call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L8451]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND FALSE  !(choice == 12)
[L8359]  COND TRUE   choice == 11
[L8360]              gas := gas - 21000;
[L8361]  COND TRUE   gas >= 0
[L8362]              assume amount_s1084 >= 0 && amount_s1084 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8363]              assume msgvalue_MSG == 0;
[L8364]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s1084;
[L3]                 call_approve_ERC20Safe0 := true;
[L3]                 call_approve_ERC20Safe0 := false;
[L3]                 revert := revert_hold;
[L2146]              havoc __exception;
[L2147]              revert := false;
[L2148]  COND FALSE  !(__exception)
[L2181]  CALL        call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5436]  COND TRUE   DType[this] == DkargoToken
[L5437]  CALL        call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5146]              __ret_0_ := _allowances_ERC20[this][approver_s857][spender_s857];
[L5437]  RET         call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5438]  COND FALSE  !(revert)
[L5449]  COND TRUE   !(amount_s1084 == 0 || __var_30 == 0)
[L5450]              revert := true;
[L2181]  RET         call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L2182]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s1084] == amount_s1084) && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L3]                 revert := revert_hold;
[L8364]  RET         call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L8451]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 13:59:50,105 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:59:50,105 INFO  L82        PathProgramCache]: Analyzing trace with hash 1790826716, now seen corresponding path program 1 times
[2020-11-25 13:59:50,107 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:59:50,122 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:59:50,195 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 13:59:50,196 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:59:50,196 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 13:59:50,196 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:59:50,196 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 13:59:50,196 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 13:59:50,197 INFO  L87              Difference]: Start difference. First operand 5198 states and 5990 transitions. cyclomatic complexity: 794 Second operand 3 states.
[2020-11-25 13:59:50,311 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:59:50,311 INFO  L93              Difference]: Finished difference Result 5884 states and 6654 transitions.
[2020-11-25 13:59:50,311 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 13:59:50,311 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5884 states and 6654 transitions.
[2020-11-25 13:59:50,328 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 13:59:50,349 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5884 states to 5517 states and 6210 transitions.
[2020-11-25 13:59:50,349 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1197
[2020-11-25 13:59:50,350 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1259
[2020-11-25 13:59:50,350 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5517 states and 6210 transitions.
[2020-11-25 13:59:50,356 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:59:50,357 INFO  L728         BuchiCegarLoop]: Abstraction has 5517 states and 6210 transitions.
[2020-11-25 13:59:50,362 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5517 states and 6210 transitions.
[2020-11-25 13:59:50,398 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5517 to 4899.
[2020-11-25 13:59:50,398 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4899 states.
[2020-11-25 13:59:50,403 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4899 states to 4899 states and 5430 transitions.
[2020-11-25 13:59:50,403 INFO  L751         BuchiCegarLoop]: Abstraction has 4899 states and 5430 transitions.
[2020-11-25 13:59:50,403 INFO  L631         BuchiCegarLoop]: Abstraction has 4899 states and 5430 transitions.
[2020-11-25 13:59:50,404 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 13:59:50,404 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4899 states and 5430 transitions.
[2020-11-25 13:59:50,409 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:59:50,409 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:59:50,409 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:59:50,410 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:59:50,410 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Safe0 := false;
[L3]                 call_approve_ERC20Safe0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8441]              assume null == 0;
[L8442]  CALL        call this := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L8442]  RET         call this := FreshRefGenerator__success();
[L8443]              assume now >= 0;
[L8444]              assume DType[this] == DkargoToken;
[L8445]              assume msgvalue_MSG == 0;
[L8446]              gas := gas - 53000;
[L8447]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2404]              havoc __exception;
[L2405]              revert := false;
[L2406]  COND FALSE  !(__exception)
[L2439]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5754]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4087]              assume msgsender_MSG != null;
[L4088]              Balance[this] := 0;
[L4089]              _owner_Ownership[this] := null;
[L4091]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4092]              _owner_Ownership[this] := msgsender_MSG;
[L4105]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4106]  COND FALSE  !(revert)
[L5754]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]  COND FALSE  !(revert)
[L5758]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5758]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5759]  COND FALSE  !(revert)
[L5762]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4914]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L4914]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]  COND FALSE  !(revert)
[L4918]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4869]              assume msgsender_MSG != null;
[L4870]              Balance[this] := 0;
[L4871]              _supply_ERC20[this] := 0;
[L4872]              _balances_ERC20[this] := zeroRefintArr();
[L4873]              sum__balances1[this] := 0;
[L4874]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4875]              sum__allowances2[this] := 0;
[L4877]              pebs_s747 := supply_s747;
[L4878]  COND TRUE   DType[this] == DkargoToken
[L4879]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5283]              __var_24 := null;
[L5284]  COND FALSE  !(!(account_s999 != null))
[L5288]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L5288]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5289]  COND FALSE  !(revert)
[L5292]              _supply_ERC20[this] := __var_25;
[L5293]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L5293]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5294]  COND FALSE  !(revert)
[L5297]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5298]              _balances_ERC20[this][account_s999] := __var_26;
[L5299]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5300]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4879]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4880]  COND FALSE  !(revert)
[L4918]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4919]  COND FALSE  !(revert)
[L5762]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5763]  COND FALSE  !(revert)
[L5766]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5382]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5383]  COND FALSE  !(revert)
[L5386]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]              assume msgsender_MSG != null;
[L5364]              Balance[this] := 0;
[L5386]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5387]  COND FALSE  !(revert)
[L5766]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]  COND FALSE  !(revert)
[L5770]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4341]              assume msgsender_MSG != null;
[L4342]              Balance[this] := 0;
[L4344]  CALL        call __var_3 := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L4344]  RET         call __var_3 := FreshRefGenerator__success();
[L4345]  COND FALSE  !(revert)
[L4348]              _slist_AddressChain[this] := __var_3;
[L4362]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4363]  COND FALSE  !(revert)
[L5770]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5771]  COND FALSE  !(revert)
[L5774]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4675]              assume msgsender_MSG != null;
[L4676]              Balance[this] := 0;
[L4690]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4691]  COND FALSE  !(revert)
[L5774]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5775]  COND FALSE  !(revert)
[L5778]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4675]              assume msgsender_MSG != null;
[L4676]              Balance[this] := 0;
[L4690]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4691]  COND FALSE  !(revert)
[L4760]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4761]  COND FALSE  !(revert)
[L4764]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4724]              assume msgsender_MSG != null;
[L4725]              Balance[this] := 0;
[L4726]              _infcs_ERC165[this] := zerointboolArr();
[L4728]              __var_16 := 33540519;
[L4729]  COND TRUE   DType[this] == DkargoToken
[L4730]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4793]  COND FALSE  !(!(infcid_s644 != -1))
[L4797]              _infcs_ERC165[this][infcid_s644] := true;
[L4730]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4731]  COND FALSE  !(revert)
[L4764]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4765]  COND FALSE  !(revert)
[L5778]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5779]  COND FALSE  !(revert)
[L5782]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4030]              assume msgsender_MSG != null;
[L4031]              Balance[this] := 0;
[L4032]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4046]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4047]  COND FALSE  !(revert)
[L5782]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]  COND FALSE  !(revert)
[L5786]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5676]              assume msgsender_MSG != null;
[L5677]              Balance[this] := 0;
[L5678]              _name_DkargoToken[this] := -1676636045;
[L5679]              _symbol_DkargoToken[this] := -1676636045;
[L5681]  COND TRUE   DType[this] == DkargoToken
[L5682]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4071]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5682]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5683]  COND FALSE  !(revert)
[L5689]              __var_39 := -1804674067;
[L5690]  COND TRUE   DType[this] == DkargoToken
[L5691]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4793]  COND FALSE  !(!(infcid_s644 != -1))
[L4797]              _infcs_ERC165[this][infcid_s644] := true;
[L5691]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5692]  COND FALSE  !(revert)
[L5698]              _name_DkargoToken[this] := name_s1191;
[L5699]              _symbol_DkargoToken[this] := symbol_s1191;
[L5700]  COND TRUE   DType[this] == DkargoToken
[L5701]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4505]              __var_6 := null;
[L4506]  COND FALSE  !(!(node_s455 != null))
[L4510]  COND TRUE   DType[this] == DkargoToken
[L4511]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4447]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4448]              __ret_0_ := true;
[L4511]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4512]  COND FALSE  !(revert)
[L4523]  COND FALSE  !(!!__var_7)
[L4527]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4528]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4529]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4535]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L4535]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4536]  COND FALSE  !(revert)
[L4539]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4540]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5701]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5702]  COND FALSE  !(revert)
[L5786]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5787]  COND FALSE  !(revert)
[L2439]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2440]              assume !revert && gas >= 0;
[L8447]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8448]              assume !revert && gas >= 0;
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND FALSE  !(choice == 12)
[L8359]  COND TRUE   choice == 11
[L8360]              gas := gas - 21000;
[L8361]  COND TRUE   gas >= 0
[L8362]              assume amount_s1084 >= 0 && amount_s1084 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8363]              assume msgvalue_MSG == 0;
[L8364]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s1084;
[L3]                 call_approve_ERC20Safe0 := true;
[L3]                 call_approve_ERC20Safe0 := false;
[L3]                 revert := revert_hold;
[L2146]              havoc __exception;
[L2147]              revert := false;
[L2148]  COND FALSE  !(__exception)
[L2181]  CALL        call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5436]  COND TRUE   DType[this] == DkargoToken
[L5437]  CALL        call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5146]              __ret_0_ := _allowances_ERC20[this][approver_s857][spender_s857];
[L5437]  RET         call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5438]  COND FALSE  !(revert)
[L5449]  COND FALSE  !(!(amount_s1084 == 0 || __var_30 == 0))
[L5453]  COND TRUE   DType[this] == DkargoToken
[L5454]  CALL        call __var_31 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L4950]  COND FALSE  !(DType[this] == DkargoToken)
[L4955]  COND TRUE   DType[this] == ERC20Safe
[L4956]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L5173]              __var_18 := null;
[L5174]  COND FALSE  !(!(approver_s899 != null))
[L5178]              __var_19 := null;
[L5179]  COND FALSE  !(!(spender_s899 != null))
[L5183]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5184]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5185]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5186]              assert { :EventEmitted "Approval_ERC20" } true;
[L4956]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L4957]  COND FALSE  !(revert)
[L4968]              __ret_0_ := true;
[L5454]  RET         call __var_31 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5455]  COND FALSE  !(revert)
[L5466]              __ret_0_ := __var_31;
[L2181]  RET         call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L2182]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s1084] == amount_s1084) && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L3]                 revert := revert_hold;
[L8364]  RET         call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L8451]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND FALSE  !(choice == 12)
[L8359]  COND TRUE   choice == 11
[L8360]              gas := gas - 21000;
[L8361]  COND TRUE   gas >= 0
[L8362]              assume amount_s1084 >= 0 && amount_s1084 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8363]              assume msgvalue_MSG == 0;
[L8364]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s1084;
[L3]                 call_approve_ERC20Safe0 := true;
[L3]                 call_approve_ERC20Safe0 := false;
[L3]                 revert := revert_hold;
[L2146]              havoc __exception;
[L2147]              revert := false;
[L2148]  COND FALSE  !(__exception)
[L2181]  CALL        call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5436]  COND TRUE   DType[this] == DkargoToken
[L5437]  CALL        call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5146]              __ret_0_ := _allowances_ERC20[this][approver_s857][spender_s857];
[L5437]  RET         call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5438]  COND FALSE  !(revert)
[L5449]  COND FALSE  !(!(amount_s1084 == 0 || __var_30 == 0))
[L5453]  COND TRUE   DType[this] == DkargoToken
[L5454]  CALL        call __var_31 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L4950]  COND FALSE  !(DType[this] == DkargoToken)
[L4955]  COND TRUE   DType[this] == ERC20Safe
[L4956]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L5173]              __var_18 := null;
[L5174]  COND FALSE  !(!(approver_s899 != null))
[L5178]              __var_19 := null;
[L5179]  COND FALSE  !(!(spender_s899 != null))
[L5183]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5184]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5185]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5186]              assert { :EventEmitted "Approval_ERC20" } true;
[L4956]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L4957]  COND FALSE  !(revert)
[L4968]              __ret_0_ := true;
[L5454]  RET         call __var_31 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5455]  COND FALSE  !(revert)
[L5466]              __ret_0_ := __var_31;
[L2181]  RET         call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L2182]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s1084] == amount_s1084) && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L3]                 revert := revert_hold;
[L8364]  RET         call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L8451]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 13:59:50,416 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:59:50,416 INFO  L82        PathProgramCache]: Analyzing trace with hash -623102527, now seen corresponding path program 1 times
[2020-11-25 13:59:50,416 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:59:50,434 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:59:50,499 INFO  L134       CoverageAnalysis]: Checked inductivity of 65 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 65 trivial. 0 not checked.
[2020-11-25 13:59:50,499 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:59:50,499 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 13:59:50,499 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:59:50,499 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 13:59:50,500 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 13:59:50,500 INFO  L87              Difference]: Start difference. First operand 4899 states and 5430 transitions. cyclomatic complexity: 533 Second operand 4 states.
[2020-11-25 13:59:50,531 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:59:50,531 INFO  L93              Difference]: Finished difference Result 4913 states and 5458 transitions.
[2020-11-25 13:59:50,531 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 13:59:50,531 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4913 states and 5458 transitions.
[2020-11-25 13:59:50,540 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:59:50,554 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4913 states to 4903 states and 5446 transitions.
[2020-11-25 13:59:50,554 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1097
[2020-11-25 13:59:50,555 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1097
[2020-11-25 13:59:50,555 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4903 states and 5446 transitions.
[2020-11-25 13:59:50,558 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:59:50,558 INFO  L728         BuchiCegarLoop]: Abstraction has 4903 states and 5446 transitions.
[2020-11-25 13:59:50,562 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4903 states and 5446 transitions.
[2020-11-25 13:59:50,587 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4903 to 4903.
[2020-11-25 13:59:50,588 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4903 states.
[2020-11-25 13:59:50,592 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4903 states to 4903 states and 5446 transitions.
[2020-11-25 13:59:50,593 INFO  L751         BuchiCegarLoop]: Abstraction has 4903 states and 5446 transitions.
[2020-11-25 13:59:50,593 INFO  L631         BuchiCegarLoop]: Abstraction has 4903 states and 5446 transitions.
[2020-11-25 13:59:50,593 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 13:59:50,593 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4903 states and 5446 transitions.
[2020-11-25 13:59:50,598 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:59:50,598 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:59:50,598 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:59:50,600 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:59:50,600 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Safe0 := false;
[L3]                 call_approve_ERC20Safe0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8441]              assume null == 0;
[L8442]  CALL        call this := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L8442]  RET         call this := FreshRefGenerator__success();
[L8443]              assume now >= 0;
[L8444]              assume DType[this] == DkargoToken;
[L8445]              assume msgvalue_MSG == 0;
[L8446]              gas := gas - 53000;
[L8447]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2404]              havoc __exception;
[L2405]              revert := false;
[L2406]  COND FALSE  !(__exception)
[L2439]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5754]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4087]              assume msgsender_MSG != null;
[L4088]              Balance[this] := 0;
[L4089]              _owner_Ownership[this] := null;
[L4091]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4092]              _owner_Ownership[this] := msgsender_MSG;
[L4105]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4106]  COND FALSE  !(revert)
[L5754]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]  COND FALSE  !(revert)
[L5758]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5758]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5759]  COND FALSE  !(revert)
[L5762]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4914]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L4914]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]  COND FALSE  !(revert)
[L4918]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4869]              assume msgsender_MSG != null;
[L4870]              Balance[this] := 0;
[L4871]              _supply_ERC20[this] := 0;
[L4872]              _balances_ERC20[this] := zeroRefintArr();
[L4873]              sum__balances1[this] := 0;
[L4874]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4875]              sum__allowances2[this] := 0;
[L4877]              pebs_s747 := supply_s747;
[L4878]  COND TRUE   DType[this] == DkargoToken
[L4879]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5283]              __var_24 := null;
[L5284]  COND FALSE  !(!(account_s999 != null))
[L5288]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L5288]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5289]  COND FALSE  !(revert)
[L5292]              _supply_ERC20[this] := __var_25;
[L5293]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L5293]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5294]  COND FALSE  !(revert)
[L5297]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5298]              _balances_ERC20[this][account_s999] := __var_26;
[L5299]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5300]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4879]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4880]  COND FALSE  !(revert)
[L4918]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4919]  COND FALSE  !(revert)
[L5762]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5763]  COND FALSE  !(revert)
[L5766]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5382]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5383]  COND FALSE  !(revert)
[L5386]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]              assume msgsender_MSG != null;
[L5364]              Balance[this] := 0;
[L5386]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5387]  COND FALSE  !(revert)
[L5766]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]  COND FALSE  !(revert)
[L5770]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4341]              assume msgsender_MSG != null;
[L4342]              Balance[this] := 0;
[L4344]  CALL        call __var_3 := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L4344]  RET         call __var_3 := FreshRefGenerator__success();
[L4345]  COND FALSE  !(revert)
[L4348]              _slist_AddressChain[this] := __var_3;
[L4362]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4363]  COND FALSE  !(revert)
[L5770]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5771]  COND FALSE  !(revert)
[L5774]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4675]              assume msgsender_MSG != null;
[L4676]              Balance[this] := 0;
[L4690]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4691]  COND FALSE  !(revert)
[L5774]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5775]  COND FALSE  !(revert)
[L5778]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4675]              assume msgsender_MSG != null;
[L4676]              Balance[this] := 0;
[L4690]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4691]  COND FALSE  !(revert)
[L4760]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4761]  COND FALSE  !(revert)
[L4764]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4724]              assume msgsender_MSG != null;
[L4725]              Balance[this] := 0;
[L4726]              _infcs_ERC165[this] := zerointboolArr();
[L4728]              __var_16 := 33540519;
[L4729]  COND TRUE   DType[this] == DkargoToken
[L4730]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4793]  COND FALSE  !(!(infcid_s644 != -1))
[L4797]              _infcs_ERC165[this][infcid_s644] := true;
[L4730]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4731]  COND FALSE  !(revert)
[L4764]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4765]  COND FALSE  !(revert)
[L5778]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5779]  COND FALSE  !(revert)
[L5782]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4030]              assume msgsender_MSG != null;
[L4031]              Balance[this] := 0;
[L4032]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4046]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4047]  COND FALSE  !(revert)
[L5782]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]  COND FALSE  !(revert)
[L5786]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5676]              assume msgsender_MSG != null;
[L5677]              Balance[this] := 0;
[L5678]              _name_DkargoToken[this] := -1676636045;
[L5679]              _symbol_DkargoToken[this] := -1676636045;
[L5681]  COND TRUE   DType[this] == DkargoToken
[L5682]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4071]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5682]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5683]  COND FALSE  !(revert)
[L5689]              __var_39 := -1804674067;
[L5690]  COND TRUE   DType[this] == DkargoToken
[L5691]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4793]  COND FALSE  !(!(infcid_s644 != -1))
[L4797]              _infcs_ERC165[this][infcid_s644] := true;
[L5691]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5692]  COND FALSE  !(revert)
[L5698]              _name_DkargoToken[this] := name_s1191;
[L5699]              _symbol_DkargoToken[this] := symbol_s1191;
[L5700]  COND TRUE   DType[this] == DkargoToken
[L5701]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4505]              __var_6 := null;
[L4506]  COND FALSE  !(!(node_s455 != null))
[L4510]  COND TRUE   DType[this] == DkargoToken
[L4511]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4447]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4451]              __var_4 := null;
[L4452]              __var_5 := null;
[L4453]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4511]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4512]  COND FALSE  !(revert)
[L4523]  COND FALSE  !(!!__var_7)
[L4527]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4528]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4529]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4535]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L4535]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4536]  COND FALSE  !(revert)
[L4539]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4540]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5701]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5702]  COND FALSE  !(revert)
[L5786]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5787]  COND FALSE  !(revert)
[L2439]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2440]              assume !revert && gas >= 0;
[L8447]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8448]              assume !revert && gas >= 0;
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND FALSE  !(choice == 12)
[L8359]  COND TRUE   choice == 11
[L8360]              gas := gas - 21000;
[L8361]  COND TRUE   gas >= 0
[L8362]              assume amount_s1084 >= 0 && amount_s1084 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8363]              assume msgvalue_MSG == 0;
[L8364]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s1084;
[L3]                 call_approve_ERC20Safe0 := true;
[L3]                 call_approve_ERC20Safe0 := false;
[L3]                 revert := revert_hold;
[L2146]              havoc __exception;
[L2147]              revert := false;
[L2148]  COND FALSE  !(__exception)
[L2181]  CALL        call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5436]  COND TRUE   DType[this] == DkargoToken
[L5437]  CALL        call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5146]              __ret_0_ := _allowances_ERC20[this][approver_s857][spender_s857];
[L5437]  RET         call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5438]  COND FALSE  !(revert)
[L5449]  COND FALSE  !(!(amount_s1084 == 0 || __var_30 == 0))
[L5453]  COND TRUE   DType[this] == DkargoToken
[L5454]  CALL        call __var_31 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L4950]  COND FALSE  !(DType[this] == DkargoToken)
[L4955]  COND TRUE   DType[this] == ERC20Safe
[L4956]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L5173]              __var_18 := null;
[L5174]  COND FALSE  !(!(approver_s899 != null))
[L5178]              __var_19 := null;
[L5179]  COND FALSE  !(!(spender_s899 != null))
[L5183]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5184]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5185]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5186]              assert { :EventEmitted "Approval_ERC20" } true;
[L4956]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L4957]  COND FALSE  !(revert)
[L4968]              __ret_0_ := true;
[L5454]  RET         call __var_31 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5455]  COND FALSE  !(revert)
[L5466]              __ret_0_ := __var_31;
[L2181]  RET         call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L2182]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s1084] == amount_s1084) && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L3]                 revert := revert_hold;
[L8364]  RET         call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L8451]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND FALSE  !(choice == 12)
[L8359]  COND TRUE   choice == 11
[L8360]              gas := gas - 21000;
[L8361]  COND TRUE   gas >= 0
[L8362]              assume amount_s1084 >= 0 && amount_s1084 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8363]              assume msgvalue_MSG == 0;
[L8364]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s1084;
[L3]                 call_approve_ERC20Safe0 := true;
[L3]                 call_approve_ERC20Safe0 := false;
[L3]                 revert := revert_hold;
[L2146]              havoc __exception;
[L2147]              revert := false;
[L2148]  COND FALSE  !(__exception)
[L2181]  CALL        call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5436]  COND TRUE   DType[this] == DkargoToken
[L5437]  CALL        call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5146]              __ret_0_ := _allowances_ERC20[this][approver_s857][spender_s857];
[L5437]  RET         call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5438]  COND FALSE  !(revert)
[L5449]  COND FALSE  !(!(amount_s1084 == 0 || __var_30 == 0))
[L5453]  COND TRUE   DType[this] == DkargoToken
[L5454]  CALL        call __var_31 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L4950]  COND FALSE  !(DType[this] == DkargoToken)
[L4955]  COND TRUE   DType[this] == ERC20Safe
[L4956]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L5173]              __var_18 := null;
[L5174]  COND FALSE  !(!(approver_s899 != null))
[L5178]              __var_19 := null;
[L5179]  COND FALSE  !(!(spender_s899 != null))
[L5183]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5184]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5185]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5186]              assert { :EventEmitted "Approval_ERC20" } true;
[L4956]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L4957]  COND FALSE  !(revert)
[L4968]              __ret_0_ := true;
[L5454]  RET         call __var_31 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5455]  COND FALSE  !(revert)
[L5466]              __ret_0_ := __var_31;
[L2181]  RET         call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L2182]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s1084] == amount_s1084) && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L3]                 revert := revert_hold;
[L8364]  RET         call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L8451]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 13:59:50,604 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:59:50,605 INFO  L82        PathProgramCache]: Analyzing trace with hash 939290066, now seen corresponding path program 1 times
[2020-11-25 13:59:50,605 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:59:50,621 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:59:50,716 INFO  L134       CoverageAnalysis]: Checked inductivity of 65 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 65 trivial. 0 not checked.
[2020-11-25 13:59:50,716 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:59:50,716 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 13:59:50,717 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:59:50,717 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 13:59:50,717 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 13:59:50,717 INFO  L87              Difference]: Start difference. First operand 4903 states and 5446 transitions. cyclomatic complexity: 545 Second operand 7 states.
[2020-11-25 13:59:50,848 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:59:50,848 INFO  L93              Difference]: Finished difference Result 4949 states and 5500 transitions.
[2020-11-25 13:59:50,849 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 13:59:50,849 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4949 states and 5500 transitions.
[2020-11-25 13:59:50,858 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:59:50,872 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4949 states to 4889 states and 5430 transitions.
[2020-11-25 13:59:50,872 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1098
[2020-11-25 13:59:50,873 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1098
[2020-11-25 13:59:50,873 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4889 states and 5430 transitions.
[2020-11-25 13:59:50,876 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:59:50,876 INFO  L728         BuchiCegarLoop]: Abstraction has 4889 states and 5430 transitions.
[2020-11-25 13:59:50,880 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4889 states and 5430 transitions.
[2020-11-25 13:59:50,910 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4889 to 4889.
[2020-11-25 13:59:50,910 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4889 states.
[2020-11-25 13:59:50,915 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4889 states to 4889 states and 5430 transitions.
[2020-11-25 13:59:50,915 INFO  L751         BuchiCegarLoop]: Abstraction has 4889 states and 5430 transitions.
[2020-11-25 13:59:50,915 INFO  L631         BuchiCegarLoop]: Abstraction has 4889 states and 5430 transitions.
[2020-11-25 13:59:50,915 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 13:59:50,915 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4889 states and 5430 transitions.
[2020-11-25 13:59:50,921 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 13:59:50,921 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:59:50,921 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:59:50,923 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:59:50,923 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Safe0 := false;
[L3]                 call_approve_ERC20Safe0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8441]              assume null == 0;
[L8442]  CALL        call this := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L8442]  RET         call this := FreshRefGenerator__success();
[L8443]              assume now >= 0;
[L8444]              assume DType[this] == DkargoToken;
[L8445]              assume msgvalue_MSG == 0;
[L8446]              gas := gas - 53000;
[L8447]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2404]              havoc __exception;
[L2405]              revert := false;
[L2406]  COND FALSE  !(__exception)
[L2439]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5754]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4087]              assume msgsender_MSG != null;
[L4088]              Balance[this] := 0;
[L4089]              _owner_Ownership[this] := null;
[L4091]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4092]              _owner_Ownership[this] := msgsender_MSG;
[L4105]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4106]  COND FALSE  !(revert)
[L5754]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]  COND FALSE  !(revert)
[L5758]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5758]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5759]  COND FALSE  !(revert)
[L5762]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4914]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L4914]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]  COND FALSE  !(revert)
[L4918]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4869]              assume msgsender_MSG != null;
[L4870]              Balance[this] := 0;
[L4871]              _supply_ERC20[this] := 0;
[L4872]              _balances_ERC20[this] := zeroRefintArr();
[L4873]              sum__balances1[this] := 0;
[L4874]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4875]              sum__allowances2[this] := 0;
[L4877]              pebs_s747 := supply_s747;
[L4878]  COND TRUE   DType[this] == DkargoToken
[L4879]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5283]              __var_24 := null;
[L5284]  COND FALSE  !(!(account_s999 != null))
[L5288]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L5288]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5289]  COND FALSE  !(revert)
[L5292]              _supply_ERC20[this] := __var_25;
[L5293]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L5293]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5294]  COND FALSE  !(revert)
[L5297]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5298]              _balances_ERC20[this][account_s999] := __var_26;
[L5299]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5300]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4879]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4880]  COND FALSE  !(revert)
[L4918]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4919]  COND FALSE  !(revert)
[L5762]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5763]  COND FALSE  !(revert)
[L5766]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5382]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5383]  COND FALSE  !(revert)
[L5386]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]              assume msgsender_MSG != null;
[L5364]              Balance[this] := 0;
[L5386]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5387]  COND FALSE  !(revert)
[L5766]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]  COND FALSE  !(revert)
[L5770]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4341]              assume msgsender_MSG != null;
[L4342]              Balance[this] := 0;
[L4344]  CALL        call __var_3 := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L4344]  RET         call __var_3 := FreshRefGenerator__success();
[L4345]  COND FALSE  !(revert)
[L4348]              _slist_AddressChain[this] := __var_3;
[L4362]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4363]  COND FALSE  !(revert)
[L5770]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5771]  COND FALSE  !(revert)
[L5774]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4675]              assume msgsender_MSG != null;
[L4676]              Balance[this] := 0;
[L4690]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4691]  COND FALSE  !(revert)
[L5774]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5775]  COND FALSE  !(revert)
[L5778]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4675]              assume msgsender_MSG != null;
[L4676]              Balance[this] := 0;
[L4690]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4691]  COND FALSE  !(revert)
[L4760]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4761]  COND FALSE  !(revert)
[L4764]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4724]              assume msgsender_MSG != null;
[L4725]              Balance[this] := 0;
[L4726]              _infcs_ERC165[this] := zerointboolArr();
[L4728]              __var_16 := 33540519;
[L4729]  COND TRUE   DType[this] == DkargoToken
[L4730]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4793]  COND FALSE  !(!(infcid_s644 != -1))
[L4797]              _infcs_ERC165[this][infcid_s644] := true;
[L4730]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4731]  COND FALSE  !(revert)
[L4764]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4765]  COND FALSE  !(revert)
[L5778]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5779]  COND FALSE  !(revert)
[L5782]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4030]              assume msgsender_MSG != null;
[L4031]              Balance[this] := 0;
[L4032]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4046]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4047]  COND FALSE  !(revert)
[L5782]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]  COND FALSE  !(revert)
[L5786]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5676]              assume msgsender_MSG != null;
[L5677]              Balance[this] := 0;
[L5678]              _name_DkargoToken[this] := -1676636045;
[L5679]              _symbol_DkargoToken[this] := -1676636045;
[L5681]  COND TRUE   DType[this] == DkargoToken
[L5682]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4071]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5682]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5683]  COND FALSE  !(revert)
[L5689]              __var_39 := -1804674067;
[L5690]  COND TRUE   DType[this] == DkargoToken
[L5691]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4793]  COND FALSE  !(!(infcid_s644 != -1))
[L4797]              _infcs_ERC165[this][infcid_s644] := true;
[L5691]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5692]  COND FALSE  !(revert)
[L5698]              _name_DkargoToken[this] := name_s1191;
[L5699]              _symbol_DkargoToken[this] := symbol_s1191;
[L5700]  COND TRUE   DType[this] == DkargoToken
[L5701]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4505]              __var_6 := null;
[L4506]  COND FALSE  !(!(node_s455 != null))
[L4510]  COND TRUE   DType[this] == DkargoToken
[L4511]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4447]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4451]              __var_4 := null;
[L4452]              __var_5 := null;
[L4453]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4511]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4512]  COND FALSE  !(revert)
[L4523]  COND FALSE  !(!!__var_7)
[L4527]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4528]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4529]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4535]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L4535]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4536]  COND FALSE  !(revert)
[L4539]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4540]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5701]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5702]  COND FALSE  !(revert)
[L5786]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5787]  COND FALSE  !(revert)
[L2439]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2440]              assume !revert && gas >= 0;
[L8447]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8448]              assume !revert && gas >= 0;
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND FALSE  !(choice == 12)
[L8359]  COND TRUE   choice == 11
[L8360]              gas := gas - 21000;
[L8361]  COND TRUE   gas >= 0
[L8362]              assume amount_s1084 >= 0 && amount_s1084 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8363]              assume msgvalue_MSG == 0;
[L8364]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s1084;
[L3]                 call_approve_ERC20Safe0 := true;
[L3]                 call_approve_ERC20Safe0 := false;
[L3]                 revert := revert_hold;
[L2146]              havoc __exception;
[L2147]              revert := false;
[L2148]  COND FALSE  !(__exception)
[L2181]  CALL        call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5436]  COND TRUE   DType[this] == DkargoToken
[L5437]  CALL        call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5146]              __ret_0_ := _allowances_ERC20[this][approver_s857][spender_s857];
[L5437]  RET         call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5438]  COND FALSE  !(revert)
[L5449]  COND FALSE  !(!(amount_s1084 == 0 || __var_30 == 0))
[L5453]  COND TRUE   DType[this] == DkargoToken
[L5454]  CALL        call __var_31 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L4950]  COND TRUE   DType[this] == DkargoToken
[L4951]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L5173]              __var_18 := null;
[L5174]  COND FALSE  !(!(approver_s899 != null))
[L5178]              __var_19 := null;
[L5179]  COND FALSE  !(!(spender_s899 != null))
[L5183]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5184]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5185]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5186]              assert { :EventEmitted "Approval_ERC20" } true;
[L4951]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L4952]  COND FALSE  !(revert)
[L4968]              __ret_0_ := true;
[L5454]  RET         call __var_31 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5455]  COND FALSE  !(revert)
[L5466]              __ret_0_ := __var_31;
[L2181]  RET         call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L2182]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s1084] == amount_s1084) && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L3]                 revert := revert_hold;
[L8364]  RET         call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L8451]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND FALSE  !(choice == 12)
[L8359]  COND TRUE   choice == 11
[L8360]              gas := gas - 21000;
[L8361]  COND TRUE   gas >= 0
[L8362]              assume amount_s1084 >= 0 && amount_s1084 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8363]              assume msgvalue_MSG == 0;
[L8364]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s1084;
[L3]                 call_approve_ERC20Safe0 := true;
[L3]                 call_approve_ERC20Safe0 := false;
[L3]                 revert := revert_hold;
[L2146]              havoc __exception;
[L2147]              revert := false;
[L2148]  COND FALSE  !(__exception)
[L2181]  CALL        call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5436]  COND TRUE   DType[this] == DkargoToken
[L5437]  CALL        call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5146]              __ret_0_ := _allowances_ERC20[this][approver_s857][spender_s857];
[L5437]  RET         call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5438]  COND FALSE  !(revert)
[L5449]  COND FALSE  !(!(amount_s1084 == 0 || __var_30 == 0))
[L5453]  COND TRUE   DType[this] == DkargoToken
[L5454]  CALL        call __var_31 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L4950]  COND TRUE   DType[this] == DkargoToken
[L4951]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L5173]              __var_18 := null;
[L5174]  COND FALSE  !(!(approver_s899 != null))
[L5178]              __var_19 := null;
[L5179]  COND FALSE  !(!(spender_s899 != null))
[L5183]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5184]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5185]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5186]              assert { :EventEmitted "Approval_ERC20" } true;
[L4951]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L4952]  COND FALSE  !(revert)
[L4968]              __ret_0_ := true;
[L5454]  RET         call __var_31 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5455]  COND FALSE  !(revert)
[L5466]              __ret_0_ := __var_31;
[L2181]  RET         call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L2182]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s1084] == amount_s1084) && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L3]                 revert := revert_hold;
[L8364]  RET         call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L8451]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 13:59:50,927 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:59:50,927 INFO  L82        PathProgramCache]: Analyzing trace with hash -544565233, now seen corresponding path program 1 times
[2020-11-25 13:59:50,928 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:59:50,952 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:59:51,245 INFO  L134       CoverageAnalysis]: Checked inductivity of 65 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 65 trivial. 0 not checked.
[2020-11-25 13:59:51,245 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:59:51,245 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 13:59:51,246 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:59:51,246 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 13:59:51,246 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=33, Invalid=239, Unknown=0, NotChecked=0, Total=272
[2020-11-25 13:59:51,246 INFO  L87              Difference]: Start difference. First operand 4889 states and 5430 transitions. cyclomatic complexity: 543 Second operand 17 states.
[2020-11-25 13:59:55,843 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 13:59:55,843 INFO  L93              Difference]: Finished difference Result 5032 states and 5595 transitions.
[2020-11-25 13:59:55,843 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 13:59:55,843 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5032 states and 5595 transitions.
[2020-11-25 13:59:55,853 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 13:59:55,865 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5032 states to 5032 states and 5595 transitions.
[2020-11-25 13:59:55,865 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1132
[2020-11-25 13:59:55,865 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1132
[2020-11-25 13:59:55,865 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5032 states and 5595 transitions.
[2020-11-25 13:59:55,869 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 13:59:55,869 INFO  L728         BuchiCegarLoop]: Abstraction has 5032 states and 5595 transitions.
[2020-11-25 13:59:55,873 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5032 states and 5595 transitions.
[2020-11-25 13:59:55,902 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5032 to 4991.
[2020-11-25 13:59:55,902 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4991 states.
[2020-11-25 13:59:55,907 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4991 states to 4991 states and 5545 transitions.
[2020-11-25 13:59:55,907 INFO  L751         BuchiCegarLoop]: Abstraction has 4991 states and 5545 transitions.
[2020-11-25 13:59:55,907 INFO  L631         BuchiCegarLoop]: Abstraction has 4991 states and 5545 transitions.
[2020-11-25 13:59:55,907 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 13:59:55,907 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4991 states and 5545 transitions.
[2020-11-25 13:59:55,912 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 13:59:55,913 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 13:59:55,913 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 13:59:55,915 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 13:59:55,915 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Safe0 := false;
[L3]                 call_approve_ERC20Safe0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8441]              assume null == 0;
[L8442]  CALL        call this := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L8442]  RET         call this := FreshRefGenerator__success();
[L8443]              assume now >= 0;
[L8444]              assume DType[this] == DkargoToken;
[L8445]              assume msgvalue_MSG == 0;
[L8446]              gas := gas - 53000;
[L8447]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2404]              havoc __exception;
[L2405]              revert := false;
[L2406]  COND FALSE  !(__exception)
[L2439]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5754]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4087]              assume msgsender_MSG != null;
[L4088]              Balance[this] := 0;
[L4089]              _owner_Ownership[this] := null;
[L4091]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4092]              _owner_Ownership[this] := msgsender_MSG;
[L4105]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4106]  COND FALSE  !(revert)
[L5754]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]  COND FALSE  !(revert)
[L5758]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5758]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5759]  COND FALSE  !(revert)
[L5762]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4914]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L4914]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]  COND FALSE  !(revert)
[L4918]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4869]              assume msgsender_MSG != null;
[L4870]              Balance[this] := 0;
[L4871]              _supply_ERC20[this] := 0;
[L4872]              _balances_ERC20[this] := zeroRefintArr();
[L4873]              sum__balances1[this] := 0;
[L4874]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4875]              sum__allowances2[this] := 0;
[L4877]              pebs_s747 := supply_s747;
[L4878]  COND TRUE   DType[this] == DkargoToken
[L4879]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5283]              __var_24 := null;
[L5284]  COND FALSE  !(!(account_s999 != null))
[L5288]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L5288]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5289]  COND FALSE  !(revert)
[L5292]              _supply_ERC20[this] := __var_25;
[L5293]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L5293]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5294]  COND FALSE  !(revert)
[L5297]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5298]              _balances_ERC20[this][account_s999] := __var_26;
[L5299]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5300]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4879]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4880]  COND FALSE  !(revert)
[L4918]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4919]  COND FALSE  !(revert)
[L5762]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5763]  COND FALSE  !(revert)
[L5766]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5382]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5383]  COND FALSE  !(revert)
[L5386]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]              assume msgsender_MSG != null;
[L5364]              Balance[this] := 0;
[L5386]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5387]  COND FALSE  !(revert)
[L5766]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]  COND FALSE  !(revert)
[L5770]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4341]              assume msgsender_MSG != null;
[L4342]              Balance[this] := 0;
[L4344]  CALL        call __var_3 := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L4344]  RET         call __var_3 := FreshRefGenerator__success();
[L4345]  COND FALSE  !(revert)
[L4348]              _slist_AddressChain[this] := __var_3;
[L4362]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4363]  COND FALSE  !(revert)
[L5770]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5771]  COND FALSE  !(revert)
[L5774]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4675]              assume msgsender_MSG != null;
[L4676]              Balance[this] := 0;
[L4690]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4691]  COND FALSE  !(revert)
[L5774]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5775]  COND FALSE  !(revert)
[L5778]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4675]              assume msgsender_MSG != null;
[L4676]              Balance[this] := 0;
[L4690]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4691]  COND FALSE  !(revert)
[L4760]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4761]  COND FALSE  !(revert)
[L4764]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4724]              assume msgsender_MSG != null;
[L4725]              Balance[this] := 0;
[L4726]              _infcs_ERC165[this] := zerointboolArr();
[L4728]              __var_16 := 33540519;
[L4729]  COND TRUE   DType[this] == DkargoToken
[L4730]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4793]  COND FALSE  !(!(infcid_s644 != -1))
[L4797]              _infcs_ERC165[this][infcid_s644] := true;
[L4730]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4731]  COND FALSE  !(revert)
[L4764]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4765]  COND FALSE  !(revert)
[L5778]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5779]  COND FALSE  !(revert)
[L5782]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4030]              assume msgsender_MSG != null;
[L4031]              Balance[this] := 0;
[L4032]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4046]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4047]  COND FALSE  !(revert)
[L5782]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]  COND FALSE  !(revert)
[L5786]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5676]              assume msgsender_MSG != null;
[L5677]              Balance[this] := 0;
[L5678]              _name_DkargoToken[this] := -1676636045;
[L5679]              _symbol_DkargoToken[this] := -1676636045;
[L5681]  COND TRUE   DType[this] == DkargoToken
[L5682]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4071]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5682]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5683]  COND FALSE  !(revert)
[L5689]              __var_39 := -1804674067;
[L5690]  COND TRUE   DType[this] == DkargoToken
[L5691]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4793]  COND FALSE  !(!(infcid_s644 != -1))
[L4797]              _infcs_ERC165[this][infcid_s644] := true;
[L5691]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5692]  COND FALSE  !(revert)
[L5698]              _name_DkargoToken[this] := name_s1191;
[L5699]              _symbol_DkargoToken[this] := symbol_s1191;
[L5700]  COND TRUE   DType[this] == DkargoToken
[L5701]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4505]              __var_6 := null;
[L4506]  COND FALSE  !(!(node_s455 != null))
[L4510]  COND TRUE   DType[this] == DkargoToken
[L4511]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4447]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4451]              __var_4 := null;
[L4452]              __var_5 := null;
[L4453]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4511]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4512]  COND FALSE  !(revert)
[L4523]  COND FALSE  !(!!__var_7)
[L4527]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4528]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4529]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4535]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L4535]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4536]  COND FALSE  !(revert)
[L4539]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4540]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5701]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5702]  COND FALSE  !(revert)
[L5786]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5787]  COND FALSE  !(revert)
[L2439]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2440]              assume !revert && gas >= 0;
[L8447]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8448]              assume !revert && gas >= 0;
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND FALSE  !(choice == 12)
[L8359]  COND TRUE   choice == 11
[L8360]              gas := gas - 21000;
[L8361]  COND TRUE   gas >= 0
[L8362]              assume amount_s1084 >= 0 && amount_s1084 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8363]              assume msgvalue_MSG == 0;
[L8364]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s1084;
[L3]                 call_approve_ERC20Safe0 := true;
[L3]                 call_approve_ERC20Safe0 := false;
[L3]                 revert := revert_hold;
[L2146]              havoc __exception;
[L2147]              revert := false;
[L2148]  COND TRUE   __exception
[L2149]              __tmp__Balance := Balance;
[L2150]              __tmp__DType := DType;
[L2151]              __tmp__Alloc := Alloc;
[L2152]              __tmp__balance_ADDR := balance_ADDR;
[L2153]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2154]              __tmp__sum := sum;
[L2155]              __tmp__M_int_bool := M_int_bool;
[L2156]              __tmp__sum__infcs0 := sum__infcs0;
[L2157]              __tmp__M_Ref_int := M_Ref_int;
[L2158]              __tmp__sum__balances1 := sum__balances1;
[L2159]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2160]              __tmp__sum__allowances2 := sum__allowances2;
[L2161]              __tmp__Length := Length;
[L2162]              __tmp__now := now;
[L2163]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2164]              __tmp___owner_Ownership := _owner_Ownership;
[L2165]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2166]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2167]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2168]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2169]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2170]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2171]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2172]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2173]              __tmp___supply_ERC20 := _supply_ERC20;
[L2174]              __tmp___balances_ERC20 := _balances_ERC20;
[L2175]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2176]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2177]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2178]  CALL        call __ret_0_ := approve~address~uint256_ERC20Safe__fail(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5397]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5398]  CALL        call __var_30 := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5140]              __ret_0_ := __tmp___allowances_ERC20[this][approver_s857][spender_s857];
[L5398]  RET         call __var_30 := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5399]  COND FALSE  !(revert)
[L5410]  COND TRUE   !(amount_s1084 == 0 || __var_30 == 0)
[L5411]              revert := true;
[L2178]  RET         call __ret_0_ := approve~address~uint256_ERC20Safe__fail(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L2179]              assume revert || gas < 0;
[L8364]  RET         call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L8451]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND FALSE  !(choice == 12)
[L8359]  COND TRUE   choice == 11
[L8360]              gas := gas - 21000;
[L8361]  COND TRUE   gas >= 0
[L8362]              assume amount_s1084 >= 0 && amount_s1084 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8363]              assume msgvalue_MSG == 0;
[L8364]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s1084;
[L3]                 call_approve_ERC20Safe0 := true;
[L3]                 call_approve_ERC20Safe0 := false;
[L3]                 revert := revert_hold;
[L2146]              havoc __exception;
[L2147]              revert := false;
[L2148]  COND TRUE   __exception
[L2149]              __tmp__Balance := Balance;
[L2150]              __tmp__DType := DType;
[L2151]              __tmp__Alloc := Alloc;
[L2152]              __tmp__balance_ADDR := balance_ADDR;
[L2153]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2154]              __tmp__sum := sum;
[L2155]              __tmp__M_int_bool := M_int_bool;
[L2156]              __tmp__sum__infcs0 := sum__infcs0;
[L2157]              __tmp__M_Ref_int := M_Ref_int;
[L2158]              __tmp__sum__balances1 := sum__balances1;
[L2159]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2160]              __tmp__sum__allowances2 := sum__allowances2;
[L2161]              __tmp__Length := Length;
[L2162]              __tmp__now := now;
[L2163]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2164]              __tmp___owner_Ownership := _owner_Ownership;
[L2165]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2166]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2167]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2168]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2169]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2170]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2171]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2172]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2173]              __tmp___supply_ERC20 := _supply_ERC20;
[L2174]              __tmp___balances_ERC20 := _balances_ERC20;
[L2175]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2176]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2177]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2178]  CALL        call __ret_0_ := approve~address~uint256_ERC20Safe__fail(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5397]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5398]  CALL        call __var_30 := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5140]              __ret_0_ := __tmp___allowances_ERC20[this][approver_s857][spender_s857];
[L5398]  RET         call __var_30 := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5399]  COND FALSE  !(revert)
[L5410]  COND TRUE   !(amount_s1084 == 0 || __var_30 == 0)
[L5411]              revert := true;
[L2178]  RET         call __ret_0_ := approve~address~uint256_ERC20Safe__fail(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L2179]              assume revert || gas < 0;
[L8364]  RET         call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L8451]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 13:59:55,919 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 13:59:55,919 INFO  L82        PathProgramCache]: Analyzing trace with hash 1765419139, now seen corresponding path program 1 times
[2020-11-25 13:59:55,920 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 13:59:55,933 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 13:59:56,044 INFO  L134       CoverageAnalysis]: Checked inductivity of 65 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 65 trivial. 0 not checked.
[2020-11-25 13:59:56,044 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 13:59:56,044 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 13:59:56,045 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 13:59:56,045 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 13:59:56,045 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=182, Unknown=0, NotChecked=0, Total=210
[2020-11-25 13:59:56,045 INFO  L87              Difference]: Start difference. First operand 4991 states and 5545 transitions. cyclomatic complexity: 558 Second operand 15 states.
[2020-11-25 14:00:01,994 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:00:01,995 INFO  L93              Difference]: Finished difference Result 8769 states and 9788 transitions.
[2020-11-25 14:00:01,996 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 23 states. 
[2020-11-25 14:00:01,996 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8769 states and 9788 transitions.
[2020-11-25 14:00:02,026 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 12
[2020-11-25 14:00:02,062 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8769 states to 8769 states and 9788 transitions.
[2020-11-25 14:00:02,062 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2169
[2020-11-25 14:00:02,064 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2187
[2020-11-25 14:00:02,064 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8769 states and 9788 transitions.
[2020-11-25 14:00:02,076 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:00:02,076 INFO  L728         BuchiCegarLoop]: Abstraction has 8769 states and 9788 transitions.
[2020-11-25 14:00:02,083 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8769 states and 9788 transitions.
[2020-11-25 14:00:02,155 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8769 to 8725.
[2020-11-25 14:00:02,156 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8725 states.
[2020-11-25 14:00:02,168 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8725 states to 8725 states and 9701 transitions.
[2020-11-25 14:00:02,169 INFO  L751         BuchiCegarLoop]: Abstraction has 8725 states and 9701 transitions.
[2020-11-25 14:00:02,169 INFO  L631         BuchiCegarLoop]: Abstraction has 8725 states and 9701 transitions.
[2020-11-25 14:00:02,169 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 14:00:02,169 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8725 states and 9701 transitions.
[2020-11-25 14:00:02,183 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 8
[2020-11-25 14:00:02,183 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:00:02,183 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:00:02,185 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:00:02,185 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Safe0 := false;
[L3]                 call_approve_ERC20Safe0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8441]              assume null == 0;
[L8442]  CALL        call this := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L8442]  RET         call this := FreshRefGenerator__success();
[L8443]              assume now >= 0;
[L8444]              assume DType[this] == DkargoToken;
[L8445]              assume msgvalue_MSG == 0;
[L8446]              gas := gas - 53000;
[L8447]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2404]              havoc __exception;
[L2405]              revert := false;
[L2406]  COND TRUE   __exception
[L2407]              __tmp__Balance := Balance;
[L2408]              __tmp__DType := DType;
[L2409]              __tmp__Alloc := Alloc;
[L2410]              __tmp__balance_ADDR := balance_ADDR;
[L2411]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2412]              __tmp__sum := sum;
[L2413]              __tmp__M_int_bool := M_int_bool;
[L2414]              __tmp__sum__infcs0 := sum__infcs0;
[L2415]              __tmp__M_Ref_int := M_Ref_int;
[L2416]              __tmp__sum__balances1 := sum__balances1;
[L2417]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2418]              __tmp__sum__allowances2 := sum__allowances2;
[L2419]              __tmp__Length := Length;
[L2420]              __tmp__now := now;
[L2421]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2422]              __tmp___owner_Ownership := _owner_Ownership;
[L2423]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2424]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2425]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2426]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2427]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2428]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2429]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2430]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2431]              __tmp___supply_ERC20 := _supply_ERC20;
[L2432]              __tmp___balances_ERC20 := _balances_ERC20;
[L2433]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2434]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2435]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2436]  CALL        call DkargoToken_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5713]  CALL        call Ownership_Ownership__fail(this, msgsender_MSG, msgvalue_MSG);
[L4097]  CALL        call Ownership_Ownership_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4077]              assume msgsender_MSG != null;
[L4078]              __tmp__Balance[this] := 0;
[L4079]              __tmp___owner_Ownership[this] := null;
[L4081]              __tmp___owner_Ownership[this] := msgsender_MSG;
[L4097]  RET         call Ownership_Ownership_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4098]  COND FALSE  !(revert)
[L5713]  RET         call Ownership_Ownership__fail(this, msgsender_MSG, msgvalue_MSG);
[L5714]  COND FALSE  !(revert)
[L5717]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4818]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4803]              assume msgsender_MSG != null;
[L4804]              __tmp__Balance[this] := 0;
[L4818]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4819]  COND FALSE  !(revert)
[L5717]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5718]  COND FALSE  !(revert)
[L5721]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4901]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4818]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4803]              assume msgsender_MSG != null;
[L4804]              __tmp__Balance[this] := 0;
[L4818]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4819]  COND FALSE  !(revert)
[L4901]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4902]  COND FALSE  !(revert)
[L4905]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4836]              assume msgsender_MSG != null;
[L4837]              __tmp__Balance[this] := 0;
[L4838]              __tmp___supply_ERC20[this] := 0;
[L4839]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L4840]              __tmp__sum__balances1[this] := 0;
[L4841]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L4842]              __tmp__sum__allowances2[this] := 0;
[L4844]              pebs_s747 := supply_s747;
[L4845]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4846]  CALL        call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5259]              __var_24 := null;
[L5260]  COND FALSE  !(!(account_s999 != null))
[L5264]  CALL        call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___supply_ERC20[this], amount_s999);
[L4201]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]  COND FALSE  !(!(c_s130 >= a_s130))
[L4206]              __ret_0_ := c_s130;
[L5264]  RET         call __var_25 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___supply_ERC20[this], amount_s999);
[L5265]  COND FALSE  !(revert)
[L5268]              __tmp___supply_ERC20[this] := __var_25;
[L5269]  CALL        call __var_26 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s999], amount_s999);
[L4201]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]  COND FALSE  !(!(c_s130 >= a_s130))
[L4206]              __ret_0_ := c_s130;
[L5269]  RET         call __var_26 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][account_s999], amount_s999);
[L5270]  COND FALSE  !(revert)
[L5273]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] - __tmp___balances_ERC20[this][account_s999];
[L5274]              __tmp___balances_ERC20[this][account_s999] := __var_26;
[L5275]              __tmp__sum__balances1[this] := __tmp__sum__balances1[this] + __tmp___balances_ERC20[this][account_s999];
[L4846]  RET         call _mint~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4847]  COND FALSE  !(revert)
[L4905]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4906]  COND FALSE  !(revert)
[L5721]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5722]  COND FALSE  !(revert)
[L5725]  CALL        call ERC20Safe_ERC20Safe__fail(this, msgsender_MSG, msgvalue_MSG);
[L5370]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L4818]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4803]              assume msgsender_MSG != null;
[L4804]              __tmp__Balance[this] := 0;
[L4818]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4819]  COND FALSE  !(revert)
[L5370]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L5371]  COND FALSE  !(revert)
[L5374]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5355]              assume msgsender_MSG != null;
[L5356]              __tmp__Balance[this] := 0;
[L5374]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L5375]  COND FALSE  !(revert)
[L5725]  RET         call ERC20Safe_ERC20Safe__fail(this, msgsender_MSG, msgvalue_MSG);
[L5726]  COND FALSE  !(revert)
[L5729]  CALL        call AddressChain_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG);
[L4354]  CALL        call AddressChain_AddressChain_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4326]              assume msgsender_MSG != null;
[L4327]              __tmp__Balance[this] := 0;
[L4329]  CALL        call __var_3 := FreshRefGenerator__fail();
[L3976]              havoc newRef;
[L3977]              assume __tmp__Alloc[newRef] == false;
[L3978]              __tmp__Alloc[newRef] := true;
[L3979]              assume newRef != null;
[L4329]  RET         call __var_3 := FreshRefGenerator__fail();
[L4330]  COND FALSE  !(revert)
[L4333]              __tmp___slist_AddressChain[this] := __var_3;
[L4354]  RET         call AddressChain_AddressChain_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4355]  COND FALSE  !(revert)
[L5729]  RET         call AddressChain_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG);
[L5730]  COND FALSE  !(revert)
[L5733]  CALL        call IERC165_IERC165__fail(this, msgsender_MSG, msgvalue_MSG);
[L4682]  CALL        call IERC165_IERC165_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4667]              assume msgsender_MSG != null;
[L4668]              __tmp__Balance[this] := 0;
[L4682]  RET         call IERC165_IERC165_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4683]  COND FALSE  !(revert)
[L5733]  RET         call IERC165_IERC165__fail(this, msgsender_MSG, msgvalue_MSG);
[L5734]  COND FALSE  !(revert)
[L5737]  CALL        call ERC165_ERC165__fail(this, msgsender_MSG, msgvalue_MSG);
[L4747]  CALL        call IERC165_IERC165__fail(this, msgsender_MSG, msgvalue_MSG);
[L4682]  CALL        call IERC165_IERC165_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4667]              assume msgsender_MSG != null;
[L4668]              __tmp__Balance[this] := 0;
[L4682]  RET         call IERC165_IERC165_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4683]  COND FALSE  !(revert)
[L4747]  RET         call IERC165_IERC165__fail(this, msgsender_MSG, msgvalue_MSG);
[L4748]  COND FALSE  !(revert)
[L4751]  CALL        call ERC165_ERC165_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4700]              assume msgsender_MSG != null;
[L4701]              __tmp__Balance[this] := 0;
[L4702]              __tmp___infcs_ERC165[this] := zerointboolArr();
[L4704]              __var_16 := 33540519;
[L4705]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4706]  CALL        call _registerInterface~bytes4_ERC165__fail(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4784]  COND FALSE  !(!(infcid_s644 != -1))
[L4788]              __tmp___infcs_ERC165[this][infcid_s644] := true;
[L4706]  RET         call _registerInterface~bytes4_ERC165__fail(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4707]  COND FALSE  !(revert)
[L4751]  RET         call ERC165_ERC165_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4752]  COND FALSE  !(revert)
[L5737]  RET         call ERC165_ERC165__fail(this, msgsender_MSG, msgvalue_MSG);
[L5738]  COND FALSE  !(revert)
[L5741]  CALL        call DkargoPrefix_DkargoPrefix__fail(this, msgsender_MSG, msgvalue_MSG);
[L4038]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4021]              assume msgsender_MSG != null;
[L4022]              __tmp__Balance[this] := 0;
[L4023]              __tmp___dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4038]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L4039]  COND FALSE  !(revert)
[L5741]  RET         call DkargoPrefix_DkargoPrefix__fail(this, msgsender_MSG, msgvalue_MSG);
[L5742]  COND FALSE  !(revert)
[L5745]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5638]              assume msgsender_MSG != null;
[L5639]              __tmp__Balance[this] := 0;
[L5640]              __tmp___name_DkargoToken[this] := -1676636045;
[L5641]              __tmp___symbol_DkargoToken[this] := -1676636045;
[L5643]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5644]  CALL        call _setDkargoPrefix~string_DkargoPrefix__fail(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4066]              __tmp___dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5644]  RET         call _setDkargoPrefix~string_DkargoPrefix__fail(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5645]  COND FALSE  !(revert)
[L5651]              __var_39 := -1804674067;
[L5652]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5653]  CALL        call _registerInterface~bytes4_ERC165__fail(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4784]  COND FALSE  !(!(infcid_s644 != -1))
[L4788]              __tmp___infcs_ERC165[this][infcid_s644] := true;
[L5653]  RET         call _registerInterface~bytes4_ERC165__fail(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5654]  COND FALSE  !(revert)
[L5660]              __tmp___name_DkargoToken[this] := name_s1191;
[L5661]              __tmp___symbol_DkargoToken[this] := symbol_s1191;
[L5662]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5663]  CALL        call _linkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4463]              __var_6 := null;
[L4464]  COND FALSE  !(!(node_s455 != null))
[L4468]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4469]  CALL        call __var_7 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4432]  COND TRUE   (__tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 1 && __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376) && __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == node_s376
[L4433]              __ret_0_ := true;
[L4469]  RET         call __var_7 := isLinked~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4470]  COND FALSE  !(revert)
[L4481]  COND FALSE  !(!!__var_7)
[L4485]  COND TRUE   __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] == 0
[L4486]              __tmp__tail_AddressChain.NodeList[__tmp___slist_AddressChain[this]] := node_s455;
[L4487]              __tmp__head_AddressChain.NodeList[__tmp___slist_AddressChain[this]] := node_s455;
[L4493]  CALL        call __var_8 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]], 1);
[L4201]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4202]  COND FALSE  !(!(c_s130 >= a_s130))
[L4206]              __ret_0_ := c_s130;
[L4493]  RET         call __var_8 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]], 1);
[L4494]  COND FALSE  !(revert)
[L4497]              __tmp__count_AddressChain.NodeList[__tmp___slist_AddressChain[this]] := __var_8;
[L5663]  RET         call _linkChain~address_AddressChain__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5664]  COND FALSE  !(revert)
[L5745]  RET         call DkargoToken_DkargoToken_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5746]  COND FALSE  !(revert)
[L2436]  RET         call DkargoToken_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2437]              assume revert || gas < 0;
[L8447]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8448]              assume !revert && gas >= 0;
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND FALSE  !(choice == 12)
[L8359]  COND TRUE   choice == 11
[L8360]              gas := gas - 21000;
[L8361]  COND TRUE   gas >= 0
[L8362]              assume amount_s1084 >= 0 && amount_s1084 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8363]              assume msgvalue_MSG == 0;
[L8364]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s1084;
[L3]                 call_approve_ERC20Safe0 := true;
[L3]                 call_approve_ERC20Safe0 := false;
[L3]                 revert := revert_hold;
[L2146]              havoc __exception;
[L2147]              revert := false;
[L2148]  COND FALSE  !(__exception)
[L2181]  CALL        call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5436]  COND TRUE   DType[this] == DkargoToken
[L5437]  CALL        call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5146]              __ret_0_ := _allowances_ERC20[this][approver_s857][spender_s857];
[L5437]  RET         call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5438]  COND FALSE  !(revert)
[L5449]  COND FALSE  !(!(amount_s1084 == 0 || __var_30 == 0))
[L5453]  COND TRUE   DType[this] == DkargoToken
[L5454]  CALL        call __var_31 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L4950]  COND TRUE   DType[this] == DkargoToken
[L4951]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L5173]              __var_18 := null;
[L5174]  COND FALSE  !(!(approver_s899 != null))
[L5178]              __var_19 := null;
[L5179]  COND FALSE  !(!(spender_s899 != null))
[L5183]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5184]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5185]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5186]              assert { :EventEmitted "Approval_ERC20" } true;
[L4951]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L4952]  COND FALSE  !(revert)
[L4968]              __ret_0_ := true;
[L5454]  RET         call __var_31 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5455]  COND FALSE  !(revert)
[L5466]              __ret_0_ := __var_31;
[L2181]  RET         call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L2182]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s1084] == amount_s1084) && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L3]                 revert := revert_hold;
[L8364]  RET         call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L8451]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND FALSE  !(choice == 12)
[L8359]  COND TRUE   choice == 11
[L8360]              gas := gas - 21000;
[L8361]  COND TRUE   gas >= 0
[L8362]              assume amount_s1084 >= 0 && amount_s1084 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8363]              assume msgvalue_MSG == 0;
[L8364]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(p1 != msgsender_MSG || p2 != spender_s1084);
[L3]                 revert := revert_hold;
[L2146]              havoc __exception;
[L2147]              revert := false;
[L2148]  COND FALSE  !(__exception)
[L2181]  CALL        call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5436]  COND TRUE   DType[this] == DkargoToken
[L5437]  CALL        call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5146]              __ret_0_ := _allowances_ERC20[this][approver_s857][spender_s857];
[L5437]  RET         call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5438]  COND FALSE  !(revert)
[L5449]  COND FALSE  !(!(amount_s1084 == 0 || __var_30 == 0))
[L5453]  COND TRUE   DType[this] == DkargoToken
[L5454]  CALL        call __var_31 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L4950]  COND TRUE   DType[this] == DkargoToken
[L4951]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L5173]              __var_18 := null;
[L5174]  COND FALSE  !(!(approver_s899 != null))
[L5178]              __var_19 := null;
[L5179]  COND FALSE  !(!(spender_s899 != null))
[L5183]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5184]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5185]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5186]              assert { :EventEmitted "Approval_ERC20" } true;
[L4951]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L4952]  COND FALSE  !(revert)
[L4968]              __ret_0_ := true;
[L5454]  RET         call __var_31 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5455]  COND FALSE  !(revert)
[L5466]              __ret_0_ := __var_31;
[L2181]  RET         call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L2182]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((__ret_0_ == true && _allowances_ERC20[this][msgsender_MSG][spender_s1084] == amount_s1084) && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this][p1][p2] == old(_allowances_ERC20[this][p1][p2])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L3]                 revert := revert_hold;
[L8364]  RET         call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L8451]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:00:02,190 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:00:02,191 INFO  L82        PathProgramCache]: Analyzing trace with hash 1221634737, now seen corresponding path program 1 times
[2020-11-25 14:00:02,192 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:00:02,211 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:00:02,286 INFO  L134       CoverageAnalysis]: Checked inductivity of 59 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 59 trivial. 0 not checked.
[2020-11-25 14:00:02,286 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:00:02,286 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 14:00:02,286 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:00:02,286 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:00:02,286 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:00:02,287 INFO  L87              Difference]: Start difference. First operand 8725 states and 9701 transitions. cyclomatic complexity: 982 Second operand 4 states.
[2020-11-25 14:00:02,568 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:00:02,568 INFO  L93              Difference]: Finished difference Result 6221 states and 7157 transitions.
[2020-11-25 14:00:02,568 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 14:00:02,569 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6221 states and 7157 transitions.
[2020-11-25 14:00:02,586 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 16
[2020-11-25 14:00:02,602 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6221 states to 5950 states and 6874 transitions.
[2020-11-25 14:00:02,602 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1438
[2020-11-25 14:00:02,603 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1438
[2020-11-25 14:00:02,603 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5950 states and 6874 transitions.
[2020-11-25 14:00:02,608 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:00:02,608 INFO  L728         BuchiCegarLoop]: Abstraction has 5950 states and 6874 transitions.
[2020-11-25 14:00:02,612 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5950 states and 6874 transitions.
[2020-11-25 14:00:02,654 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5950 to 4972.
[2020-11-25 14:00:02,654 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4972 states.
[2020-11-25 14:00:02,660 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4972 states to 4972 states and 5538 transitions.
[2020-11-25 14:00:02,660 INFO  L751         BuchiCegarLoop]: Abstraction has 4972 states and 5538 transitions.
[2020-11-25 14:00:02,660 INFO  L631         BuchiCegarLoop]: Abstraction has 4972 states and 5538 transitions.
[2020-11-25 14:00:02,660 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 14:00:02,660 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4972 states and 5538 transitions.
[2020-11-25 14:00:02,665 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:00:02,665 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:00:02,665 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:00:02,667 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:00:02,667 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Safe0 := false;
[L3]                 call_approve_ERC20Safe0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8441]              assume null == 0;
[L8442]  CALL        call this := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L8442]  RET         call this := FreshRefGenerator__success();
[L8443]              assume now >= 0;
[L8444]              assume DType[this] == DkargoToken;
[L8445]              assume msgvalue_MSG == 0;
[L8446]              gas := gas - 53000;
[L8447]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2404]              havoc __exception;
[L2405]              revert := false;
[L2406]  COND FALSE  !(__exception)
[L2439]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5754]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4087]              assume msgsender_MSG != null;
[L4088]              Balance[this] := 0;
[L4089]              _owner_Ownership[this] := null;
[L4091]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4092]              _owner_Ownership[this] := msgsender_MSG;
[L4105]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4106]  COND FALSE  !(revert)
[L5754]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]  COND FALSE  !(revert)
[L5758]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5758]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5759]  COND FALSE  !(revert)
[L5762]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4914]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L4914]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]  COND FALSE  !(revert)
[L4918]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4869]              assume msgsender_MSG != null;
[L4870]              Balance[this] := 0;
[L4871]              _supply_ERC20[this] := 0;
[L4872]              _balances_ERC20[this] := zeroRefintArr();
[L4873]              sum__balances1[this] := 0;
[L4874]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4875]              sum__allowances2[this] := 0;
[L4877]              pebs_s747 := supply_s747;
[L4878]  COND TRUE   DType[this] == DkargoToken
[L4879]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5283]              __var_24 := null;
[L5284]  COND FALSE  !(!(account_s999 != null))
[L5288]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L5288]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5289]  COND FALSE  !(revert)
[L5292]              _supply_ERC20[this] := __var_25;
[L5293]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L5293]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5294]  COND FALSE  !(revert)
[L5297]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5298]              _balances_ERC20[this][account_s999] := __var_26;
[L5299]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5300]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4879]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4880]  COND FALSE  !(revert)
[L4918]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4919]  COND FALSE  !(revert)
[L5762]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5763]  COND FALSE  !(revert)
[L5766]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5382]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5383]  COND FALSE  !(revert)
[L5386]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]              assume msgsender_MSG != null;
[L5364]              Balance[this] := 0;
[L5386]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5387]  COND FALSE  !(revert)
[L5766]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]  COND FALSE  !(revert)
[L5770]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4341]              assume msgsender_MSG != null;
[L4342]              Balance[this] := 0;
[L4344]  CALL        call __var_3 := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L4344]  RET         call __var_3 := FreshRefGenerator__success();
[L4345]  COND FALSE  !(revert)
[L4348]              _slist_AddressChain[this] := __var_3;
[L4362]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4363]  COND FALSE  !(revert)
[L5770]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5771]  COND FALSE  !(revert)
[L5774]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4675]              assume msgsender_MSG != null;
[L4676]              Balance[this] := 0;
[L4690]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4691]  COND FALSE  !(revert)
[L5774]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5775]  COND FALSE  !(revert)
[L5778]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4675]              assume msgsender_MSG != null;
[L4676]              Balance[this] := 0;
[L4690]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4691]  COND FALSE  !(revert)
[L4760]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4761]  COND FALSE  !(revert)
[L4764]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4724]              assume msgsender_MSG != null;
[L4725]              Balance[this] := 0;
[L4726]              _infcs_ERC165[this] := zerointboolArr();
[L4728]              __var_16 := 33540519;
[L4729]  COND TRUE   DType[this] == DkargoToken
[L4730]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4793]  COND FALSE  !(!(infcid_s644 != -1))
[L4797]              _infcs_ERC165[this][infcid_s644] := true;
[L4730]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4731]  COND FALSE  !(revert)
[L4764]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4765]  COND FALSE  !(revert)
[L5778]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5779]  COND FALSE  !(revert)
[L5782]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4030]              assume msgsender_MSG != null;
[L4031]              Balance[this] := 0;
[L4032]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4046]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4047]  COND FALSE  !(revert)
[L5782]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]  COND FALSE  !(revert)
[L5786]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5676]              assume msgsender_MSG != null;
[L5677]              Balance[this] := 0;
[L5678]              _name_DkargoToken[this] := -1676636045;
[L5679]              _symbol_DkargoToken[this] := -1676636045;
[L5681]  COND TRUE   DType[this] == DkargoToken
[L5682]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4071]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5682]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5683]  COND FALSE  !(revert)
[L5689]              __var_39 := -1804674067;
[L5690]  COND TRUE   DType[this] == DkargoToken
[L5691]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4793]  COND FALSE  !(!(infcid_s644 != -1))
[L4797]              _infcs_ERC165[this][infcid_s644] := true;
[L5691]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5692]  COND FALSE  !(revert)
[L5698]              _name_DkargoToken[this] := name_s1191;
[L5699]              _symbol_DkargoToken[this] := symbol_s1191;
[L5700]  COND TRUE   DType[this] == DkargoToken
[L5701]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4505]              __var_6 := null;
[L4506]  COND FALSE  !(!(node_s455 != null))
[L4510]  COND TRUE   DType[this] == DkargoToken
[L4511]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4447]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4451]              __var_4 := null;
[L4452]              __var_5 := null;
[L4453]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4511]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4512]  COND FALSE  !(revert)
[L4523]  COND FALSE  !(!!__var_7)
[L4527]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4528]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4529]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4535]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L4535]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4536]  COND FALSE  !(revert)
[L4539]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4540]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5701]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5702]  COND FALSE  !(revert)
[L5786]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5787]  COND FALSE  !(revert)
[L2439]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2440]              assume !revert && gas >= 0;
[L8447]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8448]              assume !revert && gas >= 0;
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND FALSE  !(choice == 12)
[L8359]  COND TRUE   choice == 11
[L8360]              gas := gas - 21000;
[L8361]  COND TRUE   gas >= 0
[L8362]              assume amount_s1084 >= 0 && amount_s1084 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8363]              assume msgvalue_MSG == 0;
[L8364]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s1084;
[L3]                 call_approve_ERC20Safe0 := true;
[L3]                 call_approve_ERC20Safe0 := false;
[L3]                 revert := revert_hold;
[L2146]              havoc __exception;
[L2147]              revert := false;
[L2148]  COND TRUE   __exception
[L2149]              __tmp__Balance := Balance;
[L2150]              __tmp__DType := DType;
[L2151]              __tmp__Alloc := Alloc;
[L2152]              __tmp__balance_ADDR := balance_ADDR;
[L2153]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2154]              __tmp__sum := sum;
[L2155]              __tmp__M_int_bool := M_int_bool;
[L2156]              __tmp__sum__infcs0 := sum__infcs0;
[L2157]              __tmp__M_Ref_int := M_Ref_int;
[L2158]              __tmp__sum__balances1 := sum__balances1;
[L2159]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2160]              __tmp__sum__allowances2 := sum__allowances2;
[L2161]              __tmp__Length := Length;
[L2162]              __tmp__now := now;
[L2163]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2164]              __tmp___owner_Ownership := _owner_Ownership;
[L2165]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2166]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2167]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2168]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2169]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2170]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2171]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2172]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2173]              __tmp___supply_ERC20 := _supply_ERC20;
[L2174]              __tmp___balances_ERC20 := _balances_ERC20;
[L2175]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2176]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2177]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2178]  CALL        call __ret_0_ := approve~address~uint256_ERC20Safe__fail(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5397]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5398]  CALL        call __var_30 := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5140]              __ret_0_ := __tmp___allowances_ERC20[this][approver_s857][spender_s857];
[L5398]  RET         call __var_30 := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5399]  COND FALSE  !(revert)
[L5410]  COND FALSE  !(!(amount_s1084 == 0 || __var_30 == 0))
[L5414]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5415]  CALL        call __var_31 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L4926]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4927]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L5154]              __var_18 := null;
[L5155]  COND TRUE   !(approver_s899 != null)
[L5156]              revert := true;
[L4927]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L4928]  COND TRUE   revert
[L5415]  RET         call __var_31 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5416]  COND TRUE   revert
[L2178]  RET         call __ret_0_ := approve~address~uint256_ERC20Safe__fail(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L2179]              assume revert || gas < 0;
[L8364]  RET         call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L8451]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND FALSE  !(choice == 12)
[L8359]  COND TRUE   choice == 11
[L8360]              gas := gas - 21000;
[L8361]  COND TRUE   gas >= 0
[L8362]              assume amount_s1084 >= 0 && amount_s1084 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8363]              assume msgvalue_MSG == 0;
[L8364]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s1084;
[L3]                 call_approve_ERC20Safe0 := true;
[L3]                 call_approve_ERC20Safe0 := false;
[L3]                 revert := revert_hold;
[L2146]              havoc __exception;
[L2147]              revert := false;
[L2148]  COND TRUE   __exception
[L2149]              __tmp__Balance := Balance;
[L2150]              __tmp__DType := DType;
[L2151]              __tmp__Alloc := Alloc;
[L2152]              __tmp__balance_ADDR := balance_ADDR;
[L2153]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2154]              __tmp__sum := sum;
[L2155]              __tmp__M_int_bool := M_int_bool;
[L2156]              __tmp__sum__infcs0 := sum__infcs0;
[L2157]              __tmp__M_Ref_int := M_Ref_int;
[L2158]              __tmp__sum__balances1 := sum__balances1;
[L2159]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2160]              __tmp__sum__allowances2 := sum__allowances2;
[L2161]              __tmp__Length := Length;
[L2162]              __tmp__now := now;
[L2163]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2164]              __tmp___owner_Ownership := _owner_Ownership;
[L2165]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2166]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2167]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2168]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2169]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2170]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2171]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2172]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2173]              __tmp___supply_ERC20 := _supply_ERC20;
[L2174]              __tmp___balances_ERC20 := _balances_ERC20;
[L2175]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2176]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2177]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2178]  CALL        call __ret_0_ := approve~address~uint256_ERC20Safe__fail(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5397]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5398]  CALL        call __var_30 := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5140]              __ret_0_ := __tmp___allowances_ERC20[this][approver_s857][spender_s857];
[L5398]  RET         call __var_30 := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5399]  COND FALSE  !(revert)
[L5410]  COND FALSE  !(!(amount_s1084 == 0 || __var_30 == 0))
[L5414]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5415]  CALL        call __var_31 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L4926]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4927]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L5154]              __var_18 := null;
[L5155]  COND TRUE   !(approver_s899 != null)
[L5156]              revert := true;
[L4927]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L4928]  COND TRUE   revert
[L5415]  RET         call __var_31 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5416]  COND TRUE   revert
[L2178]  RET         call __ret_0_ := approve~address~uint256_ERC20Safe__fail(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L2179]              assume revert || gas < 0;
[L8364]  RET         call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L8451]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:00:02,670 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:00:02,671 INFO  L82        PathProgramCache]: Analyzing trace with hash 1922013801, now seen corresponding path program 1 times
[2020-11-25 14:00:02,671 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:00:02,687 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:00:02,792 INFO  L134       CoverageAnalysis]: Checked inductivity of 65 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 65 trivial. 0 not checked.
[2020-11-25 14:00:02,792 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:00:02,792 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 14:00:02,793 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:00:02,793 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 14:00:02,793 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 14:00:02,793 INFO  L87              Difference]: Start difference. First operand 4972 states and 5538 transitions. cyclomatic complexity: 570 Second operand 7 states.
[2020-11-25 14:00:02,859 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:00:02,859 INFO  L93              Difference]: Finished difference Result 5016 states and 5600 transitions.
[2020-11-25 14:00:02,859 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 14:00:02,859 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5016 states and 5600 transitions.
[2020-11-25 14:00:02,869 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:00:02,877 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5016 states to 4992 states and 5574 transitions.
[2020-11-25 14:00:02,877 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1219
[2020-11-25 14:00:02,878 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1219
[2020-11-25 14:00:02,878 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4992 states and 5574 transitions.
[2020-11-25 14:00:02,881 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:00:02,881 INFO  L728         BuchiCegarLoop]: Abstraction has 4992 states and 5574 transitions.
[2020-11-25 14:00:02,884 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4992 states and 5574 transitions.
[2020-11-25 14:00:02,911 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4992 to 4992.
[2020-11-25 14:00:02,911 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4992 states.
[2020-11-25 14:00:02,916 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4992 states to 4992 states and 5574 transitions.
[2020-11-25 14:00:02,917 INFO  L751         BuchiCegarLoop]: Abstraction has 4992 states and 5574 transitions.
[2020-11-25 14:00:02,917 INFO  L631         BuchiCegarLoop]: Abstraction has 4992 states and 5574 transitions.
[2020-11-25 14:00:02,917 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 14:00:02,917 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4992 states and 5574 transitions.
[2020-11-25 14:00:02,922 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 14:00:02,922 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:00:02,922 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:00:02,923 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:00:02,923 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_approve_ERC20Safe0 := false;
[L3]                 call_approve_ERC20Safe0 := false;
[L3]     CALL        call main();
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8441]              assume null == 0;
[L8442]  CALL        call this := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L8442]  RET         call this := FreshRefGenerator__success();
[L8443]              assume now >= 0;
[L8444]              assume DType[this] == DkargoToken;
[L8445]              assume msgvalue_MSG == 0;
[L8446]              gas := gas - 53000;
[L8447]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2404]              havoc __exception;
[L2405]              revert := false;
[L2406]  COND FALSE  !(__exception)
[L2439]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5754]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4087]              assume msgsender_MSG != null;
[L4088]              Balance[this] := 0;
[L4089]              _owner_Ownership[this] := null;
[L4091]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4092]              _owner_Ownership[this] := msgsender_MSG;
[L4105]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4106]  COND FALSE  !(revert)
[L5754]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]  COND FALSE  !(revert)
[L5758]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5758]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5759]  COND FALSE  !(revert)
[L5762]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4914]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L4914]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]  COND FALSE  !(revert)
[L4918]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4869]              assume msgsender_MSG != null;
[L4870]              Balance[this] := 0;
[L4871]              _supply_ERC20[this] := 0;
[L4872]              _balances_ERC20[this] := zeroRefintArr();
[L4873]              sum__balances1[this] := 0;
[L4874]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4875]              sum__allowances2[this] := 0;
[L4877]              pebs_s747 := supply_s747;
[L4878]  COND TRUE   DType[this] == DkargoToken
[L4879]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5283]              __var_24 := null;
[L5284]  COND FALSE  !(!(account_s999 != null))
[L5288]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L5288]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5289]  COND FALSE  !(revert)
[L5292]              _supply_ERC20[this] := __var_25;
[L5293]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L5293]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5294]  COND FALSE  !(revert)
[L5297]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5298]              _balances_ERC20[this][account_s999] := __var_26;
[L5299]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5300]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4879]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4880]  COND FALSE  !(revert)
[L4918]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4919]  COND FALSE  !(revert)
[L5762]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5763]  COND FALSE  !(revert)
[L5766]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5382]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5383]  COND FALSE  !(revert)
[L5386]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]              assume msgsender_MSG != null;
[L5364]              Balance[this] := 0;
[L5386]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5387]  COND FALSE  !(revert)
[L5766]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]  COND FALSE  !(revert)
[L5770]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4341]              assume msgsender_MSG != null;
[L4342]              Balance[this] := 0;
[L4344]  CALL        call __var_3 := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L4344]  RET         call __var_3 := FreshRefGenerator__success();
[L4345]  COND FALSE  !(revert)
[L4348]              _slist_AddressChain[this] := __var_3;
[L4362]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4363]  COND FALSE  !(revert)
[L5770]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5771]  COND FALSE  !(revert)
[L5774]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4675]              assume msgsender_MSG != null;
[L4676]              Balance[this] := 0;
[L4690]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4691]  COND FALSE  !(revert)
[L5774]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5775]  COND FALSE  !(revert)
[L5778]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4675]              assume msgsender_MSG != null;
[L4676]              Balance[this] := 0;
[L4690]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4691]  COND FALSE  !(revert)
[L4760]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4761]  COND FALSE  !(revert)
[L4764]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4724]              assume msgsender_MSG != null;
[L4725]              Balance[this] := 0;
[L4726]              _infcs_ERC165[this] := zerointboolArr();
[L4728]              __var_16 := 33540519;
[L4729]  COND TRUE   DType[this] == DkargoToken
[L4730]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4793]  COND FALSE  !(!(infcid_s644 != -1))
[L4797]              _infcs_ERC165[this][infcid_s644] := true;
[L4730]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4731]  COND FALSE  !(revert)
[L4764]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4765]  COND FALSE  !(revert)
[L5778]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5779]  COND FALSE  !(revert)
[L5782]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4030]              assume msgsender_MSG != null;
[L4031]              Balance[this] := 0;
[L4032]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4046]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4047]  COND FALSE  !(revert)
[L5782]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]  COND FALSE  !(revert)
[L5786]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5676]              assume msgsender_MSG != null;
[L5677]              Balance[this] := 0;
[L5678]              _name_DkargoToken[this] := -1676636045;
[L5679]              _symbol_DkargoToken[this] := -1676636045;
[L5681]  COND TRUE   DType[this] == DkargoToken
[L5682]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4071]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5682]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5683]  COND FALSE  !(revert)
[L5689]              __var_39 := -1804674067;
[L5690]  COND TRUE   DType[this] == DkargoToken
[L5691]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4793]  COND FALSE  !(!(infcid_s644 != -1))
[L4797]              _infcs_ERC165[this][infcid_s644] := true;
[L5691]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5692]  COND FALSE  !(revert)
[L5698]              _name_DkargoToken[this] := name_s1191;
[L5699]              _symbol_DkargoToken[this] := symbol_s1191;
[L5700]  COND TRUE   DType[this] == DkargoToken
[L5701]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4505]              __var_6 := null;
[L4506]  COND FALSE  !(!(node_s455 != null))
[L4510]  COND TRUE   DType[this] == DkargoToken
[L4511]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4447]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4451]              __var_4 := null;
[L4452]              __var_5 := null;
[L4453]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4511]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4512]  COND FALSE  !(revert)
[L4523]  COND FALSE  !(!!__var_7)
[L4527]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4528]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4529]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4535]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L4535]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4536]  COND FALSE  !(revert)
[L4539]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4540]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5701]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5702]  COND FALSE  !(revert)
[L5786]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5787]  COND FALSE  !(revert)
[L2439]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2440]              assume !revert && gas >= 0;
[L8447]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8448]              assume !revert && gas >= 0;
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND FALSE  !(choice == 12)
[L8359]  COND TRUE   choice == 11
[L8360]              gas := gas - 21000;
[L8361]  COND TRUE   gas >= 0
[L8362]              assume amount_s1084 >= 0 && amount_s1084 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8363]              assume msgvalue_MSG == 0;
[L8364]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s1084;
[L3]                 call_approve_ERC20Safe0 := true;
[L3]                 call_approve_ERC20Safe0 := false;
[L3]                 revert := revert_hold;
[L2146]              havoc __exception;
[L2147]              revert := false;
[L2148]  COND TRUE   __exception
[L2149]              __tmp__Balance := Balance;
[L2150]              __tmp__DType := DType;
[L2151]              __tmp__Alloc := Alloc;
[L2152]              __tmp__balance_ADDR := balance_ADDR;
[L2153]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2154]              __tmp__sum := sum;
[L2155]              __tmp__M_int_bool := M_int_bool;
[L2156]              __tmp__sum__infcs0 := sum__infcs0;
[L2157]              __tmp__M_Ref_int := M_Ref_int;
[L2158]              __tmp__sum__balances1 := sum__balances1;
[L2159]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2160]              __tmp__sum__allowances2 := sum__allowances2;
[L2161]              __tmp__Length := Length;
[L2162]              __tmp__now := now;
[L2163]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2164]              __tmp___owner_Ownership := _owner_Ownership;
[L2165]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2166]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2167]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2168]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2169]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2170]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2171]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2172]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2173]              __tmp___supply_ERC20 := _supply_ERC20;
[L2174]              __tmp___balances_ERC20 := _balances_ERC20;
[L2175]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2176]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2177]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2178]  CALL        call __ret_0_ := approve~address~uint256_ERC20Safe__fail(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5397]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5398]  CALL        call __var_30 := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5140]              __ret_0_ := __tmp___allowances_ERC20[this][approver_s857][spender_s857];
[L5398]  RET         call __var_30 := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5399]  COND FALSE  !(revert)
[L5410]  COND FALSE  !(!(amount_s1084 == 0 || __var_30 == 0))
[L5414]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5415]  CALL        call __var_31 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L4926]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4927]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L5154]              __var_18 := null;
[L5155]  COND FALSE  !(!(approver_s899 != null))
[L5159]              __var_19 := null;
[L5160]  COND TRUE   !(spender_s899 != null)
[L5161]              revert := true;
[L4927]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L4928]  COND TRUE   revert
[L5415]  RET         call __var_31 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5416]  COND TRUE   revert
[L2178]  RET         call __ret_0_ := approve~address~uint256_ERC20Safe__fail(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L2179]              assume revert || gas < 0;
[L8364]  RET         call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L8451]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND FALSE  !(choice == 12)
[L8359]  COND TRUE   choice == 11
[L8360]              gas := gas - 21000;
[L8361]  COND TRUE   gas >= 0
[L8362]              assume amount_s1084 >= 0 && amount_s1084 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8363]              assume msgvalue_MSG == 0;
[L8364]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s1084;
[L3]                 call_approve_ERC20Safe0 := true;
[L3]                 call_approve_ERC20Safe0 := false;
[L3]                 revert := revert_hold;
[L2146]              havoc __exception;
[L2147]              revert := false;
[L2148]  COND TRUE   __exception
[L2149]              __tmp__Balance := Balance;
[L2150]              __tmp__DType := DType;
[L2151]              __tmp__Alloc := Alloc;
[L2152]              __tmp__balance_ADDR := balance_ADDR;
[L2153]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2154]              __tmp__sum := sum;
[L2155]              __tmp__M_int_bool := M_int_bool;
[L2156]              __tmp__sum__infcs0 := sum__infcs0;
[L2157]              __tmp__M_Ref_int := M_Ref_int;
[L2158]              __tmp__sum__balances1 := sum__balances1;
[L2159]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2160]              __tmp__sum__allowances2 := sum__allowances2;
[L2161]              __tmp__Length := Length;
[L2162]              __tmp__now := now;
[L2163]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2164]              __tmp___owner_Ownership := _owner_Ownership;
[L2165]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2166]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2167]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2168]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2169]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2170]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2171]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2172]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2173]              __tmp___supply_ERC20 := _supply_ERC20;
[L2174]              __tmp___balances_ERC20 := _balances_ERC20;
[L2175]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2176]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2177]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2178]  CALL        call __ret_0_ := approve~address~uint256_ERC20Safe__fail(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5397]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5398]  CALL        call __var_30 := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5140]              __ret_0_ := __tmp___allowances_ERC20[this][approver_s857][spender_s857];
[L5398]  RET         call __var_30 := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5399]  COND FALSE  !(revert)
[L5410]  COND FALSE  !(!(amount_s1084 == 0 || __var_30 == 0))
[L5414]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5415]  CALL        call __var_31 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L4926]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4927]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L5154]              __var_18 := null;
[L5155]  COND FALSE  !(!(approver_s899 != null))
[L5159]              __var_19 := null;
[L5160]  COND TRUE   !(spender_s899 != null)
[L5161]              revert := true;
[L4927]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L4928]  COND TRUE   revert
[L5415]  RET         call __var_31 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5416]  COND TRUE   revert
[L2178]  RET         call __ret_0_ := approve~address~uint256_ERC20Safe__fail(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L2179]              assume revert || gas < 0;
[L8364]  RET         call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L8451]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:00:02,928 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:00:02,928 INFO  L82        PathProgramCache]: Analyzing trace with hash -1119993808, now seen corresponding path program 1 times
[2020-11-25 14:00:02,928 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:00:02,943 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:00:02,960 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:00:03,053 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:00:03,053 INFO  L82        PathProgramCache]: Analyzing trace with hash -648882692, now seen corresponding path program 1 times
[2020-11-25 14:00:03,054 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:00:03,058 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:00:03,064 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:00:03,078 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:00:03,078 INFO  L82        PathProgramCache]: Analyzing trace with hash -1702430037, now seen corresponding path program 1 times
[2020-11-25 14:00:03,079 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:00:03,099 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:00:03,127 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #5: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
[2020-11-25 14:00:03,481 WARN  L188               SmtUtils]: Spent 125.00 ms on a formula simplification. DAG size of input: 171 DAG size of output: 167
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1759 to 3517
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 3137 to 6271
Garbage collection #8: 6271 nodes / 0 free / 0.002s / 0.004s total
Resizing node table from 6271 to 12541
Garbage collection #9: 12541 nodes / 0 free / 0.003s / 0.007s total
Resizing node table from 12541 to 25073
[2020-11-25 14:00:03,689 WARN  L188               SmtUtils]: Spent 166.00 ms on a formula simplification. DAG size of input: 140 DAG size of output: 129
[2020-11-25 14:00:03,884 WARN  L188               SmtUtils]: Spent 193.00 ms on a formula simplification that was a NOOP. DAG size: 319
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 7933 to 15859
[2020-11-25 14:00:05,091 WARN  L188               SmtUtils]: Spent 1.18 s on a formula simplification. DAG size of input: 260 DAG size of output: 259
[2020-11-25 14:00:06,633 WARN  L188               SmtUtils]: Spent 1.54 s on a formula simplification. DAG size of input: 354 DAG size of output: 314
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 6661 to 13313
Garbage collection #8: 13313 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 13313 to 26597
Garbage collection #9: 26597 nodes / 0 free / 0.0s / 0.003s total
Resizing node table from 26597 to 53189
Garbage collection #10: 53189 nodes / 0 free / 0.001s / 0.004s total
Resizing node table from 53189 to 103183
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #7: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #8: 8713 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8713 to 17419
Garbage collection #9: 17419 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17419 to 34819
[2020-11-25 14:00:07,069 WARN  L188               SmtUtils]: Spent 391.00 ms on a formula simplification. DAG size of input: 196 DAG size of output: 185
[2020-11-25 14:00:07,531 WARN  L188               SmtUtils]: Spent 460.00 ms on a formula simplification that was a NOOP. DAG size: 408
Garbage collection #1: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #2: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #3: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #4: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #5: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #6: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #7: 9973 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9973 to 19937
[2020-11-25 14:00:08,681 WARN  L188               SmtUtils]: Spent 1.13 s on a formula simplification. DAG size of input: 332 DAG size of output: 331
[2020-11-25 14:00:09,264 WARN  L188               SmtUtils]: Spent 580.00 ms on a formula simplification that was a NOOP. DAG size: 331
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
Garbage collection #8: 15859 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 15859 to 31699
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 2017 to 4027
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #7: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
[2020-11-25 14:00:09,473 WARN  L188               SmtUtils]: Spent 181.00 ms on a formula simplification. DAG size of input: 180 DAG size of output: 180
[2020-11-25 14:00:09,483 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
[2020-11-25 14:00:10,525 WARN  L188               SmtUtils]: Spent 334.00 ms on a formula simplification. DAG size of input: 317 DAG size of output: 292
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-11-25 14:00:10,808 WARN  L188               SmtUtils]: Spent 114.00 ms on a formula simplification. DAG size of input: 185 DAG size of output: 184
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
[2020-11-25 14:00:11,053 WARN  L188               SmtUtils]: Spent 212.00 ms on a formula simplification that was a NOOP. DAG size: 366
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
[2020-11-25 14:00:11,222 WARN  L188               SmtUtils]: Spent 164.00 ms on a formula simplification that was a NOOP. DAG size: 328
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #5: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #6: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #7: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #8: 6271 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 6271 to 12541
[2020-11-25 14:00:11,531 WARN  L188               SmtUtils]: Spent 144.00 ms on a formula simplification. DAG size of input: 140 DAG size of output: 129
[2020-11-25 14:00:11,744 WARN  L188               SmtUtils]: Spent 211.00 ms on a formula simplification that was a NOOP. DAG size: 319
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #7: 7933 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7933 to 15859
[2020-11-25 14:00:12,829 WARN  L188               SmtUtils]: Spent 1.07 s on a formula simplification. DAG size of input: 260 DAG size of output: 259
[2020-11-25 14:00:14,257 WARN  L188               SmtUtils]: Spent 1.42 s on a formula simplification. DAG size of input: 353 DAG size of output: 314
Garbage collection #1: 109 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 109 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #8: 13313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13313 to 26597
Garbage collection #9: 26597 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 26597 to 53189
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #7: 4357 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4357 to 8713
Garbage collection #8: 8713 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8713 to 17419
Garbage collection #9: 17419 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17419 to 34819
[2020-11-25 14:00:14,685 WARN  L188               SmtUtils]: Spent 365.00 ms on a formula simplification. DAG size of input: 196 DAG size of output: 185
[2020-11-25 14:00:15,039 WARN  L188               SmtUtils]: Spent 352.00 ms on a formula simplification that was a NOOP. DAG size: 408
Garbage collection #1: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #2: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #3: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #4: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #5: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #6: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #7: 9973 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9973 to 19937
Garbage collection #8: 19937 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 19937 to 39869
[2020-11-25 14:00:16,167 WARN  L188               SmtUtils]: Spent 1.11 s on a formula simplification. DAG size of input: 332 DAG size of output: 331
[2020-11-25 14:00:17,696 WARN  L188               SmtUtils]: Spent 1.53 s on a formula simplification. DAG size of input: 621 DAG size of output: 605
Garbage collection #1: 239 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 239 to 467
Garbage collection #2: 467 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 467 to 929
Garbage collection #3: 929 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 929 to 1847
Garbage collection #4: 1847 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1847 to 3691
Garbage collection #5: 3691 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3691 to 7369
Garbage collection #6: 7369 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7369 to 14737
Garbage collection #7: 14737 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 14737 to 29473
Garbage collection #8: 29473 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 29473 to 58943
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
[2020-11-25 14:00:18,321 WARN  L188               SmtUtils]: Spent 592.00 ms on a formula simplification. DAG size of input: 297 DAG size of output: 284
[2020-11-25 14:00:18,753 WARN  L188               SmtUtils]: Spent 401.00 ms on a formula simplification that was a NOOP. DAG size: 429
Garbage collection #1: 151 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 151 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #8: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
Garbage collection #9: 24137 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 24137 to 48271
[2020-11-25 14:00:19,495 WARN  L188               SmtUtils]: Spent 688.00 ms on a formula simplification. DAG size of input: 299 DAG size of output: 284
[2020-11-25 14:00:20,370 WARN  L188               SmtUtils]: Spent 873.00 ms on a formula simplification. DAG size of input: 431 DAG size of output: 430
Garbage collection #1: 151 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 151 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #1: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #2: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #3: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #4: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #5: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #6: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #7: 9973 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9973 to 19937
Garbage collection #8: 19937 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19937 to 39869
Garbage collection #9: 39869 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 39869 to 79699
Garbage collection #10: 79699 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 79699 to 129671
[2020-11-25 14:00:22,359 WARN  L188               SmtUtils]: Spent 1.96 s on a formula simplification. DAG size of input: 438 DAG size of output: 425
[2020-11-25 14:00:22,378 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:00:22,401 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:00:22,412 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:00:22 BasicIcfg
[2020-11-25 14:00:22,412 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 14:00:22,413 INFO  L168              Benchmark]: Toolchain (without parser) took 38574.10 ms. Allocated memory was 1.0 GB in the beginning and 3.3 GB in the end (delta: 2.2 GB). Free memory was 929.8 MB in the beginning and 2.7 GB in the end (delta: -1.8 GB). Peak memory consumption was 2.3 GB. Max. memory is 15.3 GB.
[2020-11-25 14:00:22,413 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 14:00:22,413 INFO  L168              Benchmark]: Boogie Preprocessor took 123.21 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 14:00:22,413 INFO  L168              Benchmark]: UtopiaSpecLang took 74.64 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 14:00:22,414 INFO  L168              Benchmark]: Boogie Printer took 24.63 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 14:00:22,414 INFO  L168              Benchmark]: RCFGBuilder took 1204.73 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 49.8 MB). Free memory was 897.6 MB in the beginning and 922.5 MB in the end (delta: -24.9 MB). Peak memory consumption was 185.3 MB. Max. memory is 15.3 GB.
[2020-11-25 14:00:22,414 INFO  L168              Benchmark]: UtopiaLTL2Aut took 31.55 ms. Allocated memory is still 1.1 GB. Free memory was 922.5 MB in the beginning and 912.7 MB in the end (delta: 9.7 MB). Peak memory consumption was 9.7 MB. Max. memory is 15.3 GB.
[2020-11-25 14:00:22,415 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2284.26 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 203.9 MB). Free memory was 912.7 MB in the beginning and 1.0 GB in the end (delta: -122.0 MB). Peak memory consumption was 490.4 MB. Max. memory is 15.3 GB.
[2020-11-25 14:00:22,415 INFO  L168              Benchmark]: BlockEncodingV2 took 196.22 ms. Allocated memory is still 1.3 GB. Free memory was 1.0 GB in the beginning and 913.5 MB in the end (delta: 121.2 MB). Peak memory consumption was 121.2 MB. Max. memory is 15.3 GB.
[2020-11-25 14:00:22,415 INFO  L168              Benchmark]: BuchiAutomizer took 34632.00 ms. Allocated memory was 1.3 GB in the beginning and 3.3 GB in the end (delta: 2.0 GB). Free memory was 913.5 MB in the beginning and 2.7 GB in the end (delta: -1.8 GB). Peak memory consumption was 2.0 GB. Max. memory is 15.3 GB.
[2020-11-25 14:00:22,418 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    7638 locations, 13675 edges
  - StatisticsResult: Encoded RCFG
    7446 locations, 13134 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 123.21 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 913.7 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 74.64 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 24.63 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1204.73 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 49.8 MB). Free memory was 897.6 MB in the beginning and 922.5 MB in the end (delta: -24.9 MB). Peak memory consumption was 185.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 31.55 ms. Allocated memory is still 1.1 GB. Free memory was 922.5 MB in the beginning and 912.7 MB in the end (delta: 9.7 MB). Peak memory consumption was 9.7 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2284.26 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 203.9 MB). Free memory was 912.7 MB in the beginning and 1.0 GB in the end (delta: -122.0 MB). Peak memory consumption was 490.4 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 196.22 ms. Allocated memory is still 1.3 GB. Free memory was 1.0 GB in the beginning and 913.5 MB in the end (delta: 121.2 MB). Peak memory consumption was 121.2 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 34632.00 ms. Allocated memory was 1.3 GB in the beginning and 3.3 GB in the end (delta: 2.0 GB). Free memory was 913.5 MB in the beginning and 2.7 GB in the end (delta: -1.8 GB). Peak memory consumption was 2.0 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3096 locations, 4214 edges
  - StatisticsResult: BuchiProgram size
    7638 locations, 13675 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 10 terminating modules (10 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.10 modules have a trivial ranking function, the largest among these consists of 17 locations. The remainder module has 4992 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 34.5s and 11 iterations.  TraceHistogramMax:3. Analysis of lassos took 20.9s. Construction of modules took 8.7s. BÃ¼chi inclusion checks took 3.4s. Highest rank in rank-based complementation 0. Minimization of det autom 10. Minimization of nondet autom 0. Automata minimization 0.5s AutomataMinimizationTime, 10 MinimizatonAttempts, 2379 StatesRemovedByMinimization, 5 NontrivialMinimizations. Non-live state removal took 0.4s Buchi closure took 0.0s. Biggest automaton had 8725 states and ocurred in iteration 8.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 59730 SDtfs, 37431 SDslu, 143633 SDs, 0 SdLazy, 136176 SolverSat, 7473 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 8.7s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU10 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(978340583) = (new DkargoToken)({from : 978340567, name : 978340580, symbol : 978340571, supply : 0});
[L2404]              havoc __exception;
[L2405]              revert := false;
[L2406]  COND FALSE  !(__exception)
[L2439]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5754]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4087]              assume msgsender_MSG != null;
[L4088]              Balance[this] := 0;
[L4089]              _owner_Ownership[this] := null;
[L4091]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4092]              _owner_Ownership[this] := msgsender_MSG;
[L4105]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4106]  COND FALSE  !(revert)
[L5754]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]  COND FALSE  !(revert)
[L5758]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5758]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5759]  COND FALSE  !(revert)
[L5762]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4914]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L4914]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]  COND FALSE  !(revert)
[L4918]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4869]              assume msgsender_MSG != null;
[L4870]              Balance[this] := 0;
[L4871]              _supply_ERC20[this] := 0;
[L4872]              _balances_ERC20[this] := zeroRefintArr();
[L4873]              sum__balances1[this] := 0;
[L4874]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4875]              sum__allowances2[this] := 0;
[L4877]              pebs_s747 := supply_s747;
[L4878]  COND TRUE   DType[this] == DkargoToken
[L4879]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5283]              __var_24 := null;
[L5284]  COND FALSE  !(!(account_s999 != null))
[L5288]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L5288]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5289]  COND FALSE  !(revert)
[L5292]              _supply_ERC20[this] := __var_25;
[L5293]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L5293]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5294]  COND FALSE  !(revert)
[L5297]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5298]              _balances_ERC20[this][account_s999] := __var_26;
[L5299]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5300]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4879]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4880]  COND FALSE  !(revert)
[L4918]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4919]  COND FALSE  !(revert)
[L5762]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5763]  COND FALSE  !(revert)
[L5766]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5382]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5383]  COND FALSE  !(revert)
[L5386]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]              assume msgsender_MSG != null;
[L5364]              Balance[this] := 0;
[L5386]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5387]  COND FALSE  !(revert)
[L5766]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]  COND FALSE  !(revert)
[L5770]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4341]              assume msgsender_MSG != null;
[L4342]              Balance[this] := 0;
[L4344]  CALL        call __var_3 := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L4344]  RET         call __var_3 := FreshRefGenerator__success();
[L4345]  COND FALSE  !(revert)
[L4348]              _slist_AddressChain[this] := __var_3;
[L4362]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4363]  COND FALSE  !(revert)
[L5770]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5771]  COND FALSE  !(revert)
[L5774]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4675]              assume msgsender_MSG != null;
[L4676]              Balance[this] := 0;
[L4690]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4691]  COND FALSE  !(revert)
[L5774]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5775]  COND FALSE  !(revert)
[L5778]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4675]              assume msgsender_MSG != null;
[L4676]              Balance[this] := 0;
[L4690]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4691]  COND FALSE  !(revert)
[L4760]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4761]  COND FALSE  !(revert)
[L4764]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4724]              assume msgsender_MSG != null;
[L4725]              Balance[this] := 0;
[L4726]              _infcs_ERC165[this] := zerointboolArr();
[L4728]              __var_16 := 33540519;
[L4729]  COND TRUE   DType[this] == DkargoToken
[L4730]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4793]  COND FALSE  !(!(infcid_s644 != -1))
[L4797]              _infcs_ERC165[this][infcid_s644] := true;
[L4730]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4731]  COND FALSE  !(revert)
[L4764]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4765]  COND FALSE  !(revert)
[L5778]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5779]  COND FALSE  !(revert)
[L5782]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4030]              assume msgsender_MSG != null;
[L4031]              Balance[this] := 0;
[L4032]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4046]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4047]  COND FALSE  !(revert)
[L5782]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]  COND FALSE  !(revert)
[L5786]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5676]              assume msgsender_MSG != null;
[L5677]              Balance[this] := 0;
[L5678]              _name_DkargoToken[this] := -1676636045;
[L5679]              _symbol_DkargoToken[this] := -1676636045;
[L5681]  COND TRUE   DType[this] == DkargoToken
[L5682]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4071]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5682]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5683]  COND FALSE  !(revert)
[L5689]              __var_39 := -1804674067;
[L5690]  COND TRUE   DType[this] == DkargoToken
[L5691]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4793]  COND FALSE  !(!(infcid_s644 != -1))
[L4797]              _infcs_ERC165[this][infcid_s644] := true;
[L5691]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5692]  COND FALSE  !(revert)
[L5698]              _name_DkargoToken[this] := name_s1191;
[L5699]              _symbol_DkargoToken[this] := symbol_s1191;
[L5700]  COND TRUE   DType[this] == DkargoToken
[L5701]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4505]              __var_6 := null;
[L4506]  COND FALSE  !(!(node_s455 != null))
[L4510]  COND TRUE   DType[this] == DkargoToken
[L4511]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4447]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4451]              __var_4 := null;
[L4452]              __var_5 := null;
[L4453]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4511]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4512]  COND FALSE  !(revert)
[L4523]  COND FALSE  !(!!__var_7)
[L4527]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4528]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4529]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4535]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L4535]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4536]  COND FALSE  !(revert)
[L4539]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4540]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5701]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5702]  COND FALSE  !(revert)
[L5786]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5787]  COND FALSE  !(revert)
[L2439]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2440]              assume !revert && gas >= 0;
[L8447]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
ERC20Safe(978340583).approve~address~uint256.gas(3979002)({from : 978340574, spender : 0, amount : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s1084;
[L3]                 call_approve_ERC20Safe0 := true;
[L3]                 call_approve_ERC20Safe0 := false;
[L3]                 revert := revert_hold;
[L2146]              havoc __exception;
[L2147]              revert := false;
[L2148]  COND TRUE   __exception
[L2149]              __tmp__Balance := Balance;
[L2150]              __tmp__DType := DType;
[L2151]              __tmp__Alloc := Alloc;
[L2152]              __tmp__balance_ADDR := balance_ADDR;
[L2153]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2154]              __tmp__sum := sum;
[L2155]              __tmp__M_int_bool := M_int_bool;
[L2156]              __tmp__sum__infcs0 := sum__infcs0;
[L2157]              __tmp__M_Ref_int := M_Ref_int;
[L2158]              __tmp__sum__balances1 := sum__balances1;
[L2159]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2160]              __tmp__sum__allowances2 := sum__allowances2;
[L2161]              __tmp__Length := Length;
[L2162]              __tmp__now := now;
[L2163]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2164]              __tmp___owner_Ownership := _owner_Ownership;
[L2165]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2166]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2167]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2168]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2169]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2170]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2171]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2172]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2173]              __tmp___supply_ERC20 := _supply_ERC20;
[L2174]              __tmp___balances_ERC20 := _balances_ERC20;
[L2175]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2176]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2177]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2178]  CALL        call __ret_0_ := approve~address~uint256_ERC20Safe__fail(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5397]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5398]  CALL        call __var_30 := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5140]              __ret_0_ := __tmp___allowances_ERC20[this][approver_s857][spender_s857];
[L5398]  RET         call __var_30 := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5399]  COND FALSE  !(revert)
[L5410]  COND FALSE  !(!(amount_s1084 == 0 || __var_30 == 0))
[L5414]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5415]  CALL        call __var_31 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L4926]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4927]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L5154]              __var_18 := null;
[L5155]  COND FALSE  !(!(approver_s899 != null))
[L5159]              __var_19 := null;
[L5160]  COND TRUE   !(spender_s899 != null)
[L5161]              revert := true;
[L4927]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L4928]  COND TRUE   revert
[L5415]  RET         call __var_31 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5416]  COND TRUE   revert
[L2178]  RET         call __ret_0_ := approve~address~uint256_ERC20Safe__fail(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L2179]              assume revert || gas < 0;
[L8364]  RET         call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);

Loop:
ERC20Safe(978340583).approve~address~uint256.gas(3979001)({from : 978340575, spender : 0, amount : 0});
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume p1 != msgsender_MSG || p2 != spender_s1084;
[L3]                 call_approve_ERC20Safe0 := true;
[L3]                 call_approve_ERC20Safe0 := false;
[L3]                 revert := revert_hold;
[L2146]              havoc __exception;
[L2147]              revert := false;
[L2148]  COND TRUE   __exception
[L2149]              __tmp__Balance := Balance;
[L2150]              __tmp__DType := DType;
[L2151]              __tmp__Alloc := Alloc;
[L2152]              __tmp__balance_ADDR := balance_ADDR;
[L2153]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2154]              __tmp__sum := sum;
[L2155]              __tmp__M_int_bool := M_int_bool;
[L2156]              __tmp__sum__infcs0 := sum__infcs0;
[L2157]              __tmp__M_Ref_int := M_Ref_int;
[L2158]              __tmp__sum__balances1 := sum__balances1;
[L2159]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2160]              __tmp__sum__allowances2 := sum__allowances2;
[L2161]              __tmp__Length := Length;
[L2162]              __tmp__now := now;
[L2163]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2164]              __tmp___owner_Ownership := _owner_Ownership;
[L2165]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2166]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2167]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2168]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2169]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2170]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2171]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2172]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2173]              __tmp___supply_ERC20 := _supply_ERC20;
[L2174]              __tmp___balances_ERC20 := _balances_ERC20;
[L2175]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2176]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2177]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2178]  CALL        call __ret_0_ := approve~address~uint256_ERC20Safe__fail(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5397]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5398]  CALL        call __var_30 := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5140]              __ret_0_ := __tmp___allowances_ERC20[this][approver_s857][spender_s857];
[L5398]  RET         call __var_30 := allowance~address~address_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5399]  COND FALSE  !(revert)
[L5410]  COND FALSE  !(!(amount_s1084 == 0 || __var_30 == 0))
[L5414]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5415]  CALL        call __var_31 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L4926]  COND TRUE   __tmp__DType[this] == DkargoToken
[L4927]  CALL        call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L5154]              __var_18 := null;
[L5155]  COND FALSE  !(!(approver_s899 != null))
[L5159]              __var_19 := null;
[L5160]  COND TRUE   !(spender_s899 != null)
[L5161]              revert := true;
[L4927]  RET         call _approve~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L4928]  COND TRUE   revert
[L5415]  RET         call __var_31 := approve~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5416]  COND TRUE   revert
[L2178]  RET         call __ret_0_ := approve~address~uint256_ERC20Safe__fail(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L2179]              assume revert || gas < 0;
[L8364]  RET         call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
