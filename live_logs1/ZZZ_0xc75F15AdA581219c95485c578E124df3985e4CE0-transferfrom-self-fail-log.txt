This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 11:42:45,662 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 11:42:45,663 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 11:42:45,674 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 11:42:45,674 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 11:42:45,675 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 11:42:45,676 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 11:42:45,677 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 11:42:45,678 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 11:42:45,679 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 11:42:45,680 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 11:42:45,680 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 11:42:45,681 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 11:42:45,681 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 11:42:45,682 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 11:42:45,683 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 11:42:45,683 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 11:42:45,684 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 11:42:45,686 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 11:42:45,687 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 11:42:45,687 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 11:42:45,688 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 11:42:45,690 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 11:42:45,690 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 11:42:45,690 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 11:42:45,691 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 11:42:45,691 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 11:42:45,691 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 11:42:45,692 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 11:42:45,692 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 11:42:45,692 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 11:42:45,693 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 11:42:45,693 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 11:42:45,694 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 11:42:45,694 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 11:42:45,695 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 11:42:45,695 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 11:42:45,695 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 11:42:45,696 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 11:42:45,696 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 11:42:45,697 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 11:42:45,697 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 11:42:45,705 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 11:42:45,705 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 11:42:45,706 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 11:42:45,706 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 11:42:45,706 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 11:42:45,706 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 11:42:45,706 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 11:42:45,706 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 11:42:45,706 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 11:42:45,707 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 11:42:45,707 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 11:42:45,707 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 11:42:45,707 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 11:42:45,707 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 11:42:45,707 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 11:42:45,707 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 11:42:45,707 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 11:42:45,708 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 11:42:45,708 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 11:42:45,708 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 11:42:45,708 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 11:42:45,708 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 11:42:45,708 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 11:42:45,708 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 11:42:45,708 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 11:42:45,709 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 11:42:45,729 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 11:42:45,739 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 11:42:45,741 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 11:42:45,742 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 11:42:45,743 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 11:42:45,743 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transferfrom-self-fail.bpl
[2020-11-25 11:42:45,744 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transferfrom-self-fail.bpl'
[2020-11-25 11:42:45,832 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 11:42:45,834 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 11:42:45,834 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 11:42:45,834 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 11:42:45,834 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 11:42:45,850 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:42:45" (1/1) ...
[2020-11-25 11:42:45,852 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:42:45" (1/1) ...
[2020-11-25 11:42:45,884 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:42:45" (1/1) ...
[2020-11-25 11:42:45,885 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:42:45" (1/1) ...
[2020-11-25 11:42:45,906 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:42:45" (1/1) ...
[2020-11-25 11:42:45,917 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:42:45" (1/1) ...
[2020-11-25 11:42:45,926 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:42:45" (1/1) ...
[2020-11-25 11:42:45,937 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 11:42:45,937 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 11:42:45,938 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 11:42:45,940 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 11:42:45,943 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:42:45" (1/1) ...
[2020-11-25 11:42:45,961 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 11:42:45,966 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 11:42:45,973 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 11:42:45,981 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( sender_s281==recipient_s281 && ( amount_s281>_balances_ERC20[this][sender_s281] || amount_s281>_allowances_ERC20[this][sender_s281][msg.sender] ) ) && amount_s281>=0 ) && amount_s281<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s281]>=0 ) && _balances_ERC20[this][recipient_s281]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][sender_s281]>=0 ) && _balances_ERC20[this][sender_s281]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowances_ERC20[this][sender_s281][msg.sender]>=0 ) && _allowances_ERC20[this][sender_s281][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[sender_s281,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IdentifierExpression[recipient_s281,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[amount_s281,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s281,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]],BinaryExpression[COMPGT,IdentifierExpression[amount_s281,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s281,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s281,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s281,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s281,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s281,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s281,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s281,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s281,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[sender_s281,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 11:42:45,987 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20.transferFrom)))
[2020-11-25 11:42:45,987 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_ERC200) ==> ( <>AP(fail_transferFrom_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 11:42:45,997 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:42:45 PropertyContainer
[2020-11-25 11:42:45,997 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 11:42:45,997 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 11:42:45,997 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 11:42:45,998 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 11:42:45,998 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:42:45" (1/2) ...
[2020-11-25 11:42:45,999 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 11:42:45,999 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 11:42:46,014 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:42:45" (2/2) ...
[2020-11-25 11:42:46,015 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 11:42:46,015 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 11:42:46,015 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 11:42:46,015 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 11:42:46,016 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:42:45" (1/2) ...
[2020-11-25 11:42:46,067 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 11:42:46,068 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 11:42:46,068 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 11:42:46,068 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 11:42:46,068 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 11:42:46,068 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 11:42:46,068 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 11:42:46,068 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 11:42:46,069 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 11:42:46,069 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 11:42:46,069 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__success
[2020-11-25 11:42:46,069 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context
[2020-11-25 11:42:46,069 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context
[2020-11-25 11:42:46,069 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__success
[2020-11-25 11:42:46,069 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 11:42:46,069 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 11:42:46,069 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 11:42:46,070 INFO  L130     BoogieDeclarations]: Found specification of procedure setAllow_ERC20
[2020-11-25 11:42:46,070 INFO  L138     BoogieDeclarations]: Found implementation of procedure setAllow_ERC20
[2020-11-25 11:42:46,070 INFO  L130     BoogieDeclarations]: Found specification of procedure setExceptions~address_ERC20
[2020-11-25 11:42:46,070 INFO  L138     BoogieDeclarations]: Found implementation of procedure setExceptions~address_ERC20
[2020-11-25 11:42:46,070 INFO  L130     BoogieDeclarations]: Found specification of procedure burnOwner_ERC20
[2020-11-25 11:42:46,070 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnOwner_ERC20
[2020-11-25 11:42:46,070 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 11:42:46,070 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 11:42:46,071 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 11:42:46,071 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 11:42:46,071 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 11:42:46,071 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 11:42:46,071 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 11:42:46,071 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 11:42:46,071 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 11:42:46,071 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 11:42:46,071 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 11:42:46,071 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 11:42:46,072 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 11:42:46,072 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 11:42:46,072 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 11:42:46,072 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 11:42:46,072 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 11:42:46,072 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 11:42:46,072 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 11:42:46,072 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 11:42:46,072 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 11:42:46,072 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 11:42:46,072 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed
[2020-11-25 11:42:46,073 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed
[2020-11-25 11:42:46,073 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed
[2020-11-25 11:42:46,073 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed
[2020-11-25 11:42:46,073 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed
[2020-11-25 11:42:46,073 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed
[2020-11-25 11:42:46,073 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed
[2020-11-25 11:42:46,073 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 11:42:46,073 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 11:42:46,073 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 11:42:46,073 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 11:42:46,074 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 11:42:46,074 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 11:42:46,074 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 11:42:46,074 INFO  L130     BoogieDeclarations]: Found specification of procedure ZZZ_ZZZ_NoBaseCtor__success
[2020-11-25 11:42:46,074 INFO  L130     BoogieDeclarations]: Found specification of procedure ZZZ_ZZZ
[2020-11-25 11:42:46,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZZZ_ZZZ
[2020-11-25 11:42:46,074 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ZZZ
[2020-11-25 11:42:46,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ZZZ
[2020-11-25 11:42:46,074 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_ZZZ
[2020-11-25 11:42:46,074 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_ZZZ
[2020-11-25 11:42:46,074 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_ZZZ
[2020-11-25 11:42:46,075 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_ZZZ
[2020-11-25 11:42:46,075 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_ZZZ
[2020-11-25 11:42:46,075 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_ZZZ
[2020-11-25 11:42:46,075 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_ZZZ
[2020-11-25 11:42:46,075 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_ZZZ
[2020-11-25 11:42:46,075 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_ZZZ
[2020-11-25 11:42:46,075 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_ZZZ
[2020-11-25 11:42:46,075 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 11:42:46,075 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 11:42:46,076 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 11:42:46,076 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 11:42:46,076 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 11:42:46,076 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Context
[2020-11-25 11:42:46,076 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Context
[2020-11-25 11:42:46,076 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 11:42:46,076 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 11:42:46,076 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Detailed
[2020-11-25 11:42:46,076 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Detailed
[2020-11-25 11:42:46,076 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 11:42:46,077 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 11:42:46,077 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ZZZ
[2020-11-25 11:42:46,077 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 11:42:46,077 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 11:42:46,077 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 11:42:46,077 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 11:42:46,077 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 11:42:46,077 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 11:42:46,077 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__success
[2020-11-25 11:42:46,077 INFO  L130     BoogieDeclarations]: Found specification of procedure Context_Context__fail
[2020-11-25 11:42:46,077 INFO  L130     BoogieDeclarations]: Found specification of procedure _msgSender_Context__fail
[2020-11-25 11:42:46,078 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 11:42:46,078 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 11:42:46,078 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 11:42:46,078 INFO  L130     BoogieDeclarations]: Found specification of procedure setAllow_ERC20__success
[2020-11-25 11:42:46,078 INFO  L130     BoogieDeclarations]: Found specification of procedure setAllow_ERC20__fail
[2020-11-25 11:42:46,078 INFO  L130     BoogieDeclarations]: Found specification of procedure setExceptions~address_ERC20__success
[2020-11-25 11:42:46,079 INFO  L130     BoogieDeclarations]: Found specification of procedure setExceptions~address_ERC20__fail
[2020-11-25 11:42:46,079 INFO  L130     BoogieDeclarations]: Found specification of procedure burnOwner_ERC20__success
[2020-11-25 11:42:46,079 INFO  L130     BoogieDeclarations]: Found specification of procedure burnOwner_ERC20__fail
[2020-11-25 11:42:46,079 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 11:42:46,079 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 11:42:46,079 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 11:42:46,079 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 11:42:46,079 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 11:42:46,079 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 11:42:46,079 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 11:42:46,080 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 11:42:46,080 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 11:42:46,080 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 11:42:46,080 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 11:42:46,080 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 11:42:46,080 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:42:46,080 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:42:46,080 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:42:46,080 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:42:46,080 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 11:42:46,081 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 11:42:46,081 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 11:42:46,081 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 11:42:46,081 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 11:42:46,081 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 11:42:46,081 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 11:42:46,081 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__success
[2020-11-25 11:42:46,081 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20Detailed__fail
[2020-11-25 11:42:46,081 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__success
[2020-11-25 11:42:46,081 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20Detailed__fail
[2020-11-25 11:42:46,081 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__success
[2020-11-25 11:42:46,082 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20Detailed__fail
[2020-11-25 11:42:46,082 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 11:42:46,082 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 11:42:46,082 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 11:42:46,082 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 11:42:46,082 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 11:42:46,082 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 11:42:46,082 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 11:42:46,082 INFO  L130     BoogieDeclarations]: Found specification of procedure ZZZ_ZZZ_NoBaseCtor__fail
[2020-11-25 11:42:46,082 INFO  L130     BoogieDeclarations]: Found specification of procedure ZZZ_ZZZ__success
[2020-11-25 11:42:46,082 INFO  L130     BoogieDeclarations]: Found specification of procedure ZZZ_ZZZ__fail
[2020-11-25 11:42:46,082 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ZZZ__success
[2020-11-25 11:42:46,082 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_ZZZ__fail
[2020-11-25 11:42:46,083 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_ZZZ__success
[2020-11-25 11:42:46,083 INFO  L130     BoogieDeclarations]: Found specification of procedure setGovernance~address_ZZZ__fail
[2020-11-25 11:42:46,083 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_ZZZ__success
[2020-11-25 11:42:46,083 INFO  L130     BoogieDeclarations]: Found specification of procedure addMinter~address_ZZZ__fail
[2020-11-25 11:42:46,083 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_ZZZ__success
[2020-11-25 11:42:46,083 INFO  L130     BoogieDeclarations]: Found specification of procedure removeMinter~address_ZZZ__fail
[2020-11-25 11:42:46,083 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_ZZZ__success
[2020-11-25 11:42:46,083 INFO  L130     BoogieDeclarations]: Found specification of procedure governance_ZZZ__fail
[2020-11-25 11:42:46,083 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_ZZZ__success
[2020-11-25 11:42:46,083 INFO  L130     BoogieDeclarations]: Found specification of procedure minters~address_ZZZ__fail
[2020-11-25 11:42:46,083 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 11:42:46,083 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 11:42:46,083 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 11:42:46,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 11:42:46,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 11:42:46,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 11:42:46,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 11:42:46,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 11:42:46,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 11:42:46,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__fail
[2020-11-25 11:42:46,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context_NoBaseCtor__success
[2020-11-25 11:42:46,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__fail
[2020-11-25 11:42:46,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure Context_Context__success
[2020-11-25 11:42:46,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__fail
[2020-11-25 11:42:46,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure _msgSender_Context__success
[2020-11-25 11:42:46,084 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 11:42:46,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 11:42:46,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 11:42:46,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 11:42:46,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure setAllow_ERC20__fail
[2020-11-25 11:42:46,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure setAllow_ERC20__success
[2020-11-25 11:42:46,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure setExceptions~address_ERC20__fail
[2020-11-25 11:42:46,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure setExceptions~address_ERC20__success
[2020-11-25 11:42:46,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnOwner_ERC20__fail
[2020-11-25 11:42:46,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnOwner_ERC20__success
[2020-11-25 11:42:46,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 11:42:46,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 11:42:46,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 11:42:46,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 11:42:46,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 11:42:46,085 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 11:42:46,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 11:42:46,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 11:42:46,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 11:42:46,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 11:42:46,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 11:42:46,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 11:42:46,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:42:46,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:42:46,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 11:42:46,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 11:42:46,086 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 11:42:46,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 11:42:46,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 11:42:46,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 11:42:46,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 11:42:46,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 11:42:46,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 11:42:46,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 11:42:46,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__fail
[2020-11-25 11:42:46,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed_NoBaseCtor__success
[2020-11-25 11:42:46,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__fail
[2020-11-25 11:42:46,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Detailed_ERC20Detailed__success
[2020-11-25 11:42:46,087 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__fail
[2020-11-25 11:42:46,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20Detailed__success
[2020-11-25 11:42:46,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__fail
[2020-11-25 11:42:46,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20Detailed__success
[2020-11-25 11:42:46,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__fail
[2020-11-25 11:42:46,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20Detailed__success
[2020-11-25 11:42:46,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 11:42:46,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 11:42:46,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 11:42:46,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 11:42:46,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 11:42:46,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 11:42:46,088 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 11:42:46,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 11:42:46,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 11:42:46,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 11:42:46,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__fail
[2020-11-25 11:42:46,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256~string_SafeMath__success
[2020-11-25 11:42:46,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZZZ_ZZZ_NoBaseCtor__fail
[2020-11-25 11:42:46,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZZZ_ZZZ_NoBaseCtor__success
[2020-11-25 11:42:46,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZZZ_ZZZ__fail
[2020-11-25 11:42:46,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure ZZZ_ZZZ__success
[2020-11-25 11:42:46,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ZZZ__fail
[2020-11-25 11:42:46,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_ZZZ__success
[2020-11-25 11:42:46,089 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_ZZZ__fail
[2020-11-25 11:42:46,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure setGovernance~address_ZZZ__success
[2020-11-25 11:42:46,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_ZZZ__fail
[2020-11-25 11:42:46,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure addMinter~address_ZZZ__success
[2020-11-25 11:42:46,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_ZZZ__fail
[2020-11-25 11:42:46,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure removeMinter~address_ZZZ__success
[2020-11-25 11:42:46,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_ZZZ__fail
[2020-11-25 11:42:46,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure governance_ZZZ__success
[2020-11-25 11:42:46,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_ZZZ__fail
[2020-11-25 11:42:46,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure minters~address_ZZZ__success
[2020-11-25 11:42:46,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 11:42:46,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 11:42:46,090 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 11:42:46,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 11:42:46,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 11:42:46,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 11:42:46,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 11:42:46,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 11:42:46,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Context
[2020-11-25 11:42:46,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Context
[2020-11-25 11:42:46,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 11:42:46,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 11:42:46,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Detailed
[2020-11-25 11:42:46,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Detailed
[2020-11-25 11:42:46,091 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 11:42:46,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 11:42:46,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ZZZ
[2020-11-25 11:42:46,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 11:42:46,092 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 11:42:46,092 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 11:42:46,476 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:42:46,477 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 11:42:46,824 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 11:42:46,824 INFO  L286             CfgBuilder]: Removed 6 assue(true) statements.
[2020-11-25 11:42:46,829 INFO  L202        PluginConnector]: Adding new model ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:42:46 BoogieIcfgContainer
[2020-11-25 11:42:46,829 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:42:45" (2/2) ...
[2020-11-25 11:42:46,829 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 11:42:46,830 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@7b8eca66 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:42:46, skipping insertion in model container
[2020-11-25 11:42:46,830 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 11:42:46,830 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 11:42:46,830 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 11:42:46,832 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 11:42:46,833 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:42:45" (1/3) ...
[2020-11-25 11:42:46,833 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@489859fb and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:42:46, skipping insertion in model container
[2020-11-25 11:42:46,833 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:42:45" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 11:42:46,867 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:42:46 NWAContainer
[2020-11-25 11:42:46,868 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 11:42:46,868 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 11:42:46,868 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 11:42:46,868 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 11:42:46,869 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:42:46" (3/4) ...
[2020-11-25 11:42:46,870 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@136c1ebc and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:42:46, skipping insertion in model container
[2020-11-25 11:42:46,870 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:42:46" (4/4) ...
[2020-11-25 11:42:46,873 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 11:42:46,878 INFO  L110   BuchiProductObserver]: Initial RCFG 2171 locations, 2937 edges
[2020-11-25 11:42:46,878 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 11:42:46,890 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 11:42:48,369 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 11:42:48,377 INFO  L110   BuchiProductObserver]: BuchiProgram size 5328 locations, 9511 edges
[2020-11-25 11:42:48,377 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:42:48 BoogieIcfgContainer
[2020-11-25 11:42:48,377 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 11:42:48,377 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 11:42:48,377 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 11:42:48,379 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 11:42:48,379 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:42:48" (1/1) ...
[2020-11-25 11:42:48,503 INFO  L313           BlockEncoder]: Initial Icfg 5328 locations, 9511 edges
[2020-11-25 11:42:48,503 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 11:42:48,504 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 11:42:48,504 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 11:42:48,504 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 11:42:48,518 INFO  L70    emoveInfeasibleEdges]: Removed 159 edges and 15 locations because of local infeasibility
[2020-11-25 11:42:48,532 INFO  L70        RemoveSinkStates]: Removed 160 edges and 97 locations by removing sink states
[2020-11-25 11:42:48,546 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 11:42:48,551 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 11:42:48,554 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 11:42:48,555 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 11:42:48,558 INFO  L313           BlockEncoder]: Encoded RCFG 5194 locations, 9160 edges
[2020-11-25 11:42:48,558 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 11:42:48 BasicIcfg
[2020-11-25 11:42:48,558 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 11:42:48,559 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 11:42:48,559 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 11:42:48,561 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 11:42:48,561 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:42:48,561 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 11:42:45" (1/6) ...
[2020-11-25 11:42:48,562 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1b4ca8ab and model type ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:42:48, skipping insertion in model container
[2020-11-25 11:42:48,563 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:42:48,563 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 11:42:45" (2/6) ...
[2020-11-25 11:42:48,563 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1b4ca8ab and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:42:48, skipping insertion in model container
[2020-11-25 11:42:48,563 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:42:48,563 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 11:42:46" (3/6) ...
[2020-11-25 11:42:48,563 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1b4ca8ab and model type ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 11:42:48, skipping insertion in model container
[2020-11-25 11:42:48,563 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:42:48,563 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 11:42:46" (4/6) ...
[2020-11-25 11:42:48,564 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1b4ca8ab and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 11:42:48, skipping insertion in model container
[2020-11-25 11:42:48,564 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:42:48,564 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 11:42:48" (5/6) ...
[2020-11-25 11:42:48,564 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@1b4ca8ab and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 11:42:48, skipping insertion in model container
[2020-11-25 11:42:48,564 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 11:42:48,564 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 11:42:48" (6/6) ...
[2020-11-25 11:42:48,565 INFO  L404   chiAutomizerObserver]: Analyzing ICFG ZZZ_0xc75F15AdA581219c95485c578E124df3985e4CE0_transferfrom-self-fail.bpl_BEv2
[2020-11-25 11:42:48,597 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 11:42:48,597 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 11:42:48,597 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 11:42:48,597 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 11:42:48,597 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 11:42:48,598 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 11:42:48,598 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 11:42:48,598 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 11:42:48,598 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 11:42:48,645 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5194 states.
[2020-11-25 11:42:48,736 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:42:48,737 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:42:48,737 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:42:48,744 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:42:48,744 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:42:48,744 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 11:42:48,744 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5194 states.
[2020-11-25 11:42:48,765 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:42:48,765 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:42:48,765 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:42:48,766 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:42:48,767 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L5780]              assume null == 0;
[L5781]  CALL        call this := FreshRefGenerator__success();
[L2620]              havoc newRef;
[L2621]              assume Alloc[newRef] == false;
[L2622]              Alloc[newRef] := true;
[L2623]              assume newRef != null;
[L5781]  RET         call this := FreshRefGenerator__success();
[L5782]              assume now >= 0;
[L5783]              assume DType[this] == ZZZ;
[L5784]              assume msgvalue_MSG == 0;
[L5785]              gas := gas - 53000;
[L5786]  CALL        call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L1487]              havoc __exception;
[L1488]              revert := false;
[L1489]  COND FALSE  !(__exception)
[L1519]  CALL        call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2684]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2669]              assume msgsender_MSG != null;
[L2670]              Balance[this] := 0;
[L2684]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2685]  COND FALSE  !(revert)
[L3917]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND TRUE   revert
[L1519]  RET         call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L1520]              assume !revert && gas >= 0;
[L5786]  RET         call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L5787]              assume !revert && gas >= 0;

Loop:
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND TRUE   choice == 20
[L5647]              gas := gas - 21000;
[L5648]  COND FALSE  !(gas >= 0)
[L5790]  RET         call CorralChoice_ZZZ(this);

[2020-11-25 11:42:48,780 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:42:48,780 INFO  L82        PathProgramCache]: Analyzing trace with hash 952045157, now seen corresponding path program 1 times
[2020-11-25 11:42:48,784 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:42:48,805 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:42:48,840 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:42:48,842 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:42:48,842 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 11:42:49,156 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:42:49,165 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 11:42:49,166 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 11:42:49,167 INFO  L87              Difference]: Start difference. First operand 5194 states. Second operand 4 states.
[2020-11-25 11:42:49,679 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:42:49,679 INFO  L93              Difference]: Finished difference Result 3504 states and 4073 transitions.
[2020-11-25 11:42:49,679 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 11:42:49,680 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3504 states and 4073 transitions.
[2020-11-25 11:42:49,703 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:42:49,732 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3504 states to 3504 states and 4073 transitions.
[2020-11-25 11:42:49,733 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 11:42:49,736 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 923
[2020-11-25 11:42:49,736 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3504 states and 4073 transitions.
[2020-11-25 11:42:49,746 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:42:49,746 INFO  L728         BuchiCegarLoop]: Abstraction has 3504 states and 4073 transitions.
[2020-11-25 11:42:49,762 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3504 states and 4073 transitions.
[2020-11-25 11:42:49,812 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3504 to 3504.
[2020-11-25 11:42:49,812 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3504 states.
[2020-11-25 11:42:49,818 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3504 states to 3504 states and 4073 transitions.
[2020-11-25 11:42:49,818 INFO  L751         BuchiCegarLoop]: Abstraction has 3504 states and 4073 transitions.
[2020-11-25 11:42:49,819 INFO  L631         BuchiCegarLoop]: Abstraction has 3504 states and 4073 transitions.
[2020-11-25 11:42:49,819 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 11:42:49,819 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3504 states and 4073 transitions.
[2020-11-25 11:42:49,827 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:42:49,827 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:42:49,827 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:42:49,829 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:42:49,829 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L5780]              assume null == 0;
[L5781]  CALL        call this := FreshRefGenerator__success();
[L2620]              havoc newRef;
[L2621]              assume Alloc[newRef] == false;
[L2622]              Alloc[newRef] := true;
[L2623]              assume newRef != null;
[L5781]  RET         call this := FreshRefGenerator__success();
[L5782]              assume now >= 0;
[L5783]              assume DType[this] == ZZZ;
[L5784]              assume msgvalue_MSG == 0;
[L5785]              gas := gas - 53000;
[L5786]  CALL        call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L1487]              havoc __exception;
[L1488]              revert := false;
[L1489]  COND FALSE  !(__exception)
[L1519]  CALL        call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2684]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2669]              assume msgsender_MSG != null;
[L2670]              Balance[this] := 0;
[L2684]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2685]  COND FALSE  !(revert)
[L3917]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND TRUE   revert
[L1519]  RET         call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L1520]              assume !revert && gas >= 0;
[L5786]  RET         call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L5787]              assume !revert && gas >= 0;
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND FALSE  !(choice == 18)
[L5665]  COND FALSE  !(choice == 17)
[L5671]  COND FALSE  !(choice == 16)
[L5678]  COND TRUE   choice == 15
[L5679]              gas := gas - 21000;
[L5680]  COND TRUE   gas >= 0
[L5681]              assume amount_s281 >= 0 && amount_s281 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5682]              assume msgvalue_MSG == 0;
[L5683]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s281 == recipient_s281 && (amount_s281 > _balances_ERC20[this][sender_s281] || amount_s281 > _allowances_ERC20[this][sender_s281][msgsender_MSG])) && amount_s281 >= 0) && amount_s281 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s281] >= 0) && _balances_ERC20[this][recipient_s281] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s281] >= 0) && _balances_ERC20[this][sender_s281] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s281][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s281][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L877]               havoc __exception;
[L878]               revert := false;
[L879]   COND FALSE  !(__exception)
[L909]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3116]  COND TRUE   DType[this] == ZZZ
[L3117]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3446]              __var_15 := null;
[L3447]  COND TRUE   !(sender_s439 != null)
[L3448]              revert := true;
[L3117]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3118]  COND TRUE   revert
[L909]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L910]               assume !revert && gas >= 0;
[L5683]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L5790]  RET         call CorralChoice_ZZZ(this);

Loop:
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND FALSE  !(choice == 18)
[L5665]  COND FALSE  !(choice == 17)
[L5671]  COND FALSE  !(choice == 16)
[L5678]  COND TRUE   choice == 15
[L5679]              gas := gas - 21000;
[L5680]  COND TRUE   gas >= 0
[L5681]              assume amount_s281 >= 0 && amount_s281 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5682]              assume msgvalue_MSG == 0;
[L5683]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s281 == recipient_s281 && (amount_s281 > _balances_ERC20[this][sender_s281] || amount_s281 > _allowances_ERC20[this][sender_s281][msgsender_MSG])) && amount_s281 >= 0) && amount_s281 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s281] >= 0) && _balances_ERC20[this][recipient_s281] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s281] >= 0) && _balances_ERC20[this][sender_s281] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s281][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s281][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L877]               havoc __exception;
[L878]               revert := false;
[L879]   COND FALSE  !(__exception)
[L909]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3116]  COND TRUE   DType[this] == ZZZ
[L3117]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3446]              __var_15 := null;
[L3447]  COND TRUE   !(sender_s439 != null)
[L3448]              revert := true;
[L3117]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3118]  COND TRUE   revert
[L909]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L910]               assume !revert && gas >= 0;
[L5683]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L5790]  RET         call CorralChoice_ZZZ(this);

[2020-11-25 11:42:49,833 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:42:49,833 INFO  L82        PathProgramCache]: Analyzing trace with hash 23853326, now seen corresponding path program 1 times
[2020-11-25 11:42:49,834 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:42:49,844 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:42:49,864 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 11:42:49,864 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:42:49,864 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 11:42:49,866 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:42:49,866 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 11:42:49,866 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 11:42:49,866 INFO  L87              Difference]: Start difference. First operand 3504 states and 4073 transitions. cyclomatic complexity: 571 Second operand 4 states.
[2020-11-25 11:42:50,640 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:42:50,641 INFO  L93              Difference]: Finished difference Result 4420 states and 5004 transitions.
[2020-11-25 11:42:50,641 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 11:42:50,641 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4420 states and 5004 transitions.
[2020-11-25 11:42:50,654 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:42:50,669 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4420 states to 4196 states and 4740 transitions.
[2020-11-25 11:42:50,669 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1117
[2020-11-25 11:42:50,670 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1129
[2020-11-25 11:42:50,670 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4196 states and 4740 transitions.
[2020-11-25 11:42:50,675 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:42:50,675 INFO  L728         BuchiCegarLoop]: Abstraction has 4196 states and 4740 transitions.
[2020-11-25 11:42:50,679 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4196 states and 4740 transitions.
[2020-11-25 11:42:50,715 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4196 to 3783.
[2020-11-25 11:42:50,715 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3783 states.
[2020-11-25 11:42:50,720 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3783 states to 3783 states and 4222 transitions.
[2020-11-25 11:42:50,720 INFO  L751         BuchiCegarLoop]: Abstraction has 3783 states and 4222 transitions.
[2020-11-25 11:42:50,720 INFO  L631         BuchiCegarLoop]: Abstraction has 3783 states and 4222 transitions.
[2020-11-25 11:42:50,720 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 11:42:50,720 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3783 states and 4222 transitions.
[2020-11-25 11:42:50,727 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:42:50,727 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:42:50,727 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:42:50,730 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:42:50,730 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L5780]              assume null == 0;
[L5781]  CALL        call this := FreshRefGenerator__success();
[L2620]              havoc newRef;
[L2621]              assume Alloc[newRef] == false;
[L2622]              Alloc[newRef] := true;
[L2623]              assume newRef != null;
[L5781]  RET         call this := FreshRefGenerator__success();
[L5782]              assume now >= 0;
[L5783]              assume DType[this] == ZZZ;
[L5784]              assume msgvalue_MSG == 0;
[L5785]              gas := gas - 53000;
[L5786]  CALL        call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L1487]              havoc __exception;
[L1488]              revert := false;
[L1489]  COND FALSE  !(__exception)
[L1519]  CALL        call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2684]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2669]              assume msgsender_MSG != null;
[L2670]              Balance[this] := 0;
[L2684]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2685]  COND FALSE  !(revert)
[L3917]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND FALSE  !(revert)
[L3921]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L3921]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3922]  COND FALSE  !(revert)
[L3926]              havoc __var_30;
[L3927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L2758]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2684]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2669]              assume msgsender_MSG != null;
[L2670]              Balance[this] := 0;
[L2684]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2685]  COND FALSE  !(revert)
[L2758]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2759]  COND FALSE  !(revert)
[L2762]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L2762]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2763]  COND FALSE  !(revert)
[L2766]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s125);
[L2724]              assume msgsender_MSG != null;
[L2725]              Balance[this] := 0;
[L2726]              _balances_ERC20[this] := zeroRefintArr();
[L2727]              sum__balances0[this] := 0;
[L2728]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2729]              sum__allowances1[this] := 0;
[L2730]              exceptions_ERC20[this] := zeroRefboolArr();
[L2731]              uniswap_ERC20[this] := null;
[L2732]              _owner_ERC20[this] := null;
[L2733]              _totalSupply_ERC20[this] := 0;
[L2734]              allow_ERC20[this] := false;
[L2736]              _owner_ERC20[this] := owner_s125;
[L2737]              allow_ERC20[this] := false;
[L2766]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s125);
[L2767]  COND FALSE  !(revert)
[L3927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L3928]  COND FALSE  !(revert)
[L3931]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1005117433, -558820371, 18);
[L3673]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L3673]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3674]  COND FALSE  !(revert)
[L3677]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s600, symbol_s600, decimals_s600);
[L3648]              assume msgsender_MSG != null;
[L3649]              Balance[this] := 0;
[L3650]              _name_ERC20Detailed[this] := -1905873549;
[L3651]              _symbol_ERC20Detailed[this] := -1905873549;
[L3652]              _decimals_ERC20Detailed[this] := 0;
[L3654]              _name_ERC20Detailed[this] := name_s600;
[L3655]              _symbol_ERC20Detailed[this] := symbol_s600;
[L3656]              _decimals_ERC20Detailed[this] := decimals_s600;
[L3677]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s600, symbol_s600, decimals_s600);
[L3678]  COND FALSE  !(revert)
[L3931]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1005117433, -558820371, 18);
[L3932]  COND FALSE  !(revert)
[L3935]  CALL        call ZZZ_ZZZ_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3875]              assume msgsender_MSG != null;
[L3876]              Balance[this] := 0;
[L3877]              governance_ZZZ[this] := null;
[L3878]              minters_ZZZ[this] := zeroRefboolArr();
[L3881]              havoc __var_29;
[L3882]              governance_ZZZ[this] := __var_29;
[L3935]  RET         call ZZZ_ZZZ_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3936]  COND FALSE  !(revert)
[L1519]  RET         call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L1520]              assume !revert && gas >= 0;
[L5786]  RET         call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L5787]              assume !revert && gas >= 0;
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND FALSE  !(choice == 18)
[L5665]  COND FALSE  !(choice == 17)
[L5671]  COND FALSE  !(choice == 16)
[L5678]  COND TRUE   choice == 15
[L5679]              gas := gas - 21000;
[L5680]  COND TRUE   gas >= 0
[L5681]              assume amount_s281 >= 0 && amount_s281 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5682]              assume msgvalue_MSG == 0;
[L5683]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s281 == recipient_s281 && (amount_s281 > _balances_ERC20[this][sender_s281] || amount_s281 > _allowances_ERC20[this][sender_s281][msgsender_MSG])) && amount_s281 >= 0) && amount_s281 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s281] >= 0) && _balances_ERC20[this][recipient_s281] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s281] >= 0) && _balances_ERC20[this][sender_s281] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s281][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s281][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L877]               havoc __exception;
[L878]               revert := false;
[L879]   COND FALSE  !(__exception)
[L909]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3116]  COND TRUE   DType[this] == ZZZ
[L3117]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3446]              __var_15 := null;
[L3447]  COND FALSE  !(!(sender_s439 != null))
[L3451]              __var_16 := null;
[L3452]  COND FALSE  !(!(recipient_s439 != null))
[L3456]  COND TRUE   sender_s439 == _owner_ERC20[this] || allow_ERC20[this]
[L3457]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3457]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3458]  COND FALSE  !(revert)
[L3461]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s439];
[L3462]              _balances_ERC20[this][sender_s439] := __var_17;
[L3463]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s439];
[L3464]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3464]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3465]  COND FALSE  !(revert)
[L3468]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s439];
[L3469]              _balances_ERC20[this][recipient_s439] := __var_18;
[L3470]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s439];
[L3471]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3117]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3118]  COND FALSE  !(revert)
[L3129]  COND TRUE   DType[this] == ZZZ
[L3130]  CALL        call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L3130]  RET         call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  COND FALSE  !(revert)
[L3142]  COND TRUE   DType[this] == ZZZ
[L3143]  CALL        call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L3143]  RET         call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3144]  COND FALSE  !(revert)
[L3155]  CALL        call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s281][__var_8], amount_s281, -255027035);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3155]  RET         call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s281][__var_8], amount_s281, -255027035);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == ZZZ
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, __var_6, __var_7);
[L3615]              __var_27 := null;
[L3616]  COND FALSE  !(!(owner_s569 != null))
[L3620]              __var_28 := null;
[L3621]  COND FALSE  !(!(spender_s569 != null))
[L3625]              sum__allowances1[owner_s569] := sum__allowances1[owner_s569] - _allowances_ERC20[this][owner_s569][spender_s569];
[L3626]              _allowances_ERC20[this][owner_s569][spender_s569] := amount_s569;
[L3627]              sum__allowances1[owner_s569] := sum__allowances1[owner_s569] + _allowances_ERC20[this][owner_s569][spender_s569];
[L3628]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, __var_6, __var_7);
[L3161]  COND FALSE  !(revert)
[L3172]              __ret_0_ := true;
[L909]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L910]               assume !revert && gas >= 0;
[L5683]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L5790]  RET         call CorralChoice_ZZZ(this);

Loop:
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND FALSE  !(choice == 18)
[L5665]  COND FALSE  !(choice == 17)
[L5671]  COND FALSE  !(choice == 16)
[L5678]  COND TRUE   choice == 15
[L5679]              gas := gas - 21000;
[L5680]  COND TRUE   gas >= 0
[L5681]              assume amount_s281 >= 0 && amount_s281 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5682]              assume msgvalue_MSG == 0;
[L5683]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s281 == recipient_s281 && (amount_s281 > _balances_ERC20[this][sender_s281] || amount_s281 > _allowances_ERC20[this][sender_s281][msgsender_MSG])) && amount_s281 >= 0) && amount_s281 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s281] >= 0) && _balances_ERC20[this][recipient_s281] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s281] >= 0) && _balances_ERC20[this][sender_s281] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s281][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s281][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L877]               havoc __exception;
[L878]               revert := false;
[L879]   COND FALSE  !(__exception)
[L909]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3116]  COND TRUE   DType[this] == ZZZ
[L3117]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3446]              __var_15 := null;
[L3447]  COND FALSE  !(!(sender_s439 != null))
[L3451]              __var_16 := null;
[L3452]  COND FALSE  !(!(recipient_s439 != null))
[L3456]  COND TRUE   sender_s439 == _owner_ERC20[this] || allow_ERC20[this]
[L3457]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3457]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3458]  COND FALSE  !(revert)
[L3461]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s439];
[L3462]              _balances_ERC20[this][sender_s439] := __var_17;
[L3463]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s439];
[L3464]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3464]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3465]  COND FALSE  !(revert)
[L3468]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s439];
[L3469]              _balances_ERC20[this][recipient_s439] := __var_18;
[L3470]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s439];
[L3471]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3117]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3118]  COND FALSE  !(revert)
[L3129]  COND TRUE   DType[this] == ZZZ
[L3130]  CALL        call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L3130]  RET         call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  COND FALSE  !(revert)
[L3142]  COND TRUE   DType[this] == ZZZ
[L3143]  CALL        call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L3143]  RET         call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3144]  COND FALSE  !(revert)
[L3155]  CALL        call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s281][__var_8], amount_s281, -255027035);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3155]  RET         call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s281][__var_8], amount_s281, -255027035);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == ZZZ
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, __var_6, __var_7);
[L3615]              __var_27 := null;
[L3616]  COND FALSE  !(!(owner_s569 != null))
[L3620]              __var_28 := null;
[L3621]  COND FALSE  !(!(spender_s569 != null))
[L3625]              sum__allowances1[owner_s569] := sum__allowances1[owner_s569] - _allowances_ERC20[this][owner_s569][spender_s569];
[L3626]              _allowances_ERC20[this][owner_s569][spender_s569] := amount_s569;
[L3627]              sum__allowances1[owner_s569] := sum__allowances1[owner_s569] + _allowances_ERC20[this][owner_s569][spender_s569];
[L3628]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, __var_6, __var_7);
[L3161]  COND FALSE  !(revert)
[L3172]              __ret_0_ := true;
[L909]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L910]               assume !revert && gas >= 0;
[L5683]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L5790]  RET         call CorralChoice_ZZZ(this);

[2020-11-25 11:42:50,735 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:42:50,735 INFO  L82        PathProgramCache]: Analyzing trace with hash -1777357076, now seen corresponding path program 1 times
[2020-11-25 11:42:50,736 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:42:50,760 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:42:50,972 INFO  L134       CoverageAnalysis]: Checked inductivity of 48 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 44 trivial. 0 not checked.
[2020-11-25 11:42:50,972 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:42:50,973 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [16] imperfect sequences [] total 16
[2020-11-25 11:42:50,973 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:42:50,973 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 17 interpolants.
[2020-11-25 11:42:50,974 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=35, Invalid=237, Unknown=0, NotChecked=0, Total=272
[2020-11-25 11:42:50,974 INFO  L87              Difference]: Start difference. First operand 3783 states and 4222 transitions. cyclomatic complexity: 441 Second operand 17 states.
[2020-11-25 11:42:53,373 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:42:53,373 INFO  L93              Difference]: Finished difference Result 3876 states and 4327 transitions.
[2020-11-25 11:42:53,373 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 11:42:53,373 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3876 states and 4327 transitions.
[2020-11-25 11:42:53,381 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 11:42:53,397 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3876 states to 3876 states and 4327 transitions.
[2020-11-25 11:42:53,397 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1082
[2020-11-25 11:42:53,397 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1082
[2020-11-25 11:42:53,397 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3876 states and 4327 transitions.
[2020-11-25 11:42:53,401 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:42:53,401 INFO  L728         BuchiCegarLoop]: Abstraction has 3876 states and 4327 transitions.
[2020-11-25 11:42:53,404 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3876 states and 4327 transitions.
[2020-11-25 11:42:53,437 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3876 to 3637.
[2020-11-25 11:42:53,438 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3637 states.
[2020-11-25 11:42:53,443 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3637 states to 3637 states and 4039 transitions.
[2020-11-25 11:42:53,443 INFO  L751         BuchiCegarLoop]: Abstraction has 3637 states and 4039 transitions.
[2020-11-25 11:42:53,443 INFO  L631         BuchiCegarLoop]: Abstraction has 3637 states and 4039 transitions.
[2020-11-25 11:42:53,443 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 11:42:53,443 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3637 states and 4039 transitions.
[2020-11-25 11:42:53,449 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:42:53,449 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:42:53,449 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:42:53,453 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:42:53,453 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L5780]              assume null == 0;
[L5781]  CALL        call this := FreshRefGenerator__success();
[L2620]              havoc newRef;
[L2621]              assume Alloc[newRef] == false;
[L2622]              Alloc[newRef] := true;
[L2623]              assume newRef != null;
[L5781]  RET         call this := FreshRefGenerator__success();
[L5782]              assume now >= 0;
[L5783]              assume DType[this] == ZZZ;
[L5784]              assume msgvalue_MSG == 0;
[L5785]              gas := gas - 53000;
[L5786]  CALL        call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L1487]              havoc __exception;
[L1488]              revert := false;
[L1489]  COND TRUE   __exception
[L1490]              __tmp__Balance := Balance;
[L1491]              __tmp__DType := DType;
[L1492]              __tmp__Alloc := Alloc;
[L1493]              __tmp__balance_ADDR := balance_ADDR;
[L1494]              __tmp__M_Ref_int := M_Ref_int;
[L1495]              __tmp__sum__balances0 := sum__balances0;
[L1496]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1497]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1498]              __tmp__sum__allowances1 := sum__allowances1;
[L1499]              __tmp__M_Ref_bool := M_Ref_bool;
[L1500]              __tmp__sum_exceptions2 := sum_exceptions2;
[L1501]              __tmp__sum_minters3 := sum_minters3;
[L1502]              __tmp__Length := Length;
[L1503]              __tmp__now := now;
[L1504]              __tmp___balances_ERC20 := _balances_ERC20;
[L1505]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1506]              __tmp__exceptions_ERC20 := exceptions_ERC20;
[L1507]              __tmp__uniswap_ERC20 := uniswap_ERC20;
[L1508]              __tmp___owner_ERC20 := _owner_ERC20;
[L1509]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1510]              __tmp__allow_ERC20 := allow_ERC20;
[L1511]              __tmp___name_ERC20Detailed := _name_ERC20Detailed;
[L1512]              __tmp___symbol_ERC20Detailed := _symbol_ERC20Detailed;
[L1513]              __tmp___decimals_ERC20Detailed := _decimals_ERC20Detailed;
[L1514]              __tmp__governance_ZZZ := governance_ZZZ;
[L1515]              __tmp__minters_ZZZ := minters_ZZZ;
[L1516]  CALL        call ZZZ_ZZZ__fail(this, msgsender_MSG, msgvalue_MSG);
[L3889]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2676]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2661]              assume msgsender_MSG != null;
[L2662]              __tmp__Balance[this] := 0;
[L2676]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2677]  COND FALSE  !(revert)
[L3889]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L3890]  COND FALSE  !(revert)
[L3893]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2644]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2629]              assume msgsender_MSG != null;
[L2630]              __tmp__Balance[this] := 0;
[L2644]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2645]  COND FALSE  !(revert)
[L3893]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3894]  COND FALSE  !(revert)
[L3898]              havoc __var_30;
[L3899]  CALL        call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L2742]  CALL        call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2676]  CALL        call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2661]              assume msgsender_MSG != null;
[L2662]              __tmp__Balance[this] := 0;
[L2676]  RET         call Context_Context_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2677]  COND FALSE  !(revert)
[L2742]  RET         call Context_Context__fail(this, msgsender_MSG, msgvalue_MSG);
[L2743]  COND FALSE  !(revert)
[L2746]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2644]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2629]              assume msgsender_MSG != null;
[L2630]              __tmp__Balance[this] := 0;
[L2644]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2645]  COND FALSE  !(revert)
[L2746]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2747]  COND FALSE  !(revert)
[L2750]  CALL        call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, owner_s125);
[L2705]              assume msgsender_MSG != null;
[L2706]              __tmp__Balance[this] := 0;
[L2707]              __tmp___balances_ERC20[this] := zeroRefintArr();
[L2708]              __tmp__sum__balances0[this] := 0;
[L2709]              __tmp___allowances_ERC20[this] := zeroRefRefintArr();
[L2710]              __tmp__sum__allowances1[this] := 0;
[L2711]              __tmp__exceptions_ERC20[this] := zeroRefboolArr();
[L2712]              __tmp__uniswap_ERC20[this] := null;
[L2713]              __tmp___owner_ERC20[this] := null;
[L2714]              __tmp___totalSupply_ERC20[this] := 0;
[L2715]              __tmp__allow_ERC20[this] := false;
[L2717]              __tmp___owner_ERC20[this] := owner_s125;
[L2718]              __tmp__allow_ERC20[this] := false;
[L2750]  RET         call ERC20_ERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, owner_s125);
[L2751]  COND FALSE  !(revert)
[L3899]  RET         call ERC20_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L3900]  COND FALSE  !(revert)
[L3903]  CALL        call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1005117433, -558820371, 18);
[L3661]  CALL        call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L2644]  CALL        call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2629]              assume msgsender_MSG != null;
[L2630]              __tmp__Balance[this] := 0;
[L2644]  RET         call IERC20_IERC20_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2645]  COND FALSE  !(revert)
[L3661]  RET         call IERC20_IERC20__fail(this, msgsender_MSG, msgvalue_MSG);
[L3662]  COND FALSE  !(revert)
[L3665]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s600, symbol_s600, decimals_s600);
[L3634]              assume msgsender_MSG != null;
[L3635]              __tmp__Balance[this] := 0;
[L3636]              __tmp___name_ERC20Detailed[this] := -1905873549;
[L3637]              __tmp___symbol_ERC20Detailed[this] := -1905873549;
[L3638]              __tmp___decimals_ERC20Detailed[this] := 0;
[L3640]              __tmp___name_ERC20Detailed[this] := name_s600;
[L3641]              __tmp___symbol_ERC20Detailed[this] := symbol_s600;
[L3642]              __tmp___decimals_ERC20Detailed[this] := decimals_s600;
[L3665]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG, name_s600, symbol_s600, decimals_s600);
[L3666]  COND FALSE  !(revert)
[L3903]  RET         call ERC20Detailed_ERC20Detailed__fail(this, msgsender_MSG, msgvalue_MSG, -1005117433, -558820371, 18);
[L3904]  COND FALSE  !(revert)
[L3907]  CALL        call ZZZ_ZZZ_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3860]              assume msgsender_MSG != null;
[L3861]              __tmp__Balance[this] := 0;
[L3862]              __tmp__governance_ZZZ[this] := null;
[L3863]              __tmp__minters_ZZZ[this] := zeroRefboolArr();
[L3866]              havoc __var_29;
[L3867]              __tmp__governance_ZZZ[this] := __var_29;
[L3907]  RET         call ZZZ_ZZZ_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L3908]  COND FALSE  !(revert)
[L1516]  RET         call ZZZ_ZZZ__fail(this, msgsender_MSG, msgvalue_MSG);
[L1517]              assume revert || gas < 0;
[L5786]  RET         call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L5787]              assume !revert && gas >= 0;
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND FALSE  !(choice == 18)
[L5665]  COND FALSE  !(choice == 17)
[L5671]  COND FALSE  !(choice == 16)
[L5678]  COND TRUE   choice == 15
[L5679]              gas := gas - 21000;
[L5680]  COND TRUE   gas >= 0
[L5681]              assume amount_s281 >= 0 && amount_s281 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5682]              assume msgvalue_MSG == 0;
[L5683]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s281 == recipient_s281 && (amount_s281 > _balances_ERC20[this][sender_s281] || amount_s281 > _allowances_ERC20[this][sender_s281][msgsender_MSG])) && amount_s281 >= 0) && amount_s281 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s281] >= 0) && _balances_ERC20[this][recipient_s281] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s281] >= 0) && _balances_ERC20[this][sender_s281] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s281][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s281][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L877]               havoc __exception;
[L878]               revert := false;
[L879]   COND FALSE  !(__exception)
[L909]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3116]  COND TRUE   DType[this] == ZZZ
[L3117]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3446]              __var_15 := null;
[L3447]  COND FALSE  !(!(sender_s439 != null))
[L3451]              __var_16 := null;
[L3452]  COND FALSE  !(!(recipient_s439 != null))
[L3456]  COND TRUE   sender_s439 == _owner_ERC20[this] || allow_ERC20[this]
[L3457]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3457]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3458]  COND FALSE  !(revert)
[L3461]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s439];
[L3462]              _balances_ERC20[this][sender_s439] := __var_17;
[L3463]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s439];
[L3464]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3464]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3465]  COND FALSE  !(revert)
[L3468]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s439];
[L3469]              _balances_ERC20[this][recipient_s439] := __var_18;
[L3470]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s439];
[L3471]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3117]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3118]  COND FALSE  !(revert)
[L3129]  COND TRUE   DType[this] == ZZZ
[L3130]  CALL        call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L3130]  RET         call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  COND FALSE  !(revert)
[L3142]  COND TRUE   DType[this] == ZZZ
[L3143]  CALL        call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L3143]  RET         call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3144]  COND FALSE  !(revert)
[L3155]  CALL        call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s281][__var_8], amount_s281, -255027035);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3155]  RET         call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s281][__var_8], amount_s281, -255027035);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == ZZZ
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, __var_6, __var_7);
[L3615]              __var_27 := null;
[L3616]  COND FALSE  !(!(owner_s569 != null))
[L3620]              __var_28 := null;
[L3621]  COND FALSE  !(!(spender_s569 != null))
[L3625]              sum__allowances1[owner_s569] := sum__allowances1[owner_s569] - _allowances_ERC20[this][owner_s569][spender_s569];
[L3626]              _allowances_ERC20[this][owner_s569][spender_s569] := amount_s569;
[L3627]              sum__allowances1[owner_s569] := sum__allowances1[owner_s569] + _allowances_ERC20[this][owner_s569][spender_s569];
[L3628]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, __var_6, __var_7);
[L3161]  COND FALSE  !(revert)
[L3172]              __ret_0_ := true;
[L909]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L910]               assume !revert && gas >= 0;
[L5683]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L5790]  RET         call CorralChoice_ZZZ(this);

Loop:
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND FALSE  !(choice == 18)
[L5665]  COND FALSE  !(choice == 17)
[L5671]  COND FALSE  !(choice == 16)
[L5678]  COND TRUE   choice == 15
[L5679]              gas := gas - 21000;
[L5680]  COND TRUE   gas >= 0
[L5681]              assume amount_s281 >= 0 && amount_s281 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5682]              assume msgvalue_MSG == 0;
[L5683]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s281 == recipient_s281 && (amount_s281 > _balances_ERC20[this][sender_s281] || amount_s281 > _allowances_ERC20[this][sender_s281][msgsender_MSG])) && amount_s281 >= 0) && amount_s281 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s281] >= 0) && _balances_ERC20[this][recipient_s281] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s281] >= 0) && _balances_ERC20[this][sender_s281] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s281][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s281][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L877]               havoc __exception;
[L878]               revert := false;
[L879]   COND FALSE  !(__exception)
[L909]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3116]  COND TRUE   DType[this] == ZZZ
[L3117]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3446]              __var_15 := null;
[L3447]  COND FALSE  !(!(sender_s439 != null))
[L3451]              __var_16 := null;
[L3452]  COND FALSE  !(!(recipient_s439 != null))
[L3456]  COND TRUE   sender_s439 == _owner_ERC20[this] || allow_ERC20[this]
[L3457]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3457]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3458]  COND FALSE  !(revert)
[L3461]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s439];
[L3462]              _balances_ERC20[this][sender_s439] := __var_17;
[L3463]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s439];
[L3464]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3464]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3465]  COND FALSE  !(revert)
[L3468]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s439];
[L3469]              _balances_ERC20[this][recipient_s439] := __var_18;
[L3470]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s439];
[L3471]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3117]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3118]  COND FALSE  !(revert)
[L3129]  COND TRUE   DType[this] == ZZZ
[L3130]  CALL        call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L3130]  RET         call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  COND FALSE  !(revert)
[L3142]  COND TRUE   DType[this] == ZZZ
[L3143]  CALL        call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L3143]  RET         call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3144]  COND FALSE  !(revert)
[L3155]  CALL        call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s281][__var_8], amount_s281, -255027035);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3155]  RET         call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s281][__var_8], amount_s281, -255027035);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == ZZZ
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, __var_6, __var_7);
[L3615]              __var_27 := null;
[L3616]  COND FALSE  !(!(owner_s569 != null))
[L3620]              __var_28 := null;
[L3621]  COND FALSE  !(!(spender_s569 != null))
[L3625]              sum__allowances1[owner_s569] := sum__allowances1[owner_s569] - _allowances_ERC20[this][owner_s569][spender_s569];
[L3626]              _allowances_ERC20[this][owner_s569][spender_s569] := amount_s569;
[L3627]              sum__allowances1[owner_s569] := sum__allowances1[owner_s569] + _allowances_ERC20[this][owner_s569][spender_s569];
[L3628]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, __var_6, __var_7);
[L3161]  COND FALSE  !(revert)
[L3172]              __ret_0_ := true;
[L909]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L910]               assume !revert && gas >= 0;
[L5683]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L5790]  RET         call CorralChoice_ZZZ(this);

[2020-11-25 11:42:53,459 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:42:53,459 INFO  L82        PathProgramCache]: Analyzing trace with hash -1884607138, now seen corresponding path program 1 times
[2020-11-25 11:42:53,460 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:42:53,473 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:42:53,539 INFO  L134       CoverageAnalysis]: Checked inductivity of 48 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 48 trivial. 0 not checked.
[2020-11-25 11:42:53,539 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:42:53,539 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 11:42:53,540 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:42:53,540 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 11:42:53,540 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 11:42:53,541 INFO  L87              Difference]: Start difference. First operand 3637 states and 4039 transitions. cyclomatic complexity: 405 Second operand 4 states.
[2020-11-25 11:42:53,844 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:42:53,844 INFO  L93              Difference]: Finished difference Result 4445 states and 5059 transitions.
[2020-11-25 11:42:53,844 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 11:42:53,844 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4445 states and 5059 transitions.
[2020-11-25 11:42:53,857 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 11:42:53,872 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4445 states to 4311 states and 4922 transitions.
[2020-11-25 11:42:53,872 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1198
[2020-11-25 11:42:53,873 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1198
[2020-11-25 11:42:53,873 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4311 states and 4922 transitions.
[2020-11-25 11:42:53,878 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:42:53,878 INFO  L728         BuchiCegarLoop]: Abstraction has 4311 states and 4922 transitions.
[2020-11-25 11:42:53,881 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4311 states and 4922 transitions.
[2020-11-25 11:42:53,905 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4311 to 3503.
[2020-11-25 11:42:53,905 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3503 states.
[2020-11-25 11:42:53,908 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3503 states to 3503 states and 3901 transitions.
[2020-11-25 11:42:53,908 INFO  L751         BuchiCegarLoop]: Abstraction has 3503 states and 3901 transitions.
[2020-11-25 11:42:53,908 INFO  L631         BuchiCegarLoop]: Abstraction has 3503 states and 3901 transitions.
[2020-11-25 11:42:53,908 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 11:42:53,909 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3503 states and 3901 transitions.
[2020-11-25 11:42:53,913 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:42:53,913 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:42:53,913 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:42:53,914 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:42:53,914 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L5780]              assume null == 0;
[L5781]  CALL        call this := FreshRefGenerator__success();
[L2620]              havoc newRef;
[L2621]              assume Alloc[newRef] == false;
[L2622]              Alloc[newRef] := true;
[L2623]              assume newRef != null;
[L5781]  RET         call this := FreshRefGenerator__success();
[L5782]              assume now >= 0;
[L5783]              assume DType[this] == ZZZ;
[L5784]              assume msgvalue_MSG == 0;
[L5785]              gas := gas - 53000;
[L5786]  CALL        call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L1487]              havoc __exception;
[L1488]              revert := false;
[L1489]  COND FALSE  !(__exception)
[L1519]  CALL        call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2684]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2669]              assume msgsender_MSG != null;
[L2670]              Balance[this] := 0;
[L2684]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2685]  COND FALSE  !(revert)
[L3917]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND FALSE  !(revert)
[L3921]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L3921]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3922]  COND FALSE  !(revert)
[L3926]              havoc __var_30;
[L3927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L2758]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2684]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2669]              assume msgsender_MSG != null;
[L2670]              Balance[this] := 0;
[L2684]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2685]  COND FALSE  !(revert)
[L2758]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2759]  COND FALSE  !(revert)
[L2762]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L2762]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2763]  COND FALSE  !(revert)
[L2766]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s125);
[L2724]              assume msgsender_MSG != null;
[L2725]              Balance[this] := 0;
[L2726]              _balances_ERC20[this] := zeroRefintArr();
[L2727]              sum__balances0[this] := 0;
[L2728]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2729]              sum__allowances1[this] := 0;
[L2730]              exceptions_ERC20[this] := zeroRefboolArr();
[L2731]              uniswap_ERC20[this] := null;
[L2732]              _owner_ERC20[this] := null;
[L2733]              _totalSupply_ERC20[this] := 0;
[L2734]              allow_ERC20[this] := false;
[L2736]              _owner_ERC20[this] := owner_s125;
[L2737]              allow_ERC20[this] := false;
[L2766]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s125);
[L2767]  COND FALSE  !(revert)
[L3927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L3928]  COND FALSE  !(revert)
[L3931]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1005117433, -558820371, 18);
[L3673]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L3673]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3674]  COND FALSE  !(revert)
[L3677]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s600, symbol_s600, decimals_s600);
[L3648]              assume msgsender_MSG != null;
[L3649]              Balance[this] := 0;
[L3650]              _name_ERC20Detailed[this] := -1905873549;
[L3651]              _symbol_ERC20Detailed[this] := -1905873549;
[L3652]              _decimals_ERC20Detailed[this] := 0;
[L3654]              _name_ERC20Detailed[this] := name_s600;
[L3655]              _symbol_ERC20Detailed[this] := symbol_s600;
[L3656]              _decimals_ERC20Detailed[this] := decimals_s600;
[L3677]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s600, symbol_s600, decimals_s600);
[L3678]  COND FALSE  !(revert)
[L3931]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1005117433, -558820371, 18);
[L3932]  COND FALSE  !(revert)
[L3935]  CALL        call ZZZ_ZZZ_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3875]              assume msgsender_MSG != null;
[L3876]              Balance[this] := 0;
[L3877]              governance_ZZZ[this] := null;
[L3878]              minters_ZZZ[this] := zeroRefboolArr();
[L3881]              havoc __var_29;
[L3882]              governance_ZZZ[this] := __var_29;
[L3935]  RET         call ZZZ_ZZZ_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3936]  COND FALSE  !(revert)
[L1519]  RET         call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L1520]              assume !revert && gas >= 0;
[L5786]  RET         call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L5787]              assume !revert && gas >= 0;
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND FALSE  !(choice == 18)
[L5665]  COND FALSE  !(choice == 17)
[L5671]  COND TRUE   choice == 16
[L5672]              gas := gas - 21000;
[L5673]  COND TRUE   gas >= 0
[L5674]              assume amount_s245 >= 0 && amount_s245 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5675]              assume msgvalue_MSG == 0;
[L5676]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s245, amount_s245);
[L805]               havoc __exception;
[L806]               revert := false;
[L807]   COND FALSE  !(__exception)
[L837]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s245, amount_s245);
[L3016]  COND TRUE   DType[this] == ZZZ
[L3017]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L3017]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3018]  COND FALSE  !(revert)
[L3029]  COND TRUE   DType[this] == ZZZ
[L3030]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, spender_s245, amount_s245);
[L3615]              __var_27 := null;
[L3616]  COND FALSE  !(!(owner_s569 != null))
[L3620]              __var_28 := null;
[L3621]  COND FALSE  !(!(spender_s569 != null))
[L3625]              sum__allowances1[owner_s569] := sum__allowances1[owner_s569] - _allowances_ERC20[this][owner_s569][spender_s569];
[L3626]              _allowances_ERC20[this][owner_s569][spender_s569] := amount_s569;
[L3627]              sum__allowances1[owner_s569] := sum__allowances1[owner_s569] + _allowances_ERC20[this][owner_s569][spender_s569];
[L3628]              assert { :EventEmitted "Approval_ERC20" } true;
[L3030]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, spender_s245, amount_s245);
[L3031]  COND FALSE  !(revert)
[L3042]              __ret_0_ := true;
[L837]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s245, amount_s245);
[L838]               assume !revert && gas >= 0;
[L5676]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s245, amount_s245);
[L5790]  RET         call CorralChoice_ZZZ(this);
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND FALSE  !(choice == 18)
[L5665]  COND FALSE  !(choice == 17)
[L5671]  COND FALSE  !(choice == 16)
[L5678]  COND TRUE   choice == 15
[L5679]              gas := gas - 21000;
[L5680]  COND TRUE   gas >= 0
[L5681]              assume amount_s281 >= 0 && amount_s281 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5682]              assume msgvalue_MSG == 0;
[L5683]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s281 == recipient_s281 && (amount_s281 > _balances_ERC20[this][sender_s281] || amount_s281 > _allowances_ERC20[this][sender_s281][msgsender_MSG])) && amount_s281 >= 0) && amount_s281 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s281] >= 0) && _balances_ERC20[this][recipient_s281] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s281] >= 0) && _balances_ERC20[this][sender_s281] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s281][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s281][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L877]               havoc __exception;
[L878]               revert := false;
[L879]   COND FALSE  !(__exception)
[L909]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3116]  COND TRUE   DType[this] == ZZZ
[L3117]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3446]              __var_15 := null;
[L3447]  COND FALSE  !(!(sender_s439 != null))
[L3451]              __var_16 := null;
[L3452]  COND FALSE  !(!(recipient_s439 != null))
[L3456]  COND TRUE   sender_s439 == _owner_ERC20[this] || allow_ERC20[this]
[L3457]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3457]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3458]  COND FALSE  !(revert)
[L3461]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s439];
[L3462]              _balances_ERC20[this][sender_s439] := __var_17;
[L3463]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s439];
[L3464]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3464]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3465]  COND FALSE  !(revert)
[L3468]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s439];
[L3469]              _balances_ERC20[this][recipient_s439] := __var_18;
[L3470]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s439];
[L3471]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3117]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3118]  COND FALSE  !(revert)
[L3129]  COND TRUE   DType[this] == ZZZ
[L3130]  CALL        call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L3130]  RET         call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  COND FALSE  !(revert)
[L3142]  COND FALSE  !(DType[this] == ZZZ)
[L3147]  COND TRUE   DType[this] == ERC20
[L3148]  CALL        call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L3148]  RET         call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3149]  COND FALSE  !(revert)
[L3155]  CALL        call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s281][__var_8], amount_s281, -255027035);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3155]  RET         call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s281][__var_8], amount_s281, -255027035);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == ZZZ
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, __var_6, __var_7);
[L3615]              __var_27 := null;
[L3616]  COND FALSE  !(!(owner_s569 != null))
[L3620]              __var_28 := null;
[L3621]  COND FALSE  !(!(spender_s569 != null))
[L3625]              sum__allowances1[owner_s569] := sum__allowances1[owner_s569] - _allowances_ERC20[this][owner_s569][spender_s569];
[L3626]              _allowances_ERC20[this][owner_s569][spender_s569] := amount_s569;
[L3627]              sum__allowances1[owner_s569] := sum__allowances1[owner_s569] + _allowances_ERC20[this][owner_s569][spender_s569];
[L3628]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, __var_6, __var_7);
[L3161]  COND FALSE  !(revert)
[L3172]              __ret_0_ := true;
[L909]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L910]               assume !revert && gas >= 0;
[L5683]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L5790]  RET         call CorralChoice_ZZZ(this);

Loop:
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND TRUE   choice == 20
[L5647]              gas := gas - 21000;
[L5648]  COND FALSE  !(gas >= 0)
[L5790]  RET         call CorralChoice_ZZZ(this);

[2020-11-25 11:42:53,918 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:42:53,918 INFO  L82        PathProgramCache]: Analyzing trace with hash -1710690245, now seen corresponding path program 1 times
[2020-11-25 11:42:53,919 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:42:53,933 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:42:53,994 INFO  L134       CoverageAnalysis]: Checked inductivity of 110 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 110 trivial. 0 not checked.
[2020-11-25 11:42:53,994 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:42:53,994 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 11:42:53,994 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:42:53,994 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 11:42:53,994 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 11:42:53,995 INFO  L87              Difference]: Start difference. First operand 3503 states and 3901 transitions. cyclomatic complexity: 401 Second operand 3 states.
[2020-11-25 11:42:54,019 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:42:54,020 INFO  L93              Difference]: Finished difference Result 3521 states and 3923 transitions.
[2020-11-25 11:42:54,020 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 11:42:54,020 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3521 states and 3923 transitions.
[2020-11-25 11:42:54,025 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:42:54,033 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3521 states to 3521 states and 3923 transitions.
[2020-11-25 11:42:54,033 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 974
[2020-11-25 11:42:54,034 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 974
[2020-11-25 11:42:54,034 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3521 states and 3923 transitions.
[2020-11-25 11:42:54,036 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:42:54,036 INFO  L728         BuchiCegarLoop]: Abstraction has 3521 states and 3923 transitions.
[2020-11-25 11:42:54,039 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3521 states and 3923 transitions.
[2020-11-25 11:42:54,057 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3521 to 3515.
[2020-11-25 11:42:54,057 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3515 states.
[2020-11-25 11:42:54,060 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3515 states to 3515 states and 3915 transitions.
[2020-11-25 11:42:54,060 INFO  L751         BuchiCegarLoop]: Abstraction has 3515 states and 3915 transitions.
[2020-11-25 11:42:54,060 INFO  L631         BuchiCegarLoop]: Abstraction has 3515 states and 3915 transitions.
[2020-11-25 11:42:54,060 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 11:42:54,060 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3515 states and 3915 transitions.
[2020-11-25 11:42:54,064 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:42:54,064 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:42:54,064 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:42:54,065 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:42:54,065 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L5780]              assume null == 0;
[L5781]  CALL        call this := FreshRefGenerator__success();
[L2620]              havoc newRef;
[L2621]              assume Alloc[newRef] == false;
[L2622]              Alloc[newRef] := true;
[L2623]              assume newRef != null;
[L5781]  RET         call this := FreshRefGenerator__success();
[L5782]              assume now >= 0;
[L5783]              assume DType[this] == ZZZ;
[L5784]              assume msgvalue_MSG == 0;
[L5785]              gas := gas - 53000;
[L5786]  CALL        call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L1487]              havoc __exception;
[L1488]              revert := false;
[L1489]  COND FALSE  !(__exception)
[L1519]  CALL        call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2684]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2669]              assume msgsender_MSG != null;
[L2670]              Balance[this] := 0;
[L2684]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2685]  COND FALSE  !(revert)
[L3917]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND FALSE  !(revert)
[L3921]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L3921]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3922]  COND FALSE  !(revert)
[L3926]              havoc __var_30;
[L3927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L2758]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2684]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2669]              assume msgsender_MSG != null;
[L2670]              Balance[this] := 0;
[L2684]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2685]  COND FALSE  !(revert)
[L2758]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2759]  COND FALSE  !(revert)
[L2762]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L2762]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2763]  COND FALSE  !(revert)
[L2766]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s125);
[L2724]              assume msgsender_MSG != null;
[L2725]              Balance[this] := 0;
[L2726]              _balances_ERC20[this] := zeroRefintArr();
[L2727]              sum__balances0[this] := 0;
[L2728]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2729]              sum__allowances1[this] := 0;
[L2730]              exceptions_ERC20[this] := zeroRefboolArr();
[L2731]              uniswap_ERC20[this] := null;
[L2732]              _owner_ERC20[this] := null;
[L2733]              _totalSupply_ERC20[this] := 0;
[L2734]              allow_ERC20[this] := false;
[L2736]              _owner_ERC20[this] := owner_s125;
[L2737]              allow_ERC20[this] := false;
[L2766]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s125);
[L2767]  COND FALSE  !(revert)
[L3927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L3928]  COND FALSE  !(revert)
[L3931]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1005117433, -558820371, 18);
[L3673]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L3673]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3674]  COND FALSE  !(revert)
[L3677]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s600, symbol_s600, decimals_s600);
[L3648]              assume msgsender_MSG != null;
[L3649]              Balance[this] := 0;
[L3650]              _name_ERC20Detailed[this] := -1905873549;
[L3651]              _symbol_ERC20Detailed[this] := -1905873549;
[L3652]              _decimals_ERC20Detailed[this] := 0;
[L3654]              _name_ERC20Detailed[this] := name_s600;
[L3655]              _symbol_ERC20Detailed[this] := symbol_s600;
[L3656]              _decimals_ERC20Detailed[this] := decimals_s600;
[L3677]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s600, symbol_s600, decimals_s600);
[L3678]  COND FALSE  !(revert)
[L3931]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1005117433, -558820371, 18);
[L3932]  COND FALSE  !(revert)
[L3935]  CALL        call ZZZ_ZZZ_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3875]              assume msgsender_MSG != null;
[L3876]              Balance[this] := 0;
[L3877]              governance_ZZZ[this] := null;
[L3878]              minters_ZZZ[this] := zeroRefboolArr();
[L3881]              havoc __var_29;
[L3882]              governance_ZZZ[this] := __var_29;
[L3935]  RET         call ZZZ_ZZZ_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3936]  COND FALSE  !(revert)
[L1519]  RET         call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L1520]              assume !revert && gas >= 0;
[L5786]  RET         call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L5787]              assume !revert && gas >= 0;
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND FALSE  !(choice == 18)
[L5665]  COND FALSE  !(choice == 17)
[L5671]  COND TRUE   choice == 16
[L5672]              gas := gas - 21000;
[L5673]  COND TRUE   gas >= 0
[L5674]              assume amount_s245 >= 0 && amount_s245 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5675]              assume msgvalue_MSG == 0;
[L5676]  CALL        call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s245, amount_s245);
[L805]               havoc __exception;
[L806]               revert := false;
[L807]   COND FALSE  !(__exception)
[L837]   CALL        call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s245, amount_s245);
[L3016]  COND TRUE   DType[this] == ZZZ
[L3017]  CALL        call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L3017]  RET         call __var_5 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3018]  COND FALSE  !(revert)
[L3029]  COND TRUE   DType[this] == ZZZ
[L3030]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, spender_s245, amount_s245);
[L3615]              __var_27 := null;
[L3616]  COND FALSE  !(!(owner_s569 != null))
[L3620]              __var_28 := null;
[L3621]  COND FALSE  !(!(spender_s569 != null))
[L3625]              sum__allowances1[owner_s569] := sum__allowances1[owner_s569] - _allowances_ERC20[this][owner_s569][spender_s569];
[L3626]              _allowances_ERC20[this][owner_s569][spender_s569] := amount_s569;
[L3627]              sum__allowances1[owner_s569] := sum__allowances1[owner_s569] + _allowances_ERC20[this][owner_s569][spender_s569];
[L3628]              assert { :EventEmitted "Approval_ERC20" } true;
[L3030]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_5, spender_s245, amount_s245);
[L3031]  COND FALSE  !(revert)
[L3042]              __ret_0_ := true;
[L837]   RET         call __ret_0_ := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s245, amount_s245);
[L838]               assume !revert && gas >= 0;
[L5676]  RET         call __ret_0_approve := approve~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, spender_s245, amount_s245);
[L5790]  RET         call CorralChoice_ZZZ(this);
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND FALSE  !(choice == 18)
[L5665]  COND FALSE  !(choice == 17)
[L5671]  COND FALSE  !(choice == 16)
[L5678]  COND TRUE   choice == 15
[L5679]              gas := gas - 21000;
[L5680]  COND TRUE   gas >= 0
[L5681]              assume amount_s281 >= 0 && amount_s281 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5682]              assume msgvalue_MSG == 0;
[L5683]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s281 == recipient_s281 && (amount_s281 > _balances_ERC20[this][sender_s281] || amount_s281 > _allowances_ERC20[this][sender_s281][msgsender_MSG])) && amount_s281 >= 0) && amount_s281 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s281] >= 0) && _balances_ERC20[this][recipient_s281] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s281] >= 0) && _balances_ERC20[this][sender_s281] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s281][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s281][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L877]               havoc __exception;
[L878]               revert := false;
[L879]   COND FALSE  !(__exception)
[L909]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3116]  COND TRUE   DType[this] == ZZZ
[L3117]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3446]              __var_15 := null;
[L3447]  COND FALSE  !(!(sender_s439 != null))
[L3451]              __var_16 := null;
[L3452]  COND FALSE  !(!(recipient_s439 != null))
[L3456]  COND TRUE   sender_s439 == _owner_ERC20[this] || allow_ERC20[this]
[L3457]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3457]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3458]  COND FALSE  !(revert)
[L3461]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s439];
[L3462]              _balances_ERC20[this][sender_s439] := __var_17;
[L3463]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s439];
[L3464]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3464]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3465]  COND FALSE  !(revert)
[L3468]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s439];
[L3469]              _balances_ERC20[this][recipient_s439] := __var_18;
[L3470]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s439];
[L3471]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3117]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3118]  COND FALSE  !(revert)
[L3129]  COND TRUE   DType[this] == ZZZ
[L3130]  CALL        call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L3130]  RET         call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  COND FALSE  !(revert)
[L3142]  COND TRUE   DType[this] == ZZZ
[L3143]  CALL        call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L3143]  RET         call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3144]  COND FALSE  !(revert)
[L3155]  CALL        call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s281][__var_8], amount_s281, -255027035);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3155]  RET         call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s281][__var_8], amount_s281, -255027035);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == ZZZ
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, __var_6, __var_7);
[L3615]              __var_27 := null;
[L3616]  COND FALSE  !(!(owner_s569 != null))
[L3620]              __var_28 := null;
[L3621]  COND FALSE  !(!(spender_s569 != null))
[L3625]              sum__allowances1[owner_s569] := sum__allowances1[owner_s569] - _allowances_ERC20[this][owner_s569][spender_s569];
[L3626]              _allowances_ERC20[this][owner_s569][spender_s569] := amount_s569;
[L3627]              sum__allowances1[owner_s569] := sum__allowances1[owner_s569] + _allowances_ERC20[this][owner_s569][spender_s569];
[L3628]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, __var_6, __var_7);
[L3161]  COND FALSE  !(revert)
[L3172]              __ret_0_ := true;
[L909]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L910]               assume !revert && gas >= 0;
[L5683]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L5790]  RET         call CorralChoice_ZZZ(this);

Loop:
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND TRUE   choice == 20
[L5647]              gas := gas - 21000;
[L5648]  COND FALSE  !(gas >= 0)
[L5790]  RET         call CorralChoice_ZZZ(this);

[2020-11-25 11:42:54,069 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:42:54,069 INFO  L82        PathProgramCache]: Analyzing trace with hash 744870311, now seen corresponding path program 1 times
[2020-11-25 11:42:54,070 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:42:54,087 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:42:54,342 INFO  L134       CoverageAnalysis]: Checked inductivity of 110 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 108 trivial. 0 not checked.
[2020-11-25 11:42:54,342 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:42:54,342 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [19] imperfect sequences [] total 19
[2020-11-25 11:42:54,343 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:42:54,343 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 20 interpolants.
[2020-11-25 11:42:54,343 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=43, Invalid=337, Unknown=0, NotChecked=0, Total=380
[2020-11-25 11:42:54,343 INFO  L87              Difference]: Start difference. First operand 3515 states and 3915 transitions. cyclomatic complexity: 403 Second operand 20 states.
[2020-11-25 11:42:57,211 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:42:57,211 INFO  L93              Difference]: Finished difference Result 3584 states and 3995 transitions.
[2020-11-25 11:42:57,211 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2020-11-25 11:42:57,211 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3584 states and 3995 transitions.
[2020-11-25 11:42:57,217 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:42:57,224 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3584 states to 3584 states and 3995 transitions.
[2020-11-25 11:42:57,224 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 990
[2020-11-25 11:42:57,225 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 990
[2020-11-25 11:42:57,225 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3584 states and 3995 transitions.
[2020-11-25 11:42:57,227 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:42:57,227 INFO  L728         BuchiCegarLoop]: Abstraction has 3584 states and 3995 transitions.
[2020-11-25 11:42:57,230 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3584 states and 3995 transitions.
[2020-11-25 11:42:57,249 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3584 to 3529.
[2020-11-25 11:42:57,250 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3529 states.
[2020-11-25 11:42:57,253 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3529 states to 3529 states and 3939 transitions.
[2020-11-25 11:42:57,253 INFO  L751         BuchiCegarLoop]: Abstraction has 3529 states and 3939 transitions.
[2020-11-25 11:42:57,253 INFO  L631         BuchiCegarLoop]: Abstraction has 3529 states and 3939 transitions.
[2020-11-25 11:42:57,253 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 11:42:57,253 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3529 states and 3939 transitions.
[2020-11-25 11:42:57,256 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 11:42:57,256 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:42:57,256 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:42:57,258 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:42:57,258 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L5780]              assume null == 0;
[L5781]  CALL        call this := FreshRefGenerator__success();
[L2620]              havoc newRef;
[L2621]              assume Alloc[newRef] == false;
[L2622]              Alloc[newRef] := true;
[L2623]              assume newRef != null;
[L5781]  RET         call this := FreshRefGenerator__success();
[L5782]              assume now >= 0;
[L5783]              assume DType[this] == ZZZ;
[L5784]              assume msgvalue_MSG == 0;
[L5785]              gas := gas - 53000;
[L5786]  CALL        call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L1487]              havoc __exception;
[L1488]              revert := false;
[L1489]  COND FALSE  !(__exception)
[L1519]  CALL        call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2684]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2669]              assume msgsender_MSG != null;
[L2670]              Balance[this] := 0;
[L2684]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2685]  COND FALSE  !(revert)
[L3917]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND FALSE  !(revert)
[L3921]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L3921]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3922]  COND FALSE  !(revert)
[L3926]              havoc __var_30;
[L3927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L2758]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2684]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2669]              assume msgsender_MSG != null;
[L2670]              Balance[this] := 0;
[L2684]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2685]  COND FALSE  !(revert)
[L2758]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2759]  COND FALSE  !(revert)
[L2762]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L2762]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2763]  COND FALSE  !(revert)
[L2766]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s125);
[L2724]              assume msgsender_MSG != null;
[L2725]              Balance[this] := 0;
[L2726]              _balances_ERC20[this] := zeroRefintArr();
[L2727]              sum__balances0[this] := 0;
[L2728]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2729]              sum__allowances1[this] := 0;
[L2730]              exceptions_ERC20[this] := zeroRefboolArr();
[L2731]              uniswap_ERC20[this] := null;
[L2732]              _owner_ERC20[this] := null;
[L2733]              _totalSupply_ERC20[this] := 0;
[L2734]              allow_ERC20[this] := false;
[L2736]              _owner_ERC20[this] := owner_s125;
[L2737]              allow_ERC20[this] := false;
[L2766]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s125);
[L2767]  COND FALSE  !(revert)
[L3927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L3928]  COND FALSE  !(revert)
[L3931]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1005117433, -558820371, 18);
[L3673]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L3673]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3674]  COND FALSE  !(revert)
[L3677]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s600, symbol_s600, decimals_s600);
[L3648]              assume msgsender_MSG != null;
[L3649]              Balance[this] := 0;
[L3650]              _name_ERC20Detailed[this] := -1905873549;
[L3651]              _symbol_ERC20Detailed[this] := -1905873549;
[L3652]              _decimals_ERC20Detailed[this] := 0;
[L3654]              _name_ERC20Detailed[this] := name_s600;
[L3655]              _symbol_ERC20Detailed[this] := symbol_s600;
[L3656]              _decimals_ERC20Detailed[this] := decimals_s600;
[L3677]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s600, symbol_s600, decimals_s600);
[L3678]  COND FALSE  !(revert)
[L3931]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1005117433, -558820371, 18);
[L3932]  COND FALSE  !(revert)
[L3935]  CALL        call ZZZ_ZZZ_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3875]              assume msgsender_MSG != null;
[L3876]              Balance[this] := 0;
[L3877]              governance_ZZZ[this] := null;
[L3878]              minters_ZZZ[this] := zeroRefboolArr();
[L3881]              havoc __var_29;
[L3882]              governance_ZZZ[this] := __var_29;
[L3935]  RET         call ZZZ_ZZZ_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3936]  COND FALSE  !(revert)
[L1519]  RET         call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L1520]              assume !revert && gas >= 0;
[L5786]  RET         call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L5787]              assume !revert && gas >= 0;
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND FALSE  !(choice == 18)
[L5665]  COND FALSE  !(choice == 17)
[L5671]  COND FALSE  !(choice == 16)
[L5678]  COND TRUE   choice == 15
[L5679]              gas := gas - 21000;
[L5680]  COND TRUE   gas >= 0
[L5681]              assume amount_s281 >= 0 && amount_s281 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5682]              assume msgvalue_MSG == 0;
[L5683]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((sender_s281 == recipient_s281 && (amount_s281 > _balances_ERC20[this][sender_s281] || amount_s281 > _allowances_ERC20[this][sender_s281][msgsender_MSG])) && amount_s281 >= 0) && amount_s281 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s281] >= 0) && _balances_ERC20[this][recipient_s281] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s281] >= 0) && _balances_ERC20[this][sender_s281] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s281][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s281][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L877]               havoc __exception;
[L878]               revert := false;
[L879]   COND FALSE  !(__exception)
[L909]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3116]  COND TRUE   DType[this] == ZZZ
[L3117]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3446]              __var_15 := null;
[L3447]  COND FALSE  !(!(sender_s439 != null))
[L3451]              __var_16 := null;
[L3452]  COND FALSE  !(!(recipient_s439 != null))
[L3456]  COND FALSE  !(sender_s439 == _owner_ERC20[this] || allow_ERC20[this])
[L3472]  COND TRUE   exceptions_ERC20[this][recipient_s439]
[L3473]  CALL        call __var_19 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3473]  RET         call __var_19 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3474]  COND FALSE  !(revert)
[L3477]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s439];
[L3478]              _balances_ERC20[this][sender_s439] := __var_19;
[L3479]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s439];
[L3480]  CALL        call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3480]  RET         call __var_20 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3481]  COND FALSE  !(revert)
[L3484]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s439];
[L3485]              _balances_ERC20[this][recipient_s439] := __var_20;
[L3486]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s439];
[L3487]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3117]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3118]  COND FALSE  !(revert)
[L3129]  COND TRUE   DType[this] == ZZZ
[L3130]  CALL        call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L3130]  RET         call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  COND FALSE  !(revert)
[L3142]  COND TRUE   DType[this] == ZZZ
[L3143]  CALL        call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L3143]  RET         call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3144]  COND FALSE  !(revert)
[L3155]  CALL        call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s281][__var_8], amount_s281, -255027035);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3155]  RET         call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s281][__var_8], amount_s281, -255027035);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == ZZZ
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, __var_6, __var_7);
[L3615]              __var_27 := null;
[L3616]  COND FALSE  !(!(owner_s569 != null))
[L3620]              __var_28 := null;
[L3621]  COND FALSE  !(!(spender_s569 != null))
[L3625]              sum__allowances1[owner_s569] := sum__allowances1[owner_s569] - _allowances_ERC20[this][owner_s569][spender_s569];
[L3626]              _allowances_ERC20[this][owner_s569][spender_s569] := amount_s569;
[L3627]              sum__allowances1[owner_s569] := sum__allowances1[owner_s569] + _allowances_ERC20[this][owner_s569][spender_s569];
[L3628]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, __var_6, __var_7);
[L3161]  COND FALSE  !(revert)
[L3172]              __ret_0_ := true;
[L909]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L910]               assume !revert && gas >= 0;
[L5683]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L5790]  RET         call CorralChoice_ZZZ(this);
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND FALSE  !(choice == 18)
[L5665]  COND FALSE  !(choice == 17)
[L5671]  COND FALSE  !(choice == 16)
[L5678]  COND TRUE   choice == 15
[L5679]              gas := gas - 21000;
[L5680]  COND TRUE   gas >= 0
[L5681]              assume amount_s281 >= 0 && amount_s281 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5682]              assume msgvalue_MSG == 0;
[L5683]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s281 == recipient_s281 && (amount_s281 > _balances_ERC20[this][sender_s281] || amount_s281 > _allowances_ERC20[this][sender_s281][msgsender_MSG])) && amount_s281 >= 0) && amount_s281 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s281] >= 0) && _balances_ERC20[this][recipient_s281] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s281] >= 0) && _balances_ERC20[this][sender_s281] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s281][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s281][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L877]               havoc __exception;
[L878]               revert := false;
[L879]   COND FALSE  !(__exception)
[L909]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3116]  COND TRUE   DType[this] == ZZZ
[L3117]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3446]              __var_15 := null;
[L3447]  COND FALSE  !(!(sender_s439 != null))
[L3451]              __var_16 := null;
[L3452]  COND FALSE  !(!(recipient_s439 != null))
[L3456]  COND TRUE   sender_s439 == _owner_ERC20[this] || allow_ERC20[this]
[L3457]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3457]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3458]  COND FALSE  !(revert)
[L3461]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s439];
[L3462]              _balances_ERC20[this][sender_s439] := __var_17;
[L3463]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s439];
[L3464]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3464]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3465]  COND FALSE  !(revert)
[L3468]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s439];
[L3469]              _balances_ERC20[this][recipient_s439] := __var_18;
[L3470]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s439];
[L3471]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3117]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3118]  COND FALSE  !(revert)
[L3129]  COND TRUE   DType[this] == ZZZ
[L3130]  CALL        call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L3130]  RET         call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  COND FALSE  !(revert)
[L3142]  COND TRUE   DType[this] == ZZZ
[L3143]  CALL        call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L3143]  RET         call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3144]  COND FALSE  !(revert)
[L3155]  CALL        call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s281][__var_8], amount_s281, -255027035);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3155]  RET         call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s281][__var_8], amount_s281, -255027035);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == ZZZ
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, __var_6, __var_7);
[L3615]              __var_27 := null;
[L3616]  COND FALSE  !(!(owner_s569 != null))
[L3620]              __var_28 := null;
[L3621]  COND FALSE  !(!(spender_s569 != null))
[L3625]              sum__allowances1[owner_s569] := sum__allowances1[owner_s569] - _allowances_ERC20[this][owner_s569][spender_s569];
[L3626]              _allowances_ERC20[this][owner_s569][spender_s569] := amount_s569;
[L3627]              sum__allowances1[owner_s569] := sum__allowances1[owner_s569] + _allowances_ERC20[this][owner_s569][spender_s569];
[L3628]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, __var_6, __var_7);
[L3161]  COND FALSE  !(revert)
[L3172]              __ret_0_ := true;
[L909]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L910]               assume !revert && gas >= 0;
[L5683]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L5790]  RET         call CorralChoice_ZZZ(this);

Loop:
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND FALSE  !(choice == 18)
[L5665]  COND FALSE  !(choice == 17)
[L5671]  COND FALSE  !(choice == 16)
[L5678]  COND TRUE   choice == 15
[L5679]              gas := gas - 21000;
[L5680]  COND TRUE   gas >= 0
[L5681]              assume amount_s281 >= 0 && amount_s281 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5682]              assume msgvalue_MSG == 0;
[L5683]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s281 == recipient_s281 && (amount_s281 > _balances_ERC20[this][sender_s281] || amount_s281 > _allowances_ERC20[this][sender_s281][msgsender_MSG])) && amount_s281 >= 0) && amount_s281 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s281] >= 0) && _balances_ERC20[this][recipient_s281] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s281] >= 0) && _balances_ERC20[this][sender_s281] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s281][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s281][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L877]               havoc __exception;
[L878]               revert := false;
[L879]   COND FALSE  !(__exception)
[L909]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3116]  COND TRUE   DType[this] == ZZZ
[L3117]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3446]              __var_15 := null;
[L3447]  COND FALSE  !(!(sender_s439 != null))
[L3451]              __var_16 := null;
[L3452]  COND FALSE  !(!(recipient_s439 != null))
[L3456]  COND TRUE   sender_s439 == _owner_ERC20[this] || allow_ERC20[this]
[L3457]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3457]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3458]  COND FALSE  !(revert)
[L3461]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s439];
[L3462]              _balances_ERC20[this][sender_s439] := __var_17;
[L3463]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s439];
[L3464]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3464]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3465]  COND FALSE  !(revert)
[L3468]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s439];
[L3469]              _balances_ERC20[this][recipient_s439] := __var_18;
[L3470]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s439];
[L3471]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3117]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3118]  COND FALSE  !(revert)
[L3129]  COND TRUE   DType[this] == ZZZ
[L3130]  CALL        call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L3130]  RET         call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  COND FALSE  !(revert)
[L3142]  COND TRUE   DType[this] == ZZZ
[L3143]  CALL        call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L3143]  RET         call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3144]  COND FALSE  !(revert)
[L3155]  CALL        call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s281][__var_8], amount_s281, -255027035);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3155]  RET         call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s281][__var_8], amount_s281, -255027035);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == ZZZ
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, __var_6, __var_7);
[L3615]              __var_27 := null;
[L3616]  COND FALSE  !(!(owner_s569 != null))
[L3620]              __var_28 := null;
[L3621]  COND FALSE  !(!(spender_s569 != null))
[L3625]              sum__allowances1[owner_s569] := sum__allowances1[owner_s569] - _allowances_ERC20[this][owner_s569][spender_s569];
[L3626]              _allowances_ERC20[this][owner_s569][spender_s569] := amount_s569;
[L3627]              sum__allowances1[owner_s569] := sum__allowances1[owner_s569] + _allowances_ERC20[this][owner_s569][spender_s569];
[L3628]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, __var_6, __var_7);
[L3161]  COND FALSE  !(revert)
[L3172]              __ret_0_ := true;
[L909]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L910]               assume !revert && gas >= 0;
[L5683]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L5790]  RET         call CorralChoice_ZZZ(this);

[2020-11-25 11:42:57,262 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:42:57,263 INFO  L82        PathProgramCache]: Analyzing trace with hash 2076082750, now seen corresponding path program 1 times
[2020-11-25 11:42:57,263 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:42:57,278 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:42:57,385 INFO  L134       CoverageAnalysis]: Checked inductivity of 128 backedges. 1 proven. 67 refuted. 0 times theorem prover too weak. 60 trivial. 0 not checked.
[2020-11-25 11:42:57,385 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 11:42:57,385 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-11-25 11:42:57,385 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:42:57,385 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 11:42:57,386 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=22, Invalid=110, Unknown=0, NotChecked=0, Total=132
[2020-11-25 11:42:57,386 INFO  L87              Difference]: Start difference. First operand 3529 states and 3939 transitions. cyclomatic complexity: 415 Second operand 12 states.
[2020-11-25 11:42:58,637 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:42:58,637 INFO  L93              Difference]: Finished difference Result 3661 states and 4134 transitions.
[2020-11-25 11:42:58,637 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 11:42:58,638 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3661 states and 4134 transitions.
[2020-11-25 11:42:58,645 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:42:58,655 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3661 states to 3661 states and 4134 transitions.
[2020-11-25 11:42:58,655 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1008
[2020-11-25 11:42:58,656 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1008
[2020-11-25 11:42:58,656 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3661 states and 4134 transitions.
[2020-11-25 11:42:58,660 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:42:58,661 INFO  L728         BuchiCegarLoop]: Abstraction has 3661 states and 4134 transitions.
[2020-11-25 11:42:58,665 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3661 states and 4134 transitions.
[2020-11-25 11:42:58,686 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3661 to 3661.
[2020-11-25 11:42:58,686 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3661 states.
[2020-11-25 11:42:58,689 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3661 states to 3661 states and 4134 transitions.
[2020-11-25 11:42:58,689 INFO  L751         BuchiCegarLoop]: Abstraction has 3661 states and 4134 transitions.
[2020-11-25 11:42:58,689 INFO  L631         BuchiCegarLoop]: Abstraction has 3661 states and 4134 transitions.
[2020-11-25 11:42:58,689 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 11:42:58,690 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3661 states and 4134 transitions.
[2020-11-25 11:42:58,693 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 11:42:58,693 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 11:42:58,693 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 11:42:58,695 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 11:42:58,695 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_ERC200 := false;
[L2]                 call_transferFrom_ERC200 := false;
[L2]     CALL        call main();
[L5780]              assume null == 0;
[L5781]  CALL        call this := FreshRefGenerator__success();
[L2620]              havoc newRef;
[L2621]              assume Alloc[newRef] == false;
[L2622]              Alloc[newRef] := true;
[L2623]              assume newRef != null;
[L5781]  RET         call this := FreshRefGenerator__success();
[L5782]              assume now >= 0;
[L5783]              assume DType[this] == ZZZ;
[L5784]              assume msgvalue_MSG == 0;
[L5785]              gas := gas - 53000;
[L5786]  CALL        call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L1487]              havoc __exception;
[L1488]              revert := false;
[L1489]  COND FALSE  !(__exception)
[L1519]  CALL        call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L3917]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2684]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2669]              assume msgsender_MSG != null;
[L2670]              Balance[this] := 0;
[L2684]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2685]  COND FALSE  !(revert)
[L3917]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3918]  COND FALSE  !(revert)
[L3921]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L3921]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3922]  COND FALSE  !(revert)
[L3926]              havoc __var_30;
[L3927]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L2758]  CALL        call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2684]  CALL        call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2669]              assume msgsender_MSG != null;
[L2670]              Balance[this] := 0;
[L2684]  RET         call Context_Context_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2685]  COND FALSE  !(revert)
[L2758]  RET         call Context_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2759]  COND FALSE  !(revert)
[L2762]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L2762]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2763]  COND FALSE  !(revert)
[L2766]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s125);
[L2724]              assume msgsender_MSG != null;
[L2725]              Balance[this] := 0;
[L2726]              _balances_ERC20[this] := zeroRefintArr();
[L2727]              sum__balances0[this] := 0;
[L2728]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2729]              sum__allowances1[this] := 0;
[L2730]              exceptions_ERC20[this] := zeroRefboolArr();
[L2731]              uniswap_ERC20[this] := null;
[L2732]              _owner_ERC20[this] := null;
[L2733]              _totalSupply_ERC20[this] := 0;
[L2734]              allow_ERC20[this] := false;
[L2736]              _owner_ERC20[this] := owner_s125;
[L2737]              allow_ERC20[this] := false;
[L2766]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, owner_s125);
[L2767]  COND FALSE  !(revert)
[L3927]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, __var_30);
[L3928]  COND FALSE  !(revert)
[L3931]  CALL        call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1005117433, -558820371, 18);
[L3673]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2652]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2637]              assume msgsender_MSG != null;
[L2638]              Balance[this] := 0;
[L2652]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2653]  COND FALSE  !(revert)
[L3673]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3674]  COND FALSE  !(revert)
[L3677]  CALL        call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s600, symbol_s600, decimals_s600);
[L3648]              assume msgsender_MSG != null;
[L3649]              Balance[this] := 0;
[L3650]              _name_ERC20Detailed[this] := -1905873549;
[L3651]              _symbol_ERC20Detailed[this] := -1905873549;
[L3652]              _decimals_ERC20Detailed[this] := 0;
[L3654]              _name_ERC20Detailed[this] := name_s600;
[L3655]              _symbol_ERC20Detailed[this] := symbol_s600;
[L3656]              _decimals_ERC20Detailed[this] := decimals_s600;
[L3677]  RET         call ERC20Detailed_ERC20Detailed_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s600, symbol_s600, decimals_s600);
[L3678]  COND FALSE  !(revert)
[L3931]  RET         call ERC20Detailed_ERC20Detailed__success(this, msgsender_MSG, msgvalue_MSG, -1005117433, -558820371, 18);
[L3932]  COND FALSE  !(revert)
[L3935]  CALL        call ZZZ_ZZZ_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3875]              assume msgsender_MSG != null;
[L3876]              Balance[this] := 0;
[L3877]              governance_ZZZ[this] := null;
[L3878]              minters_ZZZ[this] := zeroRefboolArr();
[L3881]              havoc __var_29;
[L3882]              governance_ZZZ[this] := __var_29;
[L3935]  RET         call ZZZ_ZZZ_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3936]  COND FALSE  !(revert)
[L1519]  RET         call ZZZ_ZZZ__success(this, msgsender_MSG, msgvalue_MSG);
[L1520]              assume !revert && gas >= 0;
[L5786]  RET         call ZZZ_ZZZ(this, msgsender_MSG, msgvalue_MSG);
[L5787]              assume !revert && gas >= 0;
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND FALSE  !(choice == 18)
[L5665]  COND FALSE  !(choice == 17)
[L5671]  COND FALSE  !(choice == 16)
[L5678]  COND TRUE   choice == 15
[L5679]              gas := gas - 21000;
[L5680]  COND TRUE   gas >= 0
[L5681]              assume amount_s281 >= 0 && amount_s281 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5682]              assume msgvalue_MSG == 0;
[L5683]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((((sender_s281 == recipient_s281 && (amount_s281 > _balances_ERC20[this][sender_s281] || amount_s281 > _allowances_ERC20[this][sender_s281][msgsender_MSG])) && amount_s281 >= 0) && amount_s281 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s281] >= 0) && _balances_ERC20[this][recipient_s281] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s281] >= 0) && _balances_ERC20[this][sender_s281] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s281][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s281][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L877]               havoc __exception;
[L878]               revert := false;
[L879]   COND FALSE  !(__exception)
[L909]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3116]  COND TRUE   DType[this] == ZZZ
[L3117]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3446]              __var_15 := null;
[L3447]  COND FALSE  !(!(sender_s439 != null))
[L3451]              __var_16 := null;
[L3452]  COND FALSE  !(!(recipient_s439 != null))
[L3456]  COND TRUE   sender_s439 == _owner_ERC20[this] || allow_ERC20[this]
[L3457]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3457]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3458]  COND FALSE  !(revert)
[L3461]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s439];
[L3462]              _balances_ERC20[this][sender_s439] := __var_17;
[L3463]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s439];
[L3464]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3464]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3465]  COND FALSE  !(revert)
[L3468]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s439];
[L3469]              _balances_ERC20[this][recipient_s439] := __var_18;
[L3470]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s439];
[L3471]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3117]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3118]  COND FALSE  !(revert)
[L3129]  COND TRUE   DType[this] == ZZZ
[L3130]  CALL        call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L3130]  RET         call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  COND FALSE  !(revert)
[L3142]  COND TRUE   DType[this] == ZZZ
[L3143]  CALL        call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L3143]  RET         call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3144]  COND FALSE  !(revert)
[L3155]  CALL        call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s281][__var_8], amount_s281, -255027035);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3155]  RET         call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s281][__var_8], amount_s281, -255027035);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == ZZZ
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, __var_6, __var_7);
[L3615]              __var_27 := null;
[L3616]  COND FALSE  !(!(owner_s569 != null))
[L3620]              __var_28 := null;
[L3621]  COND FALSE  !(!(spender_s569 != null))
[L3625]              sum__allowances1[owner_s569] := sum__allowances1[owner_s569] - _allowances_ERC20[this][owner_s569][spender_s569];
[L3626]              _allowances_ERC20[this][owner_s569][spender_s569] := amount_s569;
[L3627]              sum__allowances1[owner_s569] := sum__allowances1[owner_s569] + _allowances_ERC20[this][owner_s569][spender_s569];
[L3628]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, __var_6, __var_7);
[L3161]  COND FALSE  !(revert)
[L3172]              __ret_0_ := true;
[L909]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L910]               assume !revert && gas >= 0;
[L5683]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L5790]  RET         call CorralChoice_ZZZ(this);
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND FALSE  !(choice == 18)
[L5665]  COND FALSE  !(choice == 17)
[L5671]  COND FALSE  !(choice == 16)
[L5678]  COND TRUE   choice == 15
[L5679]              gas := gas - 21000;
[L5680]  COND TRUE   gas >= 0
[L5681]              assume amount_s281 >= 0 && amount_s281 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5682]              assume msgvalue_MSG == 0;
[L5683]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s281 == recipient_s281 && (amount_s281 > _balances_ERC20[this][sender_s281] || amount_s281 > _allowances_ERC20[this][sender_s281][msgsender_MSG])) && amount_s281 >= 0) && amount_s281 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s281] >= 0) && _balances_ERC20[this][recipient_s281] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s281] >= 0) && _balances_ERC20[this][sender_s281] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s281][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s281][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L877]               havoc __exception;
[L878]               revert := false;
[L879]   COND FALSE  !(__exception)
[L909]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3116]  COND TRUE   DType[this] == ZZZ
[L3117]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3446]              __var_15 := null;
[L3447]  COND FALSE  !(!(sender_s439 != null))
[L3451]              __var_16 := null;
[L3452]  COND FALSE  !(!(recipient_s439 != null))
[L3456]  COND TRUE   sender_s439 == _owner_ERC20[this] || allow_ERC20[this]
[L3457]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3457]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3458]  COND FALSE  !(revert)
[L3461]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s439];
[L3462]              _balances_ERC20[this][sender_s439] := __var_17;
[L3463]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s439];
[L3464]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3464]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3465]  COND FALSE  !(revert)
[L3468]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s439];
[L3469]              _balances_ERC20[this][recipient_s439] := __var_18;
[L3470]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s439];
[L3471]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3117]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3118]  COND FALSE  !(revert)
[L3129]  COND TRUE   DType[this] == ZZZ
[L3130]  CALL        call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L3130]  RET         call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  COND FALSE  !(revert)
[L3142]  COND TRUE   DType[this] == ZZZ
[L3143]  CALL        call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L3143]  RET         call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3144]  COND FALSE  !(revert)
[L3155]  CALL        call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s281][__var_8], amount_s281, -255027035);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3155]  RET         call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s281][__var_8], amount_s281, -255027035);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == ZZZ
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, __var_6, __var_7);
[L3615]              __var_27 := null;
[L3616]  COND FALSE  !(!(owner_s569 != null))
[L3620]              __var_28 := null;
[L3621]  COND FALSE  !(!(spender_s569 != null))
[L3625]              sum__allowances1[owner_s569] := sum__allowances1[owner_s569] - _allowances_ERC20[this][owner_s569][spender_s569];
[L3626]              _allowances_ERC20[this][owner_s569][spender_s569] := amount_s569;
[L3627]              sum__allowances1[owner_s569] := sum__allowances1[owner_s569] + _allowances_ERC20[this][owner_s569][spender_s569];
[L3628]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, __var_6, __var_7);
[L3161]  COND FALSE  !(revert)
[L3172]              __ret_0_ := true;
[L909]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L910]               assume !revert && gas >= 0;
[L5683]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L5790]  RET         call CorralChoice_ZZZ(this);

Loop:
[L5790]  CALL        call CorralChoice_ZZZ(this);
[L5591]              havoc msgsender_MSG;
[L5592]              havoc msgvalue_MSG;
[L5593]              havoc choice;
[L5594]              havoc __ret_0_totalSupply;
[L5595]              havoc account_s191;
[L5596]              havoc __ret_0_balanceOf;
[L5597]              havoc recipient_s210;
[L5598]              havoc amount_s210;
[L5599]              havoc __ret_0_transfer;
[L5600]              havoc owner_s226;
[L5601]              havoc spender_s226;
[L5602]              havoc __ret_0_allowance;
[L5603]              havoc spender_s245;
[L5604]              havoc amount_s245;
[L5605]              havoc __ret_0_approve;
[L5606]              havoc sender_s281;
[L5607]              havoc recipient_s281;
[L5608]              havoc amount_s281;
[L5609]              havoc __ret_0_transferFrom;
[L5610]              havoc owner_s125;
[L5611]              havoc someAddress_s153;
[L5612]              havoc spender_s308;
[L5613]              havoc addedValue_s308;
[L5614]              havoc __ret_0_increaseAllowance;
[L5615]              havoc spender_s336;
[L5616]              havoc subtractedValue_s336;
[L5617]              havoc __ret_0_decreaseAllowance;
[L5618]              havoc name_s600;
[L5619]              havoc symbol_s600;
[L5620]              havoc decimals_s600;
[L5621]              havoc __ret_0_name;
[L5622]              havoc __ret_0_symbol;
[L5623]              havoc __ret_0_decimals;
[L5624]              havoc __ret_0_governance;
[L5625]              havoc arg852_s0;
[L5626]              havoc __ret_0_minters;
[L5627]              havoc account_s791;
[L5628]              havoc amount_s791;
[L5629]              havoc _governance_s809;
[L5630]              havoc _minter_s829;
[L5631]              havoc _minter_s849;
[L5632]              havoc tmpNow;
[L5633]              havoc gas;
[L5634]              assume gas > 4000000 && gas <= 8000000;
[L5635]              tmpNow := now;
[L5636]              havoc now;
[L5637]              assume now > tmpNow;
[L5638]              assume msgsender_MSG != null;
[L5639]              assume DType[msgsender_MSG] != IERC20;
[L5640]              assume DType[msgsender_MSG] != Context;
[L5641]              assume DType[msgsender_MSG] != ERC20;
[L5642]              assume DType[msgsender_MSG] != ERC20Detailed;
[L5643]              assume DType[msgsender_MSG] != SafeMath;
[L5644]              assume DType[msgsender_MSG] != ZZZ;
[L5645]              Alloc[msgsender_MSG] := true;
[L5646]  COND FALSE  !(choice == 20)
[L5652]  COND FALSE  !(choice == 19)
[L5658]  COND FALSE  !(choice == 18)
[L5665]  COND FALSE  !(choice == 17)
[L5671]  COND FALSE  !(choice == 16)
[L5678]  COND TRUE   choice == 15
[L5679]              gas := gas - 21000;
[L5680]  COND TRUE   gas >= 0
[L5681]              assume amount_s281 >= 0 && amount_s281 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L5682]              assume msgvalue_MSG == 0;
[L5683]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((sender_s281 == recipient_s281 && (amount_s281 > _balances_ERC20[this][sender_s281] || amount_s281 > _allowances_ERC20[this][sender_s281][msgsender_MSG])) && amount_s281 >= 0) && amount_s281 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s281] >= 0) && _balances_ERC20[this][recipient_s281] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][sender_s281] >= 0) && _balances_ERC20[this][sender_s281] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][sender_s281][msgsender_MSG] >= 0) && _allowances_ERC20[this][sender_s281][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_ERC200 := true;
[L2]                 call_transferFrom_ERC200 := false;
[L2]                 revert := revert_hold;
[L877]               havoc __exception;
[L878]               revert := false;
[L879]   COND FALSE  !(__exception)
[L909]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3116]  COND TRUE   DType[this] == ZZZ
[L3117]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3446]              __var_15 := null;
[L3447]  COND FALSE  !(!(sender_s439 != null))
[L3451]              __var_16 := null;
[L3452]  COND FALSE  !(!(recipient_s439 != null))
[L3456]  COND TRUE   sender_s439 == _owner_ERC20[this] || allow_ERC20[this]
[L3457]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3457]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s439], amount_s439, -1482811941);
[L3458]  COND FALSE  !(revert)
[L3461]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s439];
[L3462]              _balances_ERC20[this][sender_s439] := __var_17;
[L3463]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s439];
[L3464]  CALL        call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3766]              c_s650 := (a_s650 + b_s650) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3767]  COND FALSE  !(!(c_s650 >= a_s650))
[L3771]              __ret_0_ := c_s650;
[L3464]  RET         call __var_18 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s439], amount_s439);
[L3465]  COND FALSE  !(revert)
[L3468]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s439];
[L3469]              _balances_ERC20[this][recipient_s439] := __var_18;
[L3470]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s439];
[L3471]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3117]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L3118]  COND FALSE  !(revert)
[L3129]  COND TRUE   DType[this] == ZZZ
[L3130]  CALL        call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L3130]  RET         call __var_6 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3131]  COND FALSE  !(revert)
[L3142]  COND TRUE   DType[this] == ZZZ
[L3143]  CALL        call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L2698]              __ret_0_ := msgsender_MSG;
[L3143]  RET         call __var_8 := _msgSender_Context__success(this, msgsender_MSG, msgvalue_MSG);
[L3144]  COND FALSE  !(revert)
[L3155]  CALL        call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s281][__var_8], amount_s281, -255027035);
[L3790]  COND FALSE  !(!(b_s677 <= a_s677))
[L3794]              c_s677 := (a_s677 - b_s677) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3795]              __ret_0_ := c_s677;
[L3155]  RET         call __var_7 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s281][__var_8], amount_s281, -255027035);
[L3156]  COND FALSE  !(revert)
[L3159]  COND TRUE   DType[this] == ZZZ
[L3160]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, __var_6, __var_7);
[L3615]              __var_27 := null;
[L3616]  COND FALSE  !(!(owner_s569 != null))
[L3620]              __var_28 := null;
[L3621]  COND FALSE  !(!(spender_s569 != null))
[L3625]              sum__allowances1[owner_s569] := sum__allowances1[owner_s569] - _allowances_ERC20[this][owner_s569][spender_s569];
[L3626]              _allowances_ERC20[this][owner_s569][spender_s569] := amount_s569;
[L3627]              sum__allowances1[owner_s569] := sum__allowances1[owner_s569] + _allowances_ERC20[this][owner_s569][spender_s569];
[L3628]              assert { :EventEmitted "Approval_ERC20" } true;
[L3160]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, __var_6, __var_7);
[L3161]  COND FALSE  !(revert)
[L3172]              __ret_0_ := true;
[L909]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L910]               assume !revert && gas >= 0;
[L5683]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s281, recipient_s281, amount_s281);
[L5790]  RET         call CorralChoice_ZZZ(this);

[2020-11-25 11:42:58,699 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 11:42:58,699 INFO  L82        PathProgramCache]: Analyzing trace with hash 443329049, now seen corresponding path program 1 times
[2020-11-25 11:42:58,700 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 11:42:58,715 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 11:42:58,828 INFO  L134       CoverageAnalysis]: Checked inductivity of 128 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 126 trivial. 0 not checked.
[2020-11-25 11:42:58,828 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 11:42:58,828 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 11:42:58,828 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 11:42:58,829 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 13 interpolants.
[2020-11-25 11:42:58,829 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=127, Unknown=0, NotChecked=0, Total=156
[2020-11-25 11:42:58,829 INFO  L87              Difference]: Start difference. First operand 3661 states and 4134 transitions. cyclomatic complexity: 483 Second operand 13 states.
[2020-11-25 11:42:59,781 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 11:42:59,781 INFO  L93              Difference]: Finished difference Result 2154 states and 2445 transitions.
[2020-11-25 11:42:59,781 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 13 states. 
[2020-11-25 11:42:59,781 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2154 states and 2445 transitions.
[2020-11-25 11:42:59,785 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 11:42:59,786 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2154 states to 0 states and 0 transitions.
[2020-11-25 11:42:59,786 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 11:42:59,786 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 11:42:59,786 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 11:42:59,786 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 11:42:59,786 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 11:42:59,786 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 11:42:59,786 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 11:42:59,786 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 11:42:59,786 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 11:42:59,786 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 11:42:59,786 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 11:42:59,789 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 11:42:59 BasicIcfg
[2020-11-25 11:42:59,789 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 11:42:59,790 INFO  L168              Benchmark]: Toolchain (without parser) took 13956.83 ms. Allocated memory was 1.0 GB in the beginning and 2.1 GB in the end (delta: 1.1 GB). Free memory was 935.2 MB in the beginning and 1.6 GB in the end (delta: -694.0 MB). Peak memory consumption was 393.9 MB. Max. memory is 15.3 GB.
[2020-11-25 11:42:59,790 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 11:42:59,791 INFO  L168              Benchmark]: Boogie Preprocessor took 103.12 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 919.0 MB in the end (delta: 16.2 MB). Peak memory consumption was 16.2 MB. Max. memory is 15.3 GB.
[2020-11-25 11:42:59,791 INFO  L168              Benchmark]: UtopiaSpecLang took 59.70 ms. Allocated memory is still 1.0 GB. Free memory was 919.0 MB in the beginning and 913.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 11:42:59,792 INFO  L168              Benchmark]: Boogie Printer took 17.31 ms. Allocated memory is still 1.0 GB. Free memory was 913.6 MB in the beginning and 908.1 MB in the end (delta: 5.5 MB). Peak memory consumption was 5.5 MB. Max. memory is 15.3 GB.
[2020-11-25 11:42:59,792 INFO  L168              Benchmark]: RCFGBuilder took 815.05 ms. Allocated memory is still 1.0 GB. Free memory was 908.1 MB in the beginning and 768.6 MB in the end (delta: 139.6 MB). Peak memory consumption was 139.6 MB. Max. memory is 15.3 GB.
[2020-11-25 11:42:59,792 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.42 ms. Allocated memory is still 1.0 GB. Free memory was 768.6 MB in the beginning and 765.0 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 11:42:59,793 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1509.20 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 188.2 MB). Free memory was 765.0 MB in the beginning and 789.1 MB in the end (delta: -24.2 MB). Peak memory consumption was 164.1 MB. Max. memory is 15.3 GB.
[2020-11-25 11:42:59,793 INFO  L168              Benchmark]: BlockEncodingV2 took 181.16 ms. Allocated memory is still 1.2 GB. Free memory was 789.1 MB in the beginning and 704.1 MB in the end (delta: 85.0 MB). Peak memory consumption was 85.0 MB. Max. memory is 15.3 GB.
[2020-11-25 11:42:59,793 INFO  L168              Benchmark]: BuchiAutomizer took 11230.64 ms. Allocated memory was 1.2 GB in the beginning and 2.1 GB in the end (delta: 899.7 MB). Free memory was 704.1 MB in the beginning and 1.6 GB in the end (delta: -925.1 MB). There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 11:42:59,796 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    5328 locations, 9511 edges
  - StatisticsResult: Encoded RCFG
    5194 locations, 9160 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 103.12 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 919.0 MB in the end (delta: 16.2 MB). Peak memory consumption was 16.2 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 59.70 ms. Allocated memory is still 1.0 GB. Free memory was 919.0 MB in the beginning and 913.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 17.31 ms. Allocated memory is still 1.0 GB. Free memory was 913.6 MB in the beginning and 908.1 MB in the end (delta: 5.5 MB). Peak memory consumption was 5.5 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 815.05 ms. Allocated memory is still 1.0 GB. Free memory was 908.1 MB in the beginning and 768.6 MB in the end (delta: 139.6 MB). Peak memory consumption was 139.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.42 ms. Allocated memory is still 1.0 GB. Free memory was 768.6 MB in the beginning and 765.0 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1509.20 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 188.2 MB). Free memory was 765.0 MB in the beginning and 789.1 MB in the end (delta: -24.2 MB). Peak memory consumption was 164.1 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 181.16 ms. Allocated memory is still 1.2 GB. Free memory was 789.1 MB in the beginning and 704.1 MB in the end (delta: 85.0 MB). Peak memory consumption was 85.0 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 11230.64 ms. Allocated memory was 1.2 GB in the beginning and 2.1 GB in the end (delta: 899.7 MB). Free memory was 704.1 MB in the beginning and 1.6 GB in the end (delta: -925.1 MB). There was no memory consumed. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2171 locations, 2937 edges
  - StatisticsResult: BuchiProgram size
    5328 locations, 9511 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 8 terminating modules (8 trivial, 0 deterministic, 0 nondeterministic). 8 modules have a trivial ranking function, the largest among these consists of 20 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 11.2s and 9 iterations.  TraceHistogramMax:3. Analysis of lassos took 1.3s. Construction of modules took 6.7s. BÃ¼chi inclusion checks took 2.3s. Highest rank in rank-based complementation 0. Minimization of det autom 8. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 7 MinimizatonAttempts, 1521 StatesRemovedByMinimization, 5 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 3783 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 28747 SDtfs, 27010 SDslu, 46508 SDs, 0 SdLazy, 130417 SolverSat, 4111 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 6.7s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU8 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_ERC200) ==> ( <>(fail_transferFrom_ERC200) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
