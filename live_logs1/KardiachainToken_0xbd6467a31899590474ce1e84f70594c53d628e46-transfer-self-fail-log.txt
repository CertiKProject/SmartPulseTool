This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 20:04:11,524 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 20:04:11,525 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 20:04:11,538 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 20:04:11,538 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 20:04:11,539 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 20:04:11,540 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 20:04:11,542 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 20:04:11,544 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 20:04:11,544 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 20:04:11,545 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 20:04:11,545 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 20:04:11,546 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 20:04:11,547 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 20:04:11,548 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 20:04:11,548 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 20:04:11,549 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 20:04:11,550 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 20:04:11,552 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 20:04:11,553 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 20:04:11,554 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 20:04:11,555 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 20:04:11,556 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 20:04:11,557 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 20:04:11,557 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 20:04:11,557 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 20:04:11,558 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 20:04:11,558 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 20:04:11,558 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 20:04:11,559 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 20:04:11,559 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 20:04:11,560 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 20:04:11,560 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 20:04:11,561 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 20:04:11,561 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 20:04:11,561 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 20:04:11,562 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 20:04:11,562 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 20:04:11,562 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 20:04:11,563 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 20:04:11,564 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 20:04:11,564 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 20:04:11,571 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 20:04:11,572 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 20:04:11,572 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 20:04:11,573 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 20:04:11,573 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 20:04:11,573 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 20:04:11,573 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 20:04:11,573 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 20:04:11,573 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 20:04:11,573 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 20:04:11,573 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 20:04:11,573 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 20:04:11,573 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 20:04:11,574 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 20:04:11,574 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 20:04:11,574 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 20:04:11,574 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 20:04:11,574 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 20:04:11,574 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 20:04:11,574 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 20:04:11,574 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 20:04:11,574 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 20:04:11,574 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 20:04:11,575 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 20:04:11,575 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 20:04:11,575 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 20:04:11,596 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 20:04:11,608 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 20:04:11,611 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 20:04:11,613 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 20:04:11,613 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 20:04:11,614 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self-fail.bpl
[2020-11-24 20:04:11,614 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self-fail.bpl'
[2020-11-24 20:04:11,703 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 20:04:11,704 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 20:04:11,704 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 20:04:11,704 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 20:04:11,704 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 20:04:11,715 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:11" (1/1) ...
[2020-11-24 20:04:11,716 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:11" (1/1) ...
[2020-11-24 20:04:11,746 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:11" (1/1) ...
[2020-11-24 20:04:11,747 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:11" (1/1) ...
[2020-11-24 20:04:11,774 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:11" (1/1) ...
[2020-11-24 20:04:11,786 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:11" (1/1) ...
[2020-11-24 20:04:11,795 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:11" (1/1) ...
[2020-11-24 20:04:11,806 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 20:04:11,807 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 20:04:11,807 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 20:04:11,809 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 20:04:11,813 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:11" (1/1) ...
[2020-11-24 20:04:11,830 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20Pausable.transfer(to, value), msg.sender == to && value > _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Pausable.transfer)))
[2020-11-24 20:04:11,835 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20Pausable.transfer(to, value), msg.sender == to && value > _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Pausable.transfer)))
[2020-11-24 20:04:11,842 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20Pausable.transfer(to, value), msg.sender == to && value > _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Pausable.transfer)))
[2020-11-24 20:04:11,849 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==to_s726 && value_s726>_balances_ERC20[this][msg.sender] ) && value_s726>=0 ) && value_s726<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s726]>=0 ) && _balances_ERC20[this][to_s726]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],IdentifierExpression[to_s726,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]],BinaryExpression[COMPGT,IdentifierExpression[value_s726,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s726,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s726,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s726,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[to_s726,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20Pausable>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 20:04:11,855 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20Pausable.transfer(to, value), msg.sender == to && value > _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(ERC20Pausable.transfer)))
[2020-11-24 20:04:11,855 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC20Pausable0) ==> ( <>AP(fail_transfer_ERC20Pausable0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 20:04:11,866 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:04:11 PropertyContainer
[2020-11-24 20:04:11,866 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 20:04:11,866 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 20:04:11,866 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 20:04:11,866 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 20:04:11,867 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:11" (1/2) ...
[2020-11-24 20:04:11,868 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 20:04:11,868 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 20:04:11,891 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:04:11" (2/2) ...
[2020-11-24 20:04:11,891 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 20:04:11,892 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 20:04:11,892 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 20:04:11,892 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 20:04:11,893 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:11" (1/2) ...
[2020-11-24 20:04:11,944 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 20:04:11,944 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:04:11,944 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 20:04:11,944 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 20:04:11,944 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 20:04:11,945 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 20:04:11,945 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 20:04:11,945 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 20:04:11,945 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-24 20:04:11,945 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-24 20:04:11,945 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-24 20:04:11,945 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-24 20:04:11,945 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-24 20:04:11,945 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-24 20:04:11,945 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-24 20:04:11,946 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-24 20:04:11,946 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-24 20:04:11,946 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 20:04:11,946 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-24 20:04:11,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-24 20:04:11,946 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-24 20:04:11,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-24 20:04:11,946 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-24 20:04:11,946 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-24 20:04:11,947 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-24 20:04:11,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-24 20:04:11,947 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-24 20:04:11,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-24 20:04:11,947 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-24 20:04:11,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-24 20:04:11,947 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 20:04:11,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 20:04:11,947 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-24 20:04:11,947 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-24 20:04:11,947 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-24 20:04:11,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-24 20:04:11,948 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-24 20:04:11,948 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-24 20:04:11,948 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-24 20:04:11,948 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-24 20:04:11,948 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-24 20:04:11,948 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 20:04:11,948 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 20:04:11,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 20:04:11,948 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 20:04:11,948 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 20:04:11,949 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable
[2020-11-24 20:04:11,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable
[2020-11-24 20:04:11,949 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-24 20:04:11,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-24 20:04:11,949 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 20:04:11,949 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-24 20:04:11,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-24 20:04:11,949 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-24 20:04:11,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-24 20:04:11,949 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-24 20:04:11,949 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-24 20:04:11,950 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-24 20:04:11,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-24 20:04:11,950 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-24 20:04:11,950 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable
[2020-11-24 20:04:11,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable
[2020-11-24 20:04:11,950 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable
[2020-11-24 20:04:11,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable
[2020-11-24 20:04:11,950 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-24 20:04:11,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable
[2020-11-24 20:04:11,950 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable
[2020-11-24 20:04:11,950 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable
[2020-11-24 20:04:11,951 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-24 20:04:11,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable
[2020-11-24 20:04:11,951 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-24 20:04:11,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable
[2020-11-24 20:04:11,951 INFO  L130     BoogieDeclarations]: Found specification of procedure KardiachainToken_KardiachainToken_NoBaseCtor__success
[2020-11-24 20:04:11,951 INFO  L130     BoogieDeclarations]: Found specification of procedure KardiachainToken_KardiachainToken
[2020-11-24 20:04:11,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure KardiachainToken_KardiachainToken
[2020-11-24 20:04:11,951 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_KardiachainToken
[2020-11-24 20:04:11,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_KardiachainToken
[2020-11-24 20:04:11,951 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_KardiachainToken
[2020-11-24 20:04:11,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_KardiachainToken
[2020-11-24 20:04:11,951 INFO  L130     BoogieDeclarations]: Found specification of procedure name_KardiachainToken
[2020-11-24 20:04:11,951 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_KardiachainToken
[2020-11-24 20:04:11,952 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_KardiachainToken
[2020-11-24 20:04:11,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_KardiachainToken
[2020-11-24 20:04:11,952 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_KardiachainToken
[2020-11-24 20:04:11,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_KardiachainToken
[2020-11-24 20:04:11,952 INFO  L130     BoogieDeclarations]: Found specification of procedure initialSupply_KardiachainToken
[2020-11-24 20:04:11,952 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialSupply_KardiachainToken
[2020-11-24 20:04:11,952 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 20:04:11,952 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 20:04:11,952 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 20:04:11,952 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 20:04:11,952 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-24 20:04:11,952 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-24 20:04:11,952 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 20:04:11,953 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 20:04:11,953 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-24 20:04:11,953 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-24 20:04:11,953 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-24 20:04:11,953 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-24 20:04:11,953 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 20:04:11,953 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 20:04:11,953 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-24 20:04:11,953 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-24 20:04:11,953 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Pausable
[2020-11-24 20:04:11,953 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Pausable
[2020-11-24 20:04:11,953 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_KardiachainToken
[2020-11-24 20:04:11,953 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 20:04:11,953 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 20:04:11,953 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:04:11,954 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 20:04:11,954 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 20:04:11,954 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 20:04:11,954 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 20:04:11,954 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 20:04:11,954 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 20:04:11,954 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-24 20:04:11,954 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-24 20:04:11,954 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-24 20:04:11,954 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 20:04:11,954 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-24 20:04:11,954 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-24 20:04:11,954 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-24 20:04:11,955 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-24 20:04:11,955 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-24 20:04:11,955 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-24 20:04:11,955 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-24 20:04:11,955 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-24 20:04:11,955 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-24 20:04:11,955 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-24 20:04:11,955 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-24 20:04:11,955 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-24 20:04:11,955 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-24 20:04:11,955 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-24 20:04:11,956 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-24 20:04:11,956 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-24 20:04:11,956 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-24 20:04:11,956 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-24 20:04:11,956 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-24 20:04:11,956 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-24 20:04:11,956 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-24 20:04:11,956 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-24 20:04:11,956 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-24 20:04:11,956 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 20:04:11,957 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 20:04:11,957 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 20:04:11,957 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 20:04:11,957 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 20:04:11,957 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__success
[2020-11-24 20:04:11,957 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownable__fail
[2020-11-24 20:04:11,957 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-24 20:04:11,957 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-24 20:04:11,957 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 20:04:11,958 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-24 20:04:11,958 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-24 20:04:11,958 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-24 20:04:11,958 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-24 20:04:11,958 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-24 20:04:11,958 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-24 20:04:11,958 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-24 20:04:11,958 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-24 20:04:11,958 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-24 20:04:11,958 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-24 20:04:11,958 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-24 20:04:11,959 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-24 20:04:11,959 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-24 20:04:11,959 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-24 20:04:11,959 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-24 20:04:11,959 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-24 20:04:11,959 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-24 20:04:11,959 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-24 20:04:11,959 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-24 20:04:11,959 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-24 20:04:11,959 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-24 20:04:11,959 INFO  L130     BoogieDeclarations]: Found specification of procedure KardiachainToken_KardiachainToken_NoBaseCtor__fail
[2020-11-24 20:04:11,960 INFO  L130     BoogieDeclarations]: Found specification of procedure KardiachainToken_KardiachainToken__success
[2020-11-24 20:04:11,960 INFO  L130     BoogieDeclarations]: Found specification of procedure KardiachainToken_KardiachainToken__fail
[2020-11-24 20:04:11,960 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_KardiachainToken__success
[2020-11-24 20:04:11,960 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_KardiachainToken__fail
[2020-11-24 20:04:11,960 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_KardiachainToken__success
[2020-11-24 20:04:11,960 INFO  L130     BoogieDeclarations]: Found specification of procedure burnFrom~address~uint256_KardiachainToken__fail
[2020-11-24 20:04:11,960 INFO  L130     BoogieDeclarations]: Found specification of procedure name_KardiachainToken__success
[2020-11-24 20:04:11,960 INFO  L130     BoogieDeclarations]: Found specification of procedure name_KardiachainToken__fail
[2020-11-24 20:04:11,960 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_KardiachainToken__success
[2020-11-24 20:04:11,960 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_KardiachainToken__fail
[2020-11-24 20:04:11,960 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_KardiachainToken__success
[2020-11-24 20:04:11,960 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_KardiachainToken__fail
[2020-11-24 20:04:11,961 INFO  L130     BoogieDeclarations]: Found specification of procedure initialSupply_KardiachainToken__success
[2020-11-24 20:04:11,961 INFO  L130     BoogieDeclarations]: Found specification of procedure initialSupply_KardiachainToken__fail
[2020-11-24 20:04:11,961 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 20:04:11,961 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 20:04:11,961 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 20:04:11,961 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 20:04:11,961 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-24 20:04:11,961 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-24 20:04:11,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 20:04:11,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 20:04:11,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:04:11,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:04:11,961 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 20:04:11,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 20:04:11,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 20:04:11,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 20:04:11,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 20:04:11,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 20:04:11,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 20:04:11,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 20:04:11,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 20:04:11,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 20:04:11,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-24 20:04:11,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-24 20:04:11,962 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-24 20:04:11,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-24 20:04:11,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 20:04:11,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 20:04:11,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-24 20:04:11,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-24 20:04:11,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-24 20:04:11,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-24 20:04:11,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-24 20:04:11,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-24 20:04:11,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-24 20:04:11,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-24 20:04:11,963 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-24 20:04:11,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-24 20:04:11,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-24 20:04:11,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-24 20:04:11,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-24 20:04:11,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-24 20:04:11,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-24 20:04:11,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-24 20:04:11,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-24 20:04:11,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-24 20:04:11,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-24 20:04:11,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-24 20:04:11,964 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-24 20:04:11,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-24 20:04:11,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-24 20:04:11,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-24 20:04:11,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-24 20:04:11,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-24 20:04:11,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-24 20:04:11,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-24 20:04:11,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 20:04:11,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 20:04:11,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 20:04:11,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 20:04:11,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 20:04:11,965 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 20:04:11,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__fail
[2020-11-24 20:04:11,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownable__success
[2020-11-24 20:04:11,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-24 20:04:11,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-24 20:04:11,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 20:04:11,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 20:04:11,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-24 20:04:11,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-24 20:04:11,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-24 20:04:11,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-24 20:04:11,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-24 20:04:11,966 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-24 20:04:11,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-24 20:04:11,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-24 20:04:11,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__fail
[2020-11-24 20:04:11,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable_NoBaseCtor__success
[2020-11-24 20:04:11,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__fail
[2020-11-24 20:04:11,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Pausable_ERC20Pausable__success
[2020-11-24 20:04:11,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__fail
[2020-11-24 20:04:11,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20Pausable__success
[2020-11-24 20:04:11,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__fail
[2020-11-24 20:04:11,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20Pausable__success
[2020-11-24 20:04:11,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__fail
[2020-11-24 20:04:11,967 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Pausable__success
[2020-11-24 20:04:11,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-24 20:04:11,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-24 20:04:11,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__fail
[2020-11-24 20:04:11,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Pausable__success
[2020-11-24 20:04:11,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure KardiachainToken_KardiachainToken_NoBaseCtor__fail
[2020-11-24 20:04:11,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure KardiachainToken_KardiachainToken_NoBaseCtor__success
[2020-11-24 20:04:11,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure KardiachainToken_KardiachainToken__fail
[2020-11-24 20:04:11,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure KardiachainToken_KardiachainToken__success
[2020-11-24 20:04:11,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_KardiachainToken__fail
[2020-11-24 20:04:11,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_KardiachainToken__success
[2020-11-24 20:04:11,968 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_KardiachainToken__fail
[2020-11-24 20:04:11,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure burnFrom~address~uint256_KardiachainToken__success
[2020-11-24 20:04:11,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_KardiachainToken__fail
[2020-11-24 20:04:11,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_KardiachainToken__success
[2020-11-24 20:04:11,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_KardiachainToken__fail
[2020-11-24 20:04:11,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_KardiachainToken__success
[2020-11-24 20:04:11,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_KardiachainToken__fail
[2020-11-24 20:04:11,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_KardiachainToken__success
[2020-11-24 20:04:11,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialSupply_KardiachainToken__fail
[2020-11-24 20:04:11,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialSupply_KardiachainToken__success
[2020-11-24 20:04:11,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 20:04:11,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 20:04:11,969 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 20:04:11,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 20:04:11,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 20:04:11,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 20:04:11,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 20:04:11,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 20:04:11,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-24 20:04:11,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-24 20:04:11,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-24 20:04:11,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-24 20:04:11,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 20:04:11,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 20:04:11,970 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-24 20:04:11,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-24 20:04:11,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-24 20:04:11,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-24 20:04:11,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 20:04:11,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 20:04:11,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-24 20:04:11,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-24 20:04:11,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Pausable
[2020-11-24 20:04:11,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Pausable
[2020-11-24 20:04:11,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_KardiachainToken
[2020-11-24 20:04:11,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 20:04:11,971 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 20:04:11,971 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 20:04:12,509 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:04:12,510 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:04:12,812 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 20:04:12,812 INFO  L286             CfgBuilder]: Removed 7 assue(true) statements.
[2020-11-24 20:04:12,814 INFO  L202        PluginConnector]: Adding new model KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:04:12 BoogieIcfgContainer
[2020-11-24 20:04:12,814 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:04:11" (2/2) ...
[2020-11-24 20:04:12,815 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 20:04:12,815 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@b2256f0 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:04:12, skipping insertion in model container
[2020-11-24 20:04:12,815 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 20:04:12,815 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 20:04:12,815 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 20:04:12,816 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 20:04:12,817 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:11" (1/3) ...
[2020-11-24 20:04:12,817 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@5e8d4ab5 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:04:12, skipping insertion in model container
[2020-11-24 20:04:12,817 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:04:11" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 20:04:12,853 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:04:12 NWAContainer
[2020-11-24 20:04:12,853 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 20:04:12,854 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 20:04:12,854 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 20:04:12,854 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 20:04:12,855 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:04:12" (3/4) ...
[2020-11-24 20:04:12,856 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@511ad03a and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:04:12, skipping insertion in model container
[2020-11-24 20:04:12,856 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:04:12" (4/4) ...
[2020-11-24 20:04:12,859 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 20:04:12,864 INFO  L110   BuchiProductObserver]: Initial RCFG 2378 locations, 3411 edges
[2020-11-24 20:04:12,864 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 20:04:12,876 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 20:04:14,500 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 20:04:14,508 INFO  L110   BuchiProductObserver]: BuchiProgram size 6104 locations, 11207 edges
[2020-11-24 20:04:14,508 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:04:14 BoogieIcfgContainer
[2020-11-24 20:04:14,509 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 20:04:14,509 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 20:04:14,509 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 20:04:14,510 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 20:04:14,511 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:04:14" (1/1) ...
[2020-11-24 20:04:14,647 INFO  L313           BlockEncoder]: Initial Icfg 6104 locations, 11207 edges
[2020-11-24 20:04:14,648 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 20:04:14,648 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 20:04:14,648 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 20:04:14,649 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 20:04:14,665 INFO  L70    emoveInfeasibleEdges]: Removed 177 edges and 18 locations because of local infeasibility
[2020-11-24 20:04:14,678 INFO  L70        RemoveSinkStates]: Removed 194 edges and 114 locations by removing sink states
[2020-11-24 20:04:14,695 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 20:04:14,700 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 20:04:14,705 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 20:04:14,706 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 20:04:14,710 INFO  L313           BlockEncoder]: Encoded RCFG 5942 locations, 10792 edges
[2020-11-24 20:04:14,710 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:04:14 BasicIcfg
[2020-11-24 20:04:14,710 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 20:04:14,711 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 20:04:14,711 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 20:04:14,713 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 20:04:14,713 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:04:14,713 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:04:11" (1/6) ...
[2020-11-24 20:04:14,715 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@398d6b20 and model type KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:04:14, skipping insertion in model container
[2020-11-24 20:04:14,715 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:04:14,715 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:04:11" (2/6) ...
[2020-11-24 20:04:14,715 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@398d6b20 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:04:14, skipping insertion in model container
[2020-11-24 20:04:14,715 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:04:14,715 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:04:12" (3/6) ...
[2020-11-24 20:04:14,716 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@398d6b20 and model type KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:04:14, skipping insertion in model container
[2020-11-24 20:04:14,716 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:04:14,716 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:04:12" (4/6) ...
[2020-11-24 20:04:14,716 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@398d6b20 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:04:14, skipping insertion in model container
[2020-11-24 20:04:14,716 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:04:14,716 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:04:14" (5/6) ...
[2020-11-24 20:04:14,716 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@398d6b20 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 08:04:14, skipping insertion in model container
[2020-11-24 20:04:14,717 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:04:14,717 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:04:14" (6/6) ...
[2020-11-24 20:04:14,718 INFO  L404   chiAutomizerObserver]: Analyzing ICFG KardiachainToken_0xbd6467a31899590474ce1e84f70594c53d628e46_transfer-self-fail.bpl_BEv2
[2020-11-24 20:04:14,755 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 20:04:14,756 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 20:04:14,756 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 20:04:14,756 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 20:04:14,756 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 20:04:14,756 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 20:04:14,756 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 20:04:14,756 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 20:04:14,756 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 20:04:14,806 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5942 states.
[2020-11-24 20:04:14,875 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:04:14,875 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:04:14,875 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:04:14,884 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:04:14,884 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:04:14,884 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 20:04:14,884 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5942 states.
[2020-11-24 20:04:14,914 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:04:14,914 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:04:14,915 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:04:14,917 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:04:14,917 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND TRUE   revert
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND TRUE   choice == 20
[L6342]              gas := gas - 21000;
[L6343]  COND FALSE  !(gas >= 0)
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:04:14,934 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:04:14,934 INFO  L82        PathProgramCache]: Analyzing trace with hash -23732515, now seen corresponding path program 1 times
[2020-11-24 20:04:14,940 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:04:14,966 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:04:15,016 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:04:15,018 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:04:15,018 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:04:15,381 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:04:15,393 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:04:15,393 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:04:15,395 INFO  L87              Difference]: Start difference. First operand 5942 states. Second operand 4 states.
[2020-11-24 20:04:16,023 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:04:16,024 INFO  L93              Difference]: Finished difference Result 3563 states and 4250 transitions.
[2020-11-24 20:04:16,024 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:04:16,025 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3563 states and 4250 transitions.
[2020-11-24 20:04:16,045 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:04:16,075 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3563 states to 3563 states and 4250 transitions.
[2020-11-24 20:04:16,075 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-24 20:04:16,078 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 859
[2020-11-24 20:04:16,078 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3563 states and 4250 transitions.
[2020-11-24 20:04:16,087 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:04:16,087 INFO  L728         BuchiCegarLoop]: Abstraction has 3563 states and 4250 transitions.
[2020-11-24 20:04:16,101 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3563 states and 4250 transitions.
[2020-11-24 20:04:16,152 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3563 to 3563.
[2020-11-24 20:04:16,153 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3563 states.
[2020-11-24 20:04:16,159 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3563 states to 3563 states and 4250 transitions.
[2020-11-24 20:04:16,159 INFO  L751         BuchiCegarLoop]: Abstraction has 3563 states and 4250 transitions.
[2020-11-24 20:04:16,160 INFO  L631         BuchiCegarLoop]: Abstraction has 3563 states and 4250 transitions.
[2020-11-24 20:04:16,160 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 20:04:16,160 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3563 states and 4250 transitions.
[2020-11-24 20:04:16,167 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:04:16,167 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:04:16,167 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:04:16,169 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:04:16,169 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND TRUE   revert
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 > _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND FALSE  !(__exception)
[L1315]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3882]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3882]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3883]  COND TRUE   revert
[L1315]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1316]              assume !revert && gas >= 0;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 > _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND FALSE  !(__exception)
[L1315]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3882]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3882]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3883]  COND TRUE   revert
[L1315]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1316]              assume !revert && gas >= 0;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:04:16,173 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:04:16,173 INFO  L82        PathProgramCache]: Analyzing trace with hash 917346267, now seen corresponding path program 1 times
[2020-11-24 20:04:16,174 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:04:16,184 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:04:16,201 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:04:16,201 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:04:16,201 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:04:16,202 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:04:16,202 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:04:16,202 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:04:16,203 INFO  L87              Difference]: Start difference. First operand 3563 states and 4250 transitions. cyclomatic complexity: 689 Second operand 3 states.
[2020-11-24 20:04:16,306 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:04:16,306 INFO  L93              Difference]: Finished difference Result 4751 states and 5682 transitions.
[2020-11-24 20:04:16,306 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:04:16,306 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4751 states and 5682 transitions.
[2020-11-24 20:04:16,323 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:04:16,343 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4751 states to 4751 states and 5682 transitions.
[2020-11-24 20:04:16,343 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1196
[2020-11-24 20:04:16,344 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1196
[2020-11-24 20:04:16,344 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4751 states and 5682 transitions.
[2020-11-24 20:04:16,350 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:04:16,350 INFO  L728         BuchiCegarLoop]: Abstraction has 4751 states and 5682 transitions.
[2020-11-24 20:04:16,354 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4751 states and 5682 transitions.
[2020-11-24 20:04:16,398 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4751 to 4258.
[2020-11-24 20:04:16,398 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4258 states.
[2020-11-24 20:04:16,404 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4258 states to 4258 states and 5087 transitions.
[2020-11-24 20:04:16,404 INFO  L751         BuchiCegarLoop]: Abstraction has 4258 states and 5087 transitions.
[2020-11-24 20:04:16,404 INFO  L631         BuchiCegarLoop]: Abstraction has 4258 states and 5087 transitions.
[2020-11-24 20:04:16,404 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 20:04:16,404 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4258 states and 5087 transitions.
[2020-11-24 20:04:16,411 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:04:16,411 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:04:16,411 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:04:16,413 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:04:16,413 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND TRUE   !(account_s453 != null)
[L3393]              revert := true;
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND TRUE   revert
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 > _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND FALSE  !(__exception)
[L1315]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3882]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND TRUE   !!paused_Pausable[this]
[L5650]              revert := true;
[L3882]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3883]  COND TRUE   revert
[L1315]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1316]              assume !revert && gas >= 0;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 > _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND FALSE  !(__exception)
[L1315]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3882]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND TRUE   !!paused_Pausable[this]
[L5650]              revert := true;
[L3882]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3883]  COND TRUE   revert
[L1315]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1316]              assume !revert && gas >= 0;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:04:16,418 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:04:16,418 INFO  L82        PathProgramCache]: Analyzing trace with hash -1420783478, now seen corresponding path program 1 times
[2020-11-24 20:04:16,419 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:04:16,437 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:04:16,535 INFO  L134       CoverageAnalysis]: Checked inductivity of 172 backedges. 0 proven. 21 refuted. 0 times theorem prover too weak. 151 trivial. 0 not checked.
[2020-11-24 20:04:16,536 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 20:04:16,536 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [7] total 7
[2020-11-24 20:04:16,536 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:04:16,537 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 20:04:16,537 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 20:04:16,537 INFO  L87              Difference]: Start difference. First operand 4258 states and 5087 transitions. cyclomatic complexity: 831 Second operand 7 states.
[2020-11-24 20:04:16,599 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:04:16,600 INFO  L93              Difference]: Finished difference Result 4266 states and 5094 transitions.
[2020-11-24 20:04:16,600 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:04:16,600 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4266 states and 5094 transitions.
[2020-11-24 20:04:16,609 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:04:16,623 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4266 states to 4257 states and 5085 transitions.
[2020-11-24 20:04:16,624 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1105
[2020-11-24 20:04:16,624 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1105
[2020-11-24 20:04:16,624 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4257 states and 5085 transitions.
[2020-11-24 20:04:16,628 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:04:16,629 INFO  L728         BuchiCegarLoop]: Abstraction has 4257 states and 5085 transitions.
[2020-11-24 20:04:16,633 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4257 states and 5085 transitions.
[2020-11-24 20:04:16,666 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4257 to 4257.
[2020-11-24 20:04:16,666 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4257 states.
[2020-11-24 20:04:16,672 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4257 states to 4257 states and 5085 transitions.
[2020-11-24 20:04:16,672 INFO  L751         BuchiCegarLoop]: Abstraction has 4257 states and 5085 transitions.
[2020-11-24 20:04:16,672 INFO  L631         BuchiCegarLoop]: Abstraction has 4257 states and 5085 transitions.
[2020-11-24 20:04:16,672 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 20:04:16,672 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4257 states and 5085 transitions.
[2020-11-24 20:04:16,678 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:04:16,678 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:04:16,678 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:04:16,680 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:04:16,680 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND FALSE  !(!(account_s453 != null))
[L3396]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND TRUE   !(c_s26 >= a_s26)
[L2790]              revert := true;
[L3396]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3397]  COND TRUE   revert
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND TRUE   revert
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 > _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND FALSE  !(__exception)
[L1315]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3882]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND TRUE   !!paused_Pausable[this]
[L5650]              revert := true;
[L3882]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3883]  COND TRUE   revert
[L1315]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1316]              assume !revert && gas >= 0;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 > _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND FALSE  !(__exception)
[L1315]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3882]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND TRUE   !!paused_Pausable[this]
[L5650]              revert := true;
[L3882]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3883]  COND TRUE   revert
[L1315]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1316]              assume !revert && gas >= 0;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:04:16,684 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:04:16,684 INFO  L82        PathProgramCache]: Analyzing trace with hash -1927521345, now seen corresponding path program 1 times
[2020-11-24 20:04:16,685 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:04:16,695 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:04:16,738 INFO  L134       CoverageAnalysis]: Checked inductivity of 172 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 172 trivial. 0 not checked.
[2020-11-24 20:04:16,738 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:04:16,738 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:04:16,739 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:04:16,739 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:04:16,739 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:04:16,739 INFO  L87              Difference]: Start difference. First operand 4257 states and 5085 transitions. cyclomatic complexity: 830 Second operand 3 states.
[2020-11-24 20:04:16,807 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:04:16,807 INFO  L93              Difference]: Finished difference Result 4755 states and 5460 transitions.
[2020-11-24 20:04:16,807 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:04:16,807 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4755 states and 5460 transitions.
[2020-11-24 20:04:16,818 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:04:16,833 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4755 states to 4344 states and 4964 transitions.
[2020-11-24 20:04:16,833 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1058
[2020-11-24 20:04:16,833 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1084
[2020-11-24 20:04:16,833 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4344 states and 4964 transitions.
[2020-11-24 20:04:16,838 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:04:16,838 INFO  L728         BuchiCegarLoop]: Abstraction has 4344 states and 4964 transitions.
[2020-11-24 20:04:16,841 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4344 states and 4964 transitions.
[2020-11-24 20:04:16,872 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4344 to 3944.
[2020-11-24 20:04:16,872 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3944 states.
[2020-11-24 20:04:16,876 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3944 states to 3944 states and 4462 transitions.
[2020-11-24 20:04:16,876 INFO  L751         BuchiCegarLoop]: Abstraction has 3944 states and 4462 transitions.
[2020-11-24 20:04:16,876 INFO  L631         BuchiCegarLoop]: Abstraction has 3944 states and 4462 transitions.
[2020-11-24 20:04:16,876 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 20:04:16,876 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3944 states and 4462 transitions.
[2020-11-24 20:04:16,881 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:04:16,881 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:04:16,881 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:04:16,883 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:04:16,883 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND FALSE  !(!(account_s453 != null))
[L3396]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3396]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3397]  COND FALSE  !(revert)
[L3400]              _totalSupply_ERC20[this] := __var_9;
[L3401]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3401]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3402]  COND FALSE  !(revert)
[L3405]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3406]              _balances_ERC20[this][account_s453] := __var_10;
[L3407]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3408]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND FALSE  !(revert)
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 > _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND FALSE  !(__exception)
[L1315]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3882]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3882]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3883]  COND FALSE  !(revert)
[L3886]  COND FALSE  !(DType[this] == KardiachainToken)
[L3891]  COND TRUE   DType[this] == ERC20Pausable
[L3892]  CALL        call __var_19 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3005]  COND TRUE   DType[this] == KardiachainToken
[L3006]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L3335]              __var_4 := null;
[L3336]  COND FALSE  !(!(sender_s410 != null))
[L3340]              __var_5 := null;
[L3341]  COND FALSE  !(!(recipient_s410 != null))
[L3345]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3345]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L3346]  COND FALSE  !(revert)
[L3349]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s410];
[L3350]              _balances_ERC20[this][sender_s410] := __var_6;
[L3351]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s410];
[L3352]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3352]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L3353]  COND FALSE  !(revert)
[L3356]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s410];
[L3357]              _balances_ERC20[this][recipient_s410] := __var_7;
[L3358]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s410];
[L3359]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3006]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L3007]  COND FALSE  !(revert)
[L3023]              __ret_0_ := true;
[L3892]  RET         call __var_19 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3893]  COND FALSE  !(revert)
[L3899]              __ret_0_ := __var_19;
[L1315]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1316]              assume !revert && gas >= 0;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 > _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND FALSE  !(__exception)
[L1315]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3882]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3882]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3883]  COND FALSE  !(revert)
[L3886]  COND FALSE  !(DType[this] == KardiachainToken)
[L3891]  COND TRUE   DType[this] == ERC20Pausable
[L3892]  CALL        call __var_19 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3005]  COND TRUE   DType[this] == KardiachainToken
[L3006]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L3335]              __var_4 := null;
[L3336]  COND FALSE  !(!(sender_s410 != null))
[L3340]              __var_5 := null;
[L3341]  COND FALSE  !(!(recipient_s410 != null))
[L3345]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3345]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L3346]  COND FALSE  !(revert)
[L3349]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s410];
[L3350]              _balances_ERC20[this][sender_s410] := __var_6;
[L3351]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s410];
[L3352]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3352]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L3353]  COND FALSE  !(revert)
[L3356]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s410];
[L3357]              _balances_ERC20[this][recipient_s410] := __var_7;
[L3358]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s410];
[L3359]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3006]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L3007]  COND FALSE  !(revert)
[L3023]              __ret_0_ := true;
[L3892]  RET         call __var_19 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3893]  COND FALSE  !(revert)
[L3899]              __ret_0_ := __var_19;
[L1315]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1316]              assume !revert && gas >= 0;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:04:16,887 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:04:16,887 INFO  L82        PathProgramCache]: Analyzing trace with hash -287385908, now seen corresponding path program 1 times
[2020-11-24 20:04:16,888 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:04:16,901 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:04:16,970 INFO  L134       CoverageAnalysis]: Checked inductivity of 177 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 177 trivial. 0 not checked.
[2020-11-24 20:04:16,970 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:04:16,970 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 20:04:16,971 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:04:16,971 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-24 20:04:16,971 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-24 20:04:16,971 INFO  L87              Difference]: Start difference. First operand 3944 states and 4462 transitions. cyclomatic complexity: 520 Second operand 6 states.
[2020-11-24 20:04:17,079 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:04:17,079 INFO  L93              Difference]: Finished difference Result 3964 states and 4481 transitions.
[2020-11-24 20:04:17,079 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-24 20:04:17,080 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3964 states and 4481 transitions.
[2020-11-24 20:04:17,093 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:04:17,108 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3964 states to 3934 states and 4448 transitions.
[2020-11-24 20:04:17,108 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1031
[2020-11-24 20:04:17,109 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1031
[2020-11-24 20:04:17,109 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3934 states and 4448 transitions.
[2020-11-24 20:04:17,113 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:04:17,114 INFO  L728         BuchiCegarLoop]: Abstraction has 3934 states and 4448 transitions.
[2020-11-24 20:04:17,118 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3934 states and 4448 transitions.
[2020-11-24 20:04:17,155 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3934 to 3934.
[2020-11-24 20:04:17,155 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3934 states.
[2020-11-24 20:04:17,160 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3934 states to 3934 states and 4448 transitions.
[2020-11-24 20:04:17,160 INFO  L751         BuchiCegarLoop]: Abstraction has 3934 states and 4448 transitions.
[2020-11-24 20:04:17,160 INFO  L631         BuchiCegarLoop]: Abstraction has 3934 states and 4448 transitions.
[2020-11-24 20:04:17,160 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 20:04:17,160 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3934 states and 4448 transitions.
[2020-11-24 20:04:17,170 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:04:17,170 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:04:17,170 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:04:17,171 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:04:17,172 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_ERC20Pausable0 := false;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]     CALL        call main();
[L6476]              assume null == 0;
[L6477]  CALL        call this := FreshRefGenerator__success();
[L2735]              havoc newRef;
[L2736]              assume Alloc[newRef] == false;
[L2737]              Alloc[newRef] := true;
[L2738]              assume newRef != null;
[L6477]  RET         call this := FreshRefGenerator__success();
[L6478]              assume now >= 0;
[L6479]              assume DType[this] == KardiachainToken;
[L6480]              assume msgvalue_MSG == 0;
[L6481]              gas := gas - 53000;
[L6482]  CALL        call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L1605]              havoc __exception;
[L1606]              revert := false;
[L1607]  COND FALSE  !(__exception)
[L1631]  CALL        call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4179]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L4179]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4180]  COND FALSE  !(revert)
[L4183]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L4183]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4184]  COND FALSE  !(revert)
[L4187]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L4187]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L4188]  COND FALSE  !(revert)
[L4191]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L4191]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4192]  COND FALSE  !(revert)
[L4195]  CALL        call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3831]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L3831]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3832]  COND FALSE  !(revert)
[L3835]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2945]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2899]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2884]              assume msgsender_MSG != null;
[L2885]              Balance[this] := 0;
[L2899]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2900]  COND FALSE  !(revert)
[L2945]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2946]  COND FALSE  !(revert)
[L2949]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2921]              assume msgsender_MSG != null;
[L2922]              Balance[this] := 0;
[L2923]              _balances_ERC20[this] := zeroRefintArr();
[L2924]              sum__balances0[this] := 0;
[L2925]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2926]              sum__allowances1[this] := 0;
[L2927]              _totalSupply_ERC20[this] := 0;
[L2949]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2950]  COND FALSE  !(revert)
[L3835]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3836]  COND FALSE  !(revert)
[L3839]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3839]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3840]  COND FALSE  !(revert)
[L3843]  CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3713]  CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3620]  CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3602]              assume msgsender_MSG != null;
[L3603]              Balance[this] := 0;
[L3604]              _owner_Ownable[this] := null;
[L3606]              _owner_Ownable[this] := msgsender_MSG;
[L3607]              assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L3620]  RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3621]  COND FALSE  !(revert)
[L3713]  RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L3714]  COND FALSE  !(revert)
[L3717]  CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3693]              assume msgsender_MSG != null;
[L3694]              Balance[this] := 0;
[L3695]              paused_Pausable[this] := false;
[L3717]  RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3718]  COND FALSE  !(revert)
[L3843]  RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L3844]  COND FALSE  !(revert)
[L3847]  CALL        call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3800]              assume msgsender_MSG != null;
[L3801]              Balance[this] := 0;
[L3847]  RET         call ERC20Pausable_ERC20Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3848]  COND FALSE  !(revert)
[L4195]  RET         call ERC20Pausable_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L4196]  COND FALSE  !(revert)
[L4199]  CALL        call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4129]              assume msgsender_MSG != null;
[L4130]              Balance[this] := 0;
[L4131]              name_KardiachainToken[this] := -505187484;
[L4132]              symbol_KardiachainToken[this] := 1585535741;
[L4133]              decimals_KardiachainToken[this] := 18;
[L4134]              __var_29 := decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4135]              initialSupply_KardiachainToken[this] := nonlinearMul(5 * (1000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936), nonlinearPow(10, decimals_KardiachainToken[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4137]  COND TRUE   DType[this] == KardiachainToken
[L4138]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L3391]              __var_8 := null;
[L3392]  COND FALSE  !(!(account_s453 != null))
[L3396]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3396]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s453);
[L3397]  COND FALSE  !(revert)
[L3400]              _totalSupply_ERC20[this] := __var_9;
[L3401]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3401]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s453], amount_s453);
[L3402]  COND FALSE  !(revert)
[L3405]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s453];
[L3406]              _balances_ERC20[this][account_s453] := __var_10;
[L3407]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s453];
[L3408]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4138]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, initialSupply_KardiachainToken[this]);
[L4139]  COND FALSE  !(revert)
[L4199]  RET         call KardiachainToken_KardiachainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4200]  COND FALSE  !(revert)
[L1631]  RET         call KardiachainToken_KardiachainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L1632]              assume !revert && gas >= 0;
[L6482]  RET         call KardiachainToken_KardiachainToken(this, msgsender_MSG, msgvalue_MSG);
[L6483]              assume !revert && gas >= 0;
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 > _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND FALSE  !(__exception)
[L1315]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3882]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3882]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3883]  COND FALSE  !(revert)
[L3886]  COND TRUE   DType[this] == KardiachainToken
[L3887]  CALL        call __var_19 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3005]  COND TRUE   DType[this] == KardiachainToken
[L3006]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L3335]              __var_4 := null;
[L3336]  COND FALSE  !(!(sender_s410 != null))
[L3340]              __var_5 := null;
[L3341]  COND FALSE  !(!(recipient_s410 != null))
[L3345]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3345]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L3346]  COND FALSE  !(revert)
[L3349]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s410];
[L3350]              _balances_ERC20[this][sender_s410] := __var_6;
[L3351]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s410];
[L3352]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3352]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L3353]  COND FALSE  !(revert)
[L3356]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s410];
[L3357]              _balances_ERC20[this][recipient_s410] := __var_7;
[L3358]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s410];
[L3359]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3006]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L3007]  COND FALSE  !(revert)
[L3023]              __ret_0_ := true;
[L3887]  RET         call __var_19 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3888]  COND FALSE  !(revert)
[L3899]              __ret_0_ := __var_19;
[L1315]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1316]              assume !revert && gas >= 0;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

Loop:
[L6486]  CALL        call CorralChoice_KardiachainToken(this);
[L6290]              havoc msgsender_MSG;
[L6291]              havoc msgvalue_MSG;
[L6292]              havoc choice;
[L6293]              havoc __ret_0_totalSupply;
[L6294]              havoc account_s211;
[L6295]              havoc __ret_0_balanceOf;
[L6296]              havoc to_s726;
[L6297]              havoc value_s726;
[L6298]              havoc __ret_0_transfer;
[L6299]              havoc owner_s246;
[L6300]              havoc spender_s246;
[L6301]              havoc __ret_0_allowance;
[L6302]              havoc spender_s765;
[L6303]              havoc value_s765;
[L6304]              havoc __ret_0_approve;
[L6305]              havoc from_s747;
[L6306]              havoc to_s747;
[L6307]              havoc value_s747;
[L6308]              havoc __ret_0_transferFrom;
[L6309]              havoc spender_s783;
[L6310]              havoc addedValue_s783;
[L6311]              havoc success_s783;
[L6312]              havoc spender_s801;
[L6313]              havoc subtractedValue_s801;
[L6314]              havoc success_s801;
[L6315]              havoc __ret_0_owner;
[L6316]              havoc __ret_0_isOwner;
[L6317]              havoc newOwner_s646;
[L6318]              havoc __ret_0_paused;
[L6319]              havoc __ret_0_name;
[L6320]              havoc __ret_0_symbol;
[L6321]              havoc __ret_0_decimals;
[L6322]              havoc __ret_0_initialSupply;
[L6323]              havoc amount_s850;
[L6324]              havoc account_s863;
[L6325]              havoc amount_s863;
[L6326]              havoc tmpNow;
[L6327]              havoc gas;
[L6328]              assume gas > 4000000 && gas <= 8000000;
[L6329]              tmpNow := now;
[L6330]              havoc now;
[L6331]              assume now > tmpNow;
[L6332]              assume msgsender_MSG != null;
[L6333]              assume DType[msgsender_MSG] != SafeMath;
[L6334]              assume DType[msgsender_MSG] != IERC20;
[L6335]              assume DType[msgsender_MSG] != ERC20;
[L6336]              assume DType[msgsender_MSG] != Ownable;
[L6337]              assume DType[msgsender_MSG] != Pausable;
[L6338]              assume DType[msgsender_MSG] != ERC20Pausable;
[L6339]              assume DType[msgsender_MSG] != KardiachainToken;
[L6340]              Alloc[msgsender_MSG] := true;
[L6341]  COND FALSE  !(choice == 20)
[L6347]  COND FALSE  !(choice == 19)
[L6353]  COND TRUE   choice == 18
[L6354]              gas := gas - 21000;
[L6355]  COND TRUE   gas >= 0
[L6356]              assume value_s726 >= 0 && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6357]              assume msgvalue_MSG == 0;
[L6358]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == to_s726 && value_s726 > _balances_ERC20[this][msgsender_MSG]) && value_s726 >= 0) && value_s726 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s726] >= 0) && _balances_ERC20[this][to_s726] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC20Pausable0 := true;
[L2]                 call_transfer_ERC20Pausable0 := false;
[L2]                 revert := revert_hold;
[L1289]              havoc __exception;
[L1290]              revert := false;
[L1291]  COND FALSE  !(__exception)
[L1315]  CALL        call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3882]  CALL        call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L5649]  COND FALSE  !(!!paused_Pausable[this])
[L3882]  RET         call whenNotPaused_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3883]  COND FALSE  !(revert)
[L3886]  COND TRUE   DType[this] == KardiachainToken
[L3887]  CALL        call __var_19 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3005]  COND TRUE   DType[this] == KardiachainToken
[L3006]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L3335]              __var_4 := null;
[L3336]  COND FALSE  !(!(sender_s410 != null))
[L3340]              __var_5 := null;
[L3341]  COND FALSE  !(!(recipient_s410 != null))
[L3345]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L2809]  COND FALSE  !(!(b_s47 <= a_s47))
[L2813]              __ret_0_ := (a_s47 - b_s47) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3345]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s410], amount_s410);
[L3346]  COND FALSE  !(revert)
[L3349]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s410];
[L3350]              _balances_ERC20[this][sender_s410] := __var_6;
[L3351]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s410];
[L3352]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L2788]              c_s26 := (a_s26 + b_s26) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2789]  COND FALSE  !(!(c_s26 >= a_s26))
[L2793]              __ret_0_ := c_s26;
[L3352]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s410], amount_s410);
[L3353]  COND FALSE  !(revert)
[L3356]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s410];
[L3357]              _balances_ERC20[this][recipient_s410] := __var_7;
[L3358]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s410];
[L3359]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3006]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s230, amount_s230);
[L3007]  COND FALSE  !(revert)
[L3023]              __ret_0_ := true;
[L3887]  RET         call __var_19 := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L3888]  COND FALSE  !(revert)
[L3899]              __ret_0_ := __var_19;
[L1315]  RET         call __ret_0_ := transfer~address~uint256_ERC20Pausable__success(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L1316]              assume !revert && gas >= 0;
[L6358]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20Pausable(this, msgsender_MSG, msgvalue_MSG, to_s726, value_s726);
[L6486]  RET         call CorralChoice_KardiachainToken(this);

[2020-11-24 20:04:17,176 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:04:17,177 INFO  L82        PathProgramCache]: Analyzing trace with hash -1965161963, now seen corresponding path program 1 times
[2020-11-24 20:04:17,177 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:04:17,196 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:04:17,302 INFO  L134       CoverageAnalysis]: Checked inductivity of 177 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 177 trivial. 0 not checked.
[2020-11-24 20:04:17,302 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:04:17,302 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-24 20:04:17,303 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:04:17,303 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-24 20:04:17,303 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=17, Invalid=55, Unknown=0, NotChecked=0, Total=72
[2020-11-24 20:04:17,303 INFO  L87              Difference]: Start difference. First operand 3934 states and 4448 transitions. cyclomatic complexity: 516 Second operand 9 states.
[2020-11-24 20:04:18,194 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:04:18,194 INFO  L93              Difference]: Finished difference Result 2279 states and 2552 transitions.
[2020-11-24 20:04:18,194 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-24 20:04:18,194 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2279 states and 2552 transitions.
[2020-11-24 20:04:18,198 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 20:04:18,198 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2279 states to 0 states and 0 transitions.
[2020-11-24 20:04:18,198 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-24 20:04:18,198 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-24 20:04:18,198 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-24 20:04:18,198 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:04:18,198 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 20:04:18,198 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 20:04:18,198 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 20:04:18,198 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 20:04:18,198 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-24 20:04:18,198 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 20:04:18,198 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-24 20:04:18,201 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:04:18 BasicIcfg
[2020-11-24 20:04:18,201 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 20:04:18,202 INFO  L168              Benchmark]: Toolchain (without parser) took 6498.67 ms. Allocated memory was 1.0 GB in the beginning and 1.9 GB in the end (delta: 826.8 MB). Free memory was 935.2 MB in the beginning and 1.7 GB in the end (delta: -741.4 MB). Peak memory consumption was 85.4 MB. Max. memory is 15.3 GB.
[2020-11-24 20:04:18,203 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 20:04:18,203 INFO  L168              Benchmark]: Boogie Preprocessor took 102.39 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 919.1 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-24 20:04:18,204 INFO  L168              Benchmark]: UtopiaSpecLang took 59.50 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-24 20:04:18,204 INFO  L168              Benchmark]: Boogie Printer took 25.25 ms. Allocated memory is still 1.0 GB. Free memory is still 908.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 20:04:18,204 INFO  L168              Benchmark]: RCFGBuilder took 923.11 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 57.1 MB). Free memory was 908.4 MB in the beginning and 1.0 GB in the end (delta: -118.5 MB). Peak memory consumption was 197.6 MB. Max. memory is 15.3 GB.
[2020-11-24 20:04:18,204 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.42 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 13.5 MB). Peak memory consumption was 13.5 MB. Max. memory is 15.3 GB.
[2020-11-24 20:04:18,205 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1654.96 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 167.2 MB). Free memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: -39.6 MB). Peak memory consumption was 513.8 MB. Max. memory is 15.3 GB.
[2020-11-24 20:04:18,205 INFO  L168              Benchmark]: BlockEncodingV2 took 201.44 ms. Allocated memory is still 1.3 GB. Free memory was 1.1 GB in the beginning and 946.9 MB in the end (delta: 106.0 MB). Peak memory consumption was 106.0 MB. Max. memory is 15.3 GB.
[2020-11-24 20:04:18,205 INFO  L168              Benchmark]: BuchiAutomizer took 3490.84 ms. Allocated memory was 1.3 GB in the beginning and 1.9 GB in the end (delta: 602.4 MB). Free memory was 946.9 MB in the beginning and 1.7 GB in the end (delta: -729.7 MB). There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 20:04:18,208 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    6104 locations, 11207 edges
  - StatisticsResult: Encoded RCFG
    5942 locations, 10792 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.17 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 102.39 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 919.1 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 59.50 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 908.4 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 25.25 ms. Allocated memory is still 1.0 GB. Free memory is still 908.4 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 923.11 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 57.1 MB). Free memory was 908.4 MB in the beginning and 1.0 GB in the end (delta: -118.5 MB). Peak memory consumption was 197.6 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.42 ms. Allocated memory is still 1.1 GB. Free memory was 1.0 GB in the beginning and 1.0 GB in the end (delta: 13.5 MB). Peak memory consumption was 13.5 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1654.96 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 167.2 MB). Free memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: -39.6 MB). Peak memory consumption was 513.8 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 201.44 ms. Allocated memory is still 1.3 GB. Free memory was 1.1 GB in the beginning and 946.9 MB in the end (delta: 106.0 MB). Peak memory consumption was 106.0 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 3490.84 ms. Allocated memory was 1.3 GB in the beginning and 1.9 GB in the end (delta: 602.4 MB). Free memory was 946.9 MB in the beginning and 1.7 GB in the end (delta: -729.7 MB). There was no memory consumed. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    2378 locations, 3411 edges
  - StatisticsResult: BuchiProgram size
    6104 locations, 11207 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 6 terminating modules (6 trivial, 0 deterministic, 0 nondeterministic). 6 modules have a trivial ranking function, the largest among these consists of 9 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 3.4s and 7 iterations.  TraceHistogramMax:4. Analysis of lassos took 0.8s. Construction of modules took 1.2s. BÃ¼chi inclusion checks took 0.6s. Highest rank in rank-based complementation 0. Minimization of det autom 6. Minimization of nondet autom 0. Automata minimization 0.2s AutomataMinimizationTime, 5 MinimizatonAttempts, 893 StatesRemovedByMinimization, 2 NontrivialMinimizations. Non-live state removal took 0.1s Buchi closure took 0.0s. Biggest automaton had 4258 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 23935 SDtfs, 11159 SDslu, 48660 SDs, 0 SdLazy, 13389 SolverSat, 2801 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 1.2s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU6 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transfer_ERC20Pausable0) ==> ( <>(fail_transfer_ERC20Pausable0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
