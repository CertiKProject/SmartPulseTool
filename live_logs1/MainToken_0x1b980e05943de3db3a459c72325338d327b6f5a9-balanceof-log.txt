This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 21:15:41,040 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 21:15:41,041 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 21:15:41,048 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 21:15:41,048 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 21:15:41,049 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 21:15:41,049 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 21:15:41,050 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 21:15:41,051 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 21:15:41,052 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 21:15:41,052 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 21:15:41,052 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 21:15:41,053 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 21:15:41,053 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 21:15:41,054 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 21:15:41,054 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 21:15:41,055 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 21:15:41,055 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 21:15:41,056 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 21:15:41,057 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 21:15:41,058 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 21:15:41,058 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 21:15:41,059 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 21:15:41,060 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 21:15:41,060 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 21:15:41,060 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 21:15:41,060 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 21:15:41,061 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 21:15:41,061 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 21:15:41,061 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 21:15:41,061 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 21:15:41,062 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 21:15:41,062 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 21:15:41,062 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 21:15:41,063 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 21:15:41,063 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 21:15:41,063 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 21:15:41,063 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 21:15:41,063 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 21:15:41,064 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 21:15:41,064 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 21:15:41,064 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 21:15:41,070 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 21:15:41,070 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 21:15:41,070 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 21:15:41,071 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 21:15:41,071 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 21:15:41,071 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 21:15:41,071 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 21:15:41,071 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 21:15:41,071 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 21:15:41,071 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 21:15:41,071 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 21:15:41,071 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 21:15:41,071 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 21:15:41,071 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 21:15:41,071 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 21:15:41,071 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 21:15:41,071 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 21:15:41,072 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 21:15:41,072 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 21:15:41,072 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 21:15:41,072 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 21:15:41,072 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 21:15:41,072 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 21:15:41,072 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 21:15:41,072 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 21:15:41,072 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 21:15:41,087 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 21:15:41,096 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 21:15:41,099 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 21:15:41,100 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 21:15:41,100 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 21:15:41,101 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_balanceof.bpl
[2020-11-24 21:15:41,101 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_balanceof.bpl'
[2020-11-24 21:15:41,229 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 21:15:41,230 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 21:15:41,231 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 21:15:41,231 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 21:15:41,231 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 21:15:41,242 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:15:41" (1/1) ...
[2020-11-24 21:15:41,243 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:15:41" (1/1) ...
[2020-11-24 21:15:41,282 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:15:41" (1/1) ...
[2020-11-24 21:15:41,283 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:15:41" (1/1) ...
[2020-11-24 21:15:41,322 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:15:41" (1/1) ...
[2020-11-24 21:15:41,340 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:15:41" (1/1) ...
[2020-11-24 21:15:41,355 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:15:41" (1/1) ...
[2020-11-24 21:15:41,379 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 21:15:41,380 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 21:15:41,380 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 21:15:41,381 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 21:15:41,384 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:15:41" (1/1) ...
[2020-11-24 21:15:41,407 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(FreezableToken.balanceOf(owner), balances_BasicToken[this][owner] >= 0 && balances_BasicToken[this][owner] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(FreezableToken.balanceOf(owner), return == balances_BasicToken[this][owner] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:15:41,411 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(FreezableToken.balanceOf(owner), balances_BasicToken[this][owner] >= 0 && balances_BasicToken[this][owner] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(FreezableToken.balanceOf(owner), return == balances_BasicToken[this][owner] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:15:41,425 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(FreezableToken.balanceOf(owner), balances_BasicToken[this][owner] >= 0 && balances_BasicToken[this][owner] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(FreezableToken.balanceOf(owner), return == balances_BasicToken[this][owner] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:15:41,433 INFO  L636   opiaSpecLangObserver]: Parsed ( balances_BasicToken[this][_owner_s729]>=0 && balances_BasicToken[this][_owner_s729]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],[IdentifierExpression[_owner_s729,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],IntegerLiteral[0]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],[IdentifierExpression[_owner_s729,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 21:15:41,436 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( balance_s729==balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this]==( old(totalSupply__BasicToken[this]) ) ) && balances_BasicToken[this]==( old(balances_BasicToken[this]) ) ) && allowed_StandardToken[this]==( old(allowed_StandardToken[this]) ) ) && initialized_MainToken[this]==( old(initialized_MainToken[this]) ) ) && paused_Pausable[this]==( old(paused_Pausable[this]) ) ) && mintingFinished_MintableToken[this]==( old(mintingFinished_MintableToken[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) && chains_FreezableToken[this]==( old(chains_FreezableToken[this]) ) ) && freezings_FreezableToken[this]==( old(freezings_FreezableToken[this]) ) ) && freezingBalance_FreezableToken[this]==( old(freezingBalance_FreezableToken[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[balance_s729,<IMPLEMENTATION_OUTPARAM,balanceOf~address_FreezableToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],[IdentifierExpression[_owner_s729,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,balanceOf~address_FreezableToken>]]]]]]
[2020-11-24 21:15:41,443 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(FreezableToken.balanceOf(owner), balances_BasicToken[this][owner] >= 0 && balances_BasicToken[this][owner] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(FreezableToken.balanceOf(owner), return == balances_BasicToken[this][owner] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 21:15:41,444 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_balanceOf_FreezableToken0) ==> ( <>AP(success_balanceOf_FreezableToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 21:15:41,473 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:15:41 PropertyContainer
[2020-11-24 21:15:41,473 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 21:15:41,473 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 21:15:41,473 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 21:15:41,473 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 21:15:41,474 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:15:41" (1/2) ...
[2020-11-24 21:15:41,475 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 21:15:41,475 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 21:15:41,506 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:15:41" (2/2) ...
[2020-11-24 21:15:41,506 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 21:15:41,506 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 21:15:41,506 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 21:15:41,507 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 21:15:41,507 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:15:41" (1/2) ...
[2020-11-24 21:15:41,560 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 21:15:41,560 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:15:41,560 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:15:41,560 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-24 21:15:41,561 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-24 21:15:41,561 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-24 21:15:41,561 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-24 21:15:41,561 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:15:41,561 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 21:15:41,561 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 21:15:41,561 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:15:41,561 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:15:41,562 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:15:41,562 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:15:41,562 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:15:41,562 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-24 21:15:41,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-24 21:15:41,562 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-24 21:15:41,562 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-24 21:15:41,563 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:15:41,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-24 21:15:41,563 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-24 21:15:41,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-24 21:15:41,563 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:15:41,563 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-24 21:15:41,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-24 21:15:41,563 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-24 21:15:41,563 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 21:15:41,563 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-24 21:15:41,564 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:15:41,564 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-24 21:15:41,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-24 21:15:41,564 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:15:41,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 21:15:41,564 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-24 21:15:41,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-24 21:15:41,564 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-24 21:15:41,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-24 21:15:41,564 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:15:41,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 21:15:41,565 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:15:41,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 21:15:41,565 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:15:41,565 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 21:15:41,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 21:15:41,565 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-24 21:15:41,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-24 21:15:41,565 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-24 21:15:41,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-24 21:15:41,565 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:15:41,566 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 21:15:41,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 21:15:41,566 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:15:41,566 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-24 21:15:41,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-24 21:15:41,566 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-24 21:15:41,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-24 21:15:41,566 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-24 21:15:41,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-24 21:15:41,566 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-24 21:15:41,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-24 21:15:41,567 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:15:41,567 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken
[2020-11-24 21:15:41,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken
[2020-11-24 21:15:41,567 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken
[2020-11-24 21:15:41,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken
[2020-11-24 21:15:41,567 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:15:41,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 21:15:41,567 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:15:41,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 21:15:41,567 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken
[2020-11-24 21:15:41,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken
[2020-11-24 21:15:41,568 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:15:41,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 21:15:41,568 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:15:41,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 21:15:41,568 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken
[2020-11-24 21:15:41,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken
[2020-11-24 21:15:41,568 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken
[2020-11-24 21:15:41,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken
[2020-11-24 21:15:41,568 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:15:41,569 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:15:41,569 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:15:41,569 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken
[2020-11-24 21:15:41,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken
[2020-11-24 21:15:41,569 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken
[2020-11-24 21:15:41,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken
[2020-11-24 21:15:41,569 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:15:41,569 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:15:41,569 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-24 21:15:41,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-24 21:15:41,569 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-24 21:15:41,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-24 21:15:41,570 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-24 21:15:41,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-24 21:15:41,570 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-24 21:15:41,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-24 21:15:41,570 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:15:41,570 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:15:41,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 21:15:41,570 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:15:41,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 21:15:41,570 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:15:41,571 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts
[2020-11-24 21:15:41,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts
[2020-11-24 21:15:41,571 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:15:41,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts
[2020-11-24 21:15:41,571 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:15:41,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 21:15:41,571 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:15:41,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 21:15:41,571 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts
[2020-11-24 21:15:41,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts
[2020-11-24 21:15:41,572 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:15:41,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts
[2020-11-24 21:15:41,572 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts
[2020-11-24 21:15:41,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts
[2020-11-24 21:15:41,572 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts
[2020-11-24 21:15:41,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts
[2020-11-24 21:15:41,572 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:15:41,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts
[2020-11-24 21:15:41,572 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:15:41,572 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken
[2020-11-24 21:15:41,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken
[2020-11-24 21:15:41,573 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken
[2020-11-24 21:15:41,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken
[2020-11-24 21:15:41,573 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken
[2020-11-24 21:15:41,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken
[2020-11-24 21:15:41,573 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken
[2020-11-24 21:15:41,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken
[2020-11-24 21:15:41,573 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:15:41,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 21:15:41,573 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken
[2020-11-24 21:15:41,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken
[2020-11-24 21:15:41,574 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__success
[2020-11-24 21:15:41,574 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken
[2020-11-24 21:15:41,574 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken
[2020-11-24 21:15:41,574 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 21:15:41,574 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 21:15:41,574 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 21:15:41,574 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 21:15:41,574 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-24 21:15:41,574 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__success
[2020-11-24 21:15:41,575 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-24 21:15:41,575 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-24 21:15:41,575 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-24 21:15:41,575 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-24 21:15:41,575 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 21:15:41,575 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 21:15:41,575 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-24 21:15:41,575 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-24 21:15:41,576 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-24 21:15:41,576 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-24 21:15:41,576 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-24 21:15:41,576 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-24 21:15:41,576 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 21:15:41,576 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 21:15:41,576 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-24 21:15:41,576 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-24 21:15:41,576 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableToken
[2020-11-24 21:15:41,576 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableToken
[2020-11-24 21:15:41,576 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BurnableToken
[2020-11-24 21:15:41,577 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BurnableToken
[2020-11-24 21:15:41,577 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-24 21:15:41,577 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-24 21:15:41,577 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:15:41,577 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:15:41,577 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Consts
[2020-11-24 21:15:41,577 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Consts
[2020-11-24 21:15:41,577 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MainToken
[2020-11-24 21:15:41,577 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 21:15:41,577 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 21:15:41,577 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:15:41,578 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:15:41,578 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:15:41,578 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:15:41,578 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 21:15:41,578 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 21:15:41,578 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:15:41,578 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:15:41,578 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:15:41,578 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:15:41,578 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:15:41,578 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-24 21:15:41,578 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-24 21:15:41,579 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-24 21:15:41,579 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-24 21:15:41,579 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:15:41,579 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:15:41,579 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:15:41,579 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:15:41,579 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:15:41,579 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-24 21:15:41,579 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-24 21:15:41,579 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:15:41,579 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-24 21:15:41,579 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-24 21:15:41,580 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:15:41,580 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:15:41,580 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:15:41,580 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:15:41,580 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:15:41,580 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:15:41,580 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:15:41,580 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:15:41,580 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:15:41,580 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:15:41,580 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:15:41,581 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 21:15:41,581 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 21:15:41,581 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-24 21:15:41,581 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:15:41,581 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:15:41,581 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:15:41,581 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:15:41,581 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 21:15:41,581 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 21:15:41,581 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:15:41,581 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-24 21:15:41,581 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-24 21:15:41,582 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:15:41,582 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:15:41,582 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-24 21:15:41,582 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-24 21:15:41,582 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-24 21:15:41,582 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:15:41,582 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:15:41,582 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:15:41,582 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:15:41,582 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:15:41,582 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:15:41,582 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:15:41,583 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:15:41,583 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:15:41,583 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:15:41,583 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:15:41,583 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:15:41,583 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:15:41,583 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:15:41,583 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:15:41,583 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:15:41,583 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:15:41,583 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:15:41,583 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__success
[2020-11-24 21:15:41,584 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:15:41,584 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:15:41,584 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:15:41,584 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:15:41,584 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:15:41,584 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:15:41,584 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:15:41,584 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:15:41,584 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:15:41,584 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:15:41,584 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-24 21:15:41,584 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-24 21:15:41,585 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-24 21:15:41,585 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-24 21:15:41,585 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-24 21:15:41,585 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-24 21:15:41,585 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-24 21:15:41,585 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-24 21:15:41,585 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:15:41,585 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:15:41,585 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:15:41,585 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:15:41,585 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:15:41,585 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:15:41,586 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__success
[2020-11-24 21:15:41,586 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__fail
[2020-11-24 21:15:41,586 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:15:41,586 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:15:41,586 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:15:41,586 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:15:41,587 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:15:41,587 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:15:41,587 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:15:41,587 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:15:41,587 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:15:41,587 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:15:41,587 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__success
[2020-11-24 21:15:41,587 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__fail
[2020-11-24 21:15:41,587 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__success
[2020-11-24 21:15:41,587 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__fail
[2020-11-24 21:15:41,587 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:15:41,587 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:15:41,587 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:15:41,588 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__success
[2020-11-24 21:15:41,588 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__fail
[2020-11-24 21:15:41,588 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__success
[2020-11-24 21:15:41,588 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__fail
[2020-11-24 21:15:41,588 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__success
[2020-11-24 21:15:41,588 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__fail
[2020-11-24 21:15:41,588 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__success
[2020-11-24 21:15:41,588 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__fail
[2020-11-24 21:15:41,588 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:15:41,588 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:15:41,588 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:15:41,588 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:15:41,589 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__fail
[2020-11-24 21:15:41,589 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__success
[2020-11-24 21:15:41,589 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__fail
[2020-11-24 21:15:41,589 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 21:15:41,589 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 21:15:41,589 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 21:15:41,589 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 21:15:41,589 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-24 21:15:41,589 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__fail
[2020-11-24 21:15:41,589 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-24 21:15:41,589 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-24 21:15:41,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 21:15:41,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 21:15:41,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 21:15:41,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 21:15:41,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 21:15:41,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 21:15:41,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 21:15:41,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 21:15:41,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 21:15:41,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 21:15:41,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 21:15:41,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 21:15:41,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 21:15:41,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 21:15:41,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 21:15:41,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 21:15:41,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 21:15:41,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 21:15:41,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 21:15:41,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 21:15:41,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-24 21:15:41,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-24 21:15:41,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-24 21:15:41,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-24 21:15:41,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 21:15:41,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 21:15:41,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-24 21:15:41,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-24 21:15:41,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 21:15:41,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 21:15:41,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-24 21:15:41,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-24 21:15:41,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 21:15:41,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 21:15:41,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-24 21:15:41,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-24 21:15:41,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 21:15:41,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 21:15:41,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 21:15:41,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-24 21:15:41,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-24 21:15:41,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-24 21:15:41,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:15:41,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:15:41,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 21:15:41,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 21:15:41,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 21:15:41,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 21:15:41,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 21:15:41,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 21:15:41,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-24 21:15:41,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-24 21:15:41,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-24 21:15:41,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-24 21:15:41,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 21:15:41,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-24 21:15:41,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 21:15:41,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 21:15:41,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 21:15:41,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 21:15:41,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-24 21:15:41,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-24 21:15:41,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 21:15:41,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-24 21:15:41,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-24 21:15:41,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-24 21:15:41,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-24 21:15:41,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-24 21:15:41,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 21:15:41,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 21:15:41,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__fail
[2020-11-24 21:15:41,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__success
[2020-11-24 21:15:41,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 21:15:41,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__success
[2020-11-24 21:15:41,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 21:15:41,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 21:15:41,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 21:15:41,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 21:15:41,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 21:15:41,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__success
[2020-11-24 21:15:41,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 21:15:41,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 21:15:41,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 21:15:41,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 21:15:41,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__fail
[2020-11-24 21:15:41,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__success
[2020-11-24 21:15:41,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__fail
[2020-11-24 21:15:41,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__success
[2020-11-24 21:15:41,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 21:15:41,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 21:15:41,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 21:15:41,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 21:15:41,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 21:15:41,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 21:15:41,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__fail
[2020-11-24 21:15:41,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__success
[2020-11-24 21:15:41,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__fail
[2020-11-24 21:15:41,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__success
[2020-11-24 21:15:41,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 21:15:41,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 21:15:41,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 21:15:41,597 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 21:15:41,597 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-24 21:15:41,597 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-24 21:15:41,597 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-24 21:15:41,597 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-24 21:15:41,597 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-24 21:15:41,597 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-24 21:15:41,597 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-24 21:15:41,597 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-24 21:15:41,597 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 21:15:41,597 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 21:15:41,597 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 21:15:41,597 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 21:15:41,597 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 21:15:41,598 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 21:15:41,598 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 21:15:41,598 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 21:15:41,598 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__fail
[2020-11-24 21:15:41,598 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__success
[2020-11-24 21:15:41,598 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 21:15:41,598 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 21:15:41,598 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 21:15:41,598 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 21:15:41,598 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 21:15:41,598 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 21:15:41,598 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__fail
[2020-11-24 21:15:41,598 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__success
[2020-11-24 21:15:41,598 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 21:15:41,598 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 21:15:41,599 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__fail
[2020-11-24 21:15:41,599 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__success
[2020-11-24 21:15:41,599 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__fail
[2020-11-24 21:15:41,599 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__success
[2020-11-24 21:15:41,599 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 21:15:41,599 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 21:15:41,599 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 21:15:41,599 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 21:15:41,599 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__fail
[2020-11-24 21:15:41,599 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__success
[2020-11-24 21:15:41,599 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__fail
[2020-11-24 21:15:41,599 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__success
[2020-11-24 21:15:41,599 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__fail
[2020-11-24 21:15:41,599 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__success
[2020-11-24 21:15:41,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__fail
[2020-11-24 21:15:41,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__success
[2020-11-24 21:15:41,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 21:15:41,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 21:15:41,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 21:15:41,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__success
[2020-11-24 21:15:41,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__fail
[2020-11-24 21:15:41,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__success
[2020-11-24 21:15:41,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__fail
[2020-11-24 21:15:41,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__success
[2020-11-24 21:15:41,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 21:15:41,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 21:15:41,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 21:15:41,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 21:15:41,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 21:15:41,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 21:15:41,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 21:15:41,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 21:15:41,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-24 21:15:41,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-24 21:15:41,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__fail
[2020-11-24 21:15:41,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__success
[2020-11-24 21:15:41,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-24 21:15:41,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-24 21:15:41,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-24 21:15:41,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-24 21:15:41,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-24 21:15:41,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-24 21:15:41,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 21:15:41,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 21:15:41,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-24 21:15:41,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-24 21:15:41,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-24 21:15:41,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-24 21:15:41,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-24 21:15:41,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-24 21:15:41,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 21:15:41,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 21:15:41,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-24 21:15:41,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-24 21:15:41,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableToken
[2020-11-24 21:15:41,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableToken
[2020-11-24 21:15:41,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BurnableToken
[2020-11-24 21:15:41,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BurnableToken
[2020-11-24 21:15:41,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-24 21:15:41,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-24 21:15:41,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableMintableToken
[2020-11-24 21:15:41,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableMintableToken
[2020-11-24 21:15:41,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Consts
[2020-11-24 21:15:41,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Consts
[2020-11-24 21:15:41,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MainToken
[2020-11-24 21:15:41,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 21:15:41,603 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 21:15:41,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 21:15:41,956 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:15:41,956 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:15:41,957 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 21:15:43,239 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 21:15:43,239 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-11-24 21:15:43,242 INFO  L202        PluginConnector]: Adding new model MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:15:43 BoogieIcfgContainer
[2020-11-24 21:15:43,242 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:15:41" (2/2) ...
[2020-11-24 21:15:43,242 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 21:15:43,242 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@58176895 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:15:43, skipping insertion in model container
[2020-11-24 21:15:43,242 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 21:15:43,242 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 21:15:43,242 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 21:15:43,243 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 21:15:43,243 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:15:41" (1/3) ...
[2020-11-24 21:15:43,244 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@73b951de and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:15:43, skipping insertion in model container
[2020-11-24 21:15:43,244 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:15:41" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 21:15:43,274 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:15:43 NWAContainer
[2020-11-24 21:15:43,274 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 21:15:43,274 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 21:15:43,274 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 21:15:43,275 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 21:15:43,275 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:15:43" (3/4) ...
[2020-11-24 21:15:43,276 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@383a81e0 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:15:43, skipping insertion in model container
[2020-11-24 21:15:43,276 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:15:43" (4/4) ...
[2020-11-24 21:15:43,278 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 21:15:43,285 INFO  L110   BuchiProductObserver]: Initial RCFG 5418 locations, 7594 edges
[2020-11-24 21:15:43,285 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 21:15:43,297 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 21:15:47,277 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 21:15:47,293 INFO  L110   BuchiProductObserver]: BuchiProgram size 13516 locations, 24819 edges
[2020-11-24 21:15:47,293 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:15:47 BoogieIcfgContainer
[2020-11-24 21:15:47,293 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 21:15:47,293 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 21:15:47,293 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 21:15:47,295 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 21:15:47,295 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:15:47" (1/1) ...
[2020-11-24 21:15:47,607 INFO  L313           BlockEncoder]: Initial Icfg 13516 locations, 24819 edges
[2020-11-24 21:15:47,607 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 21:15:47,608 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 21:15:47,608 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 21:15:47,608 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 21:15:47,630 INFO  L70    emoveInfeasibleEdges]: Removed 315 edges and 29 locations because of local infeasibility
[2020-11-24 21:15:47,649 INFO  L70        RemoveSinkStates]: Removed 170 edges and 113 locations by removing sink states
[2020-11-24 21:15:47,671 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 21:15:47,678 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 21:15:47,685 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 21:15:47,686 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 21:15:47,690 INFO  L313           BlockEncoder]: Encoded RCFG 13306 locations, 24233 edges
[2020-11-24 21:15:47,691 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:15:47 BasicIcfg
[2020-11-24 21:15:47,691 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 21:15:47,691 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 21:15:47,691 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 21:15:47,692 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 21:15:47,693 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:15:47,693 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_balanceof.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 09:15:41" (1/6) ...
[2020-11-24 21:15:47,694 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@35dabb4a and model type MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:15:47, skipping insertion in model container
[2020-11-24 21:15:47,694 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:15:47,694 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 09:15:41" (2/6) ...
[2020-11-24 21:15:47,694 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@35dabb4a and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:15:47, skipping insertion in model container
[2020-11-24 21:15:47,694 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:15:47,694 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 09:15:43" (3/6) ...
[2020-11-24 21:15:47,695 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@35dabb4a and model type MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_balanceof.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 09:15:47, skipping insertion in model container
[2020-11-24 21:15:47,695 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:15:47,695 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 09:15:43" (4/6) ...
[2020-11-24 21:15:47,695 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@35dabb4a and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 09:15:47, skipping insertion in model container
[2020-11-24 21:15:47,695 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:15:47,695 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 09:15:47" (5/6) ...
[2020-11-24 21:15:47,695 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@35dabb4a and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 09:15:47, skipping insertion in model container
[2020-11-24 21:15:47,695 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 21:15:47,695 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 09:15:47" (6/6) ...
[2020-11-24 21:15:47,696 INFO  L404   chiAutomizerObserver]: Analyzing ICFG MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_balanceof.bpl_BEv2
[2020-11-24 21:15:47,730 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 21:15:47,730 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 21:15:47,730 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 21:15:47,730 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 21:15:47,730 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 21:15:47,730 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 21:15:47,730 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 21:15:47,730 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 21:15:47,730 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 21:15:47,808 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13306 states.
[2020-11-24 21:15:47,900 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:15:47,900 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:15:47,900 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:15:47,907 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:15:47,908 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:15:47,908 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 21:15:47,908 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13306 states.
[2020-11-24 21:15:47,956 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:15:47,956 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:15:47,956 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:15:47,957 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:15:47,958 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14831]              assume null == 0;
[L14832]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14832]  RET         call this := FreshRefGenerator__success();
[L14833]              assume now >= 0;
[L14834]              assume DType[this] == MainToken;
[L14835]              assume msgvalue_MSG == 0;
[L14836]              gas := gas - 53000;
[L14837]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1142012261;
[L9314]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               CONTINUE_MINTING_Consts[this] := true;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND TRUE   revert
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14837]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14838]              assume !revert && gas >= 0;

Loop:
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND TRUE   choice == 38
[L14584]              gas := gas - 21000;
[L14585]  COND FALSE  !(gas >= 0)
[L14841]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:15:47,972 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:15:47,973 INFO  L82        PathProgramCache]: Analyzing trace with hash -1644934887, now seen corresponding path program 1 times
[2020-11-24 21:15:47,979 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:15:48,006 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:15:48,046 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:15:48,047 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:15:48,048 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 21:15:48,459 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:15:48,469 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 21:15:48,469 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 21:15:48,470 INFO  L87              Difference]: Start difference. First operand 13306 states. Second operand 4 states.
[2020-11-24 21:15:49,825 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:15:49,826 INFO  L93              Difference]: Finished difference Result 8310 states and 9725 transitions.
[2020-11-24 21:15:49,826 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 21:15:49,827 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8310 states and 9725 transitions.
[2020-11-24 21:15:49,859 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:15:49,904 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8310 states to 8306 states and 9717 transitions.
[2020-11-24 21:15:49,905 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-24 21:15:49,908 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1857
[2020-11-24 21:15:49,908 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8306 states and 9717 transitions.
[2020-11-24 21:15:49,927 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:15:49,927 INFO  L728         BuchiCegarLoop]: Abstraction has 8306 states and 9717 transitions.
[2020-11-24 21:15:49,948 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8306 states and 9717 transitions.
[2020-11-24 21:15:50,055 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8306 to 8306.
[2020-11-24 21:15:50,055 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8306 states.
[2020-11-24 21:15:50,070 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8306 states to 8306 states and 9717 transitions.
[2020-11-24 21:15:50,071 INFO  L751         BuchiCegarLoop]: Abstraction has 8306 states and 9717 transitions.
[2020-11-24 21:15:50,071 INFO  L631         BuchiCegarLoop]: Abstraction has 8306 states and 9717 transitions.
[2020-11-24 21:15:50,071 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 21:15:50,071 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8306 states and 9717 transitions.
[2020-11-24 21:15:50,083 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:15:50,083 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:15:50,083 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:15:50,085 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:15:50,085 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14831]              assume null == 0;
[L14832]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14832]  RET         call this := FreshRefGenerator__success();
[L14833]              assume now >= 0;
[L14834]              assume DType[this] == MainToken;
[L14835]              assume msgvalue_MSG == 0;
[L14836]              gas := gas - 53000;
[L14837]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1142012261;
[L9314]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               CONTINUE_MINTING_Consts[this] := true;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND TRUE   revert
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14837]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14838]              assume !revert && gas >= 0;
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND TRUE   choice == 37
[L14590]              gas := gas - 21000;
[L14591]  COND TRUE   gas >= 0
[L14592]              assume msgvalue_MSG == 0;
[L14593]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND FALSE  !(DType[this] == MainToken)
[L7735]   COND TRUE   DType[this] == FreezableMintableToken
[L7736]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7736]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7737]   COND TRUE   revert
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14593]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14841]  RET         call CorralChoice_MainToken(this);

Loop:
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND TRUE   choice == 37
[L14590]              gas := gas - 21000;
[L14591]  COND TRUE   gas >= 0
[L14592]              assume msgvalue_MSG == 0;
[L14593]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND FALSE  !(DType[this] == MainToken)
[L7735]   COND TRUE   DType[this] == FreezableMintableToken
[L7736]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7736]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7737]   COND TRUE   revert
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14593]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14841]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:15:50,089 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:15:50,090 INFO  L82        PathProgramCache]: Analyzing trace with hash 827208245, now seen corresponding path program 1 times
[2020-11-24 21:15:50,091 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:15:50,104 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:15:50,133 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 21:15:50,134 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:15:50,134 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:15:50,135 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:15:50,135 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:15:50,135 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:15:50,135 INFO  L87              Difference]: Start difference. First operand 8306 states and 9717 transitions. cyclomatic complexity: 1431 Second operand 3 states.
[2020-11-24 21:15:50,329 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:15:50,329 INFO  L93              Difference]: Finished difference Result 9770 states and 11177 transitions.
[2020-11-24 21:15:50,329 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:15:50,330 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9770 states and 11177 transitions.
[2020-11-24 21:15:50,356 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:15:50,399 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9770 states to 9770 states and 11177 transitions.
[2020-11-24 21:15:50,399 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2275
[2020-11-24 21:15:50,401 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2275
[2020-11-24 21:15:50,401 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9770 states and 11177 transitions.
[2020-11-24 21:15:50,411 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:15:50,411 INFO  L728         BuchiCegarLoop]: Abstraction has 9770 states and 11177 transitions.
[2020-11-24 21:15:50,420 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9770 states and 11177 transitions.
[2020-11-24 21:15:50,503 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9770 to 8682.
[2020-11-24 21:15:50,503 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8682 states.
[2020-11-24 21:15:50,514 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8682 states to 8682 states and 9823 transitions.
[2020-11-24 21:15:50,514 INFO  L751         BuchiCegarLoop]: Abstraction has 8682 states and 9823 transitions.
[2020-11-24 21:15:50,514 INFO  L631         BuchiCegarLoop]: Abstraction has 8682 states and 9823 transitions.
[2020-11-24 21:15:50,514 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 21:15:50,514 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8682 states and 9823 transitions.
[2020-11-24 21:15:50,526 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:15:50,526 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:15:50,526 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:15:50,533 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:15:50,533 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14831]              assume null == 0;
[L14832]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14832]  RET         call this := FreshRefGenerator__success();
[L14833]              assume now >= 0;
[L14834]              assume DType[this] == MainToken;
[L14835]              assume msgvalue_MSG == 0;
[L14836]              gas := gas - 53000;
[L14837]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1142012261;
[L9314]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               CONTINUE_MINTING_Consts[this] := true;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9801]   COND TRUE   !!initialized_MainToken[this]
[L9802]               revert := true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND TRUE   revert
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND TRUE   revert
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14837]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14838]              assume !revert && gas >= 0;
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND TRUE   choice == 37
[L14590]              gas := gas - 21000;
[L14591]  COND TRUE   gas >= 0
[L14592]              assume msgvalue_MSG == 0;
[L14593]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14593]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14841]  RET         call CorralChoice_MainToken(this);

Loop:
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND TRUE   choice == 37
[L14590]              gas := gas - 21000;
[L14591]  COND TRUE   gas >= 0
[L14592]              assume msgvalue_MSG == 0;
[L14593]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14593]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14841]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:15:50,543 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:15:50,543 INFO  L82        PathProgramCache]: Analyzing trace with hash -950853207, now seen corresponding path program 1 times
[2020-11-24 21:15:50,544 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:15:50,585 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:15:51,248 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:15:51,248 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:15:51,248 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:15:51,249 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:15:51,249 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:15:51,249 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:15:51,250 INFO  L87              Difference]: Start difference. First operand 8682 states and 9823 transitions. cyclomatic complexity: 1161 Second operand 3 states.
[2020-11-24 21:15:51,380 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:15:51,381 INFO  L93              Difference]: Finished difference Result 9764 states and 11007 transitions.
[2020-11-24 21:15:51,381 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:15:51,381 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9764 states and 11007 transitions.
[2020-11-24 21:15:51,402 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:15:51,433 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9764 states to 9416 states and 10599 transitions.
[2020-11-24 21:15:51,433 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2152
[2020-11-24 21:15:51,434 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2181
[2020-11-24 21:15:51,434 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9416 states and 10599 transitions.
[2020-11-24 21:15:51,444 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:15:51,444 INFO  L728         BuchiCegarLoop]: Abstraction has 9416 states and 10599 transitions.
[2020-11-24 21:15:51,453 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9416 states and 10599 transitions.
[2020-11-24 21:15:51,527 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9416 to 8729.
[2020-11-24 21:15:51,528 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8729 states.
[2020-11-24 21:15:51,537 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8729 states to 8729 states and 9730 transitions.
[2020-11-24 21:15:51,538 INFO  L751         BuchiCegarLoop]: Abstraction has 8729 states and 9730 transitions.
[2020-11-24 21:15:51,538 INFO  L631         BuchiCegarLoop]: Abstraction has 8729 states and 9730 transitions.
[2020-11-24 21:15:51,538 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 21:15:51,538 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8729 states and 9730 transitions.
[2020-11-24 21:15:51,549 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 21:15:51,549 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:15:51,549 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:15:51,553 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:15:51,554 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14831]              assume null == 0;
[L14832]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14832]  RET         call this := FreshRefGenerator__success();
[L14833]              assume now >= 0;
[L14834]              assume DType[this] == MainToken;
[L14835]              assume msgvalue_MSG == 0;
[L14836]              gas := gas - 53000;
[L14837]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1142012261;
[L9314]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               CONTINUE_MINTING_Consts[this] := true;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9801]   COND FALSE  !(!!initialized_MainToken[this])
[L9805]               initialized_MainToken[this] := true;
[L9806]   COND FALSE  !(PAUSED_Consts[this])
[L9816]               havoc addresses_s1709;
[L9817]               __var_57 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9818]               M_int_Ref[addresses_s1709][0] := __var_57;
[L9819]               __var_58 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9820]               M_int_Ref[addresses_s1709][1] := __var_58;
[L9821]               havoc amounts_s1709;
[L9822]               __var_59 := 48000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9823]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][0];
[L9824]               M_int_int[amounts_s1709][0] := __var_59;
[L9825]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][0];
[L9826]               __var_60 := 6000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9827]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][1];
[L9828]               M_int_int[amounts_s1709][1] := __var_60;
[L9829]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][1];
[L9830]               havoc freezes_s1709;
[L9831]               __var_61 := 0 % 18446744073709551616;
[L9832]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][0];
[L9833]               M_int_int[freezes_s1709][0] := __var_61;
[L9834]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][0];
[L9835]               __var_62 := 0 % 18446744073709551616;
[L9836]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][1];
[L9837]               M_int_int[freezes_s1709][1] := __var_62;
[L9838]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][1];
[L9839]               i_s1709 := 0;
[L9840]   COND FALSE  !(i_s1709 < Length[addresses_s1709])
[L9864]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9874]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12785]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14837]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14838]              assume !revert && gas >= 0;
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND TRUE   choice == 37
[L14590]              gas := gas - 21000;
[L14591]  COND TRUE   gas >= 0
[L14592]              assume msgvalue_MSG == 0;
[L14593]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14593]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14841]  RET         call CorralChoice_MainToken(this);

Loop:
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND TRUE   choice == 37
[L14590]              gas := gas - 21000;
[L14591]  COND TRUE   gas >= 0
[L14592]              assume msgvalue_MSG == 0;
[L14593]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14593]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14841]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:15:51,563 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:15:51,563 INFO  L82        PathProgramCache]: Analyzing trace with hash 221216684, now seen corresponding path program 1 times
[2020-11-24 21:15:51,564 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:15:51,616 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:15:52,690 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 103 proven. 0 refuted. 0 times theorem prover too weak. 9720 trivial. 0 not checked.
[2020-11-24 21:15:52,690 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:15:52,690 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [18] imperfect sequences [] total 18
[2020-11-24 21:15:52,691 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:15:52,691 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-24 21:15:52,691 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=37, Invalid=305, Unknown=0, NotChecked=0, Total=342
[2020-11-24 21:15:52,691 INFO  L87              Difference]: Start difference. First operand 8729 states and 9730 transitions. cyclomatic complexity: 1021 Second operand 19 states.
[2020-11-24 21:16:02,617 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:16:02,617 INFO  L93              Difference]: Finished difference Result 8986 states and 10043 transitions.
[2020-11-24 21:16:02,617 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 22 states. 
[2020-11-24 21:16:02,617 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8986 states and 10043 transitions.
[2020-11-24 21:16:02,633 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 12
[2020-11-24 21:16:02,657 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8986 states to 8986 states and 10043 transitions.
[2020-11-24 21:16:02,657 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2166
[2020-11-24 21:16:02,659 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2166
[2020-11-24 21:16:02,659 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8986 states and 10043 transitions.
[2020-11-24 21:16:02,666 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:16:02,666 INFO  L728         BuchiCegarLoop]: Abstraction has 8986 states and 10043 transitions.
[2020-11-24 21:16:02,674 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8986 states and 10043 transitions.
[2020-11-24 21:16:02,738 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8986 to 8927.
[2020-11-24 21:16:02,738 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8927 states.
[2020-11-24 21:16:02,748 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8927 states to 8927 states and 9953 transitions.
[2020-11-24 21:16:02,748 INFO  L751         BuchiCegarLoop]: Abstraction has 8927 states and 9953 transitions.
[2020-11-24 21:16:02,748 INFO  L631         BuchiCegarLoop]: Abstraction has 8927 states and 9953 transitions.
[2020-11-24 21:16:02,748 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 21:16:02,748 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8927 states and 9953 transitions.
[2020-11-24 21:16:02,757 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 8
[2020-11-24 21:16:02,757 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:16:02,758 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:16:02,760 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:16:02,761 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14831]              assume null == 0;
[L14832]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14832]  RET         call this := FreshRefGenerator__success();
[L14833]              assume now >= 0;
[L14834]              assume DType[this] == MainToken;
[L14835]              assume msgvalue_MSG == 0;
[L14836]              gas := gas - 53000;
[L14837]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1142012261;
[L9314]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               CONTINUE_MINTING_Consts[this] := true;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9801]   COND FALSE  !(!!initialized_MainToken[this])
[L9805]               initialized_MainToken[this] := true;
[L9806]   COND FALSE  !(PAUSED_Consts[this])
[L9816]               havoc addresses_s1709;
[L9817]               __var_57 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9818]               M_int_Ref[addresses_s1709][0] := __var_57;
[L9819]               __var_58 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9820]               M_int_Ref[addresses_s1709][1] := __var_58;
[L9821]               havoc amounts_s1709;
[L9822]               __var_59 := 48000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9823]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][0];
[L9824]               M_int_int[amounts_s1709][0] := __var_59;
[L9825]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][0];
[L9826]               __var_60 := 6000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9827]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][1];
[L9828]               M_int_int[amounts_s1709][1] := __var_60;
[L9829]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][1];
[L9830]               havoc freezes_s1709;
[L9831]               __var_61 := 0 % 18446744073709551616;
[L9832]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][0];
[L9833]               M_int_int[freezes_s1709][0] := __var_61;
[L9834]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][0];
[L9835]               __var_62 := 0 % 18446744073709551616;
[L9836]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][1];
[L9837]               M_int_int[freezes_s1709][1] := __var_62;
[L9838]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][1];
[L9839]               i_s1709 := 0;
[L9840]   COND FALSE  !(i_s1709 < Length[addresses_s1709])
[L9864]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9874]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12785]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14837]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14838]              assume !revert && gas >= 0;
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND TRUE   choice == 37
[L14590]              gas := gas - 21000;
[L14591]  COND TRUE   gas >= 0
[L14592]              assume msgvalue_MSG == 0;
[L14593]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND TRUE   __exception
[L2095]               __tmp__Balance := Balance;
[L2096]               __tmp__DType := DType;
[L2097]               __tmp__Alloc := Alloc;
[L2098]               __tmp__balance_ADDR := balance_ADDR;
[L2099]               __tmp__M_Ref_int := M_Ref_int;
[L2100]               __tmp__sum_balances0 := sum_balances0;
[L2101]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L2102]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2103]               __tmp__sum_allowed1 := sum_allowed1;
[L2104]               __tmp__M_int_int := M_int_int;
[L2105]               __tmp__sum_chains2 := sum_chains2;
[L2106]               __tmp__sum_freezings3 := sum_freezings3;
[L2107]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L2108]               __tmp__M_int_Ref := M_int_Ref;
[L2109]               __tmp__sum := sum;
[L2110]               __tmp__Length := Length;
[L2111]               __tmp__now := now;
[L2112]               __tmp__balances_BasicToken := balances_BasicToken;
[L2113]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L2114]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L2115]               __tmp__owner_Ownable := owner_Ownable;
[L2116]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L2117]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L2118]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L2119]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L2120]               __tmp__paused_Pausable := paused_Pausable;
[L2121]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L2122]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L2123]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L2124]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L2125]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L2126]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L2127]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L2128]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L2129]               __tmp__initialized_MainToken := initialized_MainToken;
[L2130]   CALL        call balance_s729 := balanceOf~address_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7704]   COND TRUE   __tmp__DType[this] == MainToken
[L7705]   CALL        call __var_14 := balanceOf~address_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6979]               __ret_0_ := __tmp__balances_BasicToken[this][_owner_s214];
[L7705]   RET         call __var_14 := balanceOf~address_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND FALSE  !(revert)
[L7722]               balance_s729 := (__var_14 + __tmp__freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2130]   RET         call balance_s729 := balanceOf~address_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2131]               assume revert || gas < 0;
[L14593]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14841]  RET         call CorralChoice_MainToken(this);

Loop:
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND TRUE   choice == 37
[L14590]              gas := gas - 21000;
[L14591]  COND TRUE   gas >= 0
[L14592]              assume msgvalue_MSG == 0;
[L14593]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND TRUE   __exception
[L2095]               __tmp__Balance := Balance;
[L2096]               __tmp__DType := DType;
[L2097]               __tmp__Alloc := Alloc;
[L2098]               __tmp__balance_ADDR := balance_ADDR;
[L2099]               __tmp__M_Ref_int := M_Ref_int;
[L2100]               __tmp__sum_balances0 := sum_balances0;
[L2101]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L2102]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L2103]               __tmp__sum_allowed1 := sum_allowed1;
[L2104]               __tmp__M_int_int := M_int_int;
[L2105]               __tmp__sum_chains2 := sum_chains2;
[L2106]               __tmp__sum_freezings3 := sum_freezings3;
[L2107]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L2108]               __tmp__M_int_Ref := M_int_Ref;
[L2109]               __tmp__sum := sum;
[L2110]               __tmp__Length := Length;
[L2111]               __tmp__now := now;
[L2112]               __tmp__balances_BasicToken := balances_BasicToken;
[L2113]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L2114]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L2115]               __tmp__owner_Ownable := owner_Ownable;
[L2116]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L2117]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L2118]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L2119]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L2120]               __tmp__paused_Pausable := paused_Pausable;
[L2121]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L2122]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L2123]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L2124]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L2125]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L2126]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L2127]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L2128]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L2129]               __tmp__initialized_MainToken := initialized_MainToken;
[L2130]   CALL        call balance_s729 := balanceOf~address_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7704]   COND TRUE   __tmp__DType[this] == MainToken
[L7705]   CALL        call __var_14 := balanceOf~address_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6979]               __ret_0_ := __tmp__balances_BasicToken[this][_owner_s214];
[L7705]   RET         call __var_14 := balanceOf~address_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7706]   COND FALSE  !(revert)
[L7722]               balance_s729 := (__var_14 + __tmp__freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2130]   RET         call balance_s729 := balanceOf~address_FreezableToken__fail(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2131]               assume revert || gas < 0;
[L14593]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14841]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:16:02,769 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:16:02,769 INFO  L82        PathProgramCache]: Analyzing trace with hash 1691010933, now seen corresponding path program 1 times
[2020-11-24 21:16:02,770 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:16:02,805 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:16:03,376 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 21:16:03,376 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:16:03,377 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 21:16:03,379 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:16:03,380 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 21:16:03,380 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-24 21:16:03,380 INFO  L87              Difference]: Start difference. First operand 8927 states and 9953 transitions. cyclomatic complexity: 1048 Second operand 5 states.
[2020-11-24 21:16:04,895 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:16:04,895 INFO  L93              Difference]: Finished difference Result 10911 states and 12272 transitions.
[2020-11-24 21:16:04,895 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 21:16:04,895 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 10911 states and 12272 transitions.
[2020-11-24 21:16:04,918 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 12
[2020-11-24 21:16:04,935 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 10911 states to 7140 states and 8250 transitions.
[2020-11-24 21:16:04,936 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1177
[2020-11-24 21:16:04,936 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1336
[2020-11-24 21:16:04,936 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 7140 states and 8250 transitions.
[2020-11-24 21:16:04,941 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:16:04,941 INFO  L728         BuchiCegarLoop]: Abstraction has 7140 states and 8250 transitions.
[2020-11-24 21:16:04,945 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 7140 states and 8250 transitions.
[2020-11-24 21:16:04,975 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 7140 to 5678.
[2020-11-24 21:16:04,975 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5678 states.
[2020-11-24 21:16:04,981 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5678 states to 5678 states and 6398 transitions.
[2020-11-24 21:16:04,981 INFO  L751         BuchiCegarLoop]: Abstraction has 5678 states and 6398 transitions.
[2020-11-24 21:16:04,981 INFO  L631         BuchiCegarLoop]: Abstraction has 5678 states and 6398 transitions.
[2020-11-24 21:16:04,981 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 21:16:04,981 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5678 states and 6398 transitions.
[2020-11-24 21:16:04,986 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:16:04,986 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:16:04,986 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:16:04,989 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:16:04,989 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14831]              assume null == 0;
[L14832]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14832]  RET         call this := FreshRefGenerator__success();
[L14833]              assume now >= 0;
[L14834]              assume DType[this] == MainToken;
[L14835]              assume msgvalue_MSG == 0;
[L14836]              gas := gas - 53000;
[L14837]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1142012261;
[L9314]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               CONTINUE_MINTING_Consts[this] := true;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9801]   COND FALSE  !(!!initialized_MainToken[this])
[L9805]               initialized_MainToken[this] := true;
[L9806]   COND FALSE  !(PAUSED_Consts[this])
[L9816]               havoc addresses_s1709;
[L9817]               __var_57 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9818]               M_int_Ref[addresses_s1709][0] := __var_57;
[L9819]               __var_58 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9820]               M_int_Ref[addresses_s1709][1] := __var_58;
[L9821]               havoc amounts_s1709;
[L9822]               __var_59 := 48000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9823]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][0];
[L9824]               M_int_int[amounts_s1709][0] := __var_59;
[L9825]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][0];
[L9826]               __var_60 := 6000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9827]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][1];
[L9828]               M_int_int[amounts_s1709][1] := __var_60;
[L9829]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][1];
[L9830]               havoc freezes_s1709;
[L9831]               __var_61 := 0 % 18446744073709551616;
[L9832]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][0];
[L9833]               M_int_int[freezes_s1709][0] := __var_61;
[L9834]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][0];
[L9835]               __var_62 := 0 % 18446744073709551616;
[L9836]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][1];
[L9837]               M_int_int[freezes_s1709][1] := __var_62;
[L9838]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][1];
[L9839]               i_s1709 := 0;
[L9840]   COND TRUE   i_s1709 < Length[addresses_s1709]
[L9842]   COND TRUE   M_int_int[freezes_s1709][i_s1709] == 0
[L9843]   COND TRUE   DType[this] == MainToken
[L9844]   CALL        call __var_63 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1709][i_s1709], M_int_int[amounts_s1709][i_s1709]);
[L7555]   CALL        call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12817]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7555]   RET         call hasMintPermission_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7556]   COND FALSE  !(revert)
[L7559]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12801]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L7559]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7560]   COND FALSE  !(revert)
[L7563]   CALL        call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L7563]   RET         call __var_12 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s664);
[L7564]   COND FALSE  !(revert)
[L7567]               totalSupply__BasicToken[this] := __var_12;
[L7568]   CALL        call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L7568]   RET         call __var_13 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][_to_s664], _amount_s664);
[L7569]   COND FALSE  !(revert)
[L7572]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][_to_s664];
[L7573]               balances_BasicToken[this][_to_s664] := __var_13;
[L7574]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][_to_s664];
[L7575]               assert { :EventEmitted "Mint_MintableToken" } true;
[L7576]               assert { :EventEmitted "Transfer_MintableToken" } true;
[L7577]               __ret_0_ := true;
[L9844]   RET         call __var_63 := mint~address~uint256_MintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1709][i_s1709], M_int_int[amounts_s1709][i_s1709]);
[L9845]   COND FALSE  !(revert)
[L9859]               i_s1709 := (i_s1709 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9860]   COND FALSE  !(gas < 0)
[L9840]   COND FALSE  !(i_s1709 < Length[addresses_s1709])
[L9864]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9874]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12785]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14837]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14838]              assume !revert && gas >= 0;
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND TRUE   choice == 37
[L14590]              gas := gas - 21000;
[L14591]  COND TRUE   gas >= 0
[L14592]              assume msgvalue_MSG == 0;
[L14593]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14593]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14841]  RET         call CorralChoice_MainToken(this);

Loop:
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND TRUE   choice == 37
[L14590]              gas := gas - 21000;
[L14591]  COND TRUE   gas >= 0
[L14592]              assume msgvalue_MSG == 0;
[L14593]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14593]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14841]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:16:04,998 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:16:04,998 INFO  L82        PathProgramCache]: Analyzing trace with hash 1943343520, now seen corresponding path program 1 times
[2020-11-24 21:16:04,999 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:16:05,050 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:16:05,714 INFO  L134       CoverageAnalysis]: Checked inductivity of 9829 backedges. 7 proven. 0 refuted. 0 times theorem prover too weak. 9822 trivial. 0 not checked.
[2020-11-24 21:16:05,714 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:16:05,714 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-24 21:16:05,715 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:16:05,715 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-24 21:16:05,715 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=210, Unknown=0, NotChecked=0, Total=240
[2020-11-24 21:16:05,715 INFO  L87              Difference]: Start difference. First operand 5678 states and 6398 transitions. cyclomatic complexity: 736 Second operand 16 states.
[2020-11-24 21:16:10,643 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:16:10,644 INFO  L93              Difference]: Finished difference Result 5802 states and 6549 transitions.
[2020-11-24 21:16:10,644 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-24 21:16:10,644 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5802 states and 6549 transitions.
[2020-11-24 21:16:10,654 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:16:10,665 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5802 states to 5802 states and 6549 transitions.
[2020-11-24 21:16:10,665 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1084
[2020-11-24 21:16:10,666 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1084
[2020-11-24 21:16:10,666 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5802 states and 6549 transitions.
[2020-11-24 21:16:10,669 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:16:10,669 INFO  L728         BuchiCegarLoop]: Abstraction has 5802 states and 6549 transitions.
[2020-11-24 21:16:10,673 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5802 states and 6549 transitions.
[2020-11-24 21:16:10,701 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5802 to 5764.
[2020-11-24 21:16:10,701 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5764 states.
[2020-11-24 21:16:10,706 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5764 states to 5764 states and 6499 transitions.
[2020-11-24 21:16:10,706 INFO  L751         BuchiCegarLoop]: Abstraction has 5764 states and 6499 transitions.
[2020-11-24 21:16:10,707 INFO  L631         BuchiCegarLoop]: Abstraction has 5764 states and 6499 transitions.
[2020-11-24 21:16:10,707 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-24 21:16:10,707 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5764 states and 6499 transitions.
[2020-11-24 21:16:10,712 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:16:10,712 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:16:10,712 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:16:10,715 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:16:10,715 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14831]              assume null == 0;
[L14832]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14832]  RET         call this := FreshRefGenerator__success();
[L14833]              assume now >= 0;
[L14834]              assume DType[this] == MainToken;
[L14835]              assume msgvalue_MSG == 0;
[L14836]              gas := gas - 53000;
[L14837]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1142012261;
[L9314]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               CONTINUE_MINTING_Consts[this] := true;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9801]   COND FALSE  !(!!initialized_MainToken[this])
[L9805]               initialized_MainToken[this] := true;
[L9806]   COND FALSE  !(PAUSED_Consts[this])
[L9816]               havoc addresses_s1709;
[L9817]               __var_57 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9818]               M_int_Ref[addresses_s1709][0] := __var_57;
[L9819]               __var_58 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9820]               M_int_Ref[addresses_s1709][1] := __var_58;
[L9821]               havoc amounts_s1709;
[L9822]               __var_59 := 48000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9823]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][0];
[L9824]               M_int_int[amounts_s1709][0] := __var_59;
[L9825]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][0];
[L9826]               __var_60 := 6000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9827]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][1];
[L9828]               M_int_int[amounts_s1709][1] := __var_60;
[L9829]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][1];
[L9830]               havoc freezes_s1709;
[L9831]               __var_61 := 0 % 18446744073709551616;
[L9832]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][0];
[L9833]               M_int_int[freezes_s1709][0] := __var_61;
[L9834]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][0];
[L9835]               __var_62 := 0 % 18446744073709551616;
[L9836]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][1];
[L9837]               M_int_int[freezes_s1709][1] := __var_62;
[L9838]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][1];
[L9839]               i_s1709 := 0;
[L9840]   COND FALSE  !(i_s1709 < Length[addresses_s1709])
[L9864]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9874]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12785]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14837]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14838]              assume !revert && gas >= 0;
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND FALSE  !(choice == 36)
[L14602]  COND FALSE  !(choice == 35)
[L14608]  COND FALSE  !(choice == 34)
[L14615]  COND FALSE  !(choice == 33)
[L14622]  COND FALSE  !(choice == 32)
[L14629]  COND FALSE  !(choice == 31)
[L14636]  COND FALSE  !(choice == 30)
[L14642]  COND FALSE  !(choice == 29)
[L14648]  COND FALSE  !(choice == 28)
[L14654]  COND FALSE  !(choice == 27)
[L14660]  COND FALSE  !(choice == 26)
[L14667]  COND FALSE  !(choice == 25)
[L14673]  COND FALSE  !(choice == 24)
[L14679]  COND FALSE  !(choice == 23)
[L14685]  COND FALSE  !(choice == 22)
[L14691]  COND FALSE  !(choice == 21)
[L14698]  COND FALSE  !(choice == 20)
[L14706]  COND TRUE   choice == 19
[L14707]              gas := gas - 21000;
[L14708]  COND TRUE   gas >= 0
[L14709]              assume msgvalue_MSG == 0;
[L14710]  CALL        call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L2624]               havoc __exception;
[L2625]               revert := false;
[L2626]   COND FALSE  !(__exception)
[L2665]   CALL        call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8314]               __var_31 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8315]   COND FALSE  !(DType[this] == MainToken)
[L8320]   COND TRUE   DType[this] == FreezableMintableToken
[L8321]   CALL        call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8321]   RET         call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8322]   COND FALSE  !(revert)
[L8333]               headKey_s1054 := headKey_s1054;
[L8334]               head_s1054 := chains_FreezableToken[this][headKey_s1054];
[L8335]   COND FALSE  !(!(head_s1054 != 0))
[L8339]               __var_32 := now % 18446744073709551616;
[L8340]   COND FALSE  !(!(now % 18446744073709551616 > head_s1054))
[L8344]               __var_33 := head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8345]   COND FALSE  !(DType[this] == MainToken)
[L8350]   COND TRUE   DType[this] == FreezableMintableToken
[L8351]   CALL        call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8351]   RET         call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8352]   COND FALSE  !(revert)
[L8363]               currentKey_s1054 := currentKey_s1054;
[L8364]               next_s1054 := chains_FreezableToken[this][currentKey_s1054];
[L8365]               amount_s1054 := freezings_FreezableToken[this][currentKey_s1054];
[L8366]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1054];
[L8367]               freezings_FreezableToken[this][currentKey_s1054] := 0;
[L8368]   CALL        call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8368]   RET         call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L8369]   COND FALSE  !(revert)
[L8372]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8373]               balances_BasicToken[this][msgsender_MSG] := __var_34;
[L8374]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8375]   CALL        call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8375]   RET         call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L8376]   COND FALSE  !(revert)
[L8379]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][msgsender_MSG];
[L8380]               freezingBalance_FreezableToken[this][msgsender_MSG] := __var_35;
[L8381]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][msgsender_MSG];
[L8382]   COND TRUE   next_s1054 == 0
[L8383]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][headKey_s1054];
[L8384]               chains_FreezableToken[this][headKey_s1054] := 0;
[L8392]               assert { :EventEmitted "Released_FreezableToken" } true;
[L2665]   RET         call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2666]               assume !revert && gas >= 0;
[L14710]  RET         call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L14841]  RET         call CorralChoice_MainToken(this);
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND TRUE   choice == 37
[L14590]              gas := gas - 21000;
[L14591]  COND TRUE   gas >= 0
[L14592]              assume msgvalue_MSG == 0;
[L14593]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14593]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14841]  RET         call CorralChoice_MainToken(this);

Loop:
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND TRUE   choice == 38
[L14584]              gas := gas - 21000;
[L14585]  COND FALSE  !(gas >= 0)
[L14841]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:16:10,723 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:16:10,724 INFO  L82        PathProgramCache]: Analyzing trace with hash -308874319, now seen corresponding path program 1 times
[2020-11-24 21:16:10,724 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:16:10,758 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:16:11,361 INFO  L134       CoverageAnalysis]: Checked inductivity of 9919 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9918 trivial. 0 not checked.
[2020-11-24 21:16:11,361 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:16:11,361 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-24 21:16:11,362 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:16:11,362 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-24 21:16:11,362 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-24 21:16:11,362 INFO  L87              Difference]: Start difference. First operand 5764 states and 6499 transitions. cyclomatic complexity: 753 Second operand 6 states.
[2020-11-24 21:16:11,483 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:16:11,483 INFO  L93              Difference]: Finished difference Result 5850 states and 6595 transitions.
[2020-11-24 21:16:11,483 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-24 21:16:11,483 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5850 states and 6595 transitions.
[2020-11-24 21:16:11,492 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:16:11,503 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5850 states to 5836 states and 6581 transitions.
[2020-11-24 21:16:11,503 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1064
[2020-11-24 21:16:11,504 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1064
[2020-11-24 21:16:11,504 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5836 states and 6581 transitions.
[2020-11-24 21:16:11,507 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:16:11,507 INFO  L728         BuchiCegarLoop]: Abstraction has 5836 states and 6581 transitions.
[2020-11-24 21:16:11,511 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5836 states and 6581 transitions.
[2020-11-24 21:16:11,537 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5836 to 5836.
[2020-11-24 21:16:11,537 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5836 states.
[2020-11-24 21:16:11,543 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5836 states to 5836 states and 6581 transitions.
[2020-11-24 21:16:11,543 INFO  L751         BuchiCegarLoop]: Abstraction has 5836 states and 6581 transitions.
[2020-11-24 21:16:11,543 INFO  L631         BuchiCegarLoop]: Abstraction has 5836 states and 6581 transitions.
[2020-11-24 21:16:11,543 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-24 21:16:11,543 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5836 states and 6581 transitions.
[2020-11-24 21:16:11,549 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:16:11,549 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:16:11,549 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:16:11,552 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:16:11,552 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14831]              assume null == 0;
[L14832]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14832]  RET         call this := FreshRefGenerator__success();
[L14833]              assume now >= 0;
[L14834]              assume DType[this] == MainToken;
[L14835]              assume msgvalue_MSG == 0;
[L14836]              gas := gas - 53000;
[L14837]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1142012261;
[L9314]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               CONTINUE_MINTING_Consts[this] := true;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9801]   COND FALSE  !(!!initialized_MainToken[this])
[L9805]               initialized_MainToken[this] := true;
[L9806]   COND FALSE  !(PAUSED_Consts[this])
[L9816]               havoc addresses_s1709;
[L9817]               __var_57 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9818]               M_int_Ref[addresses_s1709][0] := __var_57;
[L9819]               __var_58 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9820]               M_int_Ref[addresses_s1709][1] := __var_58;
[L9821]               havoc amounts_s1709;
[L9822]               __var_59 := 48000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9823]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][0];
[L9824]               M_int_int[amounts_s1709][0] := __var_59;
[L9825]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][0];
[L9826]               __var_60 := 6000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9827]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][1];
[L9828]               M_int_int[amounts_s1709][1] := __var_60;
[L9829]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][1];
[L9830]               havoc freezes_s1709;
[L9831]               __var_61 := 0 % 18446744073709551616;
[L9832]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][0];
[L9833]               M_int_int[freezes_s1709][0] := __var_61;
[L9834]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][0];
[L9835]               __var_62 := 0 % 18446744073709551616;
[L9836]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][1];
[L9837]               M_int_int[freezes_s1709][1] := __var_62;
[L9838]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][1];
[L9839]               i_s1709 := 0;
[L9840]   COND FALSE  !(i_s1709 < Length[addresses_s1709])
[L9864]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9874]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12785]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14837]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14838]              assume !revert && gas >= 0;
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND FALSE  !(choice == 36)
[L14602]  COND FALSE  !(choice == 35)
[L14608]  COND FALSE  !(choice == 34)
[L14615]  COND FALSE  !(choice == 33)
[L14622]  COND FALSE  !(choice == 32)
[L14629]  COND FALSE  !(choice == 31)
[L14636]  COND FALSE  !(choice == 30)
[L14642]  COND FALSE  !(choice == 29)
[L14648]  COND FALSE  !(choice == 28)
[L14654]  COND FALSE  !(choice == 27)
[L14660]  COND FALSE  !(choice == 26)
[L14667]  COND FALSE  !(choice == 25)
[L14673]  COND FALSE  !(choice == 24)
[L14679]  COND FALSE  !(choice == 23)
[L14685]  COND FALSE  !(choice == 22)
[L14691]  COND FALSE  !(choice == 21)
[L14698]  COND FALSE  !(choice == 20)
[L14706]  COND TRUE   choice == 19
[L14707]              gas := gas - 21000;
[L14708]  COND TRUE   gas >= 0
[L14709]              assume msgvalue_MSG == 0;
[L14710]  CALL        call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L2624]               havoc __exception;
[L2625]               revert := false;
[L2626]   COND FALSE  !(__exception)
[L2665]   CALL        call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8314]               __var_31 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8315]   COND FALSE  !(DType[this] == MainToken)
[L8320]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8325]   COND TRUE   DType[this] == FreezableToken
[L8326]   CALL        call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8326]   RET         call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8327]   COND FALSE  !(revert)
[L8333]               headKey_s1054 := headKey_s1054;
[L8334]               head_s1054 := chains_FreezableToken[this][headKey_s1054];
[L8335]   COND FALSE  !(!(head_s1054 != 0))
[L8339]               __var_32 := now % 18446744073709551616;
[L8340]   COND FALSE  !(!(now % 18446744073709551616 > head_s1054))
[L8344]               __var_33 := head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8345]   COND TRUE   DType[this] == MainToken
[L8346]   CALL        call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8346]   RET         call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8347]   COND FALSE  !(revert)
[L8363]               currentKey_s1054 := currentKey_s1054;
[L8364]               next_s1054 := chains_FreezableToken[this][currentKey_s1054];
[L8365]               amount_s1054 := freezings_FreezableToken[this][currentKey_s1054];
[L8366]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1054];
[L8367]               freezings_FreezableToken[this][currentKey_s1054] := 0;
[L8368]   CALL        call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8368]   RET         call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L8369]   COND FALSE  !(revert)
[L8372]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8373]               balances_BasicToken[this][msgsender_MSG] := __var_34;
[L8374]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8375]   CALL        call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8375]   RET         call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L8376]   COND FALSE  !(revert)
[L8379]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][msgsender_MSG];
[L8380]               freezingBalance_FreezableToken[this][msgsender_MSG] := __var_35;
[L8381]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][msgsender_MSG];
[L8382]   COND TRUE   next_s1054 == 0
[L8383]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][headKey_s1054];
[L8384]               chains_FreezableToken[this][headKey_s1054] := 0;
[L8392]               assert { :EventEmitted "Released_FreezableToken" } true;
[L2665]   RET         call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2666]               assume !revert && gas >= 0;
[L14710]  RET         call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L14841]  RET         call CorralChoice_MainToken(this);
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND TRUE   choice == 37
[L14590]              gas := gas - 21000;
[L14591]  COND TRUE   gas >= 0
[L14592]              assume msgvalue_MSG == 0;
[L14593]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND FALSE  !(DType[this] == MainToken)
[L7735]   COND TRUE   DType[this] == FreezableMintableToken
[L7736]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7736]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7737]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14593]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14841]  RET         call CorralChoice_MainToken(this);

Loop:
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND TRUE   choice == 38
[L14584]              gas := gas - 21000;
[L14585]  COND FALSE  !(gas >= 0)
[L14841]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:16:11,559 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:16:11,559 INFO  L82        PathProgramCache]: Analyzing trace with hash 121519582, now seen corresponding path program 1 times
[2020-11-24 21:16:11,560 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:16:11,593 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:16:12,181 INFO  L134       CoverageAnalysis]: Checked inductivity of 9919 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9918 trivial. 0 not checked.
[2020-11-24 21:16:12,181 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:16:12,181 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:16:12,182 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:16:12,182 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:16:12,182 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:16:12,182 INFO  L87              Difference]: Start difference. First operand 5836 states and 6581 transitions. cyclomatic complexity: 763 Second operand 3 states.
[2020-11-24 21:16:12,232 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:16:12,232 INFO  L93              Difference]: Finished difference Result 5906 states and 6663 transitions.
[2020-11-24 21:16:12,232 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:16:12,233 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5906 states and 6663 transitions.
[2020-11-24 21:16:12,241 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:16:12,251 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5906 states to 5906 states and 6663 transitions.
[2020-11-24 21:16:12,252 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1064
[2020-11-24 21:16:12,252 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1064
[2020-11-24 21:16:12,252 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5906 states and 6663 transitions.
[2020-11-24 21:16:12,255 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:16:12,255 INFO  L728         BuchiCegarLoop]: Abstraction has 5906 states and 6663 transitions.
[2020-11-24 21:16:12,260 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5906 states and 6663 transitions.
[2020-11-24 21:16:12,284 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5906 to 5850.
[2020-11-24 21:16:12,284 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5850 states.
[2020-11-24 21:16:12,290 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5850 states to 5850 states and 6595 transitions.
[2020-11-24 21:16:12,290 INFO  L751         BuchiCegarLoop]: Abstraction has 5850 states and 6595 transitions.
[2020-11-24 21:16:12,290 INFO  L631         BuchiCegarLoop]: Abstraction has 5850 states and 6595 transitions.
[2020-11-24 21:16:12,290 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-24 21:16:12,290 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5850 states and 6595 transitions.
[2020-11-24 21:16:12,296 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 21:16:12,296 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:16:12,296 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:16:12,298 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:16:12,298 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14831]              assume null == 0;
[L14832]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14832]  RET         call this := FreshRefGenerator__success();
[L14833]              assume now >= 0;
[L14834]              assume DType[this] == MainToken;
[L14835]              assume msgvalue_MSG == 0;
[L14836]              gas := gas - 53000;
[L14837]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1142012261;
[L9314]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               CONTINUE_MINTING_Consts[this] := true;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9801]   COND FALSE  !(!!initialized_MainToken[this])
[L9805]               initialized_MainToken[this] := true;
[L9806]   COND FALSE  !(PAUSED_Consts[this])
[L9816]               havoc addresses_s1709;
[L9817]               __var_57 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9818]               M_int_Ref[addresses_s1709][0] := __var_57;
[L9819]               __var_58 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9820]               M_int_Ref[addresses_s1709][1] := __var_58;
[L9821]               havoc amounts_s1709;
[L9822]               __var_59 := 48000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9823]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][0];
[L9824]               M_int_int[amounts_s1709][0] := __var_59;
[L9825]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][0];
[L9826]               __var_60 := 6000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9827]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][1];
[L9828]               M_int_int[amounts_s1709][1] := __var_60;
[L9829]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][1];
[L9830]               havoc freezes_s1709;
[L9831]               __var_61 := 0 % 18446744073709551616;
[L9832]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][0];
[L9833]               M_int_int[freezes_s1709][0] := __var_61;
[L9834]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][0];
[L9835]               __var_62 := 0 % 18446744073709551616;
[L9836]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][1];
[L9837]               M_int_int[freezes_s1709][1] := __var_62;
[L9838]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][1];
[L9839]               i_s1709 := 0;
[L9840]   COND FALSE  !(i_s1709 < Length[addresses_s1709])
[L9864]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9874]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12785]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14837]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14838]              assume !revert && gas >= 0;
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND FALSE  !(choice == 36)
[L14602]  COND FALSE  !(choice == 35)
[L14608]  COND FALSE  !(choice == 34)
[L14615]  COND FALSE  !(choice == 33)
[L14622]  COND FALSE  !(choice == 32)
[L14629]  COND FALSE  !(choice == 31)
[L14636]  COND FALSE  !(choice == 30)
[L14642]  COND FALSE  !(choice == 29)
[L14648]  COND FALSE  !(choice == 28)
[L14654]  COND FALSE  !(choice == 27)
[L14660]  COND FALSE  !(choice == 26)
[L14667]  COND FALSE  !(choice == 25)
[L14673]  COND FALSE  !(choice == 24)
[L14679]  COND FALSE  !(choice == 23)
[L14685]  COND FALSE  !(choice == 22)
[L14691]  COND FALSE  !(choice == 21)
[L14698]  COND FALSE  !(choice == 20)
[L14706]  COND TRUE   choice == 19
[L14707]              gas := gas - 21000;
[L14708]  COND TRUE   gas >= 0
[L14709]              assume msgvalue_MSG == 0;
[L14710]  CALL        call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L2624]               havoc __exception;
[L2625]               revert := false;
[L2626]   COND FALSE  !(__exception)
[L2665]   CALL        call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8314]               __var_31 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8315]   COND TRUE   DType[this] == MainToken
[L8316]   CALL        call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8316]   RET         call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8317]   COND FALSE  !(revert)
[L8333]               headKey_s1054 := headKey_s1054;
[L8334]               head_s1054 := chains_FreezableToken[this][headKey_s1054];
[L8335]   COND FALSE  !(!(head_s1054 != 0))
[L8339]               __var_32 := now % 18446744073709551616;
[L8340]   COND FALSE  !(!(now % 18446744073709551616 > head_s1054))
[L8344]               __var_33 := head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8345]   COND TRUE   DType[this] == MainToken
[L8346]   CALL        call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8346]   RET         call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8347]   COND FALSE  !(revert)
[L8363]               currentKey_s1054 := currentKey_s1054;
[L8364]               next_s1054 := chains_FreezableToken[this][currentKey_s1054];
[L8365]               amount_s1054 := freezings_FreezableToken[this][currentKey_s1054];
[L8366]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1054];
[L8367]               freezings_FreezableToken[this][currentKey_s1054] := 0;
[L8368]   CALL        call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8368]   RET         call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L8369]   COND FALSE  !(revert)
[L8372]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8373]               balances_BasicToken[this][msgsender_MSG] := __var_34;
[L8374]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8375]   CALL        call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8375]   RET         call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L8376]   COND FALSE  !(revert)
[L8379]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][msgsender_MSG];
[L8380]               freezingBalance_FreezableToken[this][msgsender_MSG] := __var_35;
[L8381]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][msgsender_MSG];
[L8382]   COND TRUE   next_s1054 == 0
[L8383]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][headKey_s1054];
[L8384]               chains_FreezableToken[this][headKey_s1054] := 0;
[L8392]               assert { :EventEmitted "Released_FreezableToken" } true;
[L2665]   RET         call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2666]               assume !revert && gas >= 0;
[L14710]  RET         call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L14841]  RET         call CorralChoice_MainToken(this);
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND TRUE   choice == 37
[L14590]              gas := gas - 21000;
[L14591]  COND TRUE   gas >= 0
[L14592]              assume msgvalue_MSG == 0;
[L14593]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14593]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14841]  RET         call CorralChoice_MainToken(this);

Loop:
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND TRUE   choice == 38
[L14584]              gas := gas - 21000;
[L14585]  COND FALSE  !(gas >= 0)
[L14841]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:16:12,305 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:16:12,305 INFO  L82        PathProgramCache]: Analyzing trace with hash -1058033097, now seen corresponding path program 1 times
[2020-11-24 21:16:12,306 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:16:12,339 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:16:13,033 INFO  L134       CoverageAnalysis]: Checked inductivity of 9919 backedges. 12 proven. 88 refuted. 0 times theorem prover too weak. 9819 trivial. 0 not checked.
[2020-11-24 21:16:13,034 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 21:16:13,034 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [15] total 15
[2020-11-24 21:16:13,034 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:16:13,035 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-24 21:16:13,035 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=33, Invalid=177, Unknown=0, NotChecked=0, Total=210
[2020-11-24 21:16:13,035 INFO  L87              Difference]: Start difference. First operand 5850 states and 6595 transitions. cyclomatic complexity: 763 Second operand 15 states.
[2020-11-24 21:16:16,227 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:16:16,227 INFO  L93              Difference]: Finished difference Result 6017 states and 6834 transitions.
[2020-11-24 21:16:16,227 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-24 21:16:16,227 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6017 states and 6834 transitions.
[2020-11-24 21:16:16,238 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:16:16,249 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6017 states to 6017 states and 6834 transitions.
[2020-11-24 21:16:16,250 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1114
[2020-11-24 21:16:16,250 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1114
[2020-11-24 21:16:16,250 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6017 states and 6834 transitions.
[2020-11-24 21:16:16,253 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:16:16,253 INFO  L728         BuchiCegarLoop]: Abstraction has 6017 states and 6834 transitions.
[2020-11-24 21:16:16,257 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6017 states and 6834 transitions.
[2020-11-24 21:16:16,282 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6017 to 5987.
[2020-11-24 21:16:16,282 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5987 states.
[2020-11-24 21:16:16,288 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5987 states to 5987 states and 6766 transitions.
[2020-11-24 21:16:16,288 INFO  L751         BuchiCegarLoop]: Abstraction has 5987 states and 6766 transitions.
[2020-11-24 21:16:16,288 INFO  L631         BuchiCegarLoop]: Abstraction has 5987 states and 6766 transitions.
[2020-11-24 21:16:16,288 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-24 21:16:16,288 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5987 states and 6766 transitions.
[2020-11-24 21:16:16,294 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:16:16,294 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:16:16,294 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:16:16,296 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:16:16,296 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14831]              assume null == 0;
[L14832]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14832]  RET         call this := FreshRefGenerator__success();
[L14833]              assume now >= 0;
[L14834]              assume DType[this] == MainToken;
[L14835]              assume msgvalue_MSG == 0;
[L14836]              gas := gas - 53000;
[L14837]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1142012261;
[L9314]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               CONTINUE_MINTING_Consts[this] := true;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9801]   COND FALSE  !(!!initialized_MainToken[this])
[L9805]               initialized_MainToken[this] := true;
[L9806]   COND FALSE  !(PAUSED_Consts[this])
[L9816]               havoc addresses_s1709;
[L9817]               __var_57 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9818]               M_int_Ref[addresses_s1709][0] := __var_57;
[L9819]               __var_58 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9820]               M_int_Ref[addresses_s1709][1] := __var_58;
[L9821]               havoc amounts_s1709;
[L9822]               __var_59 := 48000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9823]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][0];
[L9824]               M_int_int[amounts_s1709][0] := __var_59;
[L9825]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][0];
[L9826]               __var_60 := 6000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9827]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][1];
[L9828]               M_int_int[amounts_s1709][1] := __var_60;
[L9829]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][1];
[L9830]               havoc freezes_s1709;
[L9831]               __var_61 := 0 % 18446744073709551616;
[L9832]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][0];
[L9833]               M_int_int[freezes_s1709][0] := __var_61;
[L9834]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][0];
[L9835]               __var_62 := 0 % 18446744073709551616;
[L9836]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][1];
[L9837]               M_int_int[freezes_s1709][1] := __var_62;
[L9838]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][1];
[L9839]               i_s1709 := 0;
[L9840]   COND FALSE  !(i_s1709 < Length[addresses_s1709])
[L9864]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9874]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12785]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14837]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14838]              assume !revert && gas >= 0;
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND FALSE  !(choice == 36)
[L14602]  COND FALSE  !(choice == 35)
[L14608]  COND FALSE  !(choice == 34)
[L14615]  COND FALSE  !(choice == 33)
[L14622]  COND FALSE  !(choice == 32)
[L14629]  COND FALSE  !(choice == 31)
[L14636]  COND FALSE  !(choice == 30)
[L14642]  COND FALSE  !(choice == 29)
[L14648]  COND FALSE  !(choice == 28)
[L14654]  COND FALSE  !(choice == 27)
[L14660]  COND FALSE  !(choice == 26)
[L14667]  COND FALSE  !(choice == 25)
[L14673]  COND FALSE  !(choice == 24)
[L14679]  COND FALSE  !(choice == 23)
[L14685]  COND FALSE  !(choice == 22)
[L14691]  COND FALSE  !(choice == 21)
[L14698]  COND TRUE   choice == 20
[L14699]              gas := gas - 21000;
[L14700]  COND TRUE   gas >= 0
[L14701]              assume _amount_s938 >= 0 && _amount_s938 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14702]              assume _until_s938 >= 0 && _until_s938 < 18446744073709551616;
[L14703]              assume msgvalue_MSG == 0;
[L14704]  CALL        call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2530]               havoc __exception;
[L2531]               revert := false;
[L2532]   COND FALSE  !(__exception)
[L2571]   CALL        call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L8138]               __var_26 := null;
[L8139]   COND FALSE  !(!(_to_s938 != null))
[L8143]   COND FALSE  !(!(_amount_s938 <= balances_BasicToken[this][msgsender_MSG]))
[L8147]   CALL        call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8147]   RET         call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L8148]   COND FALSE  !(revert)
[L8151]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8152]               balances_BasicToken[this][msgsender_MSG] := __var_27;
[L8153]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8154]               __var_28 := _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8155]   COND FALSE  !(DType[this] == MainToken)
[L8160]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8165]   COND TRUE   DType[this] == FreezableToken
[L8166]   CALL        call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8166]   RET         call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8167]   COND FALSE  !(revert)
[L8173]               currentKey_s938 := currentKey_s938;
[L8174]   CALL        call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8174]   RET         call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L8175]   COND FALSE  !(revert)
[L8178]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s938];
[L8179]               freezings_FreezableToken[this][currentKey_s938] := __var_29;
[L8180]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s938];
[L8181]   CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8181]   RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L8182]   COND FALSE  !(revert)
[L8185]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s938];
[L8186]               freezingBalance_FreezableToken[this][_to_s938] := __var_30;
[L8187]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s938];
[L8188]   COND TRUE   DType[this] == MainToken
[L8189]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8713]   COND FALSE  !(!(_until_s1240 > now))
[L8717]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8718]   COND TRUE   DType[this] == MainToken
[L8719]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8719]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8720]   COND FALSE  !(revert)
[L8736]               key_s1240 := key_s1240;
[L8737]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8738]   COND TRUE   DType[this] == MainToken
[L8739]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8739]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8740]   COND FALSE  !(revert)
[L8756]               parentKey_s1240 := parentKey_s1240;
[L8757]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8758]   COND TRUE   next_s1240 == 0
[L8759]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8760]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8761]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L8189]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8190]   COND FALSE  !(revert)
[L8206]               assert { :EventEmitted "Transfer_FreezableToken" } true;
[L8207]               assert { :EventEmitted "Freezed_FreezableToken" } true;
[L2571]   RET         call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2572]               assume !revert && gas >= 0;
[L14704]  RET         call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L14841]  RET         call CorralChoice_MainToken(this);
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND TRUE   choice == 37
[L14590]              gas := gas - 21000;
[L14591]  COND TRUE   gas >= 0
[L14592]              assume msgvalue_MSG == 0;
[L14593]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND FALSE  !(DType[this] == MainToken)
[L7735]   COND TRUE   DType[this] == FreezableMintableToken
[L7736]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7736]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7737]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14593]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14841]  RET         call CorralChoice_MainToken(this);

Loop:
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND FALSE  !(choice == 36)
[L14602]  COND FALSE  !(choice == 35)
[L14608]  COND FALSE  !(choice == 34)
[L14615]  COND FALSE  !(choice == 33)
[L14622]  COND FALSE  !(choice == 32)
[L14629]  COND FALSE  !(choice == 31)
[L14636]  COND FALSE  !(choice == 30)
[L14642]  COND FALSE  !(choice == 29)
[L14648]  COND FALSE  !(choice == 28)
[L14654]  COND FALSE  !(choice == 27)
[L14660]  COND FALSE  !(choice == 26)
[L14667]  COND FALSE  !(choice == 25)
[L14673]  COND FALSE  !(choice == 24)
[L14679]  COND FALSE  !(choice == 23)
[L14685]  COND FALSE  !(choice == 22)
[L14691]  COND FALSE  !(choice == 21)
[L14698]  COND FALSE  !(choice == 20)
[L14706]  COND TRUE   choice == 19
[L14707]              gas := gas - 21000;
[L14708]  COND TRUE   gas >= 0
[L14709]              assume msgvalue_MSG == 0;
[L14710]  CALL        call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L2624]               havoc __exception;
[L2625]               revert := false;
[L2626]   COND FALSE  !(__exception)
[L2665]   CALL        call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8314]               __var_31 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8315]   COND TRUE   DType[this] == MainToken
[L8316]   CALL        call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8316]   RET         call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8317]   COND FALSE  !(revert)
[L8333]               headKey_s1054 := headKey_s1054;
[L8334]               head_s1054 := chains_FreezableToken[this][headKey_s1054];
[L8335]   COND FALSE  !(!(head_s1054 != 0))
[L8339]               __var_32 := now % 18446744073709551616;
[L8340]   COND FALSE  !(!(now % 18446744073709551616 > head_s1054))
[L8344]               __var_33 := head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8345]   COND TRUE   DType[this] == MainToken
[L8346]   CALL        call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8346]   RET         call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8347]   COND FALSE  !(revert)
[L8363]               currentKey_s1054 := currentKey_s1054;
[L8364]               next_s1054 := chains_FreezableToken[this][currentKey_s1054];
[L8365]               amount_s1054 := freezings_FreezableToken[this][currentKey_s1054];
[L8366]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1054];
[L8367]               freezings_FreezableToken[this][currentKey_s1054] := 0;
[L8368]   CALL        call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8368]   RET         call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L8369]   COND FALSE  !(revert)
[L8372]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8373]               balances_BasicToken[this][msgsender_MSG] := __var_34;
[L8374]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8375]   CALL        call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8375]   RET         call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L8376]   COND FALSE  !(revert)
[L8379]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][msgsender_MSG];
[L8380]               freezingBalance_FreezableToken[this][msgsender_MSG] := __var_35;
[L8381]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][msgsender_MSG];
[L8382]   COND TRUE   next_s1054 == 0
[L8383]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][headKey_s1054];
[L8384]               chains_FreezableToken[this][headKey_s1054] := 0;
[L8392]               assert { :EventEmitted "Released_FreezableToken" } true;
[L2665]   RET         call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2666]               assume !revert && gas >= 0;
[L14710]  RET         call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L14841]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:16:16,304 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:16:16,304 INFO  L82        PathProgramCache]: Analyzing trace with hash -54660570, now seen corresponding path program 1 times
[2020-11-24 21:16:16,305 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:16:16,337 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:16:16,919 INFO  L134       CoverageAnalysis]: Checked inductivity of 9938 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9937 trivial. 0 not checked.
[2020-11-24 21:16:16,919 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:16:16,919 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:16:16,920 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:16:16,920 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:16:16,920 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:16:16,920 INFO  L87              Difference]: Start difference. First operand 5987 states and 6766 transitions. cyclomatic complexity: 800 Second operand 3 states.
[2020-11-24 21:16:16,973 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:16:16,973 INFO  L93              Difference]: Finished difference Result 6031 states and 6814 transitions.
[2020-11-24 21:16:16,973 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:16:16,973 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6031 states and 6814 transitions.
[2020-11-24 21:16:16,982 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:16:16,992 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6031 states to 6031 states and 6814 transitions.
[2020-11-24 21:16:16,992 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1120
[2020-11-24 21:16:16,992 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1120
[2020-11-24 21:16:16,992 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6031 states and 6814 transitions.
[2020-11-24 21:16:16,996 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:16:16,996 INFO  L728         BuchiCegarLoop]: Abstraction has 6031 states and 6814 transitions.
[2020-11-24 21:16:16,999 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6031 states and 6814 transitions.
[2020-11-24 21:16:17,023 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6031 to 6015.
[2020-11-24 21:16:17,023 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6015 states.
[2020-11-24 21:16:17,028 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6015 states to 6015 states and 6798 transitions.
[2020-11-24 21:16:17,029 INFO  L751         BuchiCegarLoop]: Abstraction has 6015 states and 6798 transitions.
[2020-11-24 21:16:17,029 INFO  L631         BuchiCegarLoop]: Abstraction has 6015 states and 6798 transitions.
[2020-11-24 21:16:17,029 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-24 21:16:17,029 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6015 states and 6798 transitions.
[2020-11-24 21:16:17,034 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:16:17,034 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:16:17,034 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:16:17,036 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:16:17,036 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14831]              assume null == 0;
[L14832]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14832]  RET         call this := FreshRefGenerator__success();
[L14833]              assume now >= 0;
[L14834]              assume DType[this] == MainToken;
[L14835]              assume msgvalue_MSG == 0;
[L14836]              gas := gas - 53000;
[L14837]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1142012261;
[L9314]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               CONTINUE_MINTING_Consts[this] := true;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9801]   COND FALSE  !(!!initialized_MainToken[this])
[L9805]               initialized_MainToken[this] := true;
[L9806]   COND FALSE  !(PAUSED_Consts[this])
[L9816]               havoc addresses_s1709;
[L9817]               __var_57 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9818]               M_int_Ref[addresses_s1709][0] := __var_57;
[L9819]               __var_58 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9820]               M_int_Ref[addresses_s1709][1] := __var_58;
[L9821]               havoc amounts_s1709;
[L9822]               __var_59 := 48000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9823]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][0];
[L9824]               M_int_int[amounts_s1709][0] := __var_59;
[L9825]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][0];
[L9826]               __var_60 := 6000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9827]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][1];
[L9828]               M_int_int[amounts_s1709][1] := __var_60;
[L9829]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][1];
[L9830]               havoc freezes_s1709;
[L9831]               __var_61 := 0 % 18446744073709551616;
[L9832]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][0];
[L9833]               M_int_int[freezes_s1709][0] := __var_61;
[L9834]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][0];
[L9835]               __var_62 := 0 % 18446744073709551616;
[L9836]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][1];
[L9837]               M_int_int[freezes_s1709][1] := __var_62;
[L9838]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][1];
[L9839]               i_s1709 := 0;
[L9840]   COND FALSE  !(i_s1709 < Length[addresses_s1709])
[L9864]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9874]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12785]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14837]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14838]              assume !revert && gas >= 0;
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND FALSE  !(choice == 36)
[L14602]  COND FALSE  !(choice == 35)
[L14608]  COND FALSE  !(choice == 34)
[L14615]  COND FALSE  !(choice == 33)
[L14622]  COND FALSE  !(choice == 32)
[L14629]  COND FALSE  !(choice == 31)
[L14636]  COND FALSE  !(choice == 30)
[L14642]  COND FALSE  !(choice == 29)
[L14648]  COND FALSE  !(choice == 28)
[L14654]  COND FALSE  !(choice == 27)
[L14660]  COND FALSE  !(choice == 26)
[L14667]  COND FALSE  !(choice == 25)
[L14673]  COND FALSE  !(choice == 24)
[L14679]  COND FALSE  !(choice == 23)
[L14685]  COND FALSE  !(choice == 22)
[L14691]  COND FALSE  !(choice == 21)
[L14698]  COND TRUE   choice == 20
[L14699]              gas := gas - 21000;
[L14700]  COND TRUE   gas >= 0
[L14701]              assume _amount_s938 >= 0 && _amount_s938 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14702]              assume _until_s938 >= 0 && _until_s938 < 18446744073709551616;
[L14703]              assume msgvalue_MSG == 0;
[L14704]  CALL        call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2530]               havoc __exception;
[L2531]               revert := false;
[L2532]   COND FALSE  !(__exception)
[L2571]   CALL        call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L8138]               __var_26 := null;
[L8139]   COND FALSE  !(!(_to_s938 != null))
[L8143]   COND FALSE  !(!(_amount_s938 <= balances_BasicToken[this][msgsender_MSG]))
[L8147]   CALL        call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8147]   RET         call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L8148]   COND FALSE  !(revert)
[L8151]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8152]               balances_BasicToken[this][msgsender_MSG] := __var_27;
[L8153]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8154]               __var_28 := _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8155]   COND TRUE   DType[this] == MainToken
[L8156]   CALL        call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8156]   RET         call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8157]   COND FALSE  !(revert)
[L8173]               currentKey_s938 := currentKey_s938;
[L8174]   CALL        call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8174]   RET         call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L8175]   COND FALSE  !(revert)
[L8178]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s938];
[L8179]               freezings_FreezableToken[this][currentKey_s938] := __var_29;
[L8180]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s938];
[L8181]   CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8181]   RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L8182]   COND FALSE  !(revert)
[L8185]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s938];
[L8186]               freezingBalance_FreezableToken[this][_to_s938] := __var_30;
[L8187]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s938];
[L8188]   COND TRUE   DType[this] == MainToken
[L8189]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8713]   COND FALSE  !(!(_until_s1240 > now))
[L8717]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8718]   COND TRUE   DType[this] == MainToken
[L8719]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8719]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8720]   COND FALSE  !(revert)
[L8736]               key_s1240 := key_s1240;
[L8737]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8738]   COND FALSE  !(DType[this] == MainToken)
[L8743]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8748]   COND TRUE   DType[this] == FreezableToken
[L8749]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8749]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8750]   COND FALSE  !(revert)
[L8756]               parentKey_s1240 := parentKey_s1240;
[L8757]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8758]   COND TRUE   next_s1240 == 0
[L8759]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8760]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8761]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L8189]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8190]   COND FALSE  !(revert)
[L8206]               assert { :EventEmitted "Transfer_FreezableToken" } true;
[L8207]               assert { :EventEmitted "Freezed_FreezableToken" } true;
[L2571]   RET         call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2572]               assume !revert && gas >= 0;
[L14704]  RET         call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L14841]  RET         call CorralChoice_MainToken(this);
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND TRUE   choice == 37
[L14590]              gas := gas - 21000;
[L14591]  COND TRUE   gas >= 0
[L14592]              assume msgvalue_MSG == 0;
[L14593]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14593]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14841]  RET         call CorralChoice_MainToken(this);

Loop:
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND TRUE   choice == 38
[L14584]              gas := gas - 21000;
[L14585]  COND FALSE  !(gas >= 0)
[L14841]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:16:17,043 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:16:17,043 INFO  L82        PathProgramCache]: Analyzing trace with hash 935574043, now seen corresponding path program 1 times
[2020-11-24 21:16:17,044 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:16:17,074 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:16:17,686 INFO  L134       CoverageAnalysis]: Checked inductivity of 9938 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9937 trivial. 0 not checked.
[2020-11-24 21:16:17,686 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:16:17,686 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:16:17,687 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:16:17,687 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:16:17,687 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:16:17,687 INFO  L87              Difference]: Start difference. First operand 6015 states and 6798 transitions. cyclomatic complexity: 804 Second operand 3 states.
[2020-11-24 21:16:17,734 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:16:17,734 INFO  L93              Difference]: Finished difference Result 6112 states and 6929 transitions.
[2020-11-24 21:16:17,734 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:16:17,734 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6112 states and 6929 transitions.
[2020-11-24 21:16:17,744 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:16:17,754 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6112 states to 6112 states and 6929 transitions.
[2020-11-24 21:16:17,754 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1127
[2020-11-24 21:16:17,754 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1127
[2020-11-24 21:16:17,754 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6112 states and 6929 transitions.
[2020-11-24 21:16:17,757 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:16:17,757 INFO  L728         BuchiCegarLoop]: Abstraction has 6112 states and 6929 transitions.
[2020-11-24 21:16:17,761 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6112 states and 6929 transitions.
[2020-11-24 21:16:17,786 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6112 to 6067.
[2020-11-24 21:16:17,786 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6067 states.
[2020-11-24 21:16:17,793 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6067 states to 6067 states and 6856 transitions.
[2020-11-24 21:16:17,793 INFO  L751         BuchiCegarLoop]: Abstraction has 6067 states and 6856 transitions.
[2020-11-24 21:16:17,793 INFO  L631         BuchiCegarLoop]: Abstraction has 6067 states and 6856 transitions.
[2020-11-24 21:16:17,793 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-24 21:16:17,793 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6067 states and 6856 transitions.
[2020-11-24 21:16:17,798 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:16:17,798 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:16:17,798 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:16:17,801 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:16:17,801 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14831]              assume null == 0;
[L14832]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14832]  RET         call this := FreshRefGenerator__success();
[L14833]              assume now >= 0;
[L14834]              assume DType[this] == MainToken;
[L14835]              assume msgvalue_MSG == 0;
[L14836]              gas := gas - 53000;
[L14837]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1142012261;
[L9314]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               CONTINUE_MINTING_Consts[this] := true;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9801]   COND FALSE  !(!!initialized_MainToken[this])
[L9805]               initialized_MainToken[this] := true;
[L9806]   COND FALSE  !(PAUSED_Consts[this])
[L9816]               havoc addresses_s1709;
[L9817]               __var_57 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9818]               M_int_Ref[addresses_s1709][0] := __var_57;
[L9819]               __var_58 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9820]               M_int_Ref[addresses_s1709][1] := __var_58;
[L9821]               havoc amounts_s1709;
[L9822]               __var_59 := 48000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9823]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][0];
[L9824]               M_int_int[amounts_s1709][0] := __var_59;
[L9825]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][0];
[L9826]               __var_60 := 6000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9827]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][1];
[L9828]               M_int_int[amounts_s1709][1] := __var_60;
[L9829]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][1];
[L9830]               havoc freezes_s1709;
[L9831]               __var_61 := 0 % 18446744073709551616;
[L9832]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][0];
[L9833]               M_int_int[freezes_s1709][0] := __var_61;
[L9834]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][0];
[L9835]               __var_62 := 0 % 18446744073709551616;
[L9836]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][1];
[L9837]               M_int_int[freezes_s1709][1] := __var_62;
[L9838]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][1];
[L9839]               i_s1709 := 0;
[L9840]   COND FALSE  !(i_s1709 < Length[addresses_s1709])
[L9864]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9874]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12785]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14837]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14838]              assume !revert && gas >= 0;
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND FALSE  !(choice == 36)
[L14602]  COND FALSE  !(choice == 35)
[L14608]  COND FALSE  !(choice == 34)
[L14615]  COND FALSE  !(choice == 33)
[L14622]  COND FALSE  !(choice == 32)
[L14629]  COND FALSE  !(choice == 31)
[L14636]  COND FALSE  !(choice == 30)
[L14642]  COND FALSE  !(choice == 29)
[L14648]  COND FALSE  !(choice == 28)
[L14654]  COND FALSE  !(choice == 27)
[L14660]  COND FALSE  !(choice == 26)
[L14667]  COND FALSE  !(choice == 25)
[L14673]  COND FALSE  !(choice == 24)
[L14679]  COND FALSE  !(choice == 23)
[L14685]  COND FALSE  !(choice == 22)
[L14691]  COND FALSE  !(choice == 21)
[L14698]  COND TRUE   choice == 20
[L14699]              gas := gas - 21000;
[L14700]  COND TRUE   gas >= 0
[L14701]              assume _amount_s938 >= 0 && _amount_s938 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14702]              assume _until_s938 >= 0 && _until_s938 < 18446744073709551616;
[L14703]              assume msgvalue_MSG == 0;
[L14704]  CALL        call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2530]               havoc __exception;
[L2531]               revert := false;
[L2532]   COND FALSE  !(__exception)
[L2571]   CALL        call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L8138]               __var_26 := null;
[L8139]   COND FALSE  !(!(_to_s938 != null))
[L8143]   COND FALSE  !(!(_amount_s938 <= balances_BasicToken[this][msgsender_MSG]))
[L8147]   CALL        call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8147]   RET         call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L8148]   COND FALSE  !(revert)
[L8151]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8152]               balances_BasicToken[this][msgsender_MSG] := __var_27;
[L8153]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8154]               __var_28 := _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8155]   COND TRUE   DType[this] == MainToken
[L8156]   CALL        call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8156]   RET         call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8157]   COND FALSE  !(revert)
[L8173]               currentKey_s938 := currentKey_s938;
[L8174]   CALL        call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8174]   RET         call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L8175]   COND FALSE  !(revert)
[L8178]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s938];
[L8179]               freezings_FreezableToken[this][currentKey_s938] := __var_29;
[L8180]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s938];
[L8181]   CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8181]   RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L8182]   COND FALSE  !(revert)
[L8185]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s938];
[L8186]               freezingBalance_FreezableToken[this][_to_s938] := __var_30;
[L8187]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s938];
[L8188]   COND FALSE  !(DType[this] == MainToken)
[L8193]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8198]   COND TRUE   DType[this] == FreezableToken
[L8199]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8713]   COND FALSE  !(!(_until_s1240 > now))
[L8717]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8718]   COND FALSE  !(DType[this] == MainToken)
[L8723]   COND TRUE   DType[this] == FreezableMintableToken
[L8724]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8724]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8725]   COND FALSE  !(revert)
[L8736]               key_s1240 := key_s1240;
[L8737]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8738]   COND TRUE   DType[this] == MainToken
[L8739]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8739]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8740]   COND FALSE  !(revert)
[L8756]               parentKey_s1240 := parentKey_s1240;
[L8757]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8758]   COND TRUE   next_s1240 == 0
[L8759]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8760]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8761]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L8199]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8200]   COND FALSE  !(revert)
[L8206]               assert { :EventEmitted "Transfer_FreezableToken" } true;
[L8207]               assert { :EventEmitted "Freezed_FreezableToken" } true;
[L2571]   RET         call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2572]               assume !revert && gas >= 0;
[L14704]  RET         call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L14841]  RET         call CorralChoice_MainToken(this);
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND TRUE   choice == 37
[L14590]              gas := gas - 21000;
[L14591]  COND TRUE   gas >= 0
[L14592]              assume msgvalue_MSG == 0;
[L14593]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND FALSE  !(DType[this] == MainToken)
[L7735]   COND TRUE   DType[this] == FreezableMintableToken
[L7736]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7736]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7737]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14593]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14841]  RET         call CorralChoice_MainToken(this);

Loop:
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND TRUE   choice == 38
[L14584]              gas := gas - 21000;
[L14585]  COND FALSE  !(gas >= 0)
[L14841]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:16:17,808 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:16:17,808 INFO  L82        PathProgramCache]: Analyzing trace with hash 188761412, now seen corresponding path program 1 times
[2020-11-24 21:16:17,809 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:16:17,840 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:16:18,420 INFO  L134       CoverageAnalysis]: Checked inductivity of 9938 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9937 trivial. 0 not checked.
[2020-11-24 21:16:18,420 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:16:18,420 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:16:18,421 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:16:18,421 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:16:18,421 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:16:18,421 INFO  L87              Difference]: Start difference. First operand 6067 states and 6856 transitions. cyclomatic complexity: 812 Second operand 3 states.
[2020-11-24 21:16:18,463 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:16:18,464 INFO  L93              Difference]: Finished difference Result 6083 states and 6870 transitions.
[2020-11-24 21:16:18,464 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:16:18,464 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6083 states and 6870 transitions.
[2020-11-24 21:16:18,473 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:16:18,483 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6083 states to 6083 states and 6870 transitions.
[2020-11-24 21:16:18,483 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1120
[2020-11-24 21:16:18,483 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1120
[2020-11-24 21:16:18,483 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6083 states and 6870 transitions.
[2020-11-24 21:16:18,486 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:16:18,486 INFO  L728         BuchiCegarLoop]: Abstraction has 6083 states and 6870 transitions.
[2020-11-24 21:16:18,490 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6083 states and 6870 transitions.
[2020-11-24 21:16:18,512 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6083 to 6067.
[2020-11-24 21:16:18,512 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6067 states.
[2020-11-24 21:16:18,518 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6067 states to 6067 states and 6854 transitions.
[2020-11-24 21:16:18,518 INFO  L751         BuchiCegarLoop]: Abstraction has 6067 states and 6854 transitions.
[2020-11-24 21:16:18,518 INFO  L631         BuchiCegarLoop]: Abstraction has 6067 states and 6854 transitions.
[2020-11-24 21:16:18,518 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-24 21:16:18,518 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6067 states and 6854 transitions.
[2020-11-24 21:16:18,523 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:16:18,523 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:16:18,523 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:16:18,525 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:16:18,525 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14831]              assume null == 0;
[L14832]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14832]  RET         call this := FreshRefGenerator__success();
[L14833]              assume now >= 0;
[L14834]              assume DType[this] == MainToken;
[L14835]              assume msgvalue_MSG == 0;
[L14836]              gas := gas - 53000;
[L14837]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1142012261;
[L9314]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               CONTINUE_MINTING_Consts[this] := true;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9801]   COND FALSE  !(!!initialized_MainToken[this])
[L9805]               initialized_MainToken[this] := true;
[L9806]   COND FALSE  !(PAUSED_Consts[this])
[L9816]               havoc addresses_s1709;
[L9817]               __var_57 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9818]               M_int_Ref[addresses_s1709][0] := __var_57;
[L9819]               __var_58 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9820]               M_int_Ref[addresses_s1709][1] := __var_58;
[L9821]               havoc amounts_s1709;
[L9822]               __var_59 := 48000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9823]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][0];
[L9824]               M_int_int[amounts_s1709][0] := __var_59;
[L9825]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][0];
[L9826]               __var_60 := 6000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9827]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][1];
[L9828]               M_int_int[amounts_s1709][1] := __var_60;
[L9829]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][1];
[L9830]               havoc freezes_s1709;
[L9831]               __var_61 := 0 % 18446744073709551616;
[L9832]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][0];
[L9833]               M_int_int[freezes_s1709][0] := __var_61;
[L9834]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][0];
[L9835]               __var_62 := 0 % 18446744073709551616;
[L9836]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][1];
[L9837]               M_int_int[freezes_s1709][1] := __var_62;
[L9838]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][1];
[L9839]               i_s1709 := 0;
[L9840]   COND FALSE  !(i_s1709 < Length[addresses_s1709])
[L9864]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9874]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12785]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14837]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14838]              assume !revert && gas >= 0;
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND FALSE  !(choice == 36)
[L14602]  COND FALSE  !(choice == 35)
[L14608]  COND FALSE  !(choice == 34)
[L14615]  COND FALSE  !(choice == 33)
[L14622]  COND FALSE  !(choice == 32)
[L14629]  COND FALSE  !(choice == 31)
[L14636]  COND FALSE  !(choice == 30)
[L14642]  COND FALSE  !(choice == 29)
[L14648]  COND FALSE  !(choice == 28)
[L14654]  COND FALSE  !(choice == 27)
[L14660]  COND FALSE  !(choice == 26)
[L14667]  COND FALSE  !(choice == 25)
[L14673]  COND FALSE  !(choice == 24)
[L14679]  COND FALSE  !(choice == 23)
[L14685]  COND FALSE  !(choice == 22)
[L14691]  COND FALSE  !(choice == 21)
[L14698]  COND TRUE   choice == 20
[L14699]              gas := gas - 21000;
[L14700]  COND TRUE   gas >= 0
[L14701]              assume _amount_s938 >= 0 && _amount_s938 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14702]              assume _until_s938 >= 0 && _until_s938 < 18446744073709551616;
[L14703]              assume msgvalue_MSG == 0;
[L14704]  CALL        call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2530]               havoc __exception;
[L2531]               revert := false;
[L2532]   COND FALSE  !(__exception)
[L2571]   CALL        call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L8138]               __var_26 := null;
[L8139]   COND FALSE  !(!(_to_s938 != null))
[L8143]   COND FALSE  !(!(_amount_s938 <= balances_BasicToken[this][msgsender_MSG]))
[L8147]   CALL        call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8147]   RET         call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L8148]   COND FALSE  !(revert)
[L8151]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8152]               balances_BasicToken[this][msgsender_MSG] := __var_27;
[L8153]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8154]               __var_28 := _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8155]   COND FALSE  !(DType[this] == MainToken)
[L8160]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8165]   COND TRUE   DType[this] == FreezableToken
[L8166]   CALL        call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8166]   RET         call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8167]   COND FALSE  !(revert)
[L8173]               currentKey_s938 := currentKey_s938;
[L8174]   CALL        call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8174]   RET         call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L8175]   COND FALSE  !(revert)
[L8178]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s938];
[L8179]               freezings_FreezableToken[this][currentKey_s938] := __var_29;
[L8180]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s938];
[L8181]   CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8181]   RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L8182]   COND FALSE  !(revert)
[L8185]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s938];
[L8186]               freezingBalance_FreezableToken[this][_to_s938] := __var_30;
[L8187]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s938];
[L8188]   COND FALSE  !(DType[this] == MainToken)
[L8193]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8198]   COND TRUE   DType[this] == FreezableToken
[L8199]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8713]   COND FALSE  !(!(_until_s1240 > now))
[L8717]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8718]   COND FALSE  !(DType[this] == MainToken)
[L8723]   COND TRUE   DType[this] == FreezableMintableToken
[L8724]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8724]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8725]   COND FALSE  !(revert)
[L8736]               key_s1240 := key_s1240;
[L8737]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8738]   COND FALSE  !(DType[this] == MainToken)
[L8743]   COND TRUE   DType[this] == FreezableMintableToken
[L8744]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8744]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8745]   COND FALSE  !(revert)
[L8756]               parentKey_s1240 := parentKey_s1240;
[L8757]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8758]   COND TRUE   next_s1240 == 0
[L8759]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8760]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8761]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L8199]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8200]   COND FALSE  !(revert)
[L8206]               assert { :EventEmitted "Transfer_FreezableToken" } true;
[L8207]               assert { :EventEmitted "Freezed_FreezableToken" } true;
[L2571]   RET         call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2572]               assume !revert && gas >= 0;
[L14704]  RET         call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L14841]  RET         call CorralChoice_MainToken(this);
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND TRUE   choice == 37
[L14590]              gas := gas - 21000;
[L14591]  COND TRUE   gas >= 0
[L14592]              assume msgvalue_MSG == 0;
[L14593]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14593]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14841]  RET         call CorralChoice_MainToken(this);

Loop:
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND TRUE   choice == 38
[L14584]              gas := gas - 21000;
[L14585]  COND FALSE  !(gas >= 0)
[L14841]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:16:18,532 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:16:18,532 INFO  L82        PathProgramCache]: Analyzing trace with hash 665125023, now seen corresponding path program 1 times
[2020-11-24 21:16:18,533 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:16:18,563 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:16:19,198 INFO  L134       CoverageAnalysis]: Checked inductivity of 9938 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9937 trivial. 0 not checked.
[2020-11-24 21:16:19,198 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:16:19,198 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-24 21:16:19,199 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:16:19,199 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-24 21:16:19,199 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-24 21:16:19,199 INFO  L87              Difference]: Start difference. First operand 6067 states and 6854 transitions. cyclomatic complexity: 810 Second operand 6 states.
[2020-11-24 21:16:19,306 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:16:19,306 INFO  L93              Difference]: Finished difference Result 6111 states and 6894 transitions.
[2020-11-24 21:16:19,306 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-24 21:16:19,306 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6111 states and 6894 transitions.
[2020-11-24 21:16:19,316 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:16:19,326 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6111 states to 5991 states and 6756 transitions.
[2020-11-24 21:16:19,326 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1104
[2020-11-24 21:16:19,327 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1104
[2020-11-24 21:16:19,327 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5991 states and 6756 transitions.
[2020-11-24 21:16:19,330 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:16:19,330 INFO  L728         BuchiCegarLoop]: Abstraction has 5991 states and 6756 transitions.
[2020-11-24 21:16:19,334 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5991 states and 6756 transitions.
[2020-11-24 21:16:19,356 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5991 to 5991.
[2020-11-24 21:16:19,356 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5991 states.
[2020-11-24 21:16:19,362 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5991 states to 5991 states and 6756 transitions.
[2020-11-24 21:16:19,362 INFO  L751         BuchiCegarLoop]: Abstraction has 5991 states and 6756 transitions.
[2020-11-24 21:16:19,362 INFO  L631         BuchiCegarLoop]: Abstraction has 5991 states and 6756 transitions.
[2020-11-24 21:16:19,362 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-24 21:16:19,362 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5991 states and 6756 transitions.
[2020-11-24 21:16:19,367 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:16:19,367 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:16:19,367 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:16:19,369 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:16:19,369 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14831]              assume null == 0;
[L14832]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14832]  RET         call this := FreshRefGenerator__success();
[L14833]              assume now >= 0;
[L14834]              assume DType[this] == MainToken;
[L14835]              assume msgvalue_MSG == 0;
[L14836]              gas := gas - 53000;
[L14837]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1142012261;
[L9314]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               CONTINUE_MINTING_Consts[this] := true;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9801]   COND FALSE  !(!!initialized_MainToken[this])
[L9805]               initialized_MainToken[this] := true;
[L9806]   COND FALSE  !(PAUSED_Consts[this])
[L9816]               havoc addresses_s1709;
[L9817]               __var_57 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9818]               M_int_Ref[addresses_s1709][0] := __var_57;
[L9819]               __var_58 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9820]               M_int_Ref[addresses_s1709][1] := __var_58;
[L9821]               havoc amounts_s1709;
[L9822]               __var_59 := 48000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9823]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][0];
[L9824]               M_int_int[amounts_s1709][0] := __var_59;
[L9825]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][0];
[L9826]               __var_60 := 6000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9827]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][1];
[L9828]               M_int_int[amounts_s1709][1] := __var_60;
[L9829]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][1];
[L9830]               havoc freezes_s1709;
[L9831]               __var_61 := 0 % 18446744073709551616;
[L9832]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][0];
[L9833]               M_int_int[freezes_s1709][0] := __var_61;
[L9834]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][0];
[L9835]               __var_62 := 0 % 18446744073709551616;
[L9836]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][1];
[L9837]               M_int_int[freezes_s1709][1] := __var_62;
[L9838]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][1];
[L9839]               i_s1709 := 0;
[L9840]   COND FALSE  !(i_s1709 < Length[addresses_s1709])
[L9864]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9874]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12785]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14837]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14838]              assume !revert && gas >= 0;
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND FALSE  !(choice == 36)
[L14602]  COND FALSE  !(choice == 35)
[L14608]  COND FALSE  !(choice == 34)
[L14615]  COND FALSE  !(choice == 33)
[L14622]  COND FALSE  !(choice == 32)
[L14629]  COND FALSE  !(choice == 31)
[L14636]  COND FALSE  !(choice == 30)
[L14642]  COND FALSE  !(choice == 29)
[L14648]  COND FALSE  !(choice == 28)
[L14654]  COND FALSE  !(choice == 27)
[L14660]  COND FALSE  !(choice == 26)
[L14667]  COND FALSE  !(choice == 25)
[L14673]  COND FALSE  !(choice == 24)
[L14679]  COND FALSE  !(choice == 23)
[L14685]  COND FALSE  !(choice == 22)
[L14691]  COND FALSE  !(choice == 21)
[L14698]  COND TRUE   choice == 20
[L14699]              gas := gas - 21000;
[L14700]  COND TRUE   gas >= 0
[L14701]              assume _amount_s938 >= 0 && _amount_s938 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14702]              assume _until_s938 >= 0 && _until_s938 < 18446744073709551616;
[L14703]              assume msgvalue_MSG == 0;
[L14704]  CALL        call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2530]               havoc __exception;
[L2531]               revert := false;
[L2532]   COND FALSE  !(__exception)
[L2571]   CALL        call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L8138]               __var_26 := null;
[L8139]   COND FALSE  !(!(_to_s938 != null))
[L8143]   COND FALSE  !(!(_amount_s938 <= balances_BasicToken[this][msgsender_MSG]))
[L8147]   CALL        call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8147]   RET         call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L8148]   COND FALSE  !(revert)
[L8151]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8152]               balances_BasicToken[this][msgsender_MSG] := __var_27;
[L8153]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8154]               __var_28 := _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8155]   COND TRUE   DType[this] == MainToken
[L8156]   CALL        call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8156]   RET         call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8157]   COND FALSE  !(revert)
[L8173]               currentKey_s938 := currentKey_s938;
[L8174]   CALL        call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8174]   RET         call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L8175]   COND FALSE  !(revert)
[L8178]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s938];
[L8179]               freezings_FreezableToken[this][currentKey_s938] := __var_29;
[L8180]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s938];
[L8181]   CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8181]   RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L8182]   COND FALSE  !(revert)
[L8185]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s938];
[L8186]               freezingBalance_FreezableToken[this][_to_s938] := __var_30;
[L8187]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s938];
[L8188]   COND TRUE   DType[this] == MainToken
[L8189]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8713]   COND FALSE  !(!(_until_s1240 > now))
[L8717]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8718]   COND FALSE  !(DType[this] == MainToken)
[L8723]   COND TRUE   DType[this] == FreezableMintableToken
[L8724]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8724]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8725]   COND FALSE  !(revert)
[L8736]               key_s1240 := key_s1240;
[L8737]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8738]   COND FALSE  !(DType[this] == MainToken)
[L8743]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8748]   COND TRUE   DType[this] == FreezableToken
[L8749]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8749]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8750]   COND FALSE  !(revert)
[L8756]               parentKey_s1240 := parentKey_s1240;
[L8757]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8758]   COND TRUE   next_s1240 == 0
[L8759]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8760]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8761]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L8189]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8190]   COND FALSE  !(revert)
[L8206]               assert { :EventEmitted "Transfer_FreezableToken" } true;
[L8207]               assert { :EventEmitted "Freezed_FreezableToken" } true;
[L2571]   RET         call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2572]               assume !revert && gas >= 0;
[L14704]  RET         call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L14841]  RET         call CorralChoice_MainToken(this);
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND TRUE   choice == 37
[L14590]              gas := gas - 21000;
[L14591]  COND TRUE   gas >= 0
[L14592]              assume msgvalue_MSG == 0;
[L14593]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14593]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14841]  RET         call CorralChoice_MainToken(this);

Loop:
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND TRUE   choice == 38
[L14584]              gas := gas - 21000;
[L14585]  COND FALSE  !(gas >= 0)
[L14841]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:16:19,376 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:16:19,377 INFO  L82        PathProgramCache]: Analyzing trace with hash 1142250422, now seen corresponding path program 1 times
[2020-11-24 21:16:19,378 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:16:19,409 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:16:19,979 INFO  L134       CoverageAnalysis]: Checked inductivity of 9938 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9937 trivial. 0 not checked.
[2020-11-24 21:16:19,979 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:16:19,979 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:16:19,980 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:16:19,980 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:16:19,980 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:16:19,980 INFO  L87              Difference]: Start difference. First operand 5991 states and 6756 transitions. cyclomatic complexity: 788 Second operand 3 states.
[2020-11-24 21:16:20,024 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:16:20,024 INFO  L93              Difference]: Finished difference Result 6097 states and 6888 transitions.
[2020-11-24 21:16:20,024 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:16:20,025 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6097 states and 6888 transitions.
[2020-11-24 21:16:20,033 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:16:20,043 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6097 states to 6097 states and 6888 transitions.
[2020-11-24 21:16:20,043 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1119
[2020-11-24 21:16:20,044 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1119
[2020-11-24 21:16:20,044 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6097 states and 6888 transitions.
[2020-11-24 21:16:20,047 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:16:20,047 INFO  L728         BuchiCegarLoop]: Abstraction has 6097 states and 6888 transitions.
[2020-11-24 21:16:20,051 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6097 states and 6888 transitions.
[2020-11-24 21:16:20,073 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6097 to 6052.
[2020-11-24 21:16:20,073 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6052 states.
[2020-11-24 21:16:20,079 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6052 states to 6052 states and 6823 transitions.
[2020-11-24 21:16:20,079 INFO  L751         BuchiCegarLoop]: Abstraction has 6052 states and 6823 transitions.
[2020-11-24 21:16:20,079 INFO  L631         BuchiCegarLoop]: Abstraction has 6052 states and 6823 transitions.
[2020-11-24 21:16:20,079 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-24 21:16:20,079 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6052 states and 6823 transitions.
[2020-11-24 21:16:20,084 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:16:20,084 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:16:20,084 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:16:20,086 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:16:20,086 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14831]              assume null == 0;
[L14832]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14832]  RET         call this := FreshRefGenerator__success();
[L14833]              assume now >= 0;
[L14834]              assume DType[this] == MainToken;
[L14835]              assume msgvalue_MSG == 0;
[L14836]              gas := gas - 53000;
[L14837]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1142012261;
[L9314]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               CONTINUE_MINTING_Consts[this] := true;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9801]   COND FALSE  !(!!initialized_MainToken[this])
[L9805]               initialized_MainToken[this] := true;
[L9806]   COND FALSE  !(PAUSED_Consts[this])
[L9816]               havoc addresses_s1709;
[L9817]               __var_57 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9818]               M_int_Ref[addresses_s1709][0] := __var_57;
[L9819]               __var_58 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9820]               M_int_Ref[addresses_s1709][1] := __var_58;
[L9821]               havoc amounts_s1709;
[L9822]               __var_59 := 48000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9823]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][0];
[L9824]               M_int_int[amounts_s1709][0] := __var_59;
[L9825]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][0];
[L9826]               __var_60 := 6000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9827]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][1];
[L9828]               M_int_int[amounts_s1709][1] := __var_60;
[L9829]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][1];
[L9830]               havoc freezes_s1709;
[L9831]               __var_61 := 0 % 18446744073709551616;
[L9832]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][0];
[L9833]               M_int_int[freezes_s1709][0] := __var_61;
[L9834]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][0];
[L9835]               __var_62 := 0 % 18446744073709551616;
[L9836]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][1];
[L9837]               M_int_int[freezes_s1709][1] := __var_62;
[L9838]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][1];
[L9839]               i_s1709 := 0;
[L9840]   COND FALSE  !(i_s1709 < Length[addresses_s1709])
[L9864]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9874]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12785]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14837]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14838]              assume !revert && gas >= 0;
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND FALSE  !(choice == 36)
[L14602]  COND FALSE  !(choice == 35)
[L14608]  COND FALSE  !(choice == 34)
[L14615]  COND FALSE  !(choice == 33)
[L14622]  COND FALSE  !(choice == 32)
[L14629]  COND FALSE  !(choice == 31)
[L14636]  COND FALSE  !(choice == 30)
[L14642]  COND FALSE  !(choice == 29)
[L14648]  COND FALSE  !(choice == 28)
[L14654]  COND FALSE  !(choice == 27)
[L14660]  COND FALSE  !(choice == 26)
[L14667]  COND FALSE  !(choice == 25)
[L14673]  COND FALSE  !(choice == 24)
[L14679]  COND FALSE  !(choice == 23)
[L14685]  COND FALSE  !(choice == 22)
[L14691]  COND FALSE  !(choice == 21)
[L14698]  COND TRUE   choice == 20
[L14699]              gas := gas - 21000;
[L14700]  COND TRUE   gas >= 0
[L14701]              assume _amount_s938 >= 0 && _amount_s938 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14702]              assume _until_s938 >= 0 && _until_s938 < 18446744073709551616;
[L14703]              assume msgvalue_MSG == 0;
[L14704]  CALL        call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2530]               havoc __exception;
[L2531]               revert := false;
[L2532]   COND FALSE  !(__exception)
[L2571]   CALL        call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L8138]               __var_26 := null;
[L8139]   COND FALSE  !(!(_to_s938 != null))
[L8143]   COND FALSE  !(!(_amount_s938 <= balances_BasicToken[this][msgsender_MSG]))
[L8147]   CALL        call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8147]   RET         call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L8148]   COND FALSE  !(revert)
[L8151]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8152]               balances_BasicToken[this][msgsender_MSG] := __var_27;
[L8153]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8154]               __var_28 := _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8155]   COND TRUE   DType[this] == MainToken
[L8156]   CALL        call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8156]   RET         call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8157]   COND FALSE  !(revert)
[L8173]               currentKey_s938 := currentKey_s938;
[L8174]   CALL        call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8174]   RET         call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L8175]   COND FALSE  !(revert)
[L8178]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s938];
[L8179]               freezings_FreezableToken[this][currentKey_s938] := __var_29;
[L8180]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s938];
[L8181]   CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8181]   RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L8182]   COND FALSE  !(revert)
[L8185]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s938];
[L8186]               freezingBalance_FreezableToken[this][_to_s938] := __var_30;
[L8187]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s938];
[L8188]   COND TRUE   DType[this] == MainToken
[L8189]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8713]   COND FALSE  !(!(_until_s1240 > now))
[L8717]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8718]   COND FALSE  !(DType[this] == MainToken)
[L8723]   COND TRUE   DType[this] == FreezableMintableToken
[L8724]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8724]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8725]   COND FALSE  !(revert)
[L8736]               key_s1240 := key_s1240;
[L8737]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8738]   COND FALSE  !(DType[this] == MainToken)
[L8743]   COND TRUE   DType[this] == FreezableMintableToken
[L8744]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8744]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8745]   COND FALSE  !(revert)
[L8756]               parentKey_s1240 := parentKey_s1240;
[L8757]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8758]   COND TRUE   next_s1240 == 0
[L8759]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8760]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8761]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L8189]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8190]   COND FALSE  !(revert)
[L8206]               assert { :EventEmitted "Transfer_FreezableToken" } true;
[L8207]               assert { :EventEmitted "Freezed_FreezableToken" } true;
[L2571]   RET         call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2572]               assume !revert && gas >= 0;
[L14704]  RET         call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L14841]  RET         call CorralChoice_MainToken(this);
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND TRUE   choice == 37
[L14590]              gas := gas - 21000;
[L14591]  COND TRUE   gas >= 0
[L14592]              assume msgvalue_MSG == 0;
[L14593]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND FALSE  !(DType[this] == MainToken)
[L7735]   COND TRUE   DType[this] == FreezableMintableToken
[L7736]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7736]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7737]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14593]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14841]  RET         call CorralChoice_MainToken(this);

Loop:
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND TRUE   choice == 38
[L14584]              gas := gas - 21000;
[L14585]  COND FALSE  !(gas >= 0)
[L14841]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:16:20,093 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:16:20,093 INFO  L82        PathProgramCache]: Analyzing trace with hash 1762527309, now seen corresponding path program 1 times
[2020-11-24 21:16:20,094 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:16:20,124 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:16:20,699 INFO  L134       CoverageAnalysis]: Checked inductivity of 9938 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9937 trivial. 0 not checked.
[2020-11-24 21:16:20,699 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:16:20,699 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 21:16:20,700 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:16:20,700 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 21:16:20,700 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 21:16:20,700 INFO  L87              Difference]: Start difference. First operand 6052 states and 6823 transitions. cyclomatic complexity: 796 Second operand 7 states.
[2020-11-24 21:16:20,854 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:16:20,854 INFO  L93              Difference]: Finished difference Result 6149 states and 6927 transitions.
[2020-11-24 21:16:20,854 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 21:16:20,854 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6149 states and 6927 transitions.
[2020-11-24 21:16:20,864 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:16:20,876 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6149 states to 6097 states and 6875 transitions.
[2020-11-24 21:16:20,876 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1119
[2020-11-24 21:16:20,877 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1119
[2020-11-24 21:16:20,877 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6097 states and 6875 transitions.
[2020-11-24 21:16:20,880 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:16:20,880 INFO  L728         BuchiCegarLoop]: Abstraction has 6097 states and 6875 transitions.
[2020-11-24 21:16:20,884 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6097 states and 6875 transitions.
[2020-11-24 21:16:20,910 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6097 to 6082.
[2020-11-24 21:16:20,910 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6082 states.
[2020-11-24 21:16:20,916 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6082 states to 6082 states and 6856 transitions.
[2020-11-24 21:16:20,917 INFO  L751         BuchiCegarLoop]: Abstraction has 6082 states and 6856 transitions.
[2020-11-24 21:16:20,917 INFO  L631         BuchiCegarLoop]: Abstraction has 6082 states and 6856 transitions.
[2020-11-24 21:16:20,917 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-24 21:16:20,917 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6082 states and 6856 transitions.
[2020-11-24 21:16:20,923 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:16:20,924 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:16:20,924 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:16:20,926 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:16:20,927 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14831]              assume null == 0;
[L14832]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14832]  RET         call this := FreshRefGenerator__success();
[L14833]              assume now >= 0;
[L14834]              assume DType[this] == MainToken;
[L14835]              assume msgvalue_MSG == 0;
[L14836]              gas := gas - 53000;
[L14837]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1142012261;
[L9314]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               CONTINUE_MINTING_Consts[this] := true;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9801]   COND FALSE  !(!!initialized_MainToken[this])
[L9805]               initialized_MainToken[this] := true;
[L9806]   COND FALSE  !(PAUSED_Consts[this])
[L9816]               havoc addresses_s1709;
[L9817]               __var_57 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9818]               M_int_Ref[addresses_s1709][0] := __var_57;
[L9819]               __var_58 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9820]               M_int_Ref[addresses_s1709][1] := __var_58;
[L9821]               havoc amounts_s1709;
[L9822]               __var_59 := 48000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9823]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][0];
[L9824]               M_int_int[amounts_s1709][0] := __var_59;
[L9825]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][0];
[L9826]               __var_60 := 6000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9827]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][1];
[L9828]               M_int_int[amounts_s1709][1] := __var_60;
[L9829]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][1];
[L9830]               havoc freezes_s1709;
[L9831]               __var_61 := 0 % 18446744073709551616;
[L9832]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][0];
[L9833]               M_int_int[freezes_s1709][0] := __var_61;
[L9834]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][0];
[L9835]               __var_62 := 0 % 18446744073709551616;
[L9836]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][1];
[L9837]               M_int_int[freezes_s1709][1] := __var_62;
[L9838]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][1];
[L9839]               i_s1709 := 0;
[L9840]   COND FALSE  !(i_s1709 < Length[addresses_s1709])
[L9864]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9874]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12785]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14837]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14838]              assume !revert && gas >= 0;
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND FALSE  !(choice == 36)
[L14602]  COND FALSE  !(choice == 35)
[L14608]  COND FALSE  !(choice == 34)
[L14615]  COND FALSE  !(choice == 33)
[L14622]  COND FALSE  !(choice == 32)
[L14629]  COND FALSE  !(choice == 31)
[L14636]  COND FALSE  !(choice == 30)
[L14642]  COND FALSE  !(choice == 29)
[L14648]  COND FALSE  !(choice == 28)
[L14654]  COND FALSE  !(choice == 27)
[L14660]  COND FALSE  !(choice == 26)
[L14667]  COND FALSE  !(choice == 25)
[L14673]  COND FALSE  !(choice == 24)
[L14679]  COND FALSE  !(choice == 23)
[L14685]  COND FALSE  !(choice == 22)
[L14691]  COND FALSE  !(choice == 21)
[L14698]  COND TRUE   choice == 20
[L14699]              gas := gas - 21000;
[L14700]  COND TRUE   gas >= 0
[L14701]              assume _amount_s938 >= 0 && _amount_s938 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14702]              assume _until_s938 >= 0 && _until_s938 < 18446744073709551616;
[L14703]              assume msgvalue_MSG == 0;
[L14704]  CALL        call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2530]               havoc __exception;
[L2531]               revert := false;
[L2532]   COND FALSE  !(__exception)
[L2571]   CALL        call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L8138]               __var_26 := null;
[L8139]   COND FALSE  !(!(_to_s938 != null))
[L8143]   COND FALSE  !(!(_amount_s938 <= balances_BasicToken[this][msgsender_MSG]))
[L8147]   CALL        call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8147]   RET         call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L8148]   COND FALSE  !(revert)
[L8151]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8152]               balances_BasicToken[this][msgsender_MSG] := __var_27;
[L8153]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8154]               __var_28 := _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8155]   COND TRUE   DType[this] == MainToken
[L8156]   CALL        call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8156]   RET         call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8157]   COND FALSE  !(revert)
[L8173]               currentKey_s938 := currentKey_s938;
[L8174]   CALL        call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8174]   RET         call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L8175]   COND FALSE  !(revert)
[L8178]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s938];
[L8179]               freezings_FreezableToken[this][currentKey_s938] := __var_29;
[L8180]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s938];
[L8181]   CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8181]   RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L8182]   COND FALSE  !(revert)
[L8185]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s938];
[L8186]               freezingBalance_FreezableToken[this][_to_s938] := __var_30;
[L8187]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s938];
[L8188]   COND TRUE   DType[this] == MainToken
[L8189]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8713]   COND FALSE  !(!(_until_s1240 > now))
[L8717]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8718]   COND TRUE   DType[this] == MainToken
[L8719]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8719]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8720]   COND FALSE  !(revert)
[L8736]               key_s1240 := key_s1240;
[L8737]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8738]   COND TRUE   DType[this] == MainToken
[L8739]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8739]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8740]   COND FALSE  !(revert)
[L8756]               parentKey_s1240 := parentKey_s1240;
[L8757]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8758]   COND TRUE   next_s1240 == 0
[L8759]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8760]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8761]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L8189]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8190]   COND FALSE  !(revert)
[L8206]               assert { :EventEmitted "Transfer_FreezableToken" } true;
[L8207]               assert { :EventEmitted "Freezed_FreezableToken" } true;
[L2571]   RET         call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2572]               assume !revert && gas >= 0;
[L14704]  RET         call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L14841]  RET         call CorralChoice_MainToken(this);
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND TRUE   choice == 37
[L14590]              gas := gas - 21000;
[L14591]  COND TRUE   gas >= 0
[L14592]              assume msgvalue_MSG == 0;
[L14593]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND FALSE  !(DType[this] == MainToken)
[L7735]   COND TRUE   DType[this] == FreezableMintableToken
[L7736]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7736]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7737]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14593]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14841]  RET         call CorralChoice_MainToken(this);

Loop:
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND TRUE   choice == 38
[L14584]              gas := gas - 21000;
[L14585]  COND FALSE  !(gas >= 0)
[L14841]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:16:20,933 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:16:20,934 INFO  L82        PathProgramCache]: Analyzing trace with hash 346434418, now seen corresponding path program 1 times
[2020-11-24 21:16:20,935 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:16:20,970 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:16:21,568 INFO  L134       CoverageAnalysis]: Checked inductivity of 9938 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9938 trivial. 0 not checked.
[2020-11-24 21:16:21,568 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:16:21,569 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 21:16:21,570 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:16:21,570 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-24 21:16:21,570 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-24 21:16:21,571 INFO  L87              Difference]: Start difference. First operand 6082 states and 6856 transitions. cyclomatic complexity: 799 Second operand 6 states.
[2020-11-24 21:16:21,738 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:16:21,738 INFO  L93              Difference]: Finished difference Result 6142 states and 6916 transitions.
[2020-11-24 21:16:21,738 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-24 21:16:21,738 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6142 states and 6916 transitions.
[2020-11-24 21:16:21,753 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:16:21,765 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6142 states to 6074 states and 6844 transitions.
[2020-11-24 21:16:21,765 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1115
[2020-11-24 21:16:21,765 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1115
[2020-11-24 21:16:21,765 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6074 states and 6844 transitions.
[2020-11-24 21:16:21,769 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:16:21,769 INFO  L728         BuchiCegarLoop]: Abstraction has 6074 states and 6844 transitions.
[2020-11-24 21:16:21,773 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6074 states and 6844 transitions.
[2020-11-24 21:16:21,798 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6074 to 6074.
[2020-11-24 21:16:21,798 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6074 states.
[2020-11-24 21:16:21,805 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6074 states to 6074 states and 6844 transitions.
[2020-11-24 21:16:21,805 INFO  L751         BuchiCegarLoop]: Abstraction has 6074 states and 6844 transitions.
[2020-11-24 21:16:21,805 INFO  L631         BuchiCegarLoop]: Abstraction has 6074 states and 6844 transitions.
[2020-11-24 21:16:21,805 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-24 21:16:21,805 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6074 states and 6844 transitions.
[2020-11-24 21:16:21,810 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:16:21,810 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:16:21,810 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:16:21,813 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:16:21,813 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14831]              assume null == 0;
[L14832]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14832]  RET         call this := FreshRefGenerator__success();
[L14833]              assume now >= 0;
[L14834]              assume DType[this] == MainToken;
[L14835]              assume msgvalue_MSG == 0;
[L14836]              gas := gas - 53000;
[L14837]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1142012261;
[L9314]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               CONTINUE_MINTING_Consts[this] := true;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9801]   COND FALSE  !(!!initialized_MainToken[this])
[L9805]               initialized_MainToken[this] := true;
[L9806]   COND FALSE  !(PAUSED_Consts[this])
[L9816]               havoc addresses_s1709;
[L9817]               __var_57 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9818]               M_int_Ref[addresses_s1709][0] := __var_57;
[L9819]               __var_58 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9820]               M_int_Ref[addresses_s1709][1] := __var_58;
[L9821]               havoc amounts_s1709;
[L9822]               __var_59 := 48000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9823]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][0];
[L9824]               M_int_int[amounts_s1709][0] := __var_59;
[L9825]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][0];
[L9826]               __var_60 := 6000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9827]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][1];
[L9828]               M_int_int[amounts_s1709][1] := __var_60;
[L9829]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][1];
[L9830]               havoc freezes_s1709;
[L9831]               __var_61 := 0 % 18446744073709551616;
[L9832]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][0];
[L9833]               M_int_int[freezes_s1709][0] := __var_61;
[L9834]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][0];
[L9835]               __var_62 := 0 % 18446744073709551616;
[L9836]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][1];
[L9837]               M_int_int[freezes_s1709][1] := __var_62;
[L9838]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][1];
[L9839]               i_s1709 := 0;
[L9840]   COND FALSE  !(i_s1709 < Length[addresses_s1709])
[L9864]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9874]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12785]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14837]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14838]              assume !revert && gas >= 0;
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND FALSE  !(choice == 36)
[L14602]  COND FALSE  !(choice == 35)
[L14608]  COND FALSE  !(choice == 34)
[L14615]  COND FALSE  !(choice == 33)
[L14622]  COND FALSE  !(choice == 32)
[L14629]  COND FALSE  !(choice == 31)
[L14636]  COND FALSE  !(choice == 30)
[L14642]  COND FALSE  !(choice == 29)
[L14648]  COND FALSE  !(choice == 28)
[L14654]  COND FALSE  !(choice == 27)
[L14660]  COND FALSE  !(choice == 26)
[L14667]  COND FALSE  !(choice == 25)
[L14673]  COND FALSE  !(choice == 24)
[L14679]  COND FALSE  !(choice == 23)
[L14685]  COND FALSE  !(choice == 22)
[L14691]  COND FALSE  !(choice == 21)
[L14698]  COND TRUE   choice == 20
[L14699]              gas := gas - 21000;
[L14700]  COND TRUE   gas >= 0
[L14701]              assume _amount_s938 >= 0 && _amount_s938 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14702]              assume _until_s938 >= 0 && _until_s938 < 18446744073709551616;
[L14703]              assume msgvalue_MSG == 0;
[L14704]  CALL        call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2530]               havoc __exception;
[L2531]               revert := false;
[L2532]   COND FALSE  !(__exception)
[L2571]   CALL        call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L8138]               __var_26 := null;
[L8139]   COND FALSE  !(!(_to_s938 != null))
[L8143]   COND FALSE  !(!(_amount_s938 <= balances_BasicToken[this][msgsender_MSG]))
[L8147]   CALL        call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8147]   RET         call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L8148]   COND FALSE  !(revert)
[L8151]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8152]               balances_BasicToken[this][msgsender_MSG] := __var_27;
[L8153]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8154]               __var_28 := _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8155]   COND TRUE   DType[this] == MainToken
[L8156]   CALL        call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8156]   RET         call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8157]   COND FALSE  !(revert)
[L8173]               currentKey_s938 := currentKey_s938;
[L8174]   CALL        call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8174]   RET         call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L8175]   COND FALSE  !(revert)
[L8178]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s938];
[L8179]               freezings_FreezableToken[this][currentKey_s938] := __var_29;
[L8180]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s938];
[L8181]   CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8181]   RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L8182]   COND FALSE  !(revert)
[L8185]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s938];
[L8186]               freezingBalance_FreezableToken[this][_to_s938] := __var_30;
[L8187]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s938];
[L8188]   COND TRUE   DType[this] == MainToken
[L8189]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8713]   COND FALSE  !(!(_until_s1240 > now))
[L8717]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8718]   COND TRUE   DType[this] == MainToken
[L8719]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8719]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8720]   COND FALSE  !(revert)
[L8736]               key_s1240 := key_s1240;
[L8737]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8738]   COND TRUE   DType[this] == MainToken
[L8739]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8739]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8740]   COND FALSE  !(revert)
[L8756]               parentKey_s1240 := parentKey_s1240;
[L8757]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8758]   COND TRUE   next_s1240 == 0
[L8759]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8760]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8761]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L8189]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8190]   COND FALSE  !(revert)
[L8206]               assert { :EventEmitted "Transfer_FreezableToken" } true;
[L8207]               assert { :EventEmitted "Freezed_FreezableToken" } true;
[L2571]   RET         call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2572]               assume !revert && gas >= 0;
[L14704]  RET         call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L14841]  RET         call CorralChoice_MainToken(this);
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND TRUE   choice == 37
[L14590]              gas := gas - 21000;
[L14591]  COND TRUE   gas >= 0
[L14592]              assume msgvalue_MSG == 0;
[L14593]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14593]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14841]  RET         call CorralChoice_MainToken(this);

Loop:
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND FALSE  !(choice == 36)
[L14602]  COND FALSE  !(choice == 35)
[L14608]  COND FALSE  !(choice == 34)
[L14615]  COND FALSE  !(choice == 33)
[L14622]  COND FALSE  !(choice == 32)
[L14629]  COND FALSE  !(choice == 31)
[L14636]  COND FALSE  !(choice == 30)
[L14642]  COND FALSE  !(choice == 29)
[L14648]  COND FALSE  !(choice == 28)
[L14654]  COND FALSE  !(choice == 27)
[L14660]  COND FALSE  !(choice == 26)
[L14667]  COND FALSE  !(choice == 25)
[L14673]  COND FALSE  !(choice == 24)
[L14679]  COND FALSE  !(choice == 23)
[L14685]  COND FALSE  !(choice == 22)
[L14691]  COND FALSE  !(choice == 21)
[L14698]  COND FALSE  !(choice == 20)
[L14706]  COND TRUE   choice == 19
[L14707]              gas := gas - 21000;
[L14708]  COND TRUE   gas >= 0
[L14709]              assume msgvalue_MSG == 0;
[L14710]  CALL        call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L2624]               havoc __exception;
[L2625]               revert := false;
[L2626]   COND FALSE  !(__exception)
[L2665]   CALL        call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8314]               __var_31 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8315]   COND TRUE   DType[this] == MainToken
[L8316]   CALL        call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8316]   RET         call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8317]   COND FALSE  !(revert)
[L8333]               headKey_s1054 := headKey_s1054;
[L8334]               head_s1054 := chains_FreezableToken[this][headKey_s1054];
[L8335]   COND FALSE  !(!(head_s1054 != 0))
[L8339]               __var_32 := now % 18446744073709551616;
[L8340]   COND FALSE  !(!(now % 18446744073709551616 > head_s1054))
[L8344]               __var_33 := head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8345]   COND TRUE   DType[this] == MainToken
[L8346]   CALL        call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8346]   RET         call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8347]   COND FALSE  !(revert)
[L8363]               currentKey_s1054 := currentKey_s1054;
[L8364]               next_s1054 := chains_FreezableToken[this][currentKey_s1054];
[L8365]               amount_s1054 := freezings_FreezableToken[this][currentKey_s1054];
[L8366]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1054];
[L8367]               freezings_FreezableToken[this][currentKey_s1054] := 0;
[L8368]   CALL        call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8368]   RET         call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L8369]   COND FALSE  !(revert)
[L8372]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8373]               balances_BasicToken[this][msgsender_MSG] := __var_34;
[L8374]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8375]   CALL        call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8375]   RET         call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L8376]   COND FALSE  !(revert)
[L8379]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][msgsender_MSG];
[L8380]               freezingBalance_FreezableToken[this][msgsender_MSG] := __var_35;
[L8381]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][msgsender_MSG];
[L8382]   COND TRUE   next_s1054 == 0
[L8383]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][headKey_s1054];
[L8384]               chains_FreezableToken[this][headKey_s1054] := 0;
[L8392]               assert { :EventEmitted "Released_FreezableToken" } true;
[L2665]   RET         call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2666]               assume !revert && gas >= 0;
[L14710]  RET         call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L14841]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:16:21,820 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:16:21,820 INFO  L82        PathProgramCache]: Analyzing trace with hash -695356241, now seen corresponding path program 1 times
[2020-11-24 21:16:21,821 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:16:21,875 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:16:23,564 INFO  L134       CoverageAnalysis]: Checked inductivity of 9938 backedges. 107 proven. 89 refuted. 0 times theorem prover too weak. 9742 trivial. 0 not checked.
[2020-11-24 21:16:23,564 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-24 21:16:23,564 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [29] total 29
[2020-11-24 21:16:23,565 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:16:23,565 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 30 interpolants.
[2020-11-24 21:16:23,565 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=71, Invalid=799, Unknown=0, NotChecked=0, Total=870
[2020-11-24 21:16:23,565 INFO  L87              Difference]: Start difference. First operand 6074 states and 6844 transitions. cyclomatic complexity: 795 Second operand 30 states.
[2020-11-24 21:16:41,656 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:16:41,656 INFO  L93              Difference]: Finished difference Result 6131 states and 6958 transitions.
[2020-11-24 21:16:41,656 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 35 states. 
[2020-11-24 21:16:41,656 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6131 states and 6958 transitions.
[2020-11-24 21:16:41,666 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:16:41,677 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6131 states to 6131 states and 6958 transitions.
[2020-11-24 21:16:41,677 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1143
[2020-11-24 21:16:41,678 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1143
[2020-11-24 21:16:41,678 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6131 states and 6958 transitions.
[2020-11-24 21:16:41,681 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:16:41,681 INFO  L728         BuchiCegarLoop]: Abstraction has 6131 states and 6958 transitions.
[2020-11-24 21:16:41,685 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6131 states and 6958 transitions.
[2020-11-24 21:16:41,709 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6131 to 6080.
[2020-11-24 21:16:41,709 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6080 states.
[2020-11-24 21:16:41,715 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6080 states to 6080 states and 6864 transitions.
[2020-11-24 21:16:41,715 INFO  L751         BuchiCegarLoop]: Abstraction has 6080 states and 6864 transitions.
[2020-11-24 21:16:41,715 INFO  L631         BuchiCegarLoop]: Abstraction has 6080 states and 6864 transitions.
[2020-11-24 21:16:41,715 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-24 21:16:41,716 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6080 states and 6864 transitions.
[2020-11-24 21:16:41,721 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:16:41,721 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:16:41,721 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:16:41,723 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:16:41,723 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14831]              assume null == 0;
[L14832]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14832]  RET         call this := FreshRefGenerator__success();
[L14833]              assume now >= 0;
[L14834]              assume DType[this] == MainToken;
[L14835]              assume msgvalue_MSG == 0;
[L14836]              gas := gas - 53000;
[L14837]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1142012261;
[L9314]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               CONTINUE_MINTING_Consts[this] := true;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9801]   COND FALSE  !(!!initialized_MainToken[this])
[L9805]               initialized_MainToken[this] := true;
[L9806]   COND FALSE  !(PAUSED_Consts[this])
[L9816]               havoc addresses_s1709;
[L9817]               __var_57 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9818]               M_int_Ref[addresses_s1709][0] := __var_57;
[L9819]               __var_58 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9820]               M_int_Ref[addresses_s1709][1] := __var_58;
[L9821]               havoc amounts_s1709;
[L9822]               __var_59 := 48000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9823]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][0];
[L9824]               M_int_int[amounts_s1709][0] := __var_59;
[L9825]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][0];
[L9826]               __var_60 := 6000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9827]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][1];
[L9828]               M_int_int[amounts_s1709][1] := __var_60;
[L9829]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][1];
[L9830]               havoc freezes_s1709;
[L9831]               __var_61 := 0 % 18446744073709551616;
[L9832]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][0];
[L9833]               M_int_int[freezes_s1709][0] := __var_61;
[L9834]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][0];
[L9835]               __var_62 := 0 % 18446744073709551616;
[L9836]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][1];
[L9837]               M_int_int[freezes_s1709][1] := __var_62;
[L9838]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][1];
[L9839]               i_s1709 := 0;
[L9840]   COND TRUE   i_s1709 < Length[addresses_s1709]
[L9842]   COND FALSE  !(M_int_int[freezes_s1709][i_s1709] == 0)
[L9851]   COND TRUE   DType[this] == MainToken
[L9852]   CALL        call __var_64 := mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1709][i_s1709], M_int_int[amounts_s1709][i_s1709], M_int_int[freezes_s1709][i_s1709]);
[L9224]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12785]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L9224]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9225]   COND FALSE  !(revert)
[L9228]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12801]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L9228]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9229]   COND FALSE  !(revert)
[L9232]   CALL        call __var_48 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s1449);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L9232]   RET         call __var_48 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s1449);
[L9233]   COND FALSE  !(revert)
[L9236]               totalSupply__BasicToken[this] := __var_48;
[L9237]               __var_49 := _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9238]   COND FALSE  !(DType[this] == MainToken)
[L9243]   COND TRUE   DType[this] == FreezableMintableToken
[L9244]   CALL        call currentKey_s1449 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L9244]   RET         call currentKey_s1449 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L9245]   COND FALSE  !(revert)
[L9251]               currentKey_s1449 := currentKey_s1449;
[L9252]   CALL        call __var_50 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s1449], _amount_s1449);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L9252]   RET         call __var_50 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s1449], _amount_s1449);
[L9253]   COND FALSE  !(revert)
[L9256]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1449];
[L9257]               freezings_FreezableToken[this][currentKey_s1449] := __var_50;
[L9258]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s1449];
[L9259]   CALL        call __var_51 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s1449], _amount_s1449);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L9259]   RET         call __var_51 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s1449], _amount_s1449);
[L9260]   COND FALSE  !(revert)
[L9263]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s1449];
[L9264]               freezingBalance_FreezableToken[this][_to_s1449] := __var_51;
[L9265]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s1449];
[L9266]   COND FALSE  !(DType[this] == MainToken)
[L9271]   COND TRUE   DType[this] == FreezableMintableToken
[L9272]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449);
[L8713]   COND FALSE  !(!(_until_s1240 > now))
[L8717]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8718]   COND FALSE  !(DType[this] == MainToken)
[L8723]   COND TRUE   DType[this] == FreezableMintableToken
[L8724]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8724]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8725]   COND FALSE  !(revert)
[L8736]               key_s1240 := key_s1240;
[L8737]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8738]   COND FALSE  !(DType[this] == MainToken)
[L8743]   COND TRUE   DType[this] == FreezableMintableToken
[L8744]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8744]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8745]   COND FALSE  !(revert)
[L8756]               parentKey_s1240 := parentKey_s1240;
[L8757]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8758]   COND TRUE   next_s1240 == 0
[L8759]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8760]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8761]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L9272]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449);
[L9273]   COND FALSE  !(revert)
[L9279]               assert { :EventEmitted "Mint_FreezableMintableToken" } true;
[L9280]               assert { :EventEmitted "Freezed_FreezableMintableToken" } true;
[L9281]               assert { :EventEmitted "Transfer_FreezableMintableToken" } true;
[L9282]               __ret_0_ := true;
[L9852]   RET         call __var_64 := mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1709][i_s1709], M_int_int[amounts_s1709][i_s1709], M_int_int[freezes_s1709][i_s1709]);
[L9853]   COND FALSE  !(revert)
[L9859]               i_s1709 := (i_s1709 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9860]   COND FALSE  !(gas < 0)
[L9840]   COND FALSE  !(i_s1709 < Length[addresses_s1709])
[L9864]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9874]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12785]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14837]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14838]              assume !revert && gas >= 0;
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND TRUE   choice == 37
[L14590]              gas := gas - 21000;
[L14591]  COND TRUE   gas >= 0
[L14592]              assume msgvalue_MSG == 0;
[L14593]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14593]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14841]  RET         call CorralChoice_MainToken(this);

Loop:
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND FALSE  !(choice == 36)
[L14602]  COND FALSE  !(choice == 35)
[L14608]  COND FALSE  !(choice == 34)
[L14615]  COND FALSE  !(choice == 33)
[L14622]  COND FALSE  !(choice == 32)
[L14629]  COND FALSE  !(choice == 31)
[L14636]  COND FALSE  !(choice == 30)
[L14642]  COND FALSE  !(choice == 29)
[L14648]  COND FALSE  !(choice == 28)
[L14654]  COND FALSE  !(choice == 27)
[L14660]  COND FALSE  !(choice == 26)
[L14667]  COND FALSE  !(choice == 25)
[L14673]  COND FALSE  !(choice == 24)
[L14679]  COND FALSE  !(choice == 23)
[L14685]  COND FALSE  !(choice == 22)
[L14691]  COND FALSE  !(choice == 21)
[L14698]  COND TRUE   choice == 20
[L14699]              gas := gas - 21000;
[L14700]  COND TRUE   gas >= 0
[L14701]              assume _amount_s938 >= 0 && _amount_s938 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14702]              assume _until_s938 >= 0 && _until_s938 < 18446744073709551616;
[L14703]              assume msgvalue_MSG == 0;
[L14704]  CALL        call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2530]               havoc __exception;
[L2531]               revert := false;
[L2532]   COND FALSE  !(__exception)
[L2571]   CALL        call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L8138]               __var_26 := null;
[L8139]   COND FALSE  !(!(_to_s938 != null))
[L8143]   COND FALSE  !(!(_amount_s938 <= balances_BasicToken[this][msgsender_MSG]))
[L8147]   CALL        call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8147]   RET         call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L8148]   COND FALSE  !(revert)
[L8151]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8152]               balances_BasicToken[this][msgsender_MSG] := __var_27;
[L8153]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8154]               __var_28 := _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8155]   COND TRUE   DType[this] == MainToken
[L8156]   CALL        call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8156]   RET         call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8157]   COND FALSE  !(revert)
[L8173]               currentKey_s938 := currentKey_s938;
[L8174]   CALL        call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8174]   RET         call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L8175]   COND FALSE  !(revert)
[L8178]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s938];
[L8179]               freezings_FreezableToken[this][currentKey_s938] := __var_29;
[L8180]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s938];
[L8181]   CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8181]   RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L8182]   COND FALSE  !(revert)
[L8185]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s938];
[L8186]               freezingBalance_FreezableToken[this][_to_s938] := __var_30;
[L8187]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s938];
[L8188]   COND TRUE   DType[this] == MainToken
[L8189]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8713]   COND FALSE  !(!(_until_s1240 > now))
[L8717]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8718]   COND TRUE   DType[this] == MainToken
[L8719]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8719]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8720]   COND FALSE  !(revert)
[L8736]               key_s1240 := key_s1240;
[L8737]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8738]   COND TRUE   DType[this] == MainToken
[L8739]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8739]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8740]   COND FALSE  !(revert)
[L8756]               parentKey_s1240 := parentKey_s1240;
[L8757]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8758]   COND TRUE   next_s1240 == 0
[L8759]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8760]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8761]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L8189]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8190]   COND FALSE  !(revert)
[L8206]               assert { :EventEmitted "Transfer_FreezableToken" } true;
[L8207]               assert { :EventEmitted "Freezed_FreezableToken" } true;
[L2571]   RET         call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2572]               assume !revert && gas >= 0;
[L14704]  RET         call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L14841]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:16:41,729 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:16:41,730 INFO  L82        PathProgramCache]: Analyzing trace with hash 777884882, now seen corresponding path program 1 times
[2020-11-24 21:16:41,730 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:16:41,759 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:16:42,308 INFO  L134       CoverageAnalysis]: Checked inductivity of 9863 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9862 trivial. 0 not checked.
[2020-11-24 21:16:42,308 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:16:42,308 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-24 21:16:42,309 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:16:42,309 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-24 21:16:42,309 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-24 21:16:42,309 INFO  L87              Difference]: Start difference. First operand 6080 states and 6864 transitions. cyclomatic complexity: 810 Second operand 8 states.
[2020-11-24 21:16:42,448 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:16:42,448 INFO  L93              Difference]: Finished difference Result 6193 states and 6987 transitions.
[2020-11-24 21:16:42,448 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-24 21:16:42,448 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6193 states and 6987 transitions.
[2020-11-24 21:16:42,458 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:16:42,469 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6193 states to 6122 states and 6901 transitions.
[2020-11-24 21:16:42,469 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1127
[2020-11-24 21:16:42,469 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1127
[2020-11-24 21:16:42,469 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6122 states and 6901 transitions.
[2020-11-24 21:16:42,472 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:16:42,473 INFO  L728         BuchiCegarLoop]: Abstraction has 6122 states and 6901 transitions.
[2020-11-24 21:16:42,477 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6122 states and 6901 transitions.
[2020-11-24 21:16:42,500 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6122 to 6108.
[2020-11-24 21:16:42,500 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6108 states.
[2020-11-24 21:16:42,506 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6108 states to 6108 states and 6887 transitions.
[2020-11-24 21:16:42,506 INFO  L751         BuchiCegarLoop]: Abstraction has 6108 states and 6887 transitions.
[2020-11-24 21:16:42,506 INFO  L631         BuchiCegarLoop]: Abstraction has 6108 states and 6887 transitions.
[2020-11-24 21:16:42,506 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-24 21:16:42,506 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6108 states and 6887 transitions.
[2020-11-24 21:16:42,511 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:16:42,511 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:16:42,511 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:16:42,513 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:16:42,513 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14831]              assume null == 0;
[L14832]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14832]  RET         call this := FreshRefGenerator__success();
[L14833]              assume now >= 0;
[L14834]              assume DType[this] == MainToken;
[L14835]              assume msgvalue_MSG == 0;
[L14836]              gas := gas - 53000;
[L14837]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1142012261;
[L9314]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               CONTINUE_MINTING_Consts[this] := true;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9801]   COND FALSE  !(!!initialized_MainToken[this])
[L9805]               initialized_MainToken[this] := true;
[L9806]   COND FALSE  !(PAUSED_Consts[this])
[L9816]               havoc addresses_s1709;
[L9817]               __var_57 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9818]               M_int_Ref[addresses_s1709][0] := __var_57;
[L9819]               __var_58 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9820]               M_int_Ref[addresses_s1709][1] := __var_58;
[L9821]               havoc amounts_s1709;
[L9822]               __var_59 := 48000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9823]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][0];
[L9824]               M_int_int[amounts_s1709][0] := __var_59;
[L9825]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][0];
[L9826]               __var_60 := 6000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9827]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][1];
[L9828]               M_int_int[amounts_s1709][1] := __var_60;
[L9829]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][1];
[L9830]               havoc freezes_s1709;
[L9831]               __var_61 := 0 % 18446744073709551616;
[L9832]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][0];
[L9833]               M_int_int[freezes_s1709][0] := __var_61;
[L9834]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][0];
[L9835]               __var_62 := 0 % 18446744073709551616;
[L9836]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][1];
[L9837]               M_int_int[freezes_s1709][1] := __var_62;
[L9838]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][1];
[L9839]               i_s1709 := 0;
[L9840]   COND TRUE   i_s1709 < Length[addresses_s1709]
[L9842]   COND FALSE  !(M_int_int[freezes_s1709][i_s1709] == 0)
[L9851]   COND TRUE   DType[this] == MainToken
[L9852]   CALL        call __var_64 := mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1709][i_s1709], M_int_int[amounts_s1709][i_s1709], M_int_int[freezes_s1709][i_s1709]);
[L9224]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12785]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L9224]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9225]   COND FALSE  !(revert)
[L9228]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12801]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L9228]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9229]   COND FALSE  !(revert)
[L9232]   CALL        call __var_48 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s1449);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L9232]   RET         call __var_48 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s1449);
[L9233]   COND FALSE  !(revert)
[L9236]               totalSupply__BasicToken[this] := __var_48;
[L9237]               __var_49 := _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9238]   COND TRUE   DType[this] == MainToken
[L9239]   CALL        call currentKey_s1449 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L9239]   RET         call currentKey_s1449 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L9240]   COND FALSE  !(revert)
[L9251]               currentKey_s1449 := currentKey_s1449;
[L9252]   CALL        call __var_50 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s1449], _amount_s1449);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L9252]   RET         call __var_50 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s1449], _amount_s1449);
[L9253]   COND FALSE  !(revert)
[L9256]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1449];
[L9257]               freezings_FreezableToken[this][currentKey_s1449] := __var_50;
[L9258]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s1449];
[L9259]   CALL        call __var_51 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s1449], _amount_s1449);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L9259]   RET         call __var_51 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s1449], _amount_s1449);
[L9260]   COND FALSE  !(revert)
[L9263]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s1449];
[L9264]               freezingBalance_FreezableToken[this][_to_s1449] := __var_51;
[L9265]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s1449];
[L9266]   COND TRUE   DType[this] == MainToken
[L9267]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449);
[L8713]   COND FALSE  !(!(_until_s1240 > now))
[L8717]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8718]   COND FALSE  !(DType[this] == MainToken)
[L8723]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8728]   COND TRUE   DType[this] == FreezableToken
[L8729]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8729]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8730]   COND FALSE  !(revert)
[L8736]               key_s1240 := key_s1240;
[L8737]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8738]   COND FALSE  !(DType[this] == MainToken)
[L8743]   COND TRUE   DType[this] == FreezableMintableToken
[L8744]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8744]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8745]   COND FALSE  !(revert)
[L8756]               parentKey_s1240 := parentKey_s1240;
[L8757]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8758]   COND TRUE   next_s1240 == 0
[L8759]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8760]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8761]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L9267]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449);
[L9268]   COND FALSE  !(revert)
[L9279]               assert { :EventEmitted "Mint_FreezableMintableToken" } true;
[L9280]               assert { :EventEmitted "Freezed_FreezableMintableToken" } true;
[L9281]               assert { :EventEmitted "Transfer_FreezableMintableToken" } true;
[L9282]               __ret_0_ := true;
[L9852]   RET         call __var_64 := mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1709][i_s1709], M_int_int[amounts_s1709][i_s1709], M_int_int[freezes_s1709][i_s1709]);
[L9853]   COND FALSE  !(revert)
[L9859]               i_s1709 := (i_s1709 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9860]   COND FALSE  !(gas < 0)
[L9840]   COND FALSE  !(i_s1709 < Length[addresses_s1709])
[L9864]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9874]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12785]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14837]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14838]              assume !revert && gas >= 0;
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND TRUE   choice == 37
[L14590]              gas := gas - 21000;
[L14591]  COND TRUE   gas >= 0
[L14592]              assume msgvalue_MSG == 0;
[L14593]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14593]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14841]  RET         call CorralChoice_MainToken(this);

Loop:
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND FALSE  !(choice == 36)
[L14602]  COND FALSE  !(choice == 35)
[L14608]  COND FALSE  !(choice == 34)
[L14615]  COND FALSE  !(choice == 33)
[L14622]  COND FALSE  !(choice == 32)
[L14629]  COND FALSE  !(choice == 31)
[L14636]  COND FALSE  !(choice == 30)
[L14642]  COND FALSE  !(choice == 29)
[L14648]  COND FALSE  !(choice == 28)
[L14654]  COND FALSE  !(choice == 27)
[L14660]  COND FALSE  !(choice == 26)
[L14667]  COND FALSE  !(choice == 25)
[L14673]  COND FALSE  !(choice == 24)
[L14679]  COND FALSE  !(choice == 23)
[L14685]  COND FALSE  !(choice == 22)
[L14691]  COND FALSE  !(choice == 21)
[L14698]  COND FALSE  !(choice == 20)
[L14706]  COND TRUE   choice == 19
[L14707]              gas := gas - 21000;
[L14708]  COND TRUE   gas >= 0
[L14709]              assume msgvalue_MSG == 0;
[L14710]  CALL        call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L2624]               havoc __exception;
[L2625]               revert := false;
[L2626]   COND FALSE  !(__exception)
[L2665]   CALL        call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8314]               __var_31 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8315]   COND TRUE   DType[this] == MainToken
[L8316]   CALL        call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8316]   RET         call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8317]   COND FALSE  !(revert)
[L8333]               headKey_s1054 := headKey_s1054;
[L8334]               head_s1054 := chains_FreezableToken[this][headKey_s1054];
[L8335]   COND FALSE  !(!(head_s1054 != 0))
[L8339]               __var_32 := now % 18446744073709551616;
[L8340]   COND FALSE  !(!(now % 18446744073709551616 > head_s1054))
[L8344]               __var_33 := head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8345]   COND FALSE  !(DType[this] == MainToken)
[L8350]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8355]   COND TRUE   DType[this] == FreezableToken
[L8356]   CALL        call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8356]   RET         call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8357]   COND FALSE  !(revert)
[L8363]               currentKey_s1054 := currentKey_s1054;
[L8364]               next_s1054 := chains_FreezableToken[this][currentKey_s1054];
[L8365]               amount_s1054 := freezings_FreezableToken[this][currentKey_s1054];
[L8366]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1054];
[L8367]               freezings_FreezableToken[this][currentKey_s1054] := 0;
[L8368]   CALL        call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8368]   RET         call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L8369]   COND FALSE  !(revert)
[L8372]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8373]               balances_BasicToken[this][msgsender_MSG] := __var_34;
[L8374]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8375]   CALL        call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8375]   RET         call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L8376]   COND FALSE  !(revert)
[L8379]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][msgsender_MSG];
[L8380]               freezingBalance_FreezableToken[this][msgsender_MSG] := __var_35;
[L8381]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][msgsender_MSG];
[L8382]   COND TRUE   next_s1054 == 0
[L8383]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][headKey_s1054];
[L8384]               chains_FreezableToken[this][headKey_s1054] := 0;
[L8392]               assert { :EventEmitted "Released_FreezableToken" } true;
[L2665]   RET         call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2666]               assume !revert && gas >= 0;
[L14710]  RET         call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L14841]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:16:42,519 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:16:42,520 INFO  L82        PathProgramCache]: Analyzing trace with hash -909431455, now seen corresponding path program 1 times
[2020-11-24 21:16:42,520 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:16:42,548 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:16:43,059 INFO  L134       CoverageAnalysis]: Checked inductivity of 9863 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9862 trivial. 0 not checked.
[2020-11-24 21:16:43,059 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:16:43,059 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:16:43,060 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:16:43,060 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:16:43,060 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:16:43,060 INFO  L87              Difference]: Start difference. First operand 6108 states and 6887 transitions. cyclomatic complexity: 805 Second operand 3 states.
[2020-11-24 21:16:43,111 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:16:43,111 INFO  L93              Difference]: Finished difference Result 6153 states and 6935 transitions.
[2020-11-24 21:16:43,111 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:16:43,111 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6153 states and 6935 transitions.
[2020-11-24 21:16:43,120 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:16:43,130 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6153 states to 6153 states and 6935 transitions.
[2020-11-24 21:16:43,131 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1130
[2020-11-24 21:16:43,131 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1130
[2020-11-24 21:16:43,131 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 6153 states and 6935 transitions.
[2020-11-24 21:16:43,134 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:16:43,134 INFO  L728         BuchiCegarLoop]: Abstraction has 6153 states and 6935 transitions.
[2020-11-24 21:16:43,138 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 6153 states and 6935 transitions.
[2020-11-24 21:16:43,161 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 6153 to 6108.
[2020-11-24 21:16:43,161 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 6108 states.
[2020-11-24 21:16:43,166 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 6108 states to 6108 states and 6878 transitions.
[2020-11-24 21:16:43,167 INFO  L751         BuchiCegarLoop]: Abstraction has 6108 states and 6878 transitions.
[2020-11-24 21:16:43,167 INFO  L631         BuchiCegarLoop]: Abstraction has 6108 states and 6878 transitions.
[2020-11-24 21:16:43,167 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-24 21:16:43,167 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 6108 states and 6878 transitions.
[2020-11-24 21:16:43,172 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:16:43,172 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:16:43,172 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:16:43,174 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:16:43,174 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14831]              assume null == 0;
[L14832]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14832]  RET         call this := FreshRefGenerator__success();
[L14833]              assume now >= 0;
[L14834]              assume DType[this] == MainToken;
[L14835]              assume msgvalue_MSG == 0;
[L14836]              gas := gas - 53000;
[L14837]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1142012261;
[L9314]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               CONTINUE_MINTING_Consts[this] := true;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9801]   COND FALSE  !(!!initialized_MainToken[this])
[L9805]               initialized_MainToken[this] := true;
[L9806]   COND FALSE  !(PAUSED_Consts[this])
[L9816]               havoc addresses_s1709;
[L9817]               __var_57 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9818]               M_int_Ref[addresses_s1709][0] := __var_57;
[L9819]               __var_58 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9820]               M_int_Ref[addresses_s1709][1] := __var_58;
[L9821]               havoc amounts_s1709;
[L9822]               __var_59 := 48000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9823]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][0];
[L9824]               M_int_int[amounts_s1709][0] := __var_59;
[L9825]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][0];
[L9826]               __var_60 := 6000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9827]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][1];
[L9828]               M_int_int[amounts_s1709][1] := __var_60;
[L9829]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][1];
[L9830]               havoc freezes_s1709;
[L9831]               __var_61 := 0 % 18446744073709551616;
[L9832]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][0];
[L9833]               M_int_int[freezes_s1709][0] := __var_61;
[L9834]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][0];
[L9835]               __var_62 := 0 % 18446744073709551616;
[L9836]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][1];
[L9837]               M_int_int[freezes_s1709][1] := __var_62;
[L9838]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][1];
[L9839]               i_s1709 := 0;
[L9840]   COND TRUE   i_s1709 < Length[addresses_s1709]
[L9842]   COND FALSE  !(M_int_int[freezes_s1709][i_s1709] == 0)
[L9851]   COND TRUE   DType[this] == MainToken
[L9852]   CALL        call __var_64 := mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1709][i_s1709], M_int_int[amounts_s1709][i_s1709], M_int_int[freezes_s1709][i_s1709]);
[L9224]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12785]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L9224]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9225]   COND FALSE  !(revert)
[L9228]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12801]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L9228]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9229]   COND FALSE  !(revert)
[L9232]   CALL        call __var_48 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s1449);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L9232]   RET         call __var_48 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s1449);
[L9233]   COND FALSE  !(revert)
[L9236]               totalSupply__BasicToken[this] := __var_48;
[L9237]               __var_49 := _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9238]   COND TRUE   DType[this] == MainToken
[L9239]   CALL        call currentKey_s1449 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L9239]   RET         call currentKey_s1449 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L9240]   COND FALSE  !(revert)
[L9251]               currentKey_s1449 := currentKey_s1449;
[L9252]   CALL        call __var_50 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s1449], _amount_s1449);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L9252]   RET         call __var_50 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s1449], _amount_s1449);
[L9253]   COND FALSE  !(revert)
[L9256]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1449];
[L9257]               freezings_FreezableToken[this][currentKey_s1449] := __var_50;
[L9258]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s1449];
[L9259]   CALL        call __var_51 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s1449], _amount_s1449);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L9259]   RET         call __var_51 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s1449], _amount_s1449);
[L9260]   COND FALSE  !(revert)
[L9263]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s1449];
[L9264]               freezingBalance_FreezableToken[this][_to_s1449] := __var_51;
[L9265]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s1449];
[L9266]   COND TRUE   DType[this] == MainToken
[L9267]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449);
[L8713]   COND FALSE  !(!(_until_s1240 > now))
[L8717]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8718]   COND TRUE   DType[this] == MainToken
[L8719]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8719]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8720]   COND FALSE  !(revert)
[L8736]               key_s1240 := key_s1240;
[L8737]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8738]   COND TRUE   DType[this] == MainToken
[L8739]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8739]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8740]   COND FALSE  !(revert)
[L8756]               parentKey_s1240 := parentKey_s1240;
[L8757]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8758]   COND TRUE   next_s1240 == 0
[L8759]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8760]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8761]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L9267]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449);
[L9268]   COND FALSE  !(revert)
[L9279]               assert { :EventEmitted "Mint_FreezableMintableToken" } true;
[L9280]               assert { :EventEmitted "Freezed_FreezableMintableToken" } true;
[L9281]               assert { :EventEmitted "Transfer_FreezableMintableToken" } true;
[L9282]               __ret_0_ := true;
[L9852]   RET         call __var_64 := mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG, M_int_Ref[addresses_s1709][i_s1709], M_int_int[amounts_s1709][i_s1709], M_int_int[freezes_s1709][i_s1709]);
[L9853]   COND FALSE  !(revert)
[L9859]               i_s1709 := (i_s1709 + 1) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9860]   COND FALSE  !(gas < 0)
[L9840]   COND FALSE  !(i_s1709 < Length[addresses_s1709])
[L9864]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9874]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12785]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14837]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14838]              assume !revert && gas >= 0;
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND TRUE   choice == 37
[L14590]              gas := gas - 21000;
[L14591]  COND TRUE   gas >= 0
[L14592]              assume msgvalue_MSG == 0;
[L14593]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14593]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14841]  RET         call CorralChoice_MainToken(this);

Loop:
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND FALSE  !(choice == 36)
[L14602]  COND FALSE  !(choice == 35)
[L14608]  COND FALSE  !(choice == 34)
[L14615]  COND FALSE  !(choice == 33)
[L14622]  COND FALSE  !(choice == 32)
[L14629]  COND FALSE  !(choice == 31)
[L14636]  COND FALSE  !(choice == 30)
[L14642]  COND FALSE  !(choice == 29)
[L14648]  COND FALSE  !(choice == 28)
[L14654]  COND FALSE  !(choice == 27)
[L14660]  COND FALSE  !(choice == 26)
[L14667]  COND FALSE  !(choice == 25)
[L14673]  COND FALSE  !(choice == 24)
[L14679]  COND FALSE  !(choice == 23)
[L14685]  COND FALSE  !(choice == 22)
[L14691]  COND FALSE  !(choice == 21)
[L14698]  COND TRUE   choice == 20
[L14699]              gas := gas - 21000;
[L14700]  COND TRUE   gas >= 0
[L14701]              assume _amount_s938 >= 0 && _amount_s938 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14702]              assume _until_s938 >= 0 && _until_s938 < 18446744073709551616;
[L14703]              assume msgvalue_MSG == 0;
[L14704]  CALL        call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2530]               havoc __exception;
[L2531]               revert := false;
[L2532]   COND FALSE  !(__exception)
[L2571]   CALL        call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L8138]               __var_26 := null;
[L8139]   COND FALSE  !(!(_to_s938 != null))
[L8143]   COND FALSE  !(!(_amount_s938 <= balances_BasicToken[this][msgsender_MSG]))
[L8147]   CALL        call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8147]   RET         call __var_27 := sub~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], _amount_s938);
[L8148]   COND FALSE  !(revert)
[L8151]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8152]               balances_BasicToken[this][msgsender_MSG] := __var_27;
[L8153]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8154]               __var_28 := _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8155]   COND TRUE   DType[this] == MainToken
[L8156]   CALL        call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8156]   RET         call currentKey_s938 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8157]   COND FALSE  !(revert)
[L8173]               currentKey_s938 := currentKey_s938;
[L8174]   CALL        call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8174]   RET         call __var_29 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s938], _amount_s938);
[L8175]   COND FALSE  !(revert)
[L8178]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s938];
[L8179]               freezings_FreezableToken[this][currentKey_s938] := __var_29;
[L8180]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s938];
[L8181]   CALL        call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8181]   RET         call __var_30 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s938], _amount_s938);
[L8182]   COND FALSE  !(revert)
[L8185]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s938];
[L8186]               freezingBalance_FreezableToken[this][_to_s938] := __var_30;
[L8187]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s938];
[L8188]   COND TRUE   DType[this] == MainToken
[L8189]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8713]   COND FALSE  !(!(_until_s1240 > now))
[L8717]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8718]   COND TRUE   DType[this] == MainToken
[L8719]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8719]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8720]   COND FALSE  !(revert)
[L8736]               key_s1240 := key_s1240;
[L8737]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8738]   COND TRUE   DType[this] == MainToken
[L8739]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8739]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8740]   COND FALSE  !(revert)
[L8756]               parentKey_s1240 := parentKey_s1240;
[L8757]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8758]   COND TRUE   next_s1240 == 0
[L8759]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8760]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8761]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L8189]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _until_s938);
[L8190]   COND FALSE  !(revert)
[L8206]               assert { :EventEmitted "Transfer_FreezableToken" } true;
[L8207]               assert { :EventEmitted "Freezed_FreezableToken" } true;
[L2571]   RET         call freezeTo~address~uint256~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L2572]               assume !revert && gas >= 0;
[L14704]  RET         call freezeTo~address~uint256~uint64_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _to_s938, _amount_s938, _until_s938);
[L14841]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:16:43,180 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:16:43,180 INFO  L82        PathProgramCache]: Analyzing trace with hash 1677040750, now seen corresponding path program 1 times
[2020-11-24 21:16:43,181 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:16:43,210 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:16:43,739 INFO  L134       CoverageAnalysis]: Checked inductivity of 9863 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9862 trivial. 0 not checked.
[2020-11-24 21:16:43,739 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:16:43,739 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 21:16:43,740 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:16:43,740 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 21:16:43,740 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-24 21:16:43,740 INFO  L87              Difference]: Start difference. First operand 6108 states and 6878 transitions. cyclomatic complexity: 796 Second operand 5 states.
[2020-11-24 21:16:43,777 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:16:43,777 INFO  L93              Difference]: Finished difference Result 5928 states and 6664 transitions.
[2020-11-24 21:16:43,777 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-24 21:16:43,777 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5928 states and 6664 transitions.
[2020-11-24 21:16:43,786 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:16:43,795 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5928 states to 5928 states and 6664 transitions.
[2020-11-24 21:16:43,796 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1115
[2020-11-24 21:16:43,796 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1115
[2020-11-24 21:16:43,796 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5928 states and 6664 transitions.
[2020-11-24 21:16:43,799 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:16:43,799 INFO  L728         BuchiCegarLoop]: Abstraction has 5928 states and 6664 transitions.
[2020-11-24 21:16:43,803 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5928 states and 6664 transitions.
[2020-11-24 21:16:43,824 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5928 to 5926.
[2020-11-24 21:16:43,824 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5926 states.
[2020-11-24 21:16:43,830 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5926 states to 5926 states and 6662 transitions.
[2020-11-24 21:16:43,830 INFO  L751         BuchiCegarLoop]: Abstraction has 5926 states and 6662 transitions.
[2020-11-24 21:16:43,830 INFO  L631         BuchiCegarLoop]: Abstraction has 5926 states and 6662 transitions.
[2020-11-24 21:16:43,830 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-11-24 21:16:43,830 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5926 states and 6662 transitions.
[2020-11-24 21:16:43,835 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:16:43,835 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:16:43,835 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:16:43,837 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:16:43,837 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14831]              assume null == 0;
[L14832]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14832]  RET         call this := FreshRefGenerator__success();
[L14833]              assume now >= 0;
[L14834]              assume DType[this] == MainToken;
[L14835]              assume msgvalue_MSG == 0;
[L14836]              gas := gas - 53000;
[L14837]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1142012261;
[L9314]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               CONTINUE_MINTING_Consts[this] := true;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9801]   COND FALSE  !(!!initialized_MainToken[this])
[L9805]               initialized_MainToken[this] := true;
[L9806]   COND FALSE  !(PAUSED_Consts[this])
[L9816]               havoc addresses_s1709;
[L9817]               __var_57 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9818]               M_int_Ref[addresses_s1709][0] := __var_57;
[L9819]               __var_58 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9820]               M_int_Ref[addresses_s1709][1] := __var_58;
[L9821]               havoc amounts_s1709;
[L9822]               __var_59 := 48000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9823]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][0];
[L9824]               M_int_int[amounts_s1709][0] := __var_59;
[L9825]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][0];
[L9826]               __var_60 := 6000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9827]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][1];
[L9828]               M_int_int[amounts_s1709][1] := __var_60;
[L9829]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][1];
[L9830]               havoc freezes_s1709;
[L9831]               __var_61 := 0 % 18446744073709551616;
[L9832]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][0];
[L9833]               M_int_int[freezes_s1709][0] := __var_61;
[L9834]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][0];
[L9835]               __var_62 := 0 % 18446744073709551616;
[L9836]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][1];
[L9837]               M_int_int[freezes_s1709][1] := __var_62;
[L9838]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][1];
[L9839]               i_s1709 := 0;
[L9840]   COND FALSE  !(i_s1709 < Length[addresses_s1709])
[L9864]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9874]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12785]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14837]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14838]              assume !revert && gas >= 0;
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND FALSE  !(choice == 36)
[L14602]  COND FALSE  !(choice == 35)
[L14608]  COND FALSE  !(choice == 34)
[L14615]  COND FALSE  !(choice == 33)
[L14622]  COND FALSE  !(choice == 32)
[L14629]  COND FALSE  !(choice == 31)
[L14636]  COND FALSE  !(choice == 30)
[L14642]  COND FALSE  !(choice == 29)
[L14648]  COND FALSE  !(choice == 28)
[L14654]  COND FALSE  !(choice == 27)
[L14660]  COND FALSE  !(choice == 26)
[L14667]  COND FALSE  !(choice == 25)
[L14673]  COND FALSE  !(choice == 24)
[L14679]  COND FALSE  !(choice == 23)
[L14685]  COND FALSE  !(choice == 22)
[L14691]  COND FALSE  !(choice == 21)
[L14698]  COND FALSE  !(choice == 20)
[L14706]  COND FALSE  !(choice == 19)
[L14712]  COND FALSE  !(choice == 18)
[L14718]  COND FALSE  !(choice == 17)
[L14725]  COND FALSE  !(choice == 16)
[L14731]  COND FALSE  !(choice == 15)
[L14737]  COND FALSE  !(choice == 14)
[L14743]  COND TRUE   choice == 13
[L14744]              gas := gas - 21000;
[L14745]  COND TRUE   gas >= 0
[L14746]              assume _amount_s1449 >= 0 && _amount_s1449 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14747]              assume _until_s1449 >= 0 && _until_s1449 < 18446744073709551616;
[L14748]              assume msgvalue_MSG == 0;
[L14749]  CALL        call __ret_0_mintAndFreeze := mintAndFreeze~address~uint256~uint64_FreezableMintableToken(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L3457]               havoc __exception;
[L3458]               revert := false;
[L3459]   COND FALSE  !(__exception)
[L3498]   CALL        call __ret_0_ := mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L9224]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12785]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L9224]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9225]   COND FALSE  !(revert)
[L9228]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12801]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L9228]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9229]   COND FALSE  !(revert)
[L9232]   CALL        call __var_48 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s1449);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L9232]   RET         call __var_48 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s1449);
[L9233]   COND FALSE  !(revert)
[L9236]               totalSupply__BasicToken[this] := __var_48;
[L9237]               __var_49 := _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9238]   COND TRUE   DType[this] == MainToken
[L9239]   CALL        call currentKey_s1449 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L9239]   RET         call currentKey_s1449 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L9240]   COND FALSE  !(revert)
[L9251]               currentKey_s1449 := currentKey_s1449;
[L9252]   CALL        call __var_50 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s1449], _amount_s1449);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L9252]   RET         call __var_50 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s1449], _amount_s1449);
[L9253]   COND FALSE  !(revert)
[L9256]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1449];
[L9257]               freezings_FreezableToken[this][currentKey_s1449] := __var_50;
[L9258]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s1449];
[L9259]   CALL        call __var_51 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s1449], _amount_s1449);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L9259]   RET         call __var_51 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s1449], _amount_s1449);
[L9260]   COND FALSE  !(revert)
[L9263]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s1449];
[L9264]               freezingBalance_FreezableToken[this][_to_s1449] := __var_51;
[L9265]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s1449];
[L9266]   COND FALSE  !(DType[this] == MainToken)
[L9271]   COND TRUE   DType[this] == FreezableMintableToken
[L9272]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449);
[L8713]   COND FALSE  !(!(_until_s1240 > now))
[L8717]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8718]   COND FALSE  !(DType[this] == MainToken)
[L8723]   COND TRUE   DType[this] == FreezableMintableToken
[L8724]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8724]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8725]   COND FALSE  !(revert)
[L8736]               key_s1240 := key_s1240;
[L8737]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8738]   COND FALSE  !(DType[this] == MainToken)
[L8743]   COND TRUE   DType[this] == FreezableMintableToken
[L8744]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8744]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8745]   COND FALSE  !(revert)
[L8756]               parentKey_s1240 := parentKey_s1240;
[L8757]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8758]   COND TRUE   next_s1240 == 0
[L8759]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8760]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8761]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L9272]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449);
[L9273]   COND FALSE  !(revert)
[L9279]               assert { :EventEmitted "Mint_FreezableMintableToken" } true;
[L9280]               assert { :EventEmitted "Freezed_FreezableMintableToken" } true;
[L9281]               assert { :EventEmitted "Transfer_FreezableMintableToken" } true;
[L9282]               __ret_0_ := true;
[L3498]   RET         call __ret_0_ := mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L3499]               assume !revert && gas >= 0;
[L14749]  RET         call __ret_0_mintAndFreeze := mintAndFreeze~address~uint256~uint64_FreezableMintableToken(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L14841]  RET         call CorralChoice_MainToken(this);
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND TRUE   choice == 37
[L14590]              gas := gas - 21000;
[L14591]  COND TRUE   gas >= 0
[L14592]              assume msgvalue_MSG == 0;
[L14593]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14593]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14841]  RET         call CorralChoice_MainToken(this);

Loop:
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND TRUE   choice == 37
[L14590]              gas := gas - 21000;
[L14591]  COND TRUE   gas >= 0
[L14592]              assume msgvalue_MSG == 0;
[L14593]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14593]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14841]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:16:43,844 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:16:43,844 INFO  L82        PathProgramCache]: Analyzing trace with hash -2067198781, now seen corresponding path program 1 times
[2020-11-24 21:16:43,845 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:16:43,877 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:16:44,447 INFO  L134       CoverageAnalysis]: Checked inductivity of 9951 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9950 trivial. 0 not checked.
[2020-11-24 21:16:44,447 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:16:44,447 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 21:16:44,448 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:16:44,448 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 21:16:44,448 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 21:16:44,448 INFO  L87              Difference]: Start difference. First operand 5926 states and 6662 transitions. cyclomatic complexity: 762 Second operand 3 states.
[2020-11-24 21:16:44,489 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:16:44,489 INFO  L93              Difference]: Finished difference Result 5938 states and 6672 transitions.
[2020-11-24 21:16:44,489 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 21:16:44,489 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5938 states and 6672 transitions.
[2020-11-24 21:16:44,498 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:16:44,507 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5938 states to 5938 states and 6672 transitions.
[2020-11-24 21:16:44,507 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1127
[2020-11-24 21:16:44,508 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1127
[2020-11-24 21:16:44,508 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5938 states and 6672 transitions.
[2020-11-24 21:16:44,511 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:16:44,511 INFO  L728         BuchiCegarLoop]: Abstraction has 5938 states and 6672 transitions.
[2020-11-24 21:16:44,515 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5938 states and 6672 transitions.
[2020-11-24 21:16:44,536 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5938 to 5926.
[2020-11-24 21:16:44,536 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5926 states.
[2020-11-24 21:16:44,542 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5926 states to 5926 states and 6660 transitions.
[2020-11-24 21:16:44,542 INFO  L751         BuchiCegarLoop]: Abstraction has 5926 states and 6660 transitions.
[2020-11-24 21:16:44,542 INFO  L631         BuchiCegarLoop]: Abstraction has 5926 states and 6660 transitions.
[2020-11-24 21:16:44,542 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-11-24 21:16:44,542 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5926 states and 6660 transitions.
[2020-11-24 21:16:44,547 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:16:44,547 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:16:44,547 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:16:44,550 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:16:44,550 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14831]              assume null == 0;
[L14832]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14832]  RET         call this := FreshRefGenerator__success();
[L14833]              assume now >= 0;
[L14834]              assume DType[this] == MainToken;
[L14835]              assume msgvalue_MSG == 0;
[L14836]              gas := gas - 53000;
[L14837]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1142012261;
[L9314]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               CONTINUE_MINTING_Consts[this] := true;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9801]   COND FALSE  !(!!initialized_MainToken[this])
[L9805]               initialized_MainToken[this] := true;
[L9806]   COND FALSE  !(PAUSED_Consts[this])
[L9816]               havoc addresses_s1709;
[L9817]               __var_57 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9818]               M_int_Ref[addresses_s1709][0] := __var_57;
[L9819]               __var_58 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9820]               M_int_Ref[addresses_s1709][1] := __var_58;
[L9821]               havoc amounts_s1709;
[L9822]               __var_59 := 48000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9823]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][0];
[L9824]               M_int_int[amounts_s1709][0] := __var_59;
[L9825]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][0];
[L9826]               __var_60 := 6000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9827]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][1];
[L9828]               M_int_int[amounts_s1709][1] := __var_60;
[L9829]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][1];
[L9830]               havoc freezes_s1709;
[L9831]               __var_61 := 0 % 18446744073709551616;
[L9832]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][0];
[L9833]               M_int_int[freezes_s1709][0] := __var_61;
[L9834]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][0];
[L9835]               __var_62 := 0 % 18446744073709551616;
[L9836]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][1];
[L9837]               M_int_int[freezes_s1709][1] := __var_62;
[L9838]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][1];
[L9839]               i_s1709 := 0;
[L9840]   COND FALSE  !(i_s1709 < Length[addresses_s1709])
[L9864]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9874]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12785]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14837]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14838]              assume !revert && gas >= 0;
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND FALSE  !(choice == 36)
[L14602]  COND FALSE  !(choice == 35)
[L14608]  COND FALSE  !(choice == 34)
[L14615]  COND FALSE  !(choice == 33)
[L14622]  COND FALSE  !(choice == 32)
[L14629]  COND FALSE  !(choice == 31)
[L14636]  COND FALSE  !(choice == 30)
[L14642]  COND FALSE  !(choice == 29)
[L14648]  COND FALSE  !(choice == 28)
[L14654]  COND FALSE  !(choice == 27)
[L14660]  COND FALSE  !(choice == 26)
[L14667]  COND FALSE  !(choice == 25)
[L14673]  COND FALSE  !(choice == 24)
[L14679]  COND FALSE  !(choice == 23)
[L14685]  COND FALSE  !(choice == 22)
[L14691]  COND FALSE  !(choice == 21)
[L14698]  COND FALSE  !(choice == 20)
[L14706]  COND FALSE  !(choice == 19)
[L14712]  COND FALSE  !(choice == 18)
[L14718]  COND FALSE  !(choice == 17)
[L14725]  COND FALSE  !(choice == 16)
[L14731]  COND FALSE  !(choice == 15)
[L14737]  COND FALSE  !(choice == 14)
[L14743]  COND TRUE   choice == 13
[L14744]              gas := gas - 21000;
[L14745]  COND TRUE   gas >= 0
[L14746]              assume _amount_s1449 >= 0 && _amount_s1449 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14747]              assume _until_s1449 >= 0 && _until_s1449 < 18446744073709551616;
[L14748]              assume msgvalue_MSG == 0;
[L14749]  CALL        call __ret_0_mintAndFreeze := mintAndFreeze~address~uint256~uint64_FreezableMintableToken(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L3457]               havoc __exception;
[L3458]               revert := false;
[L3459]   COND FALSE  !(__exception)
[L3498]   CALL        call __ret_0_ := mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L9224]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12785]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L9224]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9225]   COND FALSE  !(revert)
[L9228]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12801]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L9228]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9229]   COND FALSE  !(revert)
[L9232]   CALL        call __var_48 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s1449);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L9232]   RET         call __var_48 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s1449);
[L9233]   COND FALSE  !(revert)
[L9236]               totalSupply__BasicToken[this] := __var_48;
[L9237]               __var_49 := _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9238]   COND TRUE   DType[this] == MainToken
[L9239]   CALL        call currentKey_s1449 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L9239]   RET         call currentKey_s1449 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L9240]   COND FALSE  !(revert)
[L9251]               currentKey_s1449 := currentKey_s1449;
[L9252]   CALL        call __var_50 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s1449], _amount_s1449);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L9252]   RET         call __var_50 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s1449], _amount_s1449);
[L9253]   COND FALSE  !(revert)
[L9256]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1449];
[L9257]               freezings_FreezableToken[this][currentKey_s1449] := __var_50;
[L9258]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s1449];
[L9259]   CALL        call __var_51 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s1449], _amount_s1449);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L9259]   RET         call __var_51 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s1449], _amount_s1449);
[L9260]   COND FALSE  !(revert)
[L9263]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s1449];
[L9264]               freezingBalance_FreezableToken[this][_to_s1449] := __var_51;
[L9265]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s1449];
[L9266]   COND TRUE   DType[this] == MainToken
[L9267]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449);
[L8713]   COND FALSE  !(!(_until_s1240 > now))
[L8717]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8718]   COND FALSE  !(DType[this] == MainToken)
[L8723]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8728]   COND TRUE   DType[this] == FreezableToken
[L8729]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8729]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8730]   COND FALSE  !(revert)
[L8736]               key_s1240 := key_s1240;
[L8737]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8738]   COND FALSE  !(DType[this] == MainToken)
[L8743]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8748]   COND TRUE   DType[this] == FreezableToken
[L8749]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8749]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8750]   COND FALSE  !(revert)
[L8756]               parentKey_s1240 := parentKey_s1240;
[L8757]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8758]   COND TRUE   next_s1240 == 0
[L8759]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8760]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8761]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L9267]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449);
[L9268]   COND FALSE  !(revert)
[L9279]               assert { :EventEmitted "Mint_FreezableMintableToken" } true;
[L9280]               assert { :EventEmitted "Freezed_FreezableMintableToken" } true;
[L9281]               assert { :EventEmitted "Transfer_FreezableMintableToken" } true;
[L9282]               __ret_0_ := true;
[L3498]   RET         call __ret_0_ := mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L3499]               assume !revert && gas >= 0;
[L14749]  RET         call __ret_0_mintAndFreeze := mintAndFreeze~address~uint256~uint64_FreezableMintableToken(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L14841]  RET         call CorralChoice_MainToken(this);
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND TRUE   choice == 37
[L14590]              gas := gas - 21000;
[L14591]  COND TRUE   gas >= 0
[L14592]              assume msgvalue_MSG == 0;
[L14593]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14593]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14841]  RET         call CorralChoice_MainToken(this);

Loop:
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND FALSE  !(choice == 36)
[L14602]  COND FALSE  !(choice == 35)
[L14608]  COND FALSE  !(choice == 34)
[L14615]  COND FALSE  !(choice == 33)
[L14622]  COND FALSE  !(choice == 32)
[L14629]  COND FALSE  !(choice == 31)
[L14636]  COND FALSE  !(choice == 30)
[L14642]  COND FALSE  !(choice == 29)
[L14648]  COND FALSE  !(choice == 28)
[L14654]  COND FALSE  !(choice == 27)
[L14660]  COND FALSE  !(choice == 26)
[L14667]  COND FALSE  !(choice == 25)
[L14673]  COND FALSE  !(choice == 24)
[L14679]  COND FALSE  !(choice == 23)
[L14685]  COND FALSE  !(choice == 22)
[L14691]  COND FALSE  !(choice == 21)
[L14698]  COND FALSE  !(choice == 20)
[L14706]  COND TRUE   choice == 19
[L14707]              gas := gas - 21000;
[L14708]  COND TRUE   gas >= 0
[L14709]              assume msgvalue_MSG == 0;
[L14710]  CALL        call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L2624]               havoc __exception;
[L2625]               revert := false;
[L2626]   COND FALSE  !(__exception)
[L2665]   CALL        call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8314]               __var_31 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8315]   COND FALSE  !(DType[this] == MainToken)
[L8320]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8325]   COND TRUE   DType[this] == FreezableToken
[L8326]   CALL        call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8326]   RET         call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8327]   COND FALSE  !(revert)
[L8333]               headKey_s1054 := headKey_s1054;
[L8334]               head_s1054 := chains_FreezableToken[this][headKey_s1054];
[L8335]   COND FALSE  !(!(head_s1054 != 0))
[L8339]               __var_32 := now % 18446744073709551616;
[L8340]   COND FALSE  !(!(now % 18446744073709551616 > head_s1054))
[L8344]               __var_33 := head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8345]   COND FALSE  !(DType[this] == MainToken)
[L8350]   COND FALSE  !(DType[this] == FreezableMintableToken)
[L8355]   COND TRUE   DType[this] == FreezableToken
[L8356]   CALL        call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8356]   RET         call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8357]   COND FALSE  !(revert)
[L8363]               currentKey_s1054 := currentKey_s1054;
[L8364]               next_s1054 := chains_FreezableToken[this][currentKey_s1054];
[L8365]               amount_s1054 := freezings_FreezableToken[this][currentKey_s1054];
[L8366]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1054];
[L8367]               freezings_FreezableToken[this][currentKey_s1054] := 0;
[L8368]   CALL        call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8368]   RET         call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L8369]   COND FALSE  !(revert)
[L8372]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8373]               balances_BasicToken[this][msgsender_MSG] := __var_34;
[L8374]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8375]   CALL        call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8375]   RET         call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L8376]   COND FALSE  !(revert)
[L8379]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][msgsender_MSG];
[L8380]               freezingBalance_FreezableToken[this][msgsender_MSG] := __var_35;
[L8381]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][msgsender_MSG];
[L8382]   COND TRUE   next_s1054 == 0
[L8383]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][headKey_s1054];
[L8384]               chains_FreezableToken[this][headKey_s1054] := 0;
[L8392]               assert { :EventEmitted "Released_FreezableToken" } true;
[L2665]   RET         call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2666]               assume !revert && gas >= 0;
[L14710]  RET         call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L14841]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:16:44,557 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:16:44,557 INFO  L82        PathProgramCache]: Analyzing trace with hash -721698680, now seen corresponding path program 1 times
[2020-11-24 21:16:44,558 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:16:44,588 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:16:45,192 INFO  L134       CoverageAnalysis]: Checked inductivity of 9951 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 9950 trivial. 0 not checked.
[2020-11-24 21:16:45,192 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 21:16:45,192 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-24 21:16:45,193 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 21:16:45,193 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-24 21:16:45,193 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-24 21:16:45,193 INFO  L87              Difference]: Start difference. First operand 5926 states and 6660 transitions. cyclomatic complexity: 760 Second operand 7 states.
[2020-11-24 21:16:45,320 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 21:16:45,320 INFO  L93              Difference]: Finished difference Result 6036 states and 6778 transitions.
[2020-11-24 21:16:45,320 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 21:16:45,320 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6036 states and 6778 transitions.
[2020-11-24 21:16:45,330 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:16:45,340 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6036 states to 5916 states and 6647 transitions.
[2020-11-24 21:16:45,340 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1115
[2020-11-24 21:16:45,340 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1115
[2020-11-24 21:16:45,340 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5916 states and 6647 transitions.
[2020-11-24 21:16:45,343 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 21:16:45,344 INFO  L728         BuchiCegarLoop]: Abstraction has 5916 states and 6647 transitions.
[2020-11-24 21:16:45,348 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5916 states and 6647 transitions.
[2020-11-24 21:16:45,369 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5916 to 5916.
[2020-11-24 21:16:45,369 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5916 states.
[2020-11-24 21:16:45,374 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5916 states to 5916 states and 6647 transitions.
[2020-11-24 21:16:45,374 INFO  L751         BuchiCegarLoop]: Abstraction has 5916 states and 6647 transitions.
[2020-11-24 21:16:45,374 INFO  L631         BuchiCegarLoop]: Abstraction has 5916 states and 6647 transitions.
[2020-11-24 21:16:45,374 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-11-24 21:16:45,374 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5916 states and 6647 transitions.
[2020-11-24 21:16:45,380 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-24 21:16:45,380 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 21:16:45,380 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 21:16:45,382 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 21:16:45,382 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_balanceOf_FreezableToken0 := false;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]      CALL        call main();
[L14831]              assume null == 0;
[L14832]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14832]  RET         call this := FreshRefGenerator__success();
[L14833]              assume now >= 0;
[L14834]              assume DType[this] == MainToken;
[L14835]              assume msgvalue_MSG == 0;
[L14836]              gas := gas - 53000;
[L14837]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1142012261;
[L9314]               TOKEN_SYMBOL_Consts[this] := 360831912;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(687691456480424918299425112376782193233251990427);
[L9318]               CONTINUE_MINTING_Consts[this] := true;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9801]   COND FALSE  !(!!initialized_MainToken[this])
[L9805]               initialized_MainToken[this] := true;
[L9806]   COND FALSE  !(PAUSED_Consts[this])
[L9816]               havoc addresses_s1709;
[L9817]               __var_57 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9818]               M_int_Ref[addresses_s1709][0] := __var_57;
[L9819]               __var_58 := ConstantToRef(389942227696498629531603431436390714308169371997);
[L9820]               M_int_Ref[addresses_s1709][1] := __var_58;
[L9821]               havoc amounts_s1709;
[L9822]               __var_59 := 48000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9823]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][0];
[L9824]               M_int_int[amounts_s1709][0] := __var_59;
[L9825]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][0];
[L9826]               __var_60 := 6000000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9827]               sum[amounts_s1709] := sum[amounts_s1709] - M_int_int[amounts_s1709][1];
[L9828]               M_int_int[amounts_s1709][1] := __var_60;
[L9829]               sum[amounts_s1709] := sum[amounts_s1709] + M_int_int[amounts_s1709][1];
[L9830]               havoc freezes_s1709;
[L9831]               __var_61 := 0 % 18446744073709551616;
[L9832]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][0];
[L9833]               M_int_int[freezes_s1709][0] := __var_61;
[L9834]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][0];
[L9835]               __var_62 := 0 % 18446744073709551616;
[L9836]               sum[freezes_s1709] := sum[freezes_s1709] - M_int_int[freezes_s1709][1];
[L9837]               M_int_int[freezes_s1709][1] := __var_62;
[L9838]               sum[freezes_s1709] := sum[freezes_s1709] + M_int_int[freezes_s1709][1];
[L9839]               i_s1709 := 0;
[L9840]   COND FALSE  !(i_s1709 < Length[addresses_s1709])
[L9864]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9874]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12785]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14837]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14838]              assume !revert && gas >= 0;
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND FALSE  !(choice == 36)
[L14602]  COND FALSE  !(choice == 35)
[L14608]  COND FALSE  !(choice == 34)
[L14615]  COND FALSE  !(choice == 33)
[L14622]  COND FALSE  !(choice == 32)
[L14629]  COND FALSE  !(choice == 31)
[L14636]  COND FALSE  !(choice == 30)
[L14642]  COND FALSE  !(choice == 29)
[L14648]  COND FALSE  !(choice == 28)
[L14654]  COND FALSE  !(choice == 27)
[L14660]  COND FALSE  !(choice == 26)
[L14667]  COND FALSE  !(choice == 25)
[L14673]  COND FALSE  !(choice == 24)
[L14679]  COND FALSE  !(choice == 23)
[L14685]  COND FALSE  !(choice == 22)
[L14691]  COND FALSE  !(choice == 21)
[L14698]  COND FALSE  !(choice == 20)
[L14706]  COND FALSE  !(choice == 19)
[L14712]  COND FALSE  !(choice == 18)
[L14718]  COND FALSE  !(choice == 17)
[L14725]  COND FALSE  !(choice == 16)
[L14731]  COND FALSE  !(choice == 15)
[L14737]  COND FALSE  !(choice == 14)
[L14743]  COND TRUE   choice == 13
[L14744]              gas := gas - 21000;
[L14745]  COND TRUE   gas >= 0
[L14746]              assume _amount_s1449 >= 0 && _amount_s1449 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L14747]              assume _until_s1449 >= 0 && _until_s1449 < 18446744073709551616;
[L14748]              assume msgvalue_MSG == 0;
[L14749]  CALL        call __ret_0_mintAndFreeze := mintAndFreeze~address~uint256~uint64_FreezableMintableToken(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L3457]               havoc __exception;
[L3458]               revert := false;
[L3459]   COND FALSE  !(__exception)
[L3498]   CALL        call __ret_0_ := mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L9224]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12785]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L9224]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9225]   COND FALSE  !(revert)
[L9228]   CALL        call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12801]  COND FALSE  !(!!mintingFinished_MintableToken[this])
[L9228]   RET         call canMint_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L9229]   COND FALSE  !(revert)
[L9232]   CALL        call __var_48 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s1449);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L9232]   RET         call __var_48 := add~uint256~uint256_SafeMath__success(this, this, 0, totalSupply__BasicToken[this], _amount_s1449);
[L9233]   COND FALSE  !(revert)
[L9236]               totalSupply__BasicToken[this] := __var_48;
[L9237]               __var_49 := _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9238]   COND TRUE   DType[this] == MainToken
[L9239]   CALL        call currentKey_s1449 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L9239]   RET         call currentKey_s1449 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L9240]   COND FALSE  !(revert)
[L9251]               currentKey_s1449 := currentKey_s1449;
[L9252]   CALL        call __var_50 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s1449], _amount_s1449);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L9252]   RET         call __var_50 := add~uint256~uint256_SafeMath__success(this, this, 0, freezings_FreezableToken[this][currentKey_s1449], _amount_s1449);
[L9253]   COND FALSE  !(revert)
[L9256]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1449];
[L9257]               freezings_FreezableToken[this][currentKey_s1449] := __var_50;
[L9258]               sum_freezings3[this] := sum_freezings3[this] + freezings_FreezableToken[this][currentKey_s1449];
[L9259]   CALL        call __var_51 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s1449], _amount_s1449);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L9259]   RET         call __var_51 := add~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][_to_s1449], _amount_s1449);
[L9260]   COND FALSE  !(revert)
[L9263]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][_to_s1449];
[L9264]               freezingBalance_FreezableToken[this][_to_s1449] := __var_51;
[L9265]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][_to_s1449];
[L9266]   COND TRUE   DType[this] == MainToken
[L9267]   CALL        call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449);
[L8713]   COND FALSE  !(!(_until_s1240 > now))
[L8717]               __var_42 := _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8718]   COND TRUE   DType[this] == MainToken
[L8719]   CALL        call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8719]   RET         call key_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, _until_s1240 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8720]   COND FALSE  !(revert)
[L8736]               key_s1240 := key_s1240;
[L8737]               __var_43 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8738]   COND TRUE   DType[this] == MainToken
[L8739]   CALL        call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8739]   RET         call parentKey_s1240 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1240, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8740]   COND FALSE  !(revert)
[L8756]               parentKey_s1240 := parentKey_s1240;
[L8757]               next_s1240 := chains_FreezableToken[this][parentKey_s1240];
[L8758]   COND TRUE   next_s1240 == 0
[L8759]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][parentKey_s1240];
[L8760]               chains_FreezableToken[this][parentKey_s1240] := _until_s1240;
[L8761]               sum_chains2[this] := sum_chains2[this] + chains_FreezableToken[this][parentKey_s1240];
[L9267]   RET         call freeze~address~uint64_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _until_s1449);
[L9268]   COND FALSE  !(revert)
[L9279]               assert { :EventEmitted "Mint_FreezableMintableToken" } true;
[L9280]               assert { :EventEmitted "Freezed_FreezableMintableToken" } true;
[L9281]               assert { :EventEmitted "Transfer_FreezableMintableToken" } true;
[L9282]               __ret_0_ := true;
[L3498]   RET         call __ret_0_ := mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L3499]               assume !revert && gas >= 0;
[L14749]  RET         call __ret_0_mintAndFreeze := mintAndFreeze~address~uint256~uint64_FreezableMintableToken(this, msgsender_MSG, msgvalue_MSG, _to_s1449, _amount_s1449, _until_s1449);
[L14841]  RET         call CorralChoice_MainToken(this);
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND TRUE   choice == 37
[L14590]              gas := gas - 21000;
[L14591]  COND TRUE   gas >= 0
[L14592]              assume msgvalue_MSG == 0;
[L14593]  CALL        call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume balances_BasicToken[this][_owner_s729] >= 0 && balances_BasicToken[this][_owner_s729] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_balanceOf_FreezableToken0 := true;
[L2]                  call_balanceOf_FreezableToken0 := false;
[L2]                  revert := revert_hold;
[L2092]               havoc __exception;
[L2093]               revert := false;
[L2094]   COND FALSE  !(__exception)
[L2133]   CALL        call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7730]   COND TRUE   DType[this] == MainToken
[L7731]   CALL        call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L6985]               __ret_0_ := balances_BasicToken[this][_owner_s214];
[L7731]   RET         call __var_14 := balanceOf~address_BasicToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L7732]   COND FALSE  !(revert)
[L7748]               balance_s729 := (__var_14 + freezingBalance_FreezableToken[this][_owner_s729]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2133]   RET         call balance_s729 := balanceOf~address_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L2134]               assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((balance_s729 == balances_BasicToken[this][_owner_s729] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14593]  RET         call balance_s729 := balanceOf~address_FreezableToken(this, msgsender_MSG, msgvalue_MSG, _owner_s729);
[L14841]  RET         call CorralChoice_MainToken(this);

Loop:
[L14841]  CALL        call CorralChoice_MainToken(this);
[L14498]              havoc msgsender_MSG;
[L14499]              havoc msgvalue_MSG;
[L14500]              havoc choice;
[L14501]              havoc __ret_0_totalSupply;
[L14502]              havoc _owner_s729;
[L14503]              havoc balance_s729;
[L14504]              havoc _to_s1572;
[L14505]              havoc _value_s1572;
[L14506]              havoc _success_s1572;
[L14507]              havoc _owner_s395;
[L14508]              havoc _spender_s395;
[L14509]              havoc __ret_0_allowance;
[L14510]              havoc _from_s1551;
[L14511]              havoc _to_s1551;
[L14512]              havoc _value_s1551;
[L14513]              havoc _success_s1551;
[L14514]              havoc _spender_s379;
[L14515]              havoc _value_s379;
[L14516]              havoc __ret_0_approve;
[L14517]              havoc _spender_s437;
[L14518]              havoc _addedValue_s437;
[L14519]              havoc __ret_0_increaseApproval;
[L14520]              havoc _spender_s497;
[L14521]              havoc _subtractedValue_s497;
[L14522]              havoc __ret_0_decreaseApproval;
[L14523]              havoc __ret_0_owner;
[L14524]              havoc _newOwner_s558;
[L14525]              havoc __ret_0_mintingFinished;
[L14526]              havoc _to_s664;
[L14527]              havoc _amount_s664;
[L14528]              havoc __ret_0_mint;
[L14529]              havoc __ret_0_finishMinting;
[L14530]              havoc _owner_s742;
[L14531]              havoc balance_s742;
[L14532]              havoc _owner_s754;
[L14533]              havoc balance_s754;
[L14534]              havoc _addr_s792;
[L14535]              havoc count_s792;
[L14536]              havoc _addr_s849;
[L14537]              havoc _index_s849;
[L14538]              havoc _release_s849;
[L14539]              havoc _balance_s849;
[L14540]              havoc _to_s938;
[L14541]              havoc _amount_s938;
[L14542]              havoc _until_s938;
[L14543]              havoc tokens_s1107;
[L14544]              havoc _value_s1261;
[L14545]              havoc __ret_0_paused;
[L14546]              havoc _to_s1449;
[L14547]              havoc _amount_s1449;
[L14548]              havoc _until_s1449;
[L14549]              havoc __ret_0_mintAndFreeze;
[L14550]              havoc __ret_0_TOKEN_DECIMALS;
[L14551]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14552]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14553]              havoc __ret_0_TOKEN_NAME;
[L14554]              havoc __ret_0_TOKEN_SYMBOL;
[L14555]              havoc __ret_0_PAUSED;
[L14556]              havoc __ret_0_TARGET_USER;
[L14557]              havoc __ret_0_CONTINUE_MINTING;
[L14558]              havoc __ret_0_initialized;
[L14559]              havoc _name_s1511;
[L14560]              havoc _symbol_s1519;
[L14561]              havoc _decimals_s1527;
[L14562]              havoc tmpNow;
[L14563]              havoc gas;
[L14564]              assume gas > 4000000 && gas <= 8000000;
[L14565]              tmpNow := now;
[L14566]              havoc now;
[L14567]              assume now > tmpNow;
[L14568]              assume msgsender_MSG != null;
[L14569]              assume DType[msgsender_MSG] != ERC20Basic;
[L14570]              assume DType[msgsender_MSG] != SafeMath;
[L14571]              assume DType[msgsender_MSG] != BasicToken;
[L14572]              assume DType[msgsender_MSG] != ERC20;
[L14573]              assume DType[msgsender_MSG] != StandardToken;
[L14574]              assume DType[msgsender_MSG] != Ownable;
[L14575]              assume DType[msgsender_MSG] != MintableToken;
[L14576]              assume DType[msgsender_MSG] != FreezableToken;
[L14577]              assume DType[msgsender_MSG] != BurnableToken;
[L14578]              assume DType[msgsender_MSG] != Pausable;
[L14579]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14580]              assume DType[msgsender_MSG] != Consts;
[L14581]              assume DType[msgsender_MSG] != MainToken;
[L14582]              Alloc[msgsender_MSG] := true;
[L14583]  COND FALSE  !(choice == 38)
[L14589]  COND FALSE  !(choice == 37)
[L14595]  COND FALSE  !(choice == 36)
[L14602]  COND FALSE  !(choice == 35)
[L14608]  COND FALSE  !(choice == 34)
[L14615]  COND FALSE  !(choice == 33)
[L14622]  COND FALSE  !(choice == 32)
[L14629]  COND FALSE  !(choice == 31)
[L14636]  COND FALSE  !(choice == 30)
[L14642]  COND FALSE  !(choice == 29)
[L14648]  COND FALSE  !(choice == 28)
[L14654]  COND FALSE  !(choice == 27)
[L14660]  COND FALSE  !(choice == 26)
[L14667]  COND FALSE  !(choice == 25)
[L14673]  COND FALSE  !(choice == 24)
[L14679]  COND FALSE  !(choice == 23)
[L14685]  COND FALSE  !(choice == 22)
[L14691]  COND FALSE  !(choice == 21)
[L14698]  COND FALSE  !(choice == 20)
[L14706]  COND TRUE   choice == 19
[L14707]              gas := gas - 21000;
[L14708]  COND TRUE   gas >= 0
[L14709]              assume msgvalue_MSG == 0;
[L14710]  CALL        call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L2624]               havoc __exception;
[L2625]               revert := false;
[L2626]   COND FALSE  !(__exception)
[L2665]   CALL        call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8314]               __var_31 := 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8315]   COND TRUE   DType[this] == MainToken
[L8316]   CALL        call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8316]   RET         call headKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, 0 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8317]   COND FALSE  !(revert)
[L8333]               headKey_s1054 := headKey_s1054;
[L8334]               head_s1054 := chains_FreezableToken[this][headKey_s1054];
[L8335]   COND FALSE  !(!(head_s1054 != 0))
[L8339]               __var_32 := now % 18446744073709551616;
[L8340]   COND FALSE  !(!(now % 18446744073709551616 > head_s1054))
[L8344]               __var_33 := head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8345]   COND TRUE   DType[this] == MainToken
[L8346]   CALL        call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8569]               result_s1122 := 39480772448535941496179204954862169494691089619604794184232587696854102179840;
[L8571]               havoc result_s1122;
[L8572]               havoc result_s1122;
[L8573]               havoc result_s1122;
[L8574]               havoc result_s1122;
[L8346]   RET         call currentKey_s1054 := toKey~address~uint256_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, head_s1054 % 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L8347]   COND FALSE  !(revert)
[L8363]               currentKey_s1054 := currentKey_s1054;
[L8364]               next_s1054 := chains_FreezableToken[this][currentKey_s1054];
[L8365]               amount_s1054 := freezings_FreezableToken[this][currentKey_s1054];
[L8366]               sum_freezings3[this] := sum_freezings3[this] - freezings_FreezableToken[this][currentKey_s1054];
[L8367]               freezings_FreezableToken[this][currentKey_s1054] := 0;
[L8368]   CALL        call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L6848]               c_s122 := (a_s122 + b_s122) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L6849]               assert c_s122 >= a_s122;
[L6850]               c_s122 := c_s122;
[L8368]   RET         call __var_34 := add~uint256~uint256_SafeMath__success(this, this, 0, balances_BasicToken[this][msgsender_MSG], amount_s1054);
[L8369]   COND FALSE  !(revert)
[L8372]               sum_balances0[this] := sum_balances0[this] - balances_BasicToken[this][msgsender_MSG];
[L8373]               balances_BasicToken[this][msgsender_MSG] := __var_34;
[L8374]               sum_balances0[this] := sum_balances0[this] + balances_BasicToken[this][msgsender_MSG];
[L8375]   CALL        call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L6834]               assert b_s98 <= a_s98;
[L6835]               __ret_0_ := (a_s98 - b_s98) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8375]   RET         call __var_35 := sub~uint256~uint256_SafeMath__success(this, this, 0, freezingBalance_FreezableToken[this][msgsender_MSG], amount_s1054);
[L8376]   COND FALSE  !(revert)
[L8379]               sum_freezingBalance4[this] := sum_freezingBalance4[this] - freezingBalance_FreezableToken[this][msgsender_MSG];
[L8380]               freezingBalance_FreezableToken[this][msgsender_MSG] := __var_35;
[L8381]               sum_freezingBalance4[this] := sum_freezingBalance4[this] + freezingBalance_FreezableToken[this][msgsender_MSG];
[L8382]   COND TRUE   next_s1054 == 0
[L8383]               sum_chains2[this] := sum_chains2[this] - chains_FreezableToken[this][headKey_s1054];
[L8384]               chains_FreezableToken[this][headKey_s1054] := 0;
[L8392]               assert { :EventEmitted "Released_FreezableToken" } true;
[L2665]   RET         call releaseOnce_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L2666]               assume !revert && gas >= 0;
[L14710]  RET         call releaseOnce_FreezableToken(this, msgsender_MSG, msgvalue_MSG);
[L14841]  RET         call CorralChoice_MainToken(this);

[2020-11-24 21:16:45,389 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:16:45,389 INFO  L82        PathProgramCache]: Analyzing trace with hash 264240235, now seen corresponding path program 1 times
[2020-11-24 21:16:45,390 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:16:45,443 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:16:45,511 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:16:45,951 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:16:45,951 INFO  L82        PathProgramCache]: Analyzing trace with hash -1698488620, now seen corresponding path program 1 times
[2020-11-24 21:16:45,952 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:16:45,958 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:16:45,965 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:16:45,978 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 21:16:45,979 INFO  L82        PathProgramCache]: Analyzing trace with hash 1753628094, now seen corresponding path program 1 times
[2020-11-24 21:16:45,979 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 21:16:46,065 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-24 21:16:46,168 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 5 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5 to 7
Garbage collection #1: 5 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5 to 7
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
[2020-11-24 21:16:46,573 WARN  L188               SmtUtils]: Spent 127.00 ms on a formula simplification that was a NOOP. DAG size: 172
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 883 to 1759
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
[2020-11-24 21:16:46,892 WARN  L188               SmtUtils]: Spent 105.00 ms on a formula simplification. DAG size of input: 141 DAG size of output: 140
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 619 to 1237
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
[2020-11-24 21:16:47,141 WARN  L188               SmtUtils]: Spent 205.00 ms on a formula simplification that was a NOOP. DAG size: 315
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 3517 to 7027
Garbage collection #1: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3137 to 6271
[2020-11-24 21:16:47,304 WARN  L188               SmtUtils]: Spent 151.00 ms on a formula simplification that was a NOOP. DAG size: 297
[2020-11-24 21:16:47,800 WARN  L188               SmtUtils]: Spent 491.00 ms on a formula simplification. DAG size of input: 417 DAG size of output: 359
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3967 to 7933
Garbage collection #1: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #2: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #3: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #4: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #5: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #6: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
[2020-11-24 21:16:47,960 WARN  L188               SmtUtils]: Spent 147.00 ms on a formula simplification that was a NOOP. DAG size: 258
[2020-11-24 21:16:48,365 WARN  L188               SmtUtils]: Spent 401.00 ms on a formula simplification that was a NOOP. DAG size: 494
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 12073 to 24137
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.002s total
Resizing node table from 9181 to 18353
[2020-11-24 21:16:48,613 WARN  L188               SmtUtils]: Spent 233.00 ms on a formula simplification that was a NOOP. DAG size: 400
[2020-11-24 21:16:48,875 WARN  L188               SmtUtils]: Spent 259.00 ms on a formula simplification that was a NOOP. DAG size: 400
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
[2020-11-24 21:16:48,992 WARN  L188               SmtUtils]: Spent 110.00 ms on a formula simplification that was a NOOP. DAG size: 277
[2020-11-24 21:16:49,004 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #2: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #3: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #4: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #5: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
[2020-11-24 21:16:50,412 WARN  L188               SmtUtils]: Spent 216.00 ms on a formula simplification. DAG size of input: 264 DAG size of output: 250
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
[2020-11-24 21:16:50,804 WARN  L188               SmtUtils]: Spent 118.00 ms on a formula simplification. DAG size of input: 197 DAG size of output: 192
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
[2020-11-24 21:16:56,457 WARN  L188               SmtUtils]: Spent 5.54 s on a formula simplification. DAG size of input: 592 DAG size of output: 564
Garbage collection #1: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #2: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #3: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #4: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #5: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #6: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #7: 13313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13313 to 26597
Garbage collection #1: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #2: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #3: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #4: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #5: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
[2020-11-24 21:16:56,731 WARN  L188               SmtUtils]: Spent 216.00 ms on a formula simplification that was a NOOP. DAG size: 295
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #1: 67 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 67 to 131
Garbage collection #2: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #3: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #4: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #5: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #6: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
[2020-11-24 21:16:57,006 WARN  L188               SmtUtils]: Spent 183.00 ms on a formula simplification. DAG size of input: 244 DAG size of output: 243
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-24 21:16:57,363 WARN  L188               SmtUtils]: Spent 306.00 ms on a formula simplification that was a NOOP. DAG size: 473
Garbage collection #1: 167 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 167 to 331
Garbage collection #2: 331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 331 to 661
Garbage collection #3: 661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 661 to 1321
Garbage collection #4: 1321 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1321 to 2633
Garbage collection #5: 2633 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2633 to 5261
Garbage collection #6: 5261 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5261 to 10513
Garbage collection #7: 10513 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10513 to 21023
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
[2020-11-24 21:16:57,610 WARN  L188               SmtUtils]: Spent 241.00 ms on a formula simplification that was a NOOP. DAG size: 417
Garbage collection #1: 5 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5 to 7
Garbage collection #2: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #1: 3 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3 to 5
Garbage collection #1: 5 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5 to 7
Garbage collection #2: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #1: 5 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5 to 7
Garbage collection #2: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #1: 3 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3 to 5
Garbage collection #1: 3 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3 to 5
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
[2020-11-24 21:16:57,910 WARN  L188               SmtUtils]: Spent 245.00 ms on a formula simplification. DAG size of input: 208 DAG size of output: 204
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
[2020-11-24 21:16:58,061 WARN  L188               SmtUtils]: Spent 119.00 ms on a formula simplification. DAG size of input: 151 DAG size of output: 146
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 673 to 1327
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
[2020-11-24 21:16:58,539 WARN  L188               SmtUtils]: Spent 320.00 ms on a formula simplification. DAG size of input: 320 DAG size of output: 315
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
[2020-11-24 21:16:58,688 WARN  L188               SmtUtils]: Spent 145.00 ms on a formula simplification that was a NOOP. DAG size: 299
[2020-11-24 21:16:59,177 WARN  L188               SmtUtils]: Spent 485.00 ms on a formula simplification. DAG size of input: 442 DAG size of output: 366
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
[2020-11-24 21:16:59,302 WARN  L188               SmtUtils]: Spent 120.00 ms on a formula simplification that was a NOOP. DAG size: 260
[2020-11-24 21:16:59,663 WARN  L188               SmtUtils]: Spent 359.00 ms on a formula simplification that was a NOOP. DAG size: 496
Garbage collection #1: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #2: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #3: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-11-24 21:16:59,932 WARN  L188               SmtUtils]: Spent 262.00 ms on a formula simplification that was a NOOP. DAG size: 404
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #5: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
[2020-11-24 21:17:00,198 WARN  L188               SmtUtils]: Spent 139.00 ms on a formula simplification. DAG size of input: 302 DAG size of output: 298
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
Garbage collection #1: 71 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 71 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
[2020-11-24 21:17:00,390 WARN  L188               SmtUtils]: Spent 155.00 ms on a formula simplification that was a NOOP. DAG size: 443
Garbage collection #1: 181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 181 to 359
Garbage collection #2: 359 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 359 to 709
Garbage collection #3: 709 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 709 to 1409
Garbage collection #4: 1409 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1409 to 2803
Garbage collection #5: 2803 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 2803 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 11177 to 22349
[2020-11-24 21:17:09,405 WARN  L188               SmtUtils]: Spent 8.91 s on a formula simplification. DAG size of input: 1062 DAG size of output: 1042
Garbage collection #1: 419 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 419 to 829
Garbage collection #2: 829 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 829 to 1657
Garbage collection #3: 1657 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1657 to 3313
Garbage collection #4: 3313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3313 to 6619
Garbage collection #5: 6619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6619 to 13229
Garbage collection #6: 13229 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13229 to 26449
Garbage collection #7: 26449 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 26449 to 52889
Garbage collection #8: 52889 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 52889 to 102881
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
[2020-11-24 21:17:10,188 WARN  L188               SmtUtils]: Spent 738.00 ms on a formula simplification that was a NOOP. DAG size: 436
[2020-11-24 21:17:11,405 WARN  L188               SmtUtils]: Spent 1.17 s on a formula simplification that was a NOOP. DAG size: 577
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 12073 to 24137
Garbage collection #1: 127 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 127 to 251
Garbage collection #2: 251 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 251 to 499
Garbage collection #3: 499 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 499 to 997
Garbage collection #4: 997 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 997 to 1993
Garbage collection #5: 1993 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1993 to 3967
Garbage collection #6: 3967 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3967 to 7933
[2020-11-24 21:17:12,324 WARN  L188               SmtUtils]: Spent 909.00 ms on a formula simplification that was a NOOP. DAG size: 436
[2020-11-24 21:17:14,156 WARN  L188               SmtUtils]: Spent 1.83 s on a formula simplification. DAG size of input: 579 DAG size of output: 578
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 12073 to 24137
Garbage collection #1: 191 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 191 to 379
Garbage collection #2: 379 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 379 to 757
Garbage collection #3: 757 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 757 to 1511
Garbage collection #4: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #5: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #6: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
Garbage collection #7: 12073 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 12073 to 24137
[2020-11-24 21:17:15,042 WARN  L188               SmtUtils]: Spent 880.00 ms on a formula simplification that was a NOOP. DAG size: 574
[2020-11-24 21:17:15,078 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 21:17:15,091 INFO  L216          LassoAnalysis]: Preferences:
[2020-11-24 21:17:15,091 INFO  L124   ssoRankerPreferences]: Compute integeral hull: false
[2020-11-24 21:17:15,091 INFO  L125   ssoRankerPreferences]: Enable LassoPartitioneer: true
[2020-11-24 21:17:15,091 INFO  L126   ssoRankerPreferences]: Term annotations enabled: false
[2020-11-24 21:17:15,091 INFO  L127   ssoRankerPreferences]: Use exernal solver: true
[2020-11-24 21:17:15,091 INFO  L128   ssoRankerPreferences]: SMT solver command: z3 SMTLIB2_COMPLIANT=true -memory:1024 -smt2 -in -t:12000
[2020-11-24 21:17:15,091 INFO  L129   ssoRankerPreferences]: Dump SMT script to file: false
[2020-11-24 21:17:15,092 INFO  L130   ssoRankerPreferences]: Path of dumped script: 
[2020-11-24 21:17:15,092 INFO  L131   ssoRankerPreferences]: Filename of dumped script: MainToken_0x1b980e05943de3db3a459c72325338d327b6f5a9_balanceof.bpl_BEv2_Iteration23_Lasso
[2020-11-24 21:17:15,092 INFO  L132   ssoRankerPreferences]: MapElimAlgo: Frank
[2020-11-24 21:17:15,092 INFO  L282          LassoAnalysis]: Starting lasso preprocessing...
Garbage collection #1: 263 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 263 to 523
Garbage collection #2: 523 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 523 to 1039
Garbage collection #3: 1039 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1039 to 2069
Garbage collection #4: 2069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2069 to 4133
Garbage collection #5: 4133 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4133 to 8263
Garbage collection #6: 8263 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8263 to 16519
Garbage collection #7: 16519 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 16519 to 33037
Garbage collection #8: 33037 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 33037 to 66071
Garbage collection #1: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #2: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #3: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #4: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #5: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #6: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #7: 9973 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 9973 to 19937
[2020-11-24 21:17:15,576 FATAL L292        ToolchainWalker]: The Plugin de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer has thrown an exception:
java.lang.UnsupportedOperationException: function symbols not yet supported
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoPartitioneer.addInOuAuxVar(LassoPartitioneer.java:238)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoPartitioneer.constructTransFormulaLR(LassoPartitioneer.java:210)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoPartitioneer.doPartition(LassoPartitioneer.java:165)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoPartitioneer.<init>(LassoPartitioneer.java:95)
	at de.uni_freiburg.informatik.ultimate.lassoranker.preprocessors.LassoPartitioneerPreprocessor.process(LassoPartitioneerPreprocessor.java:65)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoBuilder.applyPreprocessor(LassoBuilder.java:154)
	at de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoBuilder.preprocess(LassoBuilder.java:262)
	at de.uni_freiburg.informatik.ultimate.lassoranker.LassoAnalysis.preprocess(LassoAnalysis.java:286)
	at de.uni_freiburg.informatik.ultimate.lassoranker.LassoAnalysis.<init>(LassoAnalysis.java:235)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.synthesize(LassoCheck.java:788)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.access$18(LassoCheck.java:715)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkLassoTermination(LassoCheck.java:1163)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:1062)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-24 21:17:15,577 INFO  L168              Benchmark]: Toolchain (without parser) took 94347.28 ms. Allocated memory was 1.0 GB in the beginning and 6.4 GB in the end (delta: 5.4 GB). Free memory was 913.7 MB in the beginning and 3.3 GB in the end (delta: -2.4 GB). Peak memory consumption was 5.6 GB. Max. memory is 15.3 GB.
[2020-11-24 21:17:15,579 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 21:17:15,579 INFO  L168              Benchmark]: Boogie Preprocessor took 148.66 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 886.9 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
[2020-11-24 21:17:15,579 INFO  L168              Benchmark]: UtopiaSpecLang took 93.46 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 870.8 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-24 21:17:15,579 INFO  L168              Benchmark]: Boogie Printer took 32.89 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 860.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-24 21:17:15,580 INFO  L168              Benchmark]: RCFGBuilder took 1735.79 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 180.4 MB). Free memory was 860.0 MB in the beginning and 1.1 GB in the end (delta: -212.0 MB). Peak memory consumption was 250.3 MB. Max. memory is 15.3 GB.
[2020-11-24 21:17:15,580 INFO  L168              Benchmark]: UtopiaLTL2Aut took 32.03 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 7.4 MB). Peak memory consumption was 7.4 MB. Max. memory is 15.3 GB.
[2020-11-24 21:17:15,580 INFO  L168              Benchmark]: BÃ¼chi Program Product took 4018.81 ms. Allocated memory was 1.2 GB in the beginning and 1.5 GB in the end (delta: 329.8 MB). Free memory was 1.1 GB in the beginning and 734.8 MB in the end (delta: 329.8 MB). Peak memory consumption was 773.0 MB. Max. memory is 15.3 GB.
[2020-11-24 21:17:15,580 INFO  L168              Benchmark]: BlockEncodingV2 took 397.30 ms. Allocated memory was 1.5 GB in the beginning and 1.9 GB in the end (delta: 410.5 MB). Free memory was 734.8 MB in the beginning and 1.6 GB in the end (delta: -884.2 MB). Peak memory consumption was 174.2 MB. Max. memory is 15.3 GB.
[2020-11-24 21:17:15,581 INFO  L168              Benchmark]: BuchiAutomizer took 87885.91 ms. Allocated memory was 1.9 GB in the beginning and 6.4 GB in the end (delta: 4.5 GB). Free memory was 1.6 GB in the beginning and 3.3 GB in the end (delta: -1.7 GB). Peak memory consumption was 5.4 GB. Max. memory is 15.3 GB.
[2020-11-24 21:17:15,583 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    13516 locations, 24819 edges
  - StatisticsResult: Encoded RCFG
    13306 locations, 24233 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 148.66 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 886.9 MB in the end (delta: 26.8 MB). Peak memory consumption was 26.8 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 93.46 ms. Allocated memory is still 1.0 GB. Free memory was 886.9 MB in the beginning and 870.8 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 32.89 ms. Allocated memory is still 1.0 GB. Free memory was 870.8 MB in the beginning and 860.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1735.79 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 180.4 MB). Free memory was 860.0 MB in the beginning and 1.1 GB in the end (delta: -212.0 MB). Peak memory consumption was 250.3 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 32.03 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 7.4 MB). Peak memory consumption was 7.4 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 4018.81 ms. Allocated memory was 1.2 GB in the beginning and 1.5 GB in the end (delta: 329.8 MB). Free memory was 1.1 GB in the beginning and 734.8 MB in the end (delta: 329.8 MB). Peak memory consumption was 773.0 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 397.30 ms. Allocated memory was 1.5 GB in the beginning and 1.9 GB in the end (delta: 410.5 MB). Free memory was 734.8 MB in the beginning and 1.6 GB in the end (delta: -884.2 MB). Peak memory consumption was 174.2 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 87885.91 ms. Allocated memory was 1.9 GB in the beginning and 6.4 GB in the end (delta: 4.5 GB). Free memory was 1.6 GB in the beginning and 3.3 GB in the end (delta: -1.7 GB). Peak memory consumption was 5.4 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    5418 locations, 7594 edges
  - StatisticsResult: BuchiProgram size
    13516 locations, 24819 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: UnsupportedOperationException: function symbols not yet supported
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: UnsupportedOperationException: function symbols not yet supported: de.uni_freiburg.informatik.ultimate.lassoranker.variables.LassoPartitioneer.addInOuAuxVar(LassoPartitioneer.java:238)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
