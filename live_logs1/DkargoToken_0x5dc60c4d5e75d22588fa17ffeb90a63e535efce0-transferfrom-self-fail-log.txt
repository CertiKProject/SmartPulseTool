This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 14:19:04,889 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 14:19:04,890 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 14:19:04,898 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 14:19:04,898 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 14:19:04,899 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 14:19:04,899 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 14:19:04,900 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 14:19:04,901 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 14:19:04,902 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 14:19:04,902 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 14:19:04,903 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 14:19:04,903 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 14:19:04,904 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 14:19:04,905 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 14:19:04,905 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 14:19:04,906 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 14:19:04,907 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 14:19:04,908 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 14:19:04,910 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 14:19:04,910 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 14:19:04,911 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 14:19:04,913 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 14:19:04,913 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 14:19:04,913 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 14:19:04,914 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 14:19:04,914 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 14:19:04,915 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 14:19:04,915 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 14:19:04,915 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 14:19:04,915 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 14:19:04,916 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 14:19:04,916 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 14:19:04,916 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 14:19:04,917 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 14:19:04,917 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 14:19:04,917 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 14:19:04,917 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 14:19:04,918 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 14:19:04,918 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 14:19:04,919 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 14:19:04,919 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 14:19:04,924 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 14:19:04,925 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 14:19:04,925 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 14:19:04,925 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 14:19:04,925 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 14:19:04,925 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 14:19:04,926 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 14:19:04,926 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 14:19:04,926 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 14:19:04,926 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 14:19:04,926 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 14:19:04,926 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 14:19:04,926 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 14:19:04,926 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 14:19:04,926 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 14:19:04,926 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 14:19:04,926 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 14:19:04,926 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 14:19:04,926 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 14:19:04,926 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 14:19:04,927 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 14:19:04,927 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 14:19:04,927 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 14:19:04,927 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 14:19:04,927 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 14:19:04,927 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 14:19:04,945 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 14:19:04,961 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 14:19:04,966 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 14:19:04,968 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 14:19:04,969 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 14:19:04,970 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-self-fail.bpl
[2020-11-25 14:19:04,970 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-self-fail.bpl'
[2020-11-25 14:19:05,071 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 14:19:05,072 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 14:19:05,072 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 14:19:05,072 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 14:19:05,072 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 14:19:05,083 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:19:05" (1/1) ...
[2020-11-25 14:19:05,085 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:19:05" (1/1) ...
[2020-11-25 14:19:05,119 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:19:05" (1/1) ...
[2020-11-25 14:19:05,120 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:19:05" (1/1) ...
[2020-11-25 14:19:05,149 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:19:05" (1/1) ...
[2020-11-25 14:19:05,163 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:19:05" (1/1) ...
[2020-11-25 14:19:05,175 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:19:05" (1/1) ...
[2020-11-25 14:19:05,190 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 14:19:05,190 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 14:19:05,190 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 14:19:05,192 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 14:19:05,196 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:19:05" (1/1) ...
[2020-11-25 14:19:05,221 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(DkargoToken.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(DkargoToken.transferFrom)))
[2020-11-25 14:19:05,227 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(DkargoToken.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(DkargoToken.transferFrom)))
[2020-11-25 14:19:05,234 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(DkargoToken.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(DkargoToken.transferFrom)))
[2020-11-25 14:19:05,244 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( from_s1311==to_s1311 && ( value_s1311>_balances_ERC20[this][from_s1311] || value_s1311>_allowances_ERC20[this][from_s1311][msg.sender] ) ) && value_s1311>=0 ) && value_s1311<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s1311]>=0 ) && _balances_ERC20[this][to_s1311]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][from_s1311]>=0 ) && _balances_ERC20[this][from_s1311]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowances_ERC20[this][from_s1311][msg.sender]>=0 ) && _allowances_ERC20[this][from_s1311][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[from_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>],IdentifierExpression[to_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[value_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[from_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]]],BinaryExpression[COMPGT,IdentifierExpression[value_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[from_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[to_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[to_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[from_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[from_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[from_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[from_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 14:19:05,251 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(DkargoToken.transferFrom(from, to, value), from == to && (value > _balances_ERC20[this][from] || value > _allowances_ERC20[this][from][msg.sender]) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(DkargoToken.transferFrom)))
[2020-11-25 14:19:05,251 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_DkargoToken0) ==> ( <>AP(fail_transferFrom_DkargoToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 14:19:05,266 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:19:05 PropertyContainer
[2020-11-25 14:19:05,266 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 14:19:05,266 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 14:19:05,266 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 14:19:05,266 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 14:19:05,267 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:19:05" (1/2) ...
[2020-11-25 14:19:05,267 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 14:19:05,268 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 14:19:05,287 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:19:05" (2/2) ...
[2020-11-25 14:19:05,287 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 14:19:05,288 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 14:19:05,288 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 14:19:05,288 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 14:19:05,289 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:19:05" (1/2) ...
[2020-11-25 14:19:05,341 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 14:19:05,342 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeInfo_ctor__success
[2020-11-25 14:19:05,342 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeList_ctor__success
[2020-11-25 14:19:05,342 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix_NoBaseCtor__success
[2020-11-25 14:19:05,342 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix
[2020-11-25 14:19:05,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix
[2020-11-25 14:19:05,342 INFO  L130     BoogieDeclarations]: Found specification of procedure getDkargoPrefix_DkargoPrefix
[2020-11-25 14:19:05,342 INFO  L138     BoogieDeclarations]: Found implementation of procedure getDkargoPrefix_DkargoPrefix
[2020-11-25 14:19:05,342 INFO  L130     BoogieDeclarations]: Found specification of procedure _setDkargoPrefix~string_DkargoPrefix__success
[2020-11-25 14:19:05,343 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership_NoBaseCtor__success
[2020-11-25 14:19:05,343 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership
[2020-11-25 14:19:05,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership
[2020-11-25 14:19:05,343 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownership
[2020-11-25 14:19:05,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownership
[2020-11-25 14:19:05,343 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownership
[2020-11-25 14:19:05,343 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownership
[2020-11-25 14:19:05,344 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownership
[2020-11-25 14:19:05,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownership
[2020-11-25 14:19:05,344 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 14:19:05,344 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 14:19:05,344 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 14:19:05,345 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 14:19:05,345 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 14:19:05,345 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 14:19:05,345 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 14:19:05,345 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 14:19:05,345 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain_NoBaseCtor__success
[2020-11-25 14:19:05,345 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain
[2020-11-25 14:19:05,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain
[2020-11-25 14:19:05,345 INFO  L130     BoogieDeclarations]: Found specification of procedure count_AddressChain
[2020-11-25 14:19:05,345 INFO  L138     BoogieDeclarations]: Found implementation of procedure count_AddressChain
[2020-11-25 14:19:05,346 INFO  L130     BoogieDeclarations]: Found specification of procedure head_AddressChain
[2020-11-25 14:19:05,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure head_AddressChain
[2020-11-25 14:19:05,346 INFO  L130     BoogieDeclarations]: Found specification of procedure tail_AddressChain
[2020-11-25 14:19:05,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure tail_AddressChain
[2020-11-25 14:19:05,346 INFO  L130     BoogieDeclarations]: Found specification of procedure nextOf~address_AddressChain
[2020-11-25 14:19:05,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure nextOf~address_AddressChain
[2020-11-25 14:19:05,346 INFO  L130     BoogieDeclarations]: Found specification of procedure prevOf~address_AddressChain
[2020-11-25 14:19:05,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure prevOf~address_AddressChain
[2020-11-25 14:19:05,346 INFO  L130     BoogieDeclarations]: Found specification of procedure isLinked~address_AddressChain
[2020-11-25 14:19:05,346 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLinked~address_AddressChain
[2020-11-25 14:19:05,346 INFO  L130     BoogieDeclarations]: Found specification of procedure _linkChain~address_AddressChain__success
[2020-11-25 14:19:05,347 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlinkChain~address_AddressChain__success
[2020-11-25 14:19:05,347 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165_NoBaseCtor__success
[2020-11-25 14:19:05,347 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165
[2020-11-25 14:19:05,347 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165
[2020-11-25 14:19:05,347 INFO  L130     BoogieDeclarations]: Found specification of procedure supportsInterface~bytes4_IERC165
[2020-11-25 14:19:05,347 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165_NoBaseCtor__success
[2020-11-25 14:19:05,347 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165
[2020-11-25 14:19:05,347 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165
[2020-11-25 14:19:05,347 INFO  L130     BoogieDeclarations]: Found specification of procedure supportsInterface~bytes4_ERC165
[2020-11-25 14:19:05,347 INFO  L138     BoogieDeclarations]: Found implementation of procedure supportsInterface~bytes4_ERC165
[2020-11-25 14:19:05,348 INFO  L130     BoogieDeclarations]: Found specification of procedure _registerInterface~bytes4_ERC165__success
[2020-11-25 14:19:05,348 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 14:19:05,348 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 14:19:05,348 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 14:19:05,348 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 14:19:05,348 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 14:19:05,348 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 14:19:05,348 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 14:19:05,348 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 14:19:05,348 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 14:19:05,349 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 14:19:05,349 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 14:19:05,349 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 14:19:05,349 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 14:19:05,349 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 14:19:05,349 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 14:19:05,350 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 14:19:05,350 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 14:19:05,350 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 14:19:05,350 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 14:19:05,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 14:19:05,351 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 14:19:05,351 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 14:19:05,351 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 14:19:05,352 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 14:19:05,352 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 14:19:05,352 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 14:19:05,352 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 14:19:05,352 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 14:19:05,353 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe_NoBaseCtor__success
[2020-11-25 14:19:05,353 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe
[2020-11-25 14:19:05,353 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe
[2020-11-25 14:19:05,353 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Safe
[2020-11-25 14:19:05,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Safe
[2020-11-25 14:19:05,354 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Safe
[2020-11-25 14:19:05,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Safe
[2020-11-25 14:19:05,354 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Safe
[2020-11-25 14:19:05,354 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Safe
[2020-11-25 14:19:05,355 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken_NoBaseCtor__success
[2020-11-25 14:19:05,355 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken
[2020-11-25 14:19:05,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken
[2020-11-25 14:19:05,355 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_DkargoToken
[2020-11-25 14:19:05,355 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_DkargoToken
[2020-11-25 14:19:05,356 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DkargoToken
[2020-11-25 14:19:05,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DkargoToken
[2020-11-25 14:19:05,356 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DkargoToken
[2020-11-25 14:19:05,356 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DkargoToken
[2020-11-25 14:19:05,356 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DkargoToken
[2020-11-25 14:19:05,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DkargoToken
[2020-11-25 14:19:05,357 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DkargoToken
[2020-11-25 14:19:05,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DkargoToken
[2020-11-25 14:19:05,357 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DkargoToken
[2020-11-25 14:19:05,357 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DkargoToken
[2020-11-25 14:19:05,358 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 14:19:05,358 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 14:19:05,358 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 14:19:05,358 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 14:19:05,358 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DkargoPrefix
[2020-11-25 14:19:05,358 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_DkargoPrefix
[2020-11-25 14:19:05,359 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownership
[2020-11-25 14:19:05,359 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownership
[2020-11-25 14:19:05,359 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 14:19:05,359 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 14:19:05,359 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_AddressChain
[2020-11-25 14:19:05,359 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_AddressChain
[2020-11-25 14:19:05,359 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC165
[2020-11-25 14:19:05,359 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC165
[2020-11-25 14:19:05,359 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC165
[2020-11-25 14:19:05,359 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC165
[2020-11-25 14:19:05,360 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 14:19:05,360 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 14:19:05,360 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 14:19:05,360 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 14:19:05,360 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Safe
[2020-11-25 14:19:05,360 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Safe
[2020-11-25 14:19:05,360 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DkargoToken
[2020-11-25 14:19:05,360 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 14:19:05,360 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 14:19:05,360 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeInfo_ctor__fail
[2020-11-25 14:19:05,361 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeList_ctor__fail
[2020-11-25 14:19:05,361 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix_NoBaseCtor__fail
[2020-11-25 14:19:05,361 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix__success
[2020-11-25 14:19:05,361 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix__fail
[2020-11-25 14:19:05,361 INFO  L130     BoogieDeclarations]: Found specification of procedure getDkargoPrefix_DkargoPrefix__success
[2020-11-25 14:19:05,361 INFO  L130     BoogieDeclarations]: Found specification of procedure getDkargoPrefix_DkargoPrefix__fail
[2020-11-25 14:19:05,361 INFO  L130     BoogieDeclarations]: Found specification of procedure _setDkargoPrefix~string_DkargoPrefix__fail
[2020-11-25 14:19:05,361 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership_NoBaseCtor__fail
[2020-11-25 14:19:05,361 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership__success
[2020-11-25 14:19:05,361 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership__fail
[2020-11-25 14:19:05,362 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownership__success
[2020-11-25 14:19:05,362 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownership__fail
[2020-11-25 14:19:05,362 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownership__success
[2020-11-25 14:19:05,362 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownership__fail
[2020-11-25 14:19:05,362 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownership__success
[2020-11-25 14:19:05,362 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownership__fail
[2020-11-25 14:19:05,362 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 14:19:05,362 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 14:19:05,362 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 14:19:05,363 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 14:19:05,363 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 14:19:05,363 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 14:19:05,363 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 14:19:05,363 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 14:19:05,363 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain_NoBaseCtor__fail
[2020-11-25 14:19:05,363 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain__success
[2020-11-25 14:19:05,363 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain__fail
[2020-11-25 14:19:05,363 INFO  L130     BoogieDeclarations]: Found specification of procedure count_AddressChain__success
[2020-11-25 14:19:05,363 INFO  L130     BoogieDeclarations]: Found specification of procedure count_AddressChain__fail
[2020-11-25 14:19:05,364 INFO  L130     BoogieDeclarations]: Found specification of procedure head_AddressChain__success
[2020-11-25 14:19:05,364 INFO  L130     BoogieDeclarations]: Found specification of procedure head_AddressChain__fail
[2020-11-25 14:19:05,364 INFO  L130     BoogieDeclarations]: Found specification of procedure tail_AddressChain__success
[2020-11-25 14:19:05,364 INFO  L130     BoogieDeclarations]: Found specification of procedure tail_AddressChain__fail
[2020-11-25 14:19:05,364 INFO  L130     BoogieDeclarations]: Found specification of procedure nextOf~address_AddressChain__success
[2020-11-25 14:19:05,364 INFO  L130     BoogieDeclarations]: Found specification of procedure nextOf~address_AddressChain__fail
[2020-11-25 14:19:05,364 INFO  L130     BoogieDeclarations]: Found specification of procedure prevOf~address_AddressChain__success
[2020-11-25 14:19:05,364 INFO  L130     BoogieDeclarations]: Found specification of procedure prevOf~address_AddressChain__fail
[2020-11-25 14:19:05,364 INFO  L130     BoogieDeclarations]: Found specification of procedure isLinked~address_AddressChain__success
[2020-11-25 14:19:05,364 INFO  L130     BoogieDeclarations]: Found specification of procedure isLinked~address_AddressChain__fail
[2020-11-25 14:19:05,364 INFO  L130     BoogieDeclarations]: Found specification of procedure _linkChain~address_AddressChain__fail
[2020-11-25 14:19:05,365 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlinkChain~address_AddressChain__fail
[2020-11-25 14:19:05,365 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165_NoBaseCtor__fail
[2020-11-25 14:19:05,365 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165__success
[2020-11-25 14:19:05,365 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165__fail
[2020-11-25 14:19:05,365 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165_NoBaseCtor__fail
[2020-11-25 14:19:05,365 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165__success
[2020-11-25 14:19:05,365 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165__fail
[2020-11-25 14:19:05,365 INFO  L130     BoogieDeclarations]: Found specification of procedure supportsInterface~bytes4_ERC165__success
[2020-11-25 14:19:05,365 INFO  L130     BoogieDeclarations]: Found specification of procedure supportsInterface~bytes4_ERC165__fail
[2020-11-25 14:19:05,365 INFO  L130     BoogieDeclarations]: Found specification of procedure _registerInterface~bytes4_ERC165__fail
[2020-11-25 14:19:05,365 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 14:19:05,365 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 14:19:05,366 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 14:19:05,366 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 14:19:05,366 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 14:19:05,366 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 14:19:05,366 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 14:19:05,366 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 14:19:05,366 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 14:19:05,366 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 14:19:05,366 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 14:19:05,366 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 14:19:05,366 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 14:19:05,366 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 14:19:05,367 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 14:19:05,367 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 14:19:05,367 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 14:19:05,367 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 14:19:05,367 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 14:19:05,367 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 14:19:05,367 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 14:19:05,367 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 14:19:05,367 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe_NoBaseCtor__fail
[2020-11-25 14:19:05,367 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe__success
[2020-11-25 14:19:05,367 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe__fail
[2020-11-25 14:19:05,367 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Safe__success
[2020-11-25 14:19:05,368 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Safe__fail
[2020-11-25 14:19:05,368 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Safe__success
[2020-11-25 14:19:05,368 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Safe__fail
[2020-11-25 14:19:05,368 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Safe__success
[2020-11-25 14:19:05,368 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Safe__fail
[2020-11-25 14:19:05,368 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken_NoBaseCtor__fail
[2020-11-25 14:19:05,368 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken__success
[2020-11-25 14:19:05,368 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken__fail
[2020-11-25 14:19:05,368 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_DkargoToken__success
[2020-11-25 14:19:05,368 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_DkargoToken__fail
[2020-11-25 14:19:05,368 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DkargoToken__success
[2020-11-25 14:19:05,368 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DkargoToken__fail
[2020-11-25 14:19:05,369 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DkargoToken__success
[2020-11-25 14:19:05,369 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DkargoToken__fail
[2020-11-25 14:19:05,369 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DkargoToken__success
[2020-11-25 14:19:05,369 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DkargoToken__fail
[2020-11-25 14:19:05,369 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DkargoToken__success
[2020-11-25 14:19:05,369 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DkargoToken__fail
[2020-11-25 14:19:05,369 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DkargoToken__success
[2020-11-25 14:19:05,369 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DkargoToken__fail
[2020-11-25 14:19:05,369 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 14:19:05,369 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 14:19:05,369 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 14:19:05,369 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 14:19:05,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 14:19:05,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 14:19:05,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeInfo_ctor__fail
[2020-11-25 14:19:05,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeInfo_ctor__success
[2020-11-25 14:19:05,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeList_ctor__fail
[2020-11-25 14:19:05,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeList_ctor__success
[2020-11-25 14:19:05,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix_NoBaseCtor__fail
[2020-11-25 14:19:05,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix_NoBaseCtor__success
[2020-11-25 14:19:05,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix__fail
[2020-11-25 14:19:05,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix__success
[2020-11-25 14:19:05,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure getDkargoPrefix_DkargoPrefix__fail
[2020-11-25 14:19:05,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure getDkargoPrefix_DkargoPrefix__success
[2020-11-25 14:19:05,370 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setDkargoPrefix~string_DkargoPrefix__fail
[2020-11-25 14:19:05,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setDkargoPrefix~string_DkargoPrefix__success
[2020-11-25 14:19:05,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership_NoBaseCtor__fail
[2020-11-25 14:19:05,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership_NoBaseCtor__success
[2020-11-25 14:19:05,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership__fail
[2020-11-25 14:19:05,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership__success
[2020-11-25 14:19:05,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownership__fail
[2020-11-25 14:19:05,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownership__success
[2020-11-25 14:19:05,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownership__fail
[2020-11-25 14:19:05,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownership__success
[2020-11-25 14:19:05,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownership__fail
[2020-11-25 14:19:05,371 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownership__success
[2020-11-25 14:19:05,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 14:19:05,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 14:19:05,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 14:19:05,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 14:19:05,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 14:19:05,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 14:19:05,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 14:19:05,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 14:19:05,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 14:19:05,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 14:19:05,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 14:19:05,372 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 14:19:05,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 14:19:05,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 14:19:05,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain_NoBaseCtor__fail
[2020-11-25 14:19:05,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain_NoBaseCtor__success
[2020-11-25 14:19:05,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain__fail
[2020-11-25 14:19:05,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain__success
[2020-11-25 14:19:05,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure count_AddressChain__fail
[2020-11-25 14:19:05,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure count_AddressChain__success
[2020-11-25 14:19:05,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure head_AddressChain__fail
[2020-11-25 14:19:05,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure head_AddressChain__success
[2020-11-25 14:19:05,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure tail_AddressChain__fail
[2020-11-25 14:19:05,373 INFO  L138     BoogieDeclarations]: Found implementation of procedure tail_AddressChain__success
[2020-11-25 14:19:05,374 INFO  L138     BoogieDeclarations]: Found implementation of procedure nextOf~address_AddressChain__fail
[2020-11-25 14:19:05,374 INFO  L138     BoogieDeclarations]: Found implementation of procedure nextOf~address_AddressChain__success
[2020-11-25 14:19:05,374 INFO  L138     BoogieDeclarations]: Found implementation of procedure prevOf~address_AddressChain__fail
[2020-11-25 14:19:05,374 INFO  L138     BoogieDeclarations]: Found implementation of procedure prevOf~address_AddressChain__success
[2020-11-25 14:19:05,374 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLinked~address_AddressChain__fail
[2020-11-25 14:19:05,374 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLinked~address_AddressChain__success
[2020-11-25 14:19:05,374 INFO  L138     BoogieDeclarations]: Found implementation of procedure _linkChain~address_AddressChain__fail
[2020-11-25 14:19:05,374 INFO  L138     BoogieDeclarations]: Found implementation of procedure _linkChain~address_AddressChain__success
[2020-11-25 14:19:05,374 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlinkChain~address_AddressChain__fail
[2020-11-25 14:19:05,375 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlinkChain~address_AddressChain__success
[2020-11-25 14:19:05,375 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165_NoBaseCtor__fail
[2020-11-25 14:19:05,375 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165_NoBaseCtor__success
[2020-11-25 14:19:05,375 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165__fail
[2020-11-25 14:19:05,375 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165__success
[2020-11-25 14:19:05,375 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165_NoBaseCtor__fail
[2020-11-25 14:19:05,375 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165_NoBaseCtor__success
[2020-11-25 14:19:05,375 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165__fail
[2020-11-25 14:19:05,375 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165__success
[2020-11-25 14:19:05,375 INFO  L138     BoogieDeclarations]: Found implementation of procedure supportsInterface~bytes4_ERC165__fail
[2020-11-25 14:19:05,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure supportsInterface~bytes4_ERC165__success
[2020-11-25 14:19:05,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure _registerInterface~bytes4_ERC165__fail
[2020-11-25 14:19:05,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure _registerInterface~bytes4_ERC165__success
[2020-11-25 14:19:05,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 14:19:05,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 14:19:05,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 14:19:05,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 14:19:05,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 14:19:05,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 14:19:05,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 14:19:05,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 14:19:05,376 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 14:19:05,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 14:19:05,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 14:19:05,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 14:19:05,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 14:19:05,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 14:19:05,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 14:19:05,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 14:19:05,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 14:19:05,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 14:19:05,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 14:19:05,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 14:19:05,377 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 14:19:05,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 14:19:05,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 14:19:05,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 14:19:05,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 14:19:05,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 14:19:05,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 14:19:05,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 14:19:05,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe_NoBaseCtor__fail
[2020-11-25 14:19:05,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe_NoBaseCtor__success
[2020-11-25 14:19:05,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe__fail
[2020-11-25 14:19:05,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe__success
[2020-11-25 14:19:05,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Safe__fail
[2020-11-25 14:19:05,378 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Safe__success
[2020-11-25 14:19:05,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Safe__fail
[2020-11-25 14:19:05,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Safe__success
[2020-11-25 14:19:05,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Safe__fail
[2020-11-25 14:19:05,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Safe__success
[2020-11-25 14:19:05,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken_NoBaseCtor__fail
[2020-11-25 14:19:05,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken_NoBaseCtor__success
[2020-11-25 14:19:05,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken__fail
[2020-11-25 14:19:05,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken__success
[2020-11-25 14:19:05,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_DkargoToken__fail
[2020-11-25 14:19:05,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_DkargoToken__success
[2020-11-25 14:19:05,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DkargoToken__fail
[2020-11-25 14:19:05,379 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DkargoToken__success
[2020-11-25 14:19:05,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DkargoToken__fail
[2020-11-25 14:19:05,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DkargoToken__success
[2020-11-25 14:19:05,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DkargoToken__fail
[2020-11-25 14:19:05,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DkargoToken__success
[2020-11-25 14:19:05,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DkargoToken__fail
[2020-11-25 14:19:05,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DkargoToken__success
[2020-11-25 14:19:05,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DkargoToken__fail
[2020-11-25 14:19:05,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DkargoToken__success
[2020-11-25 14:19:05,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 14:19:05,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 14:19:05,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 14:19:05,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 14:19:05,380 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 14:19:05,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 14:19:05,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 14:19:05,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 14:19:05,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DkargoPrefix
[2020-11-25 14:19:05,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_DkargoPrefix
[2020-11-25 14:19:05,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownership
[2020-11-25 14:19:05,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownership
[2020-11-25 14:19:05,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 14:19:05,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 14:19:05,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_AddressChain
[2020-11-25 14:19:05,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_AddressChain
[2020-11-25 14:19:05,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC165
[2020-11-25 14:19:05,381 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC165
[2020-11-25 14:19:05,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC165
[2020-11-25 14:19:05,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC165
[2020-11-25 14:19:05,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 14:19:05,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 14:19:05,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 14:19:05,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 14:19:05,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Safe
[2020-11-25 14:19:05,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Safe
[2020-11-25 14:19:05,382 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DkargoToken
[2020-11-25 14:19:05,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 14:19:05,383 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 14:19:05,383 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 14:19:05,776 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:19:05,777 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:19:06,448 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 14:19:06,448 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 14:19:06,451 INFO  L202        PluginConnector]: Adding new model DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:19:06 BoogieIcfgContainer
[2020-11-25 14:19:06,451 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:19:05" (2/2) ...
[2020-11-25 14:19:06,451 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 14:19:06,451 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@ab774a0 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:19:06, skipping insertion in model container
[2020-11-25 14:19:06,451 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 14:19:06,452 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 14:19:06,452 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 14:19:06,453 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 14:19:06,453 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:19:05" (1/3) ...
[2020-11-25 14:19:06,453 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@74355e1d and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:19:06, skipping insertion in model container
[2020-11-25 14:19:06,453 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:19:05" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 14:19:06,488 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:19:06 NWAContainer
[2020-11-25 14:19:06,488 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 14:19:06,488 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 14:19:06,488 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 14:19:06,489 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 14:19:06,490 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:19:06" (3/4) ...
[2020-11-25 14:19:06,490 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@77446934 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:19:06, skipping insertion in model container
[2020-11-25 14:19:06,490 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:19:06" (4/4) ...
[2020-11-25 14:19:06,493 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 14:19:06,499 INFO  L110   BuchiProductObserver]: Initial RCFG 3093 locations, 4210 edges
[2020-11-25 14:19:06,499 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 14:19:06,511 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 14:19:08,858 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 14:19:08,868 INFO  L110   BuchiProductObserver]: BuchiProgram size 7632 locations, 13663 edges
[2020-11-25 14:19:08,868 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:19:08 BoogieIcfgContainer
[2020-11-25 14:19:08,868 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 14:19:08,869 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 14:19:08,869 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 14:19:08,870 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 14:19:08,871 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:19:08" (1/1) ...
[2020-11-25 14:19:09,003 INFO  L313           BlockEncoder]: Initial Icfg 7632 locations, 13663 edges
[2020-11-25 14:19:09,004 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 14:19:09,004 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 14:19:09,004 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 14:19:09,005 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 14:19:09,021 INFO  L70    emoveInfeasibleEdges]: Removed 288 edges and 23 locations because of local infeasibility
[2020-11-25 14:19:09,038 INFO  L70        RemoveSinkStates]: Removed 262 edges and 164 locations by removing sink states
[2020-11-25 14:19:09,056 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 14:19:09,062 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 14:19:09,066 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 14:19:09,067 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 14:19:09,071 INFO  L313           BlockEncoder]: Encoded RCFG 7409 locations, 13060 edges
[2020-11-25 14:19:09,071 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:19:09 BasicIcfg
[2020-11-25 14:19:09,071 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 14:19:09,072 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 14:19:09,072 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 14:19:09,073 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 14:19:09,073 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:19:09,074 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:19:05" (1/6) ...
[2020-11-25 14:19:09,075 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@eb88939 and model type DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:19:09, skipping insertion in model container
[2020-11-25 14:19:09,075 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:19:09,075 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:19:05" (2/6) ...
[2020-11-25 14:19:09,075 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@eb88939 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:19:09, skipping insertion in model container
[2020-11-25 14:19:09,076 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:19:09,076 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:19:06" (3/6) ...
[2020-11-25 14:19:09,076 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@eb88939 and model type DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-self-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:19:09, skipping insertion in model container
[2020-11-25 14:19:09,076 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:19:09,076 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:19:06" (4/6) ...
[2020-11-25 14:19:09,076 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@eb88939 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:19:09, skipping insertion in model container
[2020-11-25 14:19:09,076 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:19:09,076 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:19:08" (5/6) ...
[2020-11-25 14:19:09,076 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@eb88939 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:19:09, skipping insertion in model container
[2020-11-25 14:19:09,077 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:19:09,077 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:19:09" (6/6) ...
[2020-11-25 14:19:09,078 INFO  L404   chiAutomizerObserver]: Analyzing ICFG DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-self-fail.bpl_BEv2
[2020-11-25 14:19:09,113 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 14:19:09,114 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 14:19:09,114 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 14:19:09,114 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 14:19:09,114 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 14:19:09,114 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 14:19:09,114 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 14:19:09,114 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 14:19:09,114 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 14:19:09,172 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7409 states.
[2020-11-25 14:19:09,235 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:19:09,235 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:19:09,235 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:19:09,243 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:19:09,243 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:19:09,243 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 14:19:09,243 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7409 states.
[2020-11-25 14:19:09,273 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:19:09,274 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:19:09,274 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:19:09,275 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:19:09,275 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_DkargoToken0 := false;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND TRUE   revert
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND TRUE   choice == 23
[L8286]              gas := gas - 21000;
[L8287]  COND FALSE  !(gas >= 0)
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:19:09,291 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:19:09,291 INFO  L82        PathProgramCache]: Analyzing trace with hash -97350248, now seen corresponding path program 1 times
[2020-11-25 14:19:09,297 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:19:09,315 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:19:09,359 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:19:09,361 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:19:09,362 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 14:19:09,701 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:19:09,709 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 14:19:09,709 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 14:19:09,710 INFO  L87              Difference]: Start difference. First operand 7409 states. Second operand 3 states.
[2020-11-25 14:19:10,066 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:19:10,066 INFO  L93              Difference]: Finished difference Result 4623 states and 5386 transitions.
[2020-11-25 14:19:10,066 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 14:19:10,068 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4623 states and 5386 transitions.
[2020-11-25 14:19:10,092 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:19:10,125 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4623 states to 4623 states and 5386 transitions.
[2020-11-25 14:19:10,126 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 14:19:10,129 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1041
[2020-11-25 14:19:10,129 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4623 states and 5386 transitions.
[2020-11-25 14:19:10,139 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:19:10,139 INFO  L728         BuchiCegarLoop]: Abstraction has 4623 states and 5386 transitions.
[2020-11-25 14:19:10,156 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4623 states and 5386 transitions.
[2020-11-25 14:19:10,218 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4623 to 4623.
[2020-11-25 14:19:10,218 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4623 states.
[2020-11-25 14:19:10,227 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4623 states to 4623 states and 5386 transitions.
[2020-11-25 14:19:10,228 INFO  L751         BuchiCegarLoop]: Abstraction has 4623 states and 5386 transitions.
[2020-11-25 14:19:10,228 INFO  L631         BuchiCegarLoop]: Abstraction has 4623 states and 5386 transitions.
[2020-11-25 14:19:10,228 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 14:19:10,228 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4623 states and 5386 transitions.
[2020-11-25 14:19:10,238 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:19:10,238 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:19:10,238 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:19:10,241 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:19:10,241 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_DkargoToken0 := false;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND TRUE   revert
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 == to_s1311 && (value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG])) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND TRUE   !(sender_s956 != null)
[L5228]              revert := true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND TRUE   revert
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND TRUE   revert
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 == to_s1311 && (value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG])) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND TRUE   !(sender_s956 != null)
[L5228]              revert := true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND TRUE   revert
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND TRUE   revert
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:19:10,245 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:19:10,245 INFO  L82        PathProgramCache]: Analyzing trace with hash -469606965, now seen corresponding path program 1 times
[2020-11-25 14:19:10,246 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:19:10,259 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:19:10,283 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:19:10,283 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:19:10,283 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 14:19:10,284 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:19:10,285 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 14:19:10,285 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 14:19:10,285 INFO  L87              Difference]: Start difference. First operand 4623 states and 5386 transitions. cyclomatic complexity: 765 Second operand 3 states.
[2020-11-25 14:19:10,411 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:19:10,411 INFO  L93              Difference]: Finished difference Result 5750 states and 6664 transitions.
[2020-11-25 14:19:10,411 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 14:19:10,412 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5750 states and 6664 transitions.
[2020-11-25 14:19:10,429 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:19:10,451 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5750 states to 5750 states and 6664 transitions.
[2020-11-25 14:19:10,452 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1304
[2020-11-25 14:19:10,453 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1304
[2020-11-25 14:19:10,453 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5750 states and 6664 transitions.
[2020-11-25 14:19:10,460 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:19:10,460 INFO  L728         BuchiCegarLoop]: Abstraction has 5750 states and 6664 transitions.
[2020-11-25 14:19:10,465 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5750 states and 6664 transitions.
[2020-11-25 14:19:10,513 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5750 to 5249.
[2020-11-25 14:19:10,513 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5249 states.
[2020-11-25 14:19:10,519 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5249 states to 5249 states and 6054 transitions.
[2020-11-25 14:19:10,519 INFO  L751         BuchiCegarLoop]: Abstraction has 5249 states and 6054 transitions.
[2020-11-25 14:19:10,520 INFO  L631         BuchiCegarLoop]: Abstraction has 5249 states and 6054 transitions.
[2020-11-25 14:19:10,520 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 14:19:10,520 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5249 states and 6054 transitions.
[2020-11-25 14:19:10,526 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:19:10,527 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:19:10,527 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:19:10,529 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:19:10,529 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_DkargoToken0 := false;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND TRUE   !(account_s999 != null)
[L5284]              revert := true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND TRUE   revert
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND TRUE   revert
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND TRUE   revert
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 == to_s1311 && (value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG])) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND TRUE   !(sender_s956 != null)
[L5228]              revert := true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND TRUE   revert
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND TRUE   revert
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 == to_s1311 && (value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG])) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND TRUE   !(sender_s956 != null)
[L5228]              revert := true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND TRUE   revert
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND TRUE   revert
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:19:10,533 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:19:10,533 INFO  L82        PathProgramCache]: Analyzing trace with hash 746640591, now seen corresponding path program 1 times
[2020-11-25 14:19:10,534 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:19:10,542 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:19:10,585 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 14:19:10,585 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:19:10,585 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 14:19:10,585 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:19:10,585 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 14:19:10,586 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 14:19:10,586 INFO  L87              Difference]: Start difference. First operand 5249 states and 6054 transitions. cyclomatic complexity: 807 Second operand 8 states.
[2020-11-25 14:19:10,653 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:19:10,653 INFO  L93              Difference]: Finished difference Result 5269 states and 6078 transitions.
[2020-11-25 14:19:10,653 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 14:19:10,653 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5269 states and 6078 transitions.
[2020-11-25 14:19:10,666 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:19:10,684 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5269 states to 5248 states and 6052 transitions.
[2020-11-25 14:19:10,684 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1200
[2020-11-25 14:19:10,685 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1200
[2020-11-25 14:19:10,685 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5248 states and 6052 transitions.
[2020-11-25 14:19:10,690 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:19:10,690 INFO  L728         BuchiCegarLoop]: Abstraction has 5248 states and 6052 transitions.
[2020-11-25 14:19:10,695 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5248 states and 6052 transitions.
[2020-11-25 14:19:10,735 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5248 to 5248.
[2020-11-25 14:19:10,736 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5248 states.
[2020-11-25 14:19:10,741 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5248 states to 5248 states and 6052 transitions.
[2020-11-25 14:19:10,741 INFO  L751         BuchiCegarLoop]: Abstraction has 5248 states and 6052 transitions.
[2020-11-25 14:19:10,741 INFO  L631         BuchiCegarLoop]: Abstraction has 5248 states and 6052 transitions.
[2020-11-25 14:19:10,742 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 14:19:10,742 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5248 states and 6052 transitions.
[2020-11-25 14:19:10,749 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:19:10,749 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:19:10,749 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:19:10,751 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:19:10,751 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_DkargoToken0 := false;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND TRUE   !(c_s130 >= a_s130)
[L4214]              revert := true;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND TRUE   revert
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND TRUE   revert
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND TRUE   revert
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND TRUE   revert
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 == to_s1311 && (value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG])) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND TRUE   !(sender_s956 != null)
[L5228]              revert := true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND TRUE   revert
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND TRUE   revert
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 == to_s1311 && (value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG])) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND TRUE   !(sender_s956 != null)
[L5228]              revert := true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND TRUE   revert
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND TRUE   revert
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:19:10,754 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:19:10,755 INFO  L82        PathProgramCache]: Analyzing trace with hash -1130503270, now seen corresponding path program 1 times
[2020-11-25 14:19:10,756 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:19:10,766 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:19:10,809 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 14:19:10,810 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:19:10,810 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 14:19:10,810 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:19:10,810 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 14:19:10,810 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 14:19:10,810 INFO  L87              Difference]: Start difference. First operand 5248 states and 6052 transitions. cyclomatic complexity: 806 Second operand 3 states.
[2020-11-25 14:19:10,913 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:19:10,913 INFO  L93              Difference]: Finished difference Result 5750 states and 6490 transitions.
[2020-11-25 14:19:10,913 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 14:19:10,914 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5750 states and 6490 transitions.
[2020-11-25 14:19:10,931 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:19:10,953 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5750 states to 5383 states and 6046 transitions.
[2020-11-25 14:19:10,954 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1232
[2020-11-25 14:19:10,954 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1266
[2020-11-25 14:19:10,954 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5383 states and 6046 transitions.
[2020-11-25 14:19:10,960 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:19:10,960 INFO  L728         BuchiCegarLoop]: Abstraction has 5383 states and 6046 transitions.
[2020-11-25 14:19:10,966 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5383 states and 6046 transitions.
[2020-11-25 14:19:11,023 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5383 to 4953.
[2020-11-25 14:19:11,023 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4953 states.
[2020-11-25 14:19:11,029 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4953 states to 4953 states and 5507 transitions.
[2020-11-25 14:19:11,029 INFO  L751         BuchiCegarLoop]: Abstraction has 4953 states and 5507 transitions.
[2020-11-25 14:19:11,029 INFO  L631         BuchiCegarLoop]: Abstraction has 4953 states and 5507 transitions.
[2020-11-25 14:19:11,029 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 14:19:11,029 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4953 states and 5507 transitions.
[2020-11-25 14:19:11,035 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:19:11,035 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:19:11,035 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:19:11,039 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:19:11,039 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_DkargoToken0 := false;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 == to_s1311 && (value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG])) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 == to_s1311 && (value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG])) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:19:11,046 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:19:11,046 INFO  L82        PathProgramCache]: Analyzing trace with hash -952874967, now seen corresponding path program 1 times
[2020-11-25 14:19:11,047 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:19:11,065 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:19:11,143 INFO  L134       CoverageAnalysis]: Checked inductivity of 77 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 77 trivial. 0 not checked.
[2020-11-25 14:19:11,143 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:19:11,143 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 14:19:11,144 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:19:11,144 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:19:11,144 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:19:11,144 INFO  L87              Difference]: Start difference. First operand 4953 states and 5507 transitions. cyclomatic complexity: 556 Second operand 4 states.
[2020-11-25 14:19:11,169 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:19:11,169 INFO  L93              Difference]: Finished difference Result 4967 states and 5535 transitions.
[2020-11-25 14:19:11,170 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 14:19:11,170 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4967 states and 5535 transitions.
[2020-11-25 14:19:11,179 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:19:11,193 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4967 states to 4957 states and 5523 transitions.
[2020-11-25 14:19:11,193 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1190
[2020-11-25 14:19:11,194 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1190
[2020-11-25 14:19:11,194 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4957 states and 5523 transitions.
[2020-11-25 14:19:11,198 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:19:11,198 INFO  L728         BuchiCegarLoop]: Abstraction has 4957 states and 5523 transitions.
[2020-11-25 14:19:11,202 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4957 states and 5523 transitions.
[2020-11-25 14:19:11,234 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4957 to 4957.
[2020-11-25 14:19:11,234 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4957 states.
[2020-11-25 14:19:11,239 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4957 states to 4957 states and 5523 transitions.
[2020-11-25 14:19:11,239 INFO  L751         BuchiCegarLoop]: Abstraction has 4957 states and 5523 transitions.
[2020-11-25 14:19:11,239 INFO  L631         BuchiCegarLoop]: Abstraction has 4957 states and 5523 transitions.
[2020-11-25 14:19:11,239 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 14:19:11,239 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4957 states and 5523 transitions.
[2020-11-25 14:19:11,245 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:19:11,246 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:19:11,246 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:19:11,248 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:19:11,248 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_DkargoToken0 := false;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 == to_s1311 && (value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG])) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 == to_s1311 && (value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG])) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:19:11,254 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:19:11,254 INFO  L82        PathProgramCache]: Analyzing trace with hash 325229411, now seen corresponding path program 1 times
[2020-11-25 14:19:11,255 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:19:11,278 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:19:11,519 INFO  L134       CoverageAnalysis]: Checked inductivity of 77 backedges. 4 proven. 0 refuted. 0 times theorem prover too weak. 73 trivial. 0 not checked.
[2020-11-25 14:19:11,519 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:19:11,519 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 14:19:11,520 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:19:11,520 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 15 interpolants.
[2020-11-25 14:19:11,520 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=28, Invalid=182, Unknown=0, NotChecked=0, Total=210
[2020-11-25 14:19:11,520 INFO  L87              Difference]: Start difference. First operand 4957 states and 5523 transitions. cyclomatic complexity: 568 Second operand 15 states.
[2020-11-25 14:19:15,373 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:19:15,374 INFO  L93              Difference]: Finished difference Result 5053 states and 5631 transitions.
[2020-11-25 14:19:15,374 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-11-25 14:19:15,374 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5053 states and 5631 transitions.
[2020-11-25 14:19:15,384 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:19:15,396 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5053 states to 5053 states and 5631 transitions.
[2020-11-25 14:19:15,397 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1209
[2020-11-25 14:19:15,397 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1209
[2020-11-25 14:19:15,397 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5053 states and 5631 transitions.
[2020-11-25 14:19:15,400 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:19:15,400 INFO  L728         BuchiCegarLoop]: Abstraction has 5053 states and 5631 transitions.
[2020-11-25 14:19:15,404 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5053 states and 5631 transitions.
[2020-11-25 14:19:15,433 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5053 to 4820.
[2020-11-25 14:19:15,433 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4820 states.
[2020-11-25 14:19:15,437 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4820 states to 4820 states and 5343 transitions.
[2020-11-25 14:19:15,438 INFO  L751         BuchiCegarLoop]: Abstraction has 4820 states and 5343 transitions.
[2020-11-25 14:19:15,438 INFO  L631         BuchiCegarLoop]: Abstraction has 4820 states and 5343 transitions.
[2020-11-25 14:19:15,438 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 14:19:15,438 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4820 states and 5343 transitions.
[2020-11-25 14:19:15,442 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:19:15,443 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:19:15,443 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:19:15,445 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:19:15,446 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_DkargoToken0 := false;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND TRUE   choice == 11
[L8359]              gas := gas - 21000;
[L8360]  COND TRUE   gas >= 0
[L8361]              assume amount_s1084 >= 0 && amount_s1084 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8362]              assume msgvalue_MSG == 0;
[L8363]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L2145]              havoc __exception;
[L2146]              revert := false;
[L2147]  COND FALSE  !(__exception)
[L2180]  CALL        call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5435]  COND TRUE   DType[this] == DkargoToken
[L5436]  CALL        call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5145]              __ret_0_ := _allowances_ERC20[this][approver_s857][spender_s857];
[L5436]  RET         call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5437]  COND FALSE  !(revert)
[L5448]  COND FALSE  !(!(amount_s1084 == 0 || __var_30 == 0))
[L5452]  COND TRUE   DType[this] == DkargoToken
[L5453]  CALL        call __var_31 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L4949]  COND TRUE   DType[this] == DkargoToken
[L4950]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L4950]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L4951]  COND FALSE  !(revert)
[L4967]              __ret_0_ := true;
[L5453]  RET         call __var_31 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5454]  COND FALSE  !(revert)
[L5465]              __ret_0_ := __var_31;
[L2180]  RET         call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L2181]              assume !revert && gas >= 0;
[L8363]  RET         call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L8450]  RET         call CorralChoice_DkargoToken(this);
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 == to_s1311 && (value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG])) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 == to_s1311 && (value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG])) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND FALSE  !(!__var_48 && __var_49 > 0)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:19:15,452 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:19:15,452 INFO  L82        PathProgramCache]: Analyzing trace with hash 129733501, now seen corresponding path program 1 times
[2020-11-25 14:19:15,453 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:19:15,476 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:19:15,876 INFO  L134       CoverageAnalysis]: Checked inductivity of 157 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 154 trivial. 0 not checked.
[2020-11-25 14:19:15,876 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:19:15,876 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [19] total 19
[2020-11-25 14:19:15,877 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:19:15,877 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 19 interpolants.
[2020-11-25 14:19:15,877 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=46, Invalid=296, Unknown=0, NotChecked=0, Total=342
[2020-11-25 14:19:15,877 INFO  L87              Difference]: Start difference. First operand 4820 states and 5343 transitions. cyclomatic complexity: 526 Second operand 19 states.
[2020-11-25 14:19:20,800 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:19:20,800 INFO  L93              Difference]: Finished difference Result 5044 states and 5628 transitions.
[2020-11-25 14:19:20,801 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 18 states. 
[2020-11-25 14:19:20,801 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5044 states and 5628 transitions.
[2020-11-25 14:19:20,810 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:19:20,821 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5044 states to 5044 states and 5628 transitions.
[2020-11-25 14:19:20,821 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1149
[2020-11-25 14:19:20,822 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1149
[2020-11-25 14:19:20,822 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5044 states and 5628 transitions.
[2020-11-25 14:19:20,826 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:19:20,826 INFO  L728         BuchiCegarLoop]: Abstraction has 5044 states and 5628 transitions.
[2020-11-25 14:19:20,831 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5044 states and 5628 transitions.
[2020-11-25 14:19:20,857 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5044 to 4930.
[2020-11-25 14:19:20,857 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4930 states.
[2020-11-25 14:19:20,862 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4930 states to 4930 states and 5487 transitions.
[2020-11-25 14:19:20,862 INFO  L751         BuchiCegarLoop]: Abstraction has 4930 states and 5487 transitions.
[2020-11-25 14:19:20,862 INFO  L631         BuchiCegarLoop]: Abstraction has 4930 states and 5487 transitions.
[2020-11-25 14:19:20,862 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 14:19:20,862 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4930 states and 5487 transitions.
[2020-11-25 14:19:20,868 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:19:20,868 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:19:20,868 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:19:20,870 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:19:20,870 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_DkargoToken0 := false;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND TRUE   choice == 11
[L8359]              gas := gas - 21000;
[L8360]  COND TRUE   gas >= 0
[L8361]              assume amount_s1084 >= 0 && amount_s1084 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8362]              assume msgvalue_MSG == 0;
[L8363]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L2145]              havoc __exception;
[L2146]              revert := false;
[L2147]  COND FALSE  !(__exception)
[L2180]  CALL        call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5435]  COND TRUE   DType[this] == DkargoToken
[L5436]  CALL        call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5145]              __ret_0_ := _allowances_ERC20[this][approver_s857][spender_s857];
[L5436]  RET         call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5437]  COND FALSE  !(revert)
[L5448]  COND FALSE  !(!(amount_s1084 == 0 || __var_30 == 0))
[L5452]  COND TRUE   DType[this] == DkargoToken
[L5453]  CALL        call __var_31 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L4949]  COND TRUE   DType[this] == DkargoToken
[L4950]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L4950]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L4951]  COND FALSE  !(revert)
[L4967]              __ret_0_ := true;
[L5453]  RET         call __var_31 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5454]  COND FALSE  !(revert)
[L5465]              __ret_0_ := __var_31;
[L2180]  RET         call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L2181]              assume !revert && gas >= 0;
[L8363]  RET         call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L8450]  RET         call CorralChoice_DkargoToken(this);
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 == to_s1311 && (value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG])) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND TRUE   !__var_48 && __var_49 > 0
[L6094]  COND TRUE   DType[this] == DkargoToken
[L6095]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L6095]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6096]  COND FALSE  !(revert)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 == to_s1311 && (value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG])) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4447]              __ret_0_ := true;
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND TRUE   !__var_48 && __var_49 > 0
[L6094]  COND TRUE   DType[this] == DkargoToken
[L6095]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L6095]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6096]  COND FALSE  !(revert)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:19:20,876 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:19:20,876 INFO  L82        PathProgramCache]: Analyzing trace with hash 1746021100, now seen corresponding path program 1 times
[2020-11-25 14:19:20,876 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:19:20,895 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:19:21,017 INFO  L134       CoverageAnalysis]: Checked inductivity of 170 backedges. 2 proven. 2 refuted. 0 times theorem prover too weak. 166 trivial. 0 not checked.
[2020-11-25 14:19:21,017 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 14:19:21,017 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [4] total 4
[2020-11-25 14:19:21,018 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:19:21,018 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:19:21,018 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:19:21,018 INFO  L87              Difference]: Start difference. First operand 4930 states and 5487 transitions. cyclomatic complexity: 560 Second operand 4 states.
[2020-11-25 14:19:21,041 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:19:21,041 INFO  L93              Difference]: Finished difference Result 4984 states and 5549 transitions.
[2020-11-25 14:19:21,041 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 14:19:21,041 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4984 states and 5549 transitions.
[2020-11-25 14:19:21,049 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:19:21,059 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4984 states to 4984 states and 5549 transitions.
[2020-11-25 14:19:21,059 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1130
[2020-11-25 14:19:21,060 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1139
[2020-11-25 14:19:21,060 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4984 states and 5549 transitions.
[2020-11-25 14:19:21,063 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:19:21,063 INFO  L728         BuchiCegarLoop]: Abstraction has 4984 states and 5549 transitions.
[2020-11-25 14:19:21,067 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4984 states and 5549 transitions.
[2020-11-25 14:19:21,091 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4984 to 4958.
[2020-11-25 14:19:21,091 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4958 states.
[2020-11-25 14:19:21,096 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4958 states to 4958 states and 5519 transitions.
[2020-11-25 14:19:21,096 INFO  L751         BuchiCegarLoop]: Abstraction has 4958 states and 5519 transitions.
[2020-11-25 14:19:21,096 INFO  L631         BuchiCegarLoop]: Abstraction has 4958 states and 5519 transitions.
[2020-11-25 14:19:21,096 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 14:19:21,096 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4958 states and 5519 transitions.
[2020-11-25 14:19:21,102 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:19:21,102 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:19:21,102 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:19:21,103 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:19:21,103 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transferFrom_DkargoToken0 := false;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]     CALL        call main();
[L8440]              assume null == 0;
[L8441]  CALL        call this := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L8441]  RET         call this := FreshRefGenerator__success();
[L8442]              assume now >= 0;
[L8443]              assume DType[this] == DkargoToken;
[L8444]              assume msgvalue_MSG == 0;
[L8445]              gas := gas - 53000;
[L8446]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2403]              havoc __exception;
[L2404]              revert := false;
[L2405]  COND FALSE  !(__exception)
[L2438]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5753]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4104]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4086]              assume msgsender_MSG != null;
[L4087]              Balance[this] := 0;
[L4088]              _owner_Ownership[this] := null;
[L4090]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4091]              _owner_Ownership[this] := msgsender_MSG;
[L4104]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  COND FALSE  !(revert)
[L5753]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5754]  COND FALSE  !(revert)
[L5757]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5757]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5758]  COND FALSE  !(revert)
[L5761]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4913]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L4913]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4914]  COND FALSE  !(revert)
[L4917]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4868]              assume msgsender_MSG != null;
[L4869]              Balance[this] := 0;
[L4870]              _supply_ERC20[this] := 0;
[L4871]              _balances_ERC20[this] := zeroRefintArr();
[L4872]              sum__balances1[this] := 0;
[L4873]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4874]              sum__allowances2[this] := 0;
[L4876]              pebs_s747 := supply_s747;
[L4877]  COND TRUE   DType[this] == DkargoToken
[L4878]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5282]              __var_24 := null;
[L5283]  COND FALSE  !(!(account_s999 != null))
[L5287]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5287]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5288]  COND FALSE  !(revert)
[L5291]              _supply_ERC20[this] := __var_25;
[L5292]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5292]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5293]  COND FALSE  !(revert)
[L5296]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5297]              _balances_ERC20[this][account_s999] := __var_26;
[L5298]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5299]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4878]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4879]  COND FALSE  !(revert)
[L4917]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4918]  COND FALSE  !(revert)
[L5761]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5762]  COND FALSE  !(revert)
[L5765]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5381]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4825]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4810]              assume msgsender_MSG != null;
[L4811]              Balance[this] := 0;
[L4825]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  COND FALSE  !(revert)
[L5381]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  COND FALSE  !(revert)
[L5385]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5362]              assume msgsender_MSG != null;
[L5363]              Balance[this] := 0;
[L5385]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5386]  COND FALSE  !(revert)
[L5765]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5766]  COND FALSE  !(revert)
[L5769]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4361]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4340]              assume msgsender_MSG != null;
[L4341]              Balance[this] := 0;
[L4343]  CALL        call __var_3 := FreshRefGenerator__success();
[L3983]              havoc newRef;
[L3984]              assume Alloc[newRef] == false;
[L3985]              Alloc[newRef] := true;
[L3986]              assume newRef != null;
[L4343]  RET         call __var_3 := FreshRefGenerator__success();
[L4344]  COND FALSE  !(revert)
[L4347]              _slist_AddressChain[this] := __var_3;
[L4361]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  COND FALSE  !(revert)
[L5769]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5770]  COND FALSE  !(revert)
[L5773]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L5773]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5774]  COND FALSE  !(revert)
[L5777]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4759]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4689]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4674]              assume msgsender_MSG != null;
[L4675]              Balance[this] := 0;
[L4689]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  COND FALSE  !(revert)
[L4759]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  COND FALSE  !(revert)
[L4763]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4723]              assume msgsender_MSG != null;
[L4724]              Balance[this] := 0;
[L4725]              _infcs_ERC165[this] := zerointboolArr();
[L4727]              __var_16 := 33540519;
[L4728]  COND TRUE   DType[this] == DkargoToken
[L4729]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L4729]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4730]  COND FALSE  !(revert)
[L4763]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4764]  COND FALSE  !(revert)
[L5777]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5778]  COND FALSE  !(revert)
[L5781]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4045]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4029]              assume msgsender_MSG != null;
[L4030]              Balance[this] := 0;
[L4031]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4045]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  COND FALSE  !(revert)
[L5781]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5782]  COND FALSE  !(revert)
[L5785]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5675]              assume msgsender_MSG != null;
[L5676]              Balance[this] := 0;
[L5677]              _name_DkargoToken[this] := -1676636045;
[L5678]              _symbol_DkargoToken[this] := -1676636045;
[L5680]  COND TRUE   DType[this] == DkargoToken
[L5681]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4070]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5681]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5682]  COND FALSE  !(revert)
[L5688]              __var_39 := -1804674067;
[L5689]  COND TRUE   DType[this] == DkargoToken
[L5690]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4792]  COND FALSE  !(!(infcid_s644 != -1))
[L4796]              _infcs_ERC165[this][infcid_s644] := true;
[L5690]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5691]  COND FALSE  !(revert)
[L5697]              _name_DkargoToken[this] := name_s1191;
[L5698]              _symbol_DkargoToken[this] := symbol_s1191;
[L5699]  COND TRUE   DType[this] == DkargoToken
[L5700]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5700]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5701]  COND FALSE  !(revert)
[L5785]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5786]  COND FALSE  !(revert)
[L2438]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2439]              assume !revert && gas >= 0;
[L8446]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8447]              assume !revert && gas >= 0;
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND TRUE   choice == 11
[L8359]              gas := gas - 21000;
[L8360]  COND TRUE   gas >= 0
[L8361]              assume amount_s1084 >= 0 && amount_s1084 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8362]              assume msgvalue_MSG == 0;
[L8363]  CALL        call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L2145]              havoc __exception;
[L2146]              revert := false;
[L2147]  COND FALSE  !(__exception)
[L2180]  CALL        call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5435]  COND TRUE   DType[this] == DkargoToken
[L5436]  CALL        call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5145]              __ret_0_ := _allowances_ERC20[this][approver_s857][spender_s857];
[L5436]  RET         call __var_30 := allowance~address~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s1084);
[L5437]  COND FALSE  !(revert)
[L5448]  COND FALSE  !(!(amount_s1084 == 0 || __var_30 == 0))
[L5452]  COND TRUE   DType[this] == DkargoToken
[L5453]  CALL        call __var_31 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L4949]  COND TRUE   DType[this] == DkargoToken
[L4950]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L4950]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, spender_s766, amount_s766);
[L4951]  COND FALSE  !(revert)
[L4967]              __ret_0_ := true;
[L5453]  RET         call __var_31 := approve~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L5454]  COND FALSE  !(revert)
[L5465]              __ret_0_ := __var_31;
[L2180]  RET         call __ret_0_ := approve~address~uint256_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L2181]              assume !revert && gas >= 0;
[L8363]  RET         call __ret_0_approve := approve~address~uint256_ERC20Safe(this, msgsender_MSG, msgvalue_MSG, spender_s1084, amount_s1084);
[L8450]  RET         call CorralChoice_DkargoToken(this);
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND FALSE  !(choice == 23)
[L8291]  COND FALSE  !(choice == 22)
[L8297]  COND FALSE  !(choice == 21)
[L8303]  COND FALSE  !(choice == 20)
[L8309]  COND FALSE  !(choice == 19)
[L8315]  COND FALSE  !(choice == 18)
[L8321]  COND FALSE  !(choice == 17)
[L8327]  COND FALSE  !(choice == 16)
[L8333]  COND FALSE  !(choice == 15)
[L8339]  COND FALSE  !(choice == 14)
[L8345]  COND FALSE  !(choice == 13)
[L8351]  COND FALSE  !(choice == 12)
[L8358]  COND FALSE  !(choice == 11)
[L8365]  COND TRUE   choice == 10
[L8366]              gas := gas - 21000;
[L8367]  COND TRUE   gas >= 0
[L8368]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8369]              assume msgvalue_MSG == 0;
[L8370]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((((from_s1311 == to_s1311 && (value_s1311 > _balances_ERC20[this][from_s1311] || value_s1311 > _allowances_ERC20[this][from_s1311][msgsender_MSG])) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transferFrom_DkargoToken0 := true;
[L2]                 call_transferFrom_DkargoToken0 := false;
[L2]                 revert := revert_hold;
[L2644]              havoc __exception;
[L2645]              revert := false;
[L2646]  COND FALSE  !(__exception)
[L2679]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6042]  COND TRUE   DType[this] == DkargoToken
[L6043]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5069]  COND TRUE   DType[this] == DkargoToken
[L5070]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5226]              __var_20 := null;
[L5227]  COND FALSE  !(!(sender_s956 != null))
[L5231]              __var_21 := null;
[L5232]  COND FALSE  !(!(recipient_s956 != null))
[L5236]  CALL        call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5236]  RET         call __var_22 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s956], amount_s956, 1375446272);
[L5237]  COND FALSE  !(revert)
[L5240]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][sender_s956];
[L5241]              _balances_ERC20[this][sender_s956] := __var_22;
[L5242]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][sender_s956];
[L5243]  CALL        call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L5243]  RET         call __var_23 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s956], amount_s956);
[L5244]  COND FALSE  !(revert)
[L5247]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][recipient_s956];
[L5248]              _balances_ERC20[this][recipient_s956] := __var_23;
[L5249]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][recipient_s956];
[L5250]              assert { :EventEmitted "Transfer_ERC20" } true;
[L5070]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5071]  COND FALSE  !(revert)
[L5087]  CALL        call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L4236]  COND FALSE  !(!(b_s157 <= a_s157))
[L4240]              c_s157 := (a_s157 - b_s157) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4241]              __ret_0_ := c_s157;
[L5087]  RET         call __var_17 := sub~uint256~uint256~string_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s821][msgsender_MSG], amount_s821, -919815254);
[L5088]  COND FALSE  !(revert)
[L5091]  COND TRUE   DType[this] == DkargoToken
[L5092]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5172]              __var_18 := null;
[L5173]  COND FALSE  !(!(approver_s899 != null))
[L5177]              __var_19 := null;
[L5178]  COND FALSE  !(!(spender_s899 != null))
[L5182]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] - _allowances_ERC20[this][approver_s899][spender_s899];
[L5183]              _allowances_ERC20[this][approver_s899][spender_s899] := value_s899;
[L5184]              sum__allowances2[approver_s899] := sum__allowances2[approver_s899] + _allowances_ERC20[this][approver_s899][spender_s899];
[L5185]              assert { :EventEmitted "Approval_ERC20" } true;
[L5092]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, msgsender_MSG, __var_17);
[L5093]  COND FALSE  !(revert)
[L5109]              __ret_0_ := true;
[L6043]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6044]  COND FALSE  !(revert)
[L6050]              ret_s1311 := ret_s1311;
[L6051]  COND TRUE   DType[this] == DkargoToken
[L6052]  CALL        call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L6052]  RET         call __var_46 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6053]  COND FALSE  !(revert)
[L6059]  COND TRUE   DType[this] == DkargoToken
[L6060]  CALL        call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6060]  RET         call __var_47 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311);
[L6061]  COND FALSE  !(revert)
[L6067]  COND FALSE  !(__var_46 && __var_47 == 0)
[L6077]  COND TRUE   DType[this] == DkargoToken
[L6078]  CALL        call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L6078]  RET         call __var_48 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6079]  COND FALSE  !(revert)
[L6085]  COND TRUE   DType[this] == DkargoToken
[L6086]  CALL        call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L5133]              __ret_0_ := _balances_ERC20[this][account_s841];
[L6086]  RET         call __var_49 := balanceOf~address_ERC20__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6087]  COND FALSE  !(revert)
[L6093]  COND TRUE   !__var_48 && __var_49 > 0
[L6094]  COND TRUE   DType[this] == DkargoToken
[L6095]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L4504]              __var_6 := null;
[L4505]  COND FALSE  !(!(node_s455 != null))
[L4509]  COND TRUE   DType[this] == DkargoToken
[L4510]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4446]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4450]              __var_4 := null;
[L4451]              __var_5 := null;
[L4452]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4510]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4511]  COND FALSE  !(revert)
[L4522]  COND FALSE  !(!!__var_7)
[L4526]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4527]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4528]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4534]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4212]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4213]  COND FALSE  !(!(c_s130 >= a_s130))
[L4217]              __ret_0_ := c_s130;
[L4534]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4535]  COND FALSE  !(revert)
[L4538]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4539]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L6095]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, to_s1311);
[L6096]  COND FALSE  !(revert)
[L6103]              __ret_0_ := ret_s1311;
[L2679]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2680]              assume !revert && gas >= 0;
[L8370]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8450]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8450]  CALL        call CorralChoice_DkargoToken(this);
[L8220]              havoc msgsender_MSG;
[L8221]              havoc msgvalue_MSG;
[L8222]              havoc choice;
[L8223]              havoc __ret_0_getDkargoPrefix;
[L8224]              havoc expected_s84;
[L8225]              havoc __ret_0_owner;
[L8226]              havoc __ret_0_isOwner;
[L8227]              havoc __ret_0_count;
[L8228]              havoc __ret_0_head;
[L8229]              havoc __ret_0_tail;
[L8230]              havoc node_s309;
[L8231]              havoc __ret_0_nextOf;
[L8232]              havoc node_s323;
[L8233]              havoc __ret_0_prevOf;
[L8234]              havoc node_s376;
[L8235]              havoc __ret_0_isLinked;
[L8236]              havoc infcid_s625;
[L8237]              havoc __ret_0_supportsInterface;
[L8238]              havoc to_s1257;
[L8239]              havoc value_s1257;
[L8240]              havoc __ret_0_transfer;
[L8241]              havoc spender_s1084;
[L8242]              havoc amount_s1084;
[L8243]              havoc __ret_0_approve;
[L8244]              havoc from_s1311;
[L8245]              havoc to_s1311;
[L8246]              havoc value_s1311;
[L8247]              havoc __ret_0_transferFrom;
[L8248]              havoc __ret_0_totalSupply;
[L8249]              havoc account_s841;
[L8250]              havoc __ret_0_balanceOf;
[L8251]              havoc approver_s857;
[L8252]              havoc spender_s857;
[L8253]              havoc __ret_0_allowance;
[L8254]              havoc spender_s1111;
[L8255]              havoc addedValue_s1111;
[L8256]              havoc __ret_0_increaseAllowance;
[L8257]              havoc spender_s1139;
[L8258]              havoc subtractedValue_s1139;
[L8259]              havoc __ret_0_decreaseAllowance;
[L8260]              havoc name_s1191;
[L8261]              havoc symbol_s1191;
[L8262]              havoc supply_s1191;
[L8263]              havoc amount_s1203;
[L8264]              havoc __ret_0_name;
[L8265]              havoc __ret_0_symbol;
[L8266]              havoc __ret_0_decimals;
[L8267]              havoc tmpNow;
[L8268]              havoc gas;
[L8269]              assume gas > 4000000 && gas <= 8000000;
[L8270]              tmpNow := now;
[L8271]              havoc now;
[L8272]              assume now > tmpNow;
[L8273]              assume msgsender_MSG != null;
[L8274]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8275]              assume DType[msgsender_MSG] != Ownership;
[L8276]              assume DType[msgsender_MSG] != SafeMath;
[L8277]              assume DType[msgsender_MSG] != AddressChain;
[L8278]              assume DType[msgsender_MSG] != IERC165;
[L8279]              assume DType[msgsender_MSG] != ERC165;
[L8280]              assume DType[msgsender_MSG] != IERC20;
[L8281]              assume DType[msgsender_MSG] != ERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20Safe;
[L8283]              assume DType[msgsender_MSG] != DkargoToken;
[L8284]              Alloc[msgsender_MSG] := true;
[L8285]  COND TRUE   choice == 23
[L8286]              gas := gas - 21000;
[L8287]  COND FALSE  !(gas >= 0)
[L8450]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:19:21,108 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:19:21,108 INFO  L82        PathProgramCache]: Analyzing trace with hash -320430402, now seen corresponding path program 1 times
[2020-11-25 14:19:21,110 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:19:21,135 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:19:21,439 INFO  L134       CoverageAnalysis]: Checked inductivity of 176 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 176 trivial. 0 not checked.
[2020-11-25 14:19:21,439 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:19:21,439 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [12] imperfect sequences [] total 12
[2020-11-25 14:19:21,440 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:19:21,440 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 14:19:21,440 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=26, Invalid=106, Unknown=0, NotChecked=0, Total=132
[2020-11-25 14:19:21,440 INFO  L87              Difference]: Start difference. First operand 4958 states and 5519 transitions. cyclomatic complexity: 564 Second operand 12 states.
[2020-11-25 14:19:23,149 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:19:23,149 INFO  L93              Difference]: Finished difference Result 3138 states and 3506 transitions.
[2020-11-25 14:19:23,149 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 14:19:23,149 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3138 states and 3506 transitions.
[2020-11-25 14:19:23,154 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 14:19:23,154 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3138 states to 0 states and 0 transitions.
[2020-11-25 14:19:23,154 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-25 14:19:23,154 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-25 14:19:23,154 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-25 14:19:23,154 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:19:23,155 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 14:19:23,155 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 14:19:23,155 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-25 14:19:23,155 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 14:19:23,155 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-25 14:19:23,155 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-25 14:19:23,155 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-25 14:19:23,158 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:19:23 BasicIcfg
[2020-11-25 14:19:23,158 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 14:19:23,158 INFO  L168              Benchmark]: Toolchain (without parser) took 18087.15 ms. Allocated memory was 1.0 GB in the beginning and 2.5 GB in the end (delta: 1.5 GB). Free memory was 935.2 MB in the beginning and 2.2 GB in the end (delta: -1.3 GB). Peak memory consumption was 211.8 MB. Max. memory is 15.3 GB.
[2020-11-25 14:19:23,159 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.32 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 14:19:23,159 INFO  L168              Benchmark]: Boogie Preprocessor took 118.02 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 913.7 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-25 14:19:23,160 INFO  L168              Benchmark]: UtopiaSpecLang took 75.62 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 14:19:23,160 INFO  L168              Benchmark]: Boogie Printer took 21.47 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 14:19:23,160 INFO  L168              Benchmark]: RCFGBuilder took 1163.62 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 54.5 MB). Free memory was 897.6 MB in the beginning and 903.7 MB in the end (delta: -6.0 MB). Peak memory consumption was 184.2 MB. Max. memory is 15.3 GB.
[2020-11-25 14:19:23,161 INFO  L168              Benchmark]: UtopiaLTL2Aut took 36.30 ms. Allocated memory is still 1.1 GB. Free memory was 903.7 MB in the beginning and 900.3 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
[2020-11-25 14:19:23,161 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2380.30 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 198.2 MB). Free memory was 900.3 MB in the beginning and 963.6 MB in the end (delta: -63.3 MB). Peak memory consumption was 466.4 MB. Max. memory is 15.3 GB.
[2020-11-25 14:19:23,161 INFO  L168              Benchmark]: BlockEncodingV2 took 202.67 ms. Allocated memory is still 1.3 GB. Free memory was 963.6 MB in the beginning and 865.2 MB in the end (delta: 98.4 MB). Peak memory consumption was 98.4 MB. Max. memory is 15.3 GB.
[2020-11-25 14:19:23,162 INFO  L168              Benchmark]: BuchiAutomizer took 14086.48 ms. Allocated memory was 1.3 GB in the beginning and 2.5 GB in the end (delta: 1.2 GB). Free memory was 865.2 MB in the beginning and 2.2 GB in the end (delta: -1.4 GB). There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 14:19:23,164 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    7632 locations, 13663 edges
  - StatisticsResult: Encoded RCFG
    7409 locations, 13060 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.32 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 118.02 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 913.7 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 75.62 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 903.0 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 21.47 ms. Allocated memory is still 1.0 GB. Free memory was 903.0 MB in the beginning and 897.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1163.62 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 54.5 MB). Free memory was 897.6 MB in the beginning and 903.7 MB in the end (delta: -6.0 MB). Peak memory consumption was 184.2 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 36.30 ms. Allocated memory is still 1.1 GB. Free memory was 903.7 MB in the beginning and 900.3 MB in the end (delta: 3.4 MB). Peak memory consumption was 3.4 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2380.30 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 198.2 MB). Free memory was 900.3 MB in the beginning and 963.6 MB in the end (delta: -63.3 MB). Peak memory consumption was 466.4 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 202.67 ms. Allocated memory is still 1.3 GB. Free memory was 963.6 MB in the beginning and 865.2 MB in the end (delta: 98.4 MB). Peak memory consumption was 98.4 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 14086.48 ms. Allocated memory was 1.3 GB in the beginning and 2.5 GB in the end (delta: 1.2 GB). Free memory was 865.2 MB in the beginning and 2.2 GB in the end (delta: -1.4 GB). There was no memory consumed. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3093 locations, 4210 edges
  - StatisticsResult: BuchiProgram size
    7632 locations, 13663 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 9 terminating modules (9 trivial, 0 deterministic, 0 nondeterministic). 9 modules have a trivial ranking function, the largest among these consists of 19 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 14.0s and 10 iterations.  TraceHistogramMax:3. Analysis of lassos took 1.8s. Construction of modules took 8.1s. BÃ¼chi inclusion checks took 3.0s. Highest rank in rank-based complementation 0. Minimization of det autom 9. Minimization of nondet autom 0. Automata minimization 0.4s AutomataMinimizationTime, 8 MinimizatonAttempts, 1304 StatesRemovedByMinimization, 5 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 5249 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 44377 SDtfs, 30301 SDslu, 85969 SDs, 0 SdLazy, 114720 SolverSat, 5877 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 8.1s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU9 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_transferFrom_DkargoToken0) ==> ( <>(fail_transferFrom_DkargoToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
