This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 06:58:45,599 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 06:58:45,601 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 06:58:45,611 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 06:58:45,611 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 06:58:45,612 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 06:58:45,612 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 06:58:45,614 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 06:58:45,615 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 06:58:45,616 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 06:58:45,617 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 06:58:45,617 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 06:58:45,617 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 06:58:45,618 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 06:58:45,619 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 06:58:45,620 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 06:58:45,620 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 06:58:45,621 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 06:58:45,623 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 06:58:45,624 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 06:58:45,624 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 06:58:45,625 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 06:58:45,627 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 06:58:45,627 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 06:58:45,627 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 06:58:45,627 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 06:58:45,628 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 06:58:45,628 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 06:58:45,628 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 06:58:45,629 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 06:58:45,629 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 06:58:45,630 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 06:58:45,630 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 06:58:45,631 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 06:58:45,631 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 06:58:45,631 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 06:58:45,632 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 06:58:45,632 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 06:58:45,632 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 06:58:45,633 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 06:58:45,633 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 06:58:45,633 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 06:58:45,641 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 06:58:45,641 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 06:58:45,642 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 06:58:45,642 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 06:58:45,642 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 06:58:45,642 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 06:58:45,642 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 06:58:45,642 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 06:58:45,642 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 06:58:45,643 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 06:58:45,643 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 06:58:45,643 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 06:58:45,643 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 06:58:45,643 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 06:58:45,643 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 06:58:45,643 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 06:58:45,643 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 06:58:45,643 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 06:58:45,643 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 06:58:45,644 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 06:58:45,644 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 06:58:45,644 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 06:58:45,644 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 06:58:45,644 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 06:58:45,644 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 06:58:45,644 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 06:58:45,668 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 06:58:45,681 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 06:58:45,684 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 06:58:45,685 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 06:58:45,685 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 06:58:45,686 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/TulipToken_0x3D1BE3fEf769399CcE7e504E85324d622F23Cf85_transfer-self.bpl
[2020-11-25 06:58:45,686 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/TulipToken_0x3D1BE3fEf769399CcE7e504E85324d622F23Cf85_transfer-self.bpl'
[2020-11-25 06:58:45,771 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 06:58:45,772 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 06:58:45,772 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 06:58:45,773 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 06:58:45,773 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 06:58:45,788 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "TulipToken_0x3D1BE3fEf769399CcE7e504E85324d622F23Cf85_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:58:45" (1/1) ...
[2020-11-25 06:58:45,790 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "TulipToken_0x3D1BE3fEf769399CcE7e504E85324d622F23Cf85_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:58:45" (1/1) ...
[2020-11-25 06:58:45,821 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "TulipToken_0x3D1BE3fEf769399CcE7e504E85324d622F23Cf85_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:58:45" (1/1) ...
[2020-11-25 06:58:45,822 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "TulipToken_0x3D1BE3fEf769399CcE7e504E85324d622F23Cf85_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:58:45" (1/1) ...
[2020-11-25 06:58:45,845 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "TulipToken_0x3D1BE3fEf769399CcE7e504E85324d622F23Cf85_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:58:45" (1/1) ...
[2020-11-25 06:58:45,856 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "TulipToken_0x3D1BE3fEf769399CcE7e504E85324d622F23Cf85_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:58:45" (1/1) ...
[2020-11-25 06:58:45,864 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "TulipToken_0x3D1BE3fEf769399CcE7e504E85324d622F23Cf85_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:58:45" (1/1) ...
[2020-11-25 06:58:45,873 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 06:58:45,874 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 06:58:45,874 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 06:58:45,876 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 06:58:45,880 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "TulipToken_0x3D1BE3fEf769399CcE7e504E85324d622F23Cf85_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:58:45" (1/1) ...
[2020-11-25 06:58:45,901 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _name_ERC20[this] == old(_name_ERC20[this]) && _symbol_ERC20[this] == old(_symbol_ERC20[this]) && _decimals_ERC20[this] == old(_decimals_ERC20[this]) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]))))
[2020-11-25 06:58:45,906 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _name_ERC20[this] == old(_name_ERC20[this]) && _symbol_ERC20[this] == old(_symbol_ERC20[this]) && _decimals_ERC20[this] == old(_decimals_ERC20[this]) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]))))
[2020-11-25 06:58:45,915 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _name_ERC20[this] == old(_name_ERC20[this]) && _symbol_ERC20[this] == old(_symbol_ERC20[this]) && _decimals_ERC20[this] == old(_decimals_ERC20[this]) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]))))
[2020-11-25 06:58:45,922 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender==recipient_s307 && amount_s307<=_balances_ERC20[this][msg.sender] ) && amount_s307>=0 ) && amount_s307<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][recipient_s307]>=0 ) && _balances_ERC20[this][recipient_s307]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][msg.sender]>=0 ) && _balances_ERC20[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IdentifierExpression[recipient_s307,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]],BinaryExpression[COMPLEQ,IdentifierExpression[amount_s307,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]],BinaryExpression[COMPGEQ,IdentifierExpression[amount_s307,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[amount_s307,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s307,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[recipient_s307,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 06:58:45,925 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( __ret_0_==true && _totalSupply_ERC20[this]==( old(_totalSupply_ERC20[this]) ) ) && _balances_ERC20[this]==( old(_balances_ERC20[this]) ) ) && _allowances_ERC20[this]==( old(_allowances_ERC20[this]) ) ) && _name_ERC20[this]==( old(_name_ERC20[this]) ) ) && _symbol_ERC20[this]==( old(_symbol_ERC20[this]) ) ) && _decimals_ERC20[this]==( old(_decimals_ERC20[this]) ) ) && M_int_Ref[_owner_MultOwnable[this]]==( old(M_int_Ref[_owner_MultOwnable[this]]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transfer~address~uint256_ERC20>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_decimals_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[M_int_Ref,GLOBAL],[ArrayAccessExpression[IdentifierExpression[_owner_MultOwnable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[M_int_Ref,GLOBAL],[ArrayAccessExpression[IdentifierExpression[_owner_MultOwnable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_ERC20>]]]]]]]]
[2020-11-25 06:58:45,936 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(ERC20.transfer(to, value), msg.sender == to && value <= _balances_ERC20[this][msg.sender] && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][msg.sender] >= 0 &&  _balances_ERC20[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(ERC20.transfer(to, value), return == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this]) && _balances_ERC20[this] == old(_balances_ERC20[this]) && _allowances_ERC20[this] == old(_allowances_ERC20[this]) && _name_ERC20[this] == old(_name_ERC20[this]) && _symbol_ERC20[this] == old(_symbol_ERC20[this]) && _decimals_ERC20[this] == old(_decimals_ERC20[this]) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]))))
[2020-11-25 06:58:45,937 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_ERC200) ==> ( <>AP(success_transfer_ERC200) ) ) )
Executed UtopiaSpecLang
[2020-11-25 06:58:45,946 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:58:45 PropertyContainer
[2020-11-25 06:58:45,947 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 06:58:45,947 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 06:58:45,947 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 06:58:45,947 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 06:58:45,948 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "TulipToken_0x3D1BE3fEf769399CcE7e504E85324d622F23Cf85_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:58:45" (1/2) ...
[2020-11-25 06:58:45,948 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 06:58:45,948 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 06:58:45,965 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:58:45" (2/2) ...
[2020-11-25 06:58:45,965 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 06:58:45,965 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 06:58:45,965 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 06:58:45,966 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 06:58:45,966 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "TulipToken_0x3D1BE3fEf769399CcE7e504E85324d622F23Cf85_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:58:45" (1/2) ...
[2020-11-25 06:58:46,020 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 06:58:46,020 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 06:58:46,020 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 06:58:46,020 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 06:58:46,020 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 06:58:46,020 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 06:58:46,021 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 06:58:46,021 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 06:58:46,021 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 06:58:46,021 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 06:58:46,021 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 06:58:46,021 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 06:58:46,021 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 06:58:46,021 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 06:58:46,021 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 06:58:46,022 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 06:58:46,022 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 06:58:46,022 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 06:58:46,022 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 06:58:46,022 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 06:58:46,022 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 06:58:46,022 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20
[2020-11-25 06:58:46,022 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20
[2020-11-25 06:58:46,022 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20
[2020-11-25 06:58:46,023 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20
[2020-11-25 06:58:46,023 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20
[2020-11-25 06:58:46,023 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20
[2020-11-25 06:58:46,023 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 06:58:46,023 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 06:58:46,023 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 06:58:46,023 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 06:58:46,023 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 06:58:46,023 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 06:58:46,023 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 06:58:46,024 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 06:58:46,024 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 06:58:46,024 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 06:58:46,024 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 06:58:46,024 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 06:58:46,024 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 06:58:46,024 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20
[2020-11-25 06:58:46,024 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 06:58:46,024 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20
[2020-11-25 06:58:46,024 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 06:58:46,025 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 06:58:46,025 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 06:58:46,025 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 06:58:46,025 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 06:58:46,025 INFO  L130     BoogieDeclarations]: Found specification of procedure MultOwnable_MultOwnable_NoBaseCtor__success
[2020-11-25 06:58:46,025 INFO  L130     BoogieDeclarations]: Found specification of procedure MultOwnable_MultOwnable
[2020-11-25 06:58:46,025 INFO  L138     BoogieDeclarations]: Found implementation of procedure MultOwnable_MultOwnable
[2020-11-25 06:58:46,025 INFO  L130     BoogieDeclarations]: Found specification of procedure checkOwner_MultOwnable__success
[2020-11-25 06:58:46,025 INFO  L130     BoogieDeclarations]: Found specification of procedure checkNewOwner~address_MultOwnable__success
[2020-11-25 06:58:46,025 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_MultOwnable
[2020-11-25 06:58:46,025 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_MultOwnable
[2020-11-25 06:58:46,026 INFO  L130     BoogieDeclarations]: Found specification of procedure getOwners_MultOwnable
[2020-11-25 06:58:46,026 INFO  L138     BoogieDeclarations]: Found implementation of procedure getOwners_MultOwnable
[2020-11-25 06:58:46,026 INFO  L130     BoogieDeclarations]: Found specification of procedure addOwnerShip~address_MultOwnable
[2020-11-25 06:58:46,026 INFO  L138     BoogieDeclarations]: Found implementation of procedure addOwnerShip~address_MultOwnable
[2020-11-25 06:58:46,026 INFO  L130     BoogieDeclarations]: Found specification of procedure _addOwnerShip~address_MultOwnable__success
[2020-11-25 06:58:46,026 INFO  L130     BoogieDeclarations]: Found specification of procedure TulipToken_TulipToken_NoBaseCtor__success
[2020-11-25 06:58:46,026 INFO  L130     BoogieDeclarations]: Found specification of procedure TulipToken_TulipToken
[2020-11-25 06:58:46,026 INFO  L138     BoogieDeclarations]: Found implementation of procedure TulipToken_TulipToken
[2020-11-25 06:58:46,026 INFO  L130     BoogieDeclarations]: Found specification of procedure contractMint~address~uint256_TulipToken
[2020-11-25 06:58:46,026 INFO  L138     BoogieDeclarations]: Found implementation of procedure contractMint~address~uint256_TulipToken
[2020-11-25 06:58:46,027 INFO  L130     BoogieDeclarations]: Found specification of procedure contractBurn~address~uint256_TulipToken
[2020-11-25 06:58:46,027 INFO  L138     BoogieDeclarations]: Found implementation of procedure contractBurn~address~uint256_TulipToken
[2020-11-25 06:58:46,027 INFO  L130     BoogieDeclarations]: Found specification of procedure addOwner~address_TulipToken
[2020-11-25 06:58:46,027 INFO  L138     BoogieDeclarations]: Found implementation of procedure addOwner~address_TulipToken
[2020-11-25 06:58:46,027 INFO  L130     BoogieDeclarations]: Found specification of procedure getOwner_TulipToken
[2020-11-25 06:58:46,027 INFO  L138     BoogieDeclarations]: Found implementation of procedure getOwner_TulipToken
[2020-11-25 06:58:46,027 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwner_TulipToken
[2020-11-25 06:58:46,027 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwner_TulipToken
[2020-11-25 06:58:46,027 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 06:58:46,027 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 06:58:46,028 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 06:58:46,028 INFO  L130     BoogieDeclarations]: Found specification of procedure isAnOwner_pre__success
[2020-11-25 06:58:46,028 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 06:58:46,028 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 06:58:46,028 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 06:58:46,028 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 06:58:46,028 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 06:58:46,028 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 06:58:46,028 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MultOwnable
[2020-11-25 06:58:46,029 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MultOwnable
[2020-11-25 06:58:46,029 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_TulipToken
[2020-11-25 06:58:46,029 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 06:58:46,029 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 06:58:46,029 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 06:58:46,029 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 06:58:46,029 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 06:58:46,029 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 06:58:46,029 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 06:58:46,029 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 06:58:46,030 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 06:58:46,030 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 06:58:46,030 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 06:58:46,030 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 06:58:46,030 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 06:58:46,030 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 06:58:46,030 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 06:58:46,030 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 06:58:46,030 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20__success
[2020-11-25 06:58:46,030 INFO  L130     BoogieDeclarations]: Found specification of procedure name_ERC20__fail
[2020-11-25 06:58:46,030 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20__success
[2020-11-25 06:58:46,031 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_ERC20__fail
[2020-11-25 06:58:46,031 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20__success
[2020-11-25 06:58:46,031 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_ERC20__fail
[2020-11-25 06:58:46,031 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 06:58:46,031 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 06:58:46,032 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 06:58:46,032 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 06:58:46,032 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 06:58:46,033 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 06:58:46,033 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 06:58:46,033 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 06:58:46,033 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 06:58:46,033 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 06:58:46,034 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 06:58:46,034 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 06:58:46,034 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 06:58:46,034 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 06:58:46,035 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 06:58:46,035 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 06:58:46,035 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 06:58:46,035 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 06:58:46,036 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 06:58:46,036 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 06:58:46,036 INFO  L130     BoogieDeclarations]: Found specification of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 06:58:46,036 INFO  L130     BoogieDeclarations]: Found specification of procedure MultOwnable_MultOwnable_NoBaseCtor__fail
[2020-11-25 06:58:46,037 INFO  L130     BoogieDeclarations]: Found specification of procedure MultOwnable_MultOwnable__success
[2020-11-25 06:58:46,037 INFO  L130     BoogieDeclarations]: Found specification of procedure MultOwnable_MultOwnable__fail
[2020-11-25 06:58:46,037 INFO  L130     BoogieDeclarations]: Found specification of procedure checkOwner_MultOwnable__fail
[2020-11-25 06:58:46,038 INFO  L130     BoogieDeclarations]: Found specification of procedure checkNewOwner~address_MultOwnable__fail
[2020-11-25 06:58:46,038 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_MultOwnable__success
[2020-11-25 06:58:46,038 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_MultOwnable__fail
[2020-11-25 06:58:46,038 INFO  L130     BoogieDeclarations]: Found specification of procedure getOwners_MultOwnable__success
[2020-11-25 06:58:46,038 INFO  L130     BoogieDeclarations]: Found specification of procedure getOwners_MultOwnable__fail
[2020-11-25 06:58:46,039 INFO  L130     BoogieDeclarations]: Found specification of procedure addOwnerShip~address_MultOwnable__success
[2020-11-25 06:58:46,039 INFO  L130     BoogieDeclarations]: Found specification of procedure addOwnerShip~address_MultOwnable__fail
[2020-11-25 06:58:46,039 INFO  L130     BoogieDeclarations]: Found specification of procedure _addOwnerShip~address_MultOwnable__fail
[2020-11-25 06:58:46,039 INFO  L130     BoogieDeclarations]: Found specification of procedure TulipToken_TulipToken_NoBaseCtor__fail
[2020-11-25 06:58:46,040 INFO  L130     BoogieDeclarations]: Found specification of procedure TulipToken_TulipToken__success
[2020-11-25 06:58:46,040 INFO  L130     BoogieDeclarations]: Found specification of procedure TulipToken_TulipToken__fail
[2020-11-25 06:58:46,040 INFO  L130     BoogieDeclarations]: Found specification of procedure contractMint~address~uint256_TulipToken__success
[2020-11-25 06:58:46,041 INFO  L130     BoogieDeclarations]: Found specification of procedure contractMint~address~uint256_TulipToken__fail
[2020-11-25 06:58:46,041 INFO  L130     BoogieDeclarations]: Found specification of procedure contractBurn~address~uint256_TulipToken__success
[2020-11-25 06:58:46,041 INFO  L130     BoogieDeclarations]: Found specification of procedure contractBurn~address~uint256_TulipToken__fail
[2020-11-25 06:58:46,041 INFO  L130     BoogieDeclarations]: Found specification of procedure addOwner~address_TulipToken__success
[2020-11-25 06:58:46,042 INFO  L130     BoogieDeclarations]: Found specification of procedure addOwner~address_TulipToken__fail
[2020-11-25 06:58:46,042 INFO  L130     BoogieDeclarations]: Found specification of procedure getOwner_TulipToken__success
[2020-11-25 06:58:46,042 INFO  L130     BoogieDeclarations]: Found specification of procedure getOwner_TulipToken__fail
[2020-11-25 06:58:46,042 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwner_TulipToken__success
[2020-11-25 06:58:46,043 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwner_TulipToken__fail
[2020-11-25 06:58:46,043 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 06:58:46,043 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 06:58:46,043 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 06:58:46,044 INFO  L130     BoogieDeclarations]: Found specification of procedure isAnOwner_pre__fail
[2020-11-25 06:58:46,044 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 06:58:46,044 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 06:58:46,044 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 06:58:46,044 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 06:58:46,045 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 06:58:46,045 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 06:58:46,045 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 06:58:46,045 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 06:58:46,045 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 06:58:46,046 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 06:58:46,046 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 06:58:46,046 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 06:58:46,046 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-25 06:58:46,046 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-25 06:58:46,047 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 06:58:46,047 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 06:58:46,047 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 06:58:46,047 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 06:58:46,047 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 06:58:46,048 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 06:58:46,048 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 06:58:46,048 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 06:58:46,048 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 06:58:46,048 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 06:58:46,048 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20__fail
[2020-11-25 06:58:46,048 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_ERC20__success
[2020-11-25 06:58:46,048 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20__fail
[2020-11-25 06:58:46,048 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_ERC20__success
[2020-11-25 06:58:46,048 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20__fail
[2020-11-25 06:58:46,048 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_ERC20__success
[2020-11-25 06:58:46,049 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 06:58:46,049 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 06:58:46,049 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 06:58:46,049 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 06:58:46,049 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 06:58:46,049 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 06:58:46,049 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 06:58:46,049 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 06:58:46,049 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 06:58:46,049 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 06:58:46,049 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 06:58:46,049 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 06:58:46,049 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__fail
[2020-11-25 06:58:46,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20__success
[2020-11-25 06:58:46,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__fail
[2020-11-25 06:58:46,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20__success
[2020-11-25 06:58:46,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 06:58:46,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 06:58:46,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 06:58:46,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 06:58:46,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 06:58:46,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 06:58:46,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 06:58:46,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 06:58:46,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__fail
[2020-11-25 06:58:46,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burnFrom~address~uint256_ERC20__success
[2020-11-25 06:58:46,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure MultOwnable_MultOwnable_NoBaseCtor__fail
[2020-11-25 06:58:46,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure MultOwnable_MultOwnable_NoBaseCtor__success
[2020-11-25 06:58:46,050 INFO  L138     BoogieDeclarations]: Found implementation of procedure MultOwnable_MultOwnable__fail
[2020-11-25 06:58:46,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure MultOwnable_MultOwnable__success
[2020-11-25 06:58:46,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkOwner_MultOwnable__fail
[2020-11-25 06:58:46,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkOwner_MultOwnable__success
[2020-11-25 06:58:46,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkNewOwner~address_MultOwnable__fail
[2020-11-25 06:58:46,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure checkNewOwner~address_MultOwnable__success
[2020-11-25 06:58:46,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_MultOwnable__fail
[2020-11-25 06:58:46,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_MultOwnable__success
[2020-11-25 06:58:46,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure getOwners_MultOwnable__fail
[2020-11-25 06:58:46,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure getOwners_MultOwnable__success
[2020-11-25 06:58:46,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure addOwnerShip~address_MultOwnable__fail
[2020-11-25 06:58:46,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure addOwnerShip~address_MultOwnable__success
[2020-11-25 06:58:46,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addOwnerShip~address_MultOwnable__fail
[2020-11-25 06:58:46,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure _addOwnerShip~address_MultOwnable__success
[2020-11-25 06:58:46,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure TulipToken_TulipToken_NoBaseCtor__fail
[2020-11-25 06:58:46,051 INFO  L138     BoogieDeclarations]: Found implementation of procedure TulipToken_TulipToken_NoBaseCtor__success
[2020-11-25 06:58:46,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure TulipToken_TulipToken__fail
[2020-11-25 06:58:46,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure TulipToken_TulipToken__success
[2020-11-25 06:58:46,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure contractMint~address~uint256_TulipToken__fail
[2020-11-25 06:58:46,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure contractMint~address~uint256_TulipToken__success
[2020-11-25 06:58:46,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure contractBurn~address~uint256_TulipToken__fail
[2020-11-25 06:58:46,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure contractBurn~address~uint256_TulipToken__success
[2020-11-25 06:58:46,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure addOwner~address_TulipToken__fail
[2020-11-25 06:58:46,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure addOwner~address_TulipToken__success
[2020-11-25 06:58:46,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure getOwner_TulipToken__fail
[2020-11-25 06:58:46,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure getOwner_TulipToken__success
[2020-11-25 06:58:46,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwner_TulipToken__fail
[2020-11-25 06:58:46,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwner_TulipToken__success
[2020-11-25 06:58:46,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 06:58:46,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 06:58:46,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 06:58:46,052 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 06:58:46,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 06:58:46,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 06:58:46,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure isAnOwner_pre__fail
[2020-11-25 06:58:46,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure isAnOwner_pre__success
[2020-11-25 06:58:46,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 06:58:46,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 06:58:46,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 06:58:46,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 06:58:46,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 06:58:46,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 06:58:46,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MultOwnable
[2020-11-25 06:58:46,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MultOwnable
[2020-11-25 06:58:46,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_TulipToken
[2020-11-25 06:58:46,053 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 06:58:46,054 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 06:58:46,054 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 06:58:46,283 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 06:58:46,284 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 06:58:46,284 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 06:58:46,717 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 06:58:46,717 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 06:58:46,719 INFO  L202        PluginConnector]: Adding new model TulipToken_0x3D1BE3fEf769399CcE7e504E85324d622F23Cf85_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:58:46 BoogieIcfgContainer
[2020-11-25 06:58:46,719 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:58:45" (2/2) ...
[2020-11-25 06:58:46,719 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 06:58:46,719 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@776e872b and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:58:46, skipping insertion in model container
[2020-11-25 06:58:46,720 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 06:58:46,720 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 06:58:46,720 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 06:58:46,721 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 06:58:46,722 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "TulipToken_0x3D1BE3fEf769399CcE7e504E85324d622F23Cf85_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:58:45" (1/3) ...
[2020-11-25 06:58:46,722 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@13fc052f and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:58:46, skipping insertion in model container
[2020-11-25 06:58:46,722 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:58:45" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 06:58:46,757 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:58:46 NWAContainer
[2020-11-25 06:58:46,757 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 06:58:46,758 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 06:58:46,758 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 06:58:46,758 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 06:58:46,759 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "TulipToken_0x3D1BE3fEf769399CcE7e504E85324d622F23Cf85_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:58:46" (3/4) ...
[2020-11-25 06:58:46,760 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@4f03feef and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:58:46, skipping insertion in model container
[2020-11-25 06:58:46,760 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:58:46" (4/4) ...
[2020-11-25 06:58:46,763 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 06:58:46,767 INFO  L110   BuchiProductObserver]: Initial RCFG 1825 locations, 2511 edges
[2020-11-25 06:58:46,767 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 06:58:46,778 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 06:58:47,998 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 06:58:48,004 INFO  L110   BuchiProductObserver]: BuchiProgram size 4558 locations, 8195 edges
[2020-11-25 06:58:48,005 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:58:48 BoogieIcfgContainer
[2020-11-25 06:58:48,005 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 06:58:48,005 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 06:58:48,005 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 06:58:48,007 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 06:58:48,008 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:58:48" (1/1) ...
[2020-11-25 06:58:48,129 INFO  L313           BlockEncoder]: Initial Icfg 4558 locations, 8195 edges
[2020-11-25 06:58:48,129 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 06:58:48,129 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 06:58:48,129 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 06:58:48,130 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 06:58:48,142 INFO  L70    emoveInfeasibleEdges]: Removed 135 edges and 13 locations because of local infeasibility
[2020-11-25 06:58:48,151 INFO  L70        RemoveSinkStates]: Removed 80 edges and 53 locations by removing sink states
[2020-11-25 06:58:48,162 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 06:58:48,168 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 06:58:48,172 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 06:58:48,173 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 06:58:48,178 INFO  L313           BlockEncoder]: Encoded RCFG 4468 locations, 7945 edges
[2020-11-25 06:58:48,178 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 06:58:48 BasicIcfg
[2020-11-25 06:58:48,178 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 06:58:48,178 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 06:58:48,178 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 06:58:48,180 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 06:58:48,180 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:58:48,180 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "TulipToken_0x3D1BE3fEf769399CcE7e504E85324d622F23Cf85_transfer-self.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 06:58:45" (1/6) ...
[2020-11-25 06:58:48,182 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5d5e90bb and model type TulipToken_0x3D1BE3fEf769399CcE7e504E85324d622F23Cf85_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:58:48, skipping insertion in model container
[2020-11-25 06:58:48,182 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:58:48,182 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 06:58:45" (2/6) ...
[2020-11-25 06:58:48,182 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5d5e90bb and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:58:48, skipping insertion in model container
[2020-11-25 06:58:48,182 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:58:48,182 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "TulipToken_0x3D1BE3fEf769399CcE7e504E85324d622F23Cf85_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 06:58:46" (3/6) ...
[2020-11-25 06:58:48,182 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5d5e90bb and model type TulipToken_0x3D1BE3fEf769399CcE7e504E85324d622F23Cf85_transfer-self.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 06:58:48, skipping insertion in model container
[2020-11-25 06:58:48,182 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:58:48,182 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 06:58:46" (4/6) ...
[2020-11-25 06:58:48,183 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5d5e90bb and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 06:58:48, skipping insertion in model container
[2020-11-25 06:58:48,183 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:58:48,183 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 06:58:48" (5/6) ...
[2020-11-25 06:58:48,183 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@5d5e90bb and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 06:58:48, skipping insertion in model container
[2020-11-25 06:58:48,183 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 06:58:48,183 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 06:58:48" (6/6) ...
[2020-11-25 06:58:48,184 INFO  L404   chiAutomizerObserver]: Analyzing ICFG TulipToken_0x3D1BE3fEf769399CcE7e504E85324d622F23Cf85_transfer-self.bpl_BEv2
[2020-11-25 06:58:48,219 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 06:58:48,219 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 06:58:48,219 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 06:58:48,219 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 06:58:48,220 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 06:58:48,220 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 06:58:48,220 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 06:58:48,220 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 06:58:48,220 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 06:58:48,258 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4468 states.
[2020-11-25 06:58:48,312 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:58:48,312 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:58:48,312 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:58:48,320 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:58:48,320 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:58:48,320 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 06:58:48,320 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4468 states.
[2020-11-25 06:58:48,342 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:58:48,342 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:58:48,342 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:58:48,343 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:58:48,343 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4923]              assume null == 0;
[L4924]  CALL        call this := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L4924]  RET         call this := FreshRefGenerator__success();
[L4925]              assume now >= 0;
[L4926]              assume DType[this] == TulipToken;
[L4927]              assume msgvalue_MSG == 0;
[L4928]              gas := gas - 53000;
[L4929]  CALL        call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1197]              havoc __exception;
[L1198]              revert := false;
[L1199]  COND TRUE   __exception
[L1200]              __tmp__Balance := Balance;
[L1201]              __tmp__DType := DType;
[L1202]              __tmp__Alloc := Alloc;
[L1203]              __tmp__balance_ADDR := balance_ADDR;
[L1204]              __tmp__M_Ref_int := M_Ref_int;
[L1205]              __tmp__sum__balances0 := sum__balances0;
[L1206]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1207]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1208]              __tmp__sum__allowances1 := sum__allowances1;
[L1209]              __tmp__M_int_Ref := M_int_Ref;
[L1210]              __tmp__sum := sum;
[L1211]              __tmp__Length := Length;
[L1212]              __tmp__now := now;
[L1213]              __tmp___balances_ERC20 := _balances_ERC20;
[L1214]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1215]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1216]              __tmp___name_ERC20 := _name_ERC20;
[L1217]              __tmp___symbol_ERC20 := _symbol_ERC20;
[L1218]              __tmp___decimals_ERC20 := _decimals_ERC20;
[L1219]              __tmp___owner_MultOwnable := _owner_MultOwnable;
[L1220]  CALL        call TulipToken_TulipToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3245]  CALL        call MultOwnable_MultOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2989]  CALL        call MultOwnable_MultOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2949]              assume msgsender_MSG != null;
[L2950]              __tmp__Balance[this] := 0;
[L2952]  CALL        call __var_18 := FreshRefGenerator__fail();
[L2090]              havoc newRef;
[L2091]              assume __tmp__Alloc[newRef] == false;
[L2092]              __tmp__Alloc[newRef] := true;
[L2093]              assume newRef != null;
[L2952]  RET         call __var_18 := FreshRefGenerator__fail();
[L2953]  COND TRUE   revert
[L2989]  RET         call MultOwnable_MultOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2990]  COND FALSE  !(revert)
[L3245]  RET         call MultOwnable_MultOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3246]  COND TRUE   revert
[L1220]  RET         call TulipToken_TulipToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1221]              assume revert || gas < 0;
[L4929]  RET         call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L4930]              assume !revert && gas >= 0;

Loop:
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND TRUE   choice == 19
[L4793]              gas := gas - 21000;
[L4794]  COND FALSE  !(gas >= 0)
[L4933]  RET         call CorralChoice_TulipToken(this);

[2020-11-25 06:58:48,359 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:58:48,360 INFO  L82        PathProgramCache]: Analyzing trace with hash -1236544951, now seen corresponding path program 1 times
[2020-11-25 06:58:48,365 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:58:48,387 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:58:48,437 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 06:58:48,439 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:58:48,439 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 06:58:48,693 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:58:48,701 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 06:58:48,702 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 06:58:48,703 INFO  L87              Difference]: Start difference. First operand 4468 states. Second operand 3 states.
[2020-11-25 06:58:48,875 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:58:48,876 INFO  L93              Difference]: Finished difference Result 3139 states and 3645 transitions.
[2020-11-25 06:58:48,876 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 06:58:48,877 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3139 states and 3645 transitions.
[2020-11-25 06:58:48,893 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:58:48,913 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3139 states to 3139 states and 3645 transitions.
[2020-11-25 06:58:48,914 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 06:58:48,916 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 734
[2020-11-25 06:58:48,916 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3139 states and 3645 transitions.
[2020-11-25 06:58:48,924 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:58:48,924 INFO  L728         BuchiCegarLoop]: Abstraction has 3139 states and 3645 transitions.
[2020-11-25 06:58:48,938 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3139 states and 3645 transitions.
[2020-11-25 06:58:48,980 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3139 to 3139.
[2020-11-25 06:58:48,980 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3139 states.
[2020-11-25 06:58:48,986 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3139 states to 3139 states and 3645 transitions.
[2020-11-25 06:58:48,987 INFO  L751         BuchiCegarLoop]: Abstraction has 3139 states and 3645 transitions.
[2020-11-25 06:58:48,987 INFO  L631         BuchiCegarLoop]: Abstraction has 3139 states and 3645 transitions.
[2020-11-25 06:58:48,987 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 06:58:48,987 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3139 states and 3645 transitions.
[2020-11-25 06:58:48,994 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:58:48,994 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:58:48,995 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:58:48,996 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:58:48,996 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4923]              assume null == 0;
[L4924]  CALL        call this := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L4924]  RET         call this := FreshRefGenerator__success();
[L4925]              assume now >= 0;
[L4926]              assume DType[this] == TulipToken;
[L4927]              assume msgvalue_MSG == 0;
[L4928]              gas := gas - 53000;
[L4929]  CALL        call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1197]              havoc __exception;
[L1198]              revert := false;
[L1199]  COND TRUE   __exception
[L1200]              __tmp__Balance := Balance;
[L1201]              __tmp__DType := DType;
[L1202]              __tmp__Alloc := Alloc;
[L1203]              __tmp__balance_ADDR := balance_ADDR;
[L1204]              __tmp__M_Ref_int := M_Ref_int;
[L1205]              __tmp__sum__balances0 := sum__balances0;
[L1206]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L1207]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1208]              __tmp__sum__allowances1 := sum__allowances1;
[L1209]              __tmp__M_int_Ref := M_int_Ref;
[L1210]              __tmp__sum := sum;
[L1211]              __tmp__Length := Length;
[L1212]              __tmp__now := now;
[L1213]              __tmp___balances_ERC20 := _balances_ERC20;
[L1214]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L1215]              __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L1216]              __tmp___name_ERC20 := _name_ERC20;
[L1217]              __tmp___symbol_ERC20 := _symbol_ERC20;
[L1218]              __tmp___decimals_ERC20 := _decimals_ERC20;
[L1219]              __tmp___owner_MultOwnable := _owner_MultOwnable;
[L1220]  CALL        call TulipToken_TulipToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3245]  CALL        call MultOwnable_MultOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L2989]  CALL        call MultOwnable_MultOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2949]              assume msgsender_MSG != null;
[L2950]              __tmp__Balance[this] := 0;
[L2952]  CALL        call __var_18 := FreshRefGenerator__fail();
[L2090]              havoc newRef;
[L2091]              assume __tmp__Alloc[newRef] == false;
[L2092]              __tmp__Alloc[newRef] := true;
[L2093]              assume newRef != null;
[L2952]  RET         call __var_18 := FreshRefGenerator__fail();
[L2953]  COND TRUE   revert
[L2989]  RET         call MultOwnable_MultOwnable_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L2990]  COND FALSE  !(revert)
[L3245]  RET         call MultOwnable_MultOwnable__fail(this, msgsender_MSG, msgvalue_MSG);
[L3246]  COND TRUE   revert
[L1220]  RET         call TulipToken_TulipToken__fail(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1221]              assume revert || gas < 0;
[L4929]  RET         call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L4930]              assume !revert && gas >= 0;
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2435]  COND TRUE   DType[this] == TulipToken
[L2436]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2710]              __var_4 := null;
[L2711]  COND TRUE   !(sender_s487 != null)
[L2712]              revert := true;
[L2436]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2437]  COND TRUE   revert
[L592]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L593]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20[this] == old(_name_ERC20[this])) && _symbol_ERC20[this] == old(_symbol_ERC20[this])) && _decimals_ERC20[this] == old(_decimals_ERC20[this])) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]));
[L2]                 revert := revert_hold;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

Loop:
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2435]  COND TRUE   DType[this] == TulipToken
[L2436]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2710]              __var_4 := null;
[L2711]  COND TRUE   !(sender_s487 != null)
[L2712]              revert := true;
[L2436]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2437]  COND TRUE   revert
[L592]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L593]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20[this] == old(_name_ERC20[this])) && _symbol_ERC20[this] == old(_symbol_ERC20[this])) && _decimals_ERC20[this] == old(_decimals_ERC20[this])) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]));
[L2]                 revert := revert_hold;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

[2020-11-25 06:58:49,000 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:58:49,000 INFO  L82        PathProgramCache]: Analyzing trace with hash 1704856649, now seen corresponding path program 1 times
[2020-11-25 06:58:49,001 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:58:49,012 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:58:49,035 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 06:58:49,035 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:58:49,035 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 06:58:49,036 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:58:49,037 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 06:58:49,037 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 06:58:49,037 INFO  L87              Difference]: Start difference. First operand 3139 states and 3645 transitions. cyclomatic complexity: 520 Second operand 4 states.
[2020-11-25 06:58:49,684 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:58:49,685 INFO  L93              Difference]: Finished difference Result 4615 states and 5342 transitions.
[2020-11-25 06:58:49,685 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 06:58:49,685 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4615 states and 5342 transitions.
[2020-11-25 06:58:49,702 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 06:58:49,719 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4615 states to 4329 states and 5006 transitions.
[2020-11-25 06:58:49,719 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1005
[2020-11-25 06:58:49,720 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1042
[2020-11-25 06:58:49,720 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4329 states and 5006 transitions.
[2020-11-25 06:58:49,727 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:58:49,727 INFO  L728         BuchiCegarLoop]: Abstraction has 4329 states and 5006 transitions.
[2020-11-25 06:58:49,731 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4329 states and 5006 transitions.
[2020-11-25 06:58:49,764 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4329 to 3299.
[2020-11-25 06:58:49,764 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3299 states.
[2020-11-25 06:58:49,769 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3299 states to 3299 states and 3668 transitions.
[2020-11-25 06:58:49,769 INFO  L751         BuchiCegarLoop]: Abstraction has 3299 states and 3668 transitions.
[2020-11-25 06:58:49,769 INFO  L631         BuchiCegarLoop]: Abstraction has 3299 states and 3668 transitions.
[2020-11-25 06:58:49,769 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 06:58:49,769 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3299 states and 3668 transitions.
[2020-11-25 06:58:49,776 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:58:49,776 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:58:49,776 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:58:49,778 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:58:49,778 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4923]              assume null == 0;
[L4924]  CALL        call this := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L4924]  RET         call this := FreshRefGenerator__success();
[L4925]              assume now >= 0;
[L4926]              assume DType[this] == TulipToken;
[L4927]              assume msgvalue_MSG == 0;
[L4928]              gas := gas - 53000;
[L4929]  CALL        call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1197]              havoc __exception;
[L1198]              revert := false;
[L1199]  COND FALSE  !(__exception)
[L1223]  CALL        call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3265]  CALL        call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2999]  CALL        call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]              assume msgsender_MSG != null;
[L2970]              Balance[this] := 0;
[L2972]  CALL        call __var_18 := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L2972]  RET         call __var_18 := FreshRefGenerator__success();
[L2973]  COND FALSE  !(revert)
[L2976]              _owner_MultOwnable[this] := __var_18;
[L2977]              assume Length[_owner_MultOwnable[this]] == 0;
[L2979]              __var_17 := Length[_owner_MultOwnable[this]];
[L2980]              M_int_Ref[_owner_MultOwnable[this]][__var_17] := msgsender_MSG;
[L2981]              Length[_owner_MultOwnable[this]] := __var_17 + 1;
[L2982]              assert { :EventEmitted "OwnershipTransferred_MultOwnable" } true;
[L2999]  RET         call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3000]  COND FALSE  !(revert)
[L3265]  RET         call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3269]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L3269]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3270]  COND FALSE  !(revert)
[L3273]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L2344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L2344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND FALSE  !(revert)
[L2348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2314]              assume msgsender_MSG != null;
[L2315]              Balance[this] := 0;
[L2316]              _balances_ERC20[this] := zeroRefintArr();
[L2317]              sum__balances0[this] := 0;
[L2318]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2319]              sum__allowances1[this] := 0;
[L2320]              _totalSupply_ERC20[this] := 0;
[L2321]              _name_ERC20[this] := 214025342;
[L2322]              _symbol_ERC20[this] := 214025342;
[L2323]              _decimals_ERC20[this] := 0;
[L2325]              _name_ERC20[this] := name_s244;
[L2326]              _symbol_ERC20[this] := symbol_s244;
[L2327]              _decimals_ERC20[this] := 9;
[L2348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2349]  COND FALSE  !(revert)
[L3273]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3274]  COND FALSE  !(revert)
[L3277]  CALL        call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3238]              assume msgsender_MSG != null;
[L3239]              Balance[this] := 0;
[L3277]  RET         call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3278]  COND FALSE  !(revert)
[L1223]  RET         call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1224]              assume !revert && gas >= 0;
[L4929]  RET         call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L4930]              assume !revert && gas >= 0;
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND TRUE   __exception
[L569]               __tmp__Balance := Balance;
[L570]               __tmp__DType := DType;
[L571]               __tmp__Alloc := Alloc;
[L572]               __tmp__balance_ADDR := balance_ADDR;
[L573]               __tmp__M_Ref_int := M_Ref_int;
[L574]               __tmp__sum__balances0 := sum__balances0;
[L575]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L576]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L577]               __tmp__sum__allowances1 := sum__allowances1;
[L578]               __tmp__M_int_Ref := M_int_Ref;
[L579]               __tmp__sum := sum;
[L580]               __tmp__Length := Length;
[L581]               __tmp__now := now;
[L582]               __tmp___balances_ERC20 := _balances_ERC20;
[L583]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L584]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L585]               __tmp___name_ERC20 := _name_ERC20;
[L586]               __tmp___symbol_ERC20 := _symbol_ERC20;
[L587]               __tmp___decimals_ERC20 := _decimals_ERC20;
[L588]               __tmp___owner_MultOwnable := _owner_MultOwnable;
[L589]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2416]  COND TRUE   __tmp__DType[this] == TulipToken
[L2417]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2678]              __var_4 := null;
[L2679]  COND TRUE   !(sender_s487 != null)
[L2680]              revert := true;
[L2417]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2418]  COND TRUE   revert
[L589]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L590]               assume revert || gas < 0;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

Loop:
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND TRUE   __exception
[L569]               __tmp__Balance := Balance;
[L570]               __tmp__DType := DType;
[L571]               __tmp__Alloc := Alloc;
[L572]               __tmp__balance_ADDR := balance_ADDR;
[L573]               __tmp__M_Ref_int := M_Ref_int;
[L574]               __tmp__sum__balances0 := sum__balances0;
[L575]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L576]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L577]               __tmp__sum__allowances1 := sum__allowances1;
[L578]               __tmp__M_int_Ref := M_int_Ref;
[L579]               __tmp__sum := sum;
[L580]               __tmp__Length := Length;
[L581]               __tmp__now := now;
[L582]               __tmp___balances_ERC20 := _balances_ERC20;
[L583]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L584]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L585]               __tmp___name_ERC20 := _name_ERC20;
[L586]               __tmp___symbol_ERC20 := _symbol_ERC20;
[L587]               __tmp___decimals_ERC20 := _decimals_ERC20;
[L588]               __tmp___owner_MultOwnable := _owner_MultOwnable;
[L589]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2416]  COND TRUE   __tmp__DType[this] == TulipToken
[L2417]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2678]              __var_4 := null;
[L2679]  COND TRUE   !(sender_s487 != null)
[L2680]              revert := true;
[L2417]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2418]  COND TRUE   revert
[L589]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L590]               assume revert || gas < 0;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

[2020-11-25 06:58:49,782 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:58:49,782 INFO  L82        PathProgramCache]: Analyzing trace with hash 241794375, now seen corresponding path program 1 times
[2020-11-25 06:58:49,783 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:58:49,796 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:58:49,853 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-11-25 06:58:49,854 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:58:49,854 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 06:58:49,855 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:58:49,855 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 06:58:49,855 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 06:58:49,855 INFO  L87              Difference]: Start difference. First operand 3299 states and 3668 transitions. cyclomatic complexity: 383 Second operand 6 states.
[2020-11-25 06:58:49,930 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:58:49,930 INFO  L93              Difference]: Finished difference Result 3323 states and 3696 transitions.
[2020-11-25 06:58:49,930 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 06:58:49,930 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3323 states and 3696 transitions.
[2020-11-25 06:58:49,939 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:58:49,949 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3323 states to 3303 states and 3674 transitions.
[2020-11-25 06:58:49,949 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 823
[2020-11-25 06:58:49,950 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 823
[2020-11-25 06:58:49,950 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3303 states and 3674 transitions.
[2020-11-25 06:58:49,953 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:58:49,953 INFO  L728         BuchiCegarLoop]: Abstraction has 3303 states and 3674 transitions.
[2020-11-25 06:58:49,956 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3303 states and 3674 transitions.
[2020-11-25 06:58:50,000 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3303 to 3303.
[2020-11-25 06:58:50,001 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3303 states.
[2020-11-25 06:58:50,006 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3303 states to 3303 states and 3674 transitions.
[2020-11-25 06:58:50,007 INFO  L751         BuchiCegarLoop]: Abstraction has 3303 states and 3674 transitions.
[2020-11-25 06:58:50,007 INFO  L631         BuchiCegarLoop]: Abstraction has 3303 states and 3674 transitions.
[2020-11-25 06:58:50,007 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 06:58:50,007 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3303 states and 3674 transitions.
[2020-11-25 06:58:50,015 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:58:50,015 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:58:50,015 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:58:50,017 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:58:50,017 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4923]              assume null == 0;
[L4924]  CALL        call this := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L4924]  RET         call this := FreshRefGenerator__success();
[L4925]              assume now >= 0;
[L4926]              assume DType[this] == TulipToken;
[L4927]              assume msgvalue_MSG == 0;
[L4928]              gas := gas - 53000;
[L4929]  CALL        call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1197]              havoc __exception;
[L1198]              revert := false;
[L1199]  COND FALSE  !(__exception)
[L1223]  CALL        call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3265]  CALL        call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2999]  CALL        call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]              assume msgsender_MSG != null;
[L2970]              Balance[this] := 0;
[L2972]  CALL        call __var_18 := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L2972]  RET         call __var_18 := FreshRefGenerator__success();
[L2973]  COND FALSE  !(revert)
[L2976]              _owner_MultOwnable[this] := __var_18;
[L2977]              assume Length[_owner_MultOwnable[this]] == 0;
[L2979]              __var_17 := Length[_owner_MultOwnable[this]];
[L2980]              M_int_Ref[_owner_MultOwnable[this]][__var_17] := msgsender_MSG;
[L2981]              Length[_owner_MultOwnable[this]] := __var_17 + 1;
[L2982]              assert { :EventEmitted "OwnershipTransferred_MultOwnable" } true;
[L2999]  RET         call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3000]  COND FALSE  !(revert)
[L3265]  RET         call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3269]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L3269]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3270]  COND FALSE  !(revert)
[L3273]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L2344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L2344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND FALSE  !(revert)
[L2348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2314]              assume msgsender_MSG != null;
[L2315]              Balance[this] := 0;
[L2316]              _balances_ERC20[this] := zeroRefintArr();
[L2317]              sum__balances0[this] := 0;
[L2318]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2319]              sum__allowances1[this] := 0;
[L2320]              _totalSupply_ERC20[this] := 0;
[L2321]              _name_ERC20[this] := 214025342;
[L2322]              _symbol_ERC20[this] := 214025342;
[L2323]              _decimals_ERC20[this] := 0;
[L2325]              _name_ERC20[this] := name_s244;
[L2326]              _symbol_ERC20[this] := symbol_s244;
[L2327]              _decimals_ERC20[this] := 9;
[L2348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2349]  COND FALSE  !(revert)
[L3273]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3274]  COND FALSE  !(revert)
[L3277]  CALL        call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3238]              assume msgsender_MSG != null;
[L3239]              Balance[this] := 0;
[L3277]  RET         call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3278]  COND FALSE  !(revert)
[L1223]  RET         call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1224]              assume !revert && gas >= 0;
[L4929]  RET         call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L4930]              assume !revert && gas >= 0;
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND TRUE   __exception
[L569]               __tmp__Balance := Balance;
[L570]               __tmp__DType := DType;
[L571]               __tmp__Alloc := Alloc;
[L572]               __tmp__balance_ADDR := balance_ADDR;
[L573]               __tmp__M_Ref_int := M_Ref_int;
[L574]               __tmp__sum__balances0 := sum__balances0;
[L575]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L576]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L577]               __tmp__sum__allowances1 := sum__allowances1;
[L578]               __tmp__M_int_Ref := M_int_Ref;
[L579]               __tmp__sum := sum;
[L580]               __tmp__Length := Length;
[L581]               __tmp__now := now;
[L582]               __tmp___balances_ERC20 := _balances_ERC20;
[L583]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L584]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L585]               __tmp___name_ERC20 := _name_ERC20;
[L586]               __tmp___symbol_ERC20 := _symbol_ERC20;
[L587]               __tmp___decimals_ERC20 := _decimals_ERC20;
[L588]               __tmp___owner_MultOwnable := _owner_MultOwnable;
[L589]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2416]  COND TRUE   __tmp__DType[this] == TulipToken
[L2417]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2678]              __var_4 := null;
[L2679]  COND FALSE  !(!(sender_s487 != null))
[L2683]              __var_5 := null;
[L2684]  COND TRUE   !(recipient_s487 != null)
[L2685]              revert := true;
[L2417]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2418]  COND TRUE   revert
[L589]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L590]               assume revert || gas < 0;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

Loop:
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND TRUE   __exception
[L569]               __tmp__Balance := Balance;
[L570]               __tmp__DType := DType;
[L571]               __tmp__Alloc := Alloc;
[L572]               __tmp__balance_ADDR := balance_ADDR;
[L573]               __tmp__M_Ref_int := M_Ref_int;
[L574]               __tmp__sum__balances0 := sum__balances0;
[L575]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L576]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L577]               __tmp__sum__allowances1 := sum__allowances1;
[L578]               __tmp__M_int_Ref := M_int_Ref;
[L579]               __tmp__sum := sum;
[L580]               __tmp__Length := Length;
[L581]               __tmp__now := now;
[L582]               __tmp___balances_ERC20 := _balances_ERC20;
[L583]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L584]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L585]               __tmp___name_ERC20 := _name_ERC20;
[L586]               __tmp___symbol_ERC20 := _symbol_ERC20;
[L587]               __tmp___decimals_ERC20 := _decimals_ERC20;
[L588]               __tmp___owner_MultOwnable := _owner_MultOwnable;
[L589]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2416]  COND TRUE   __tmp__DType[this] == TulipToken
[L2417]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2678]              __var_4 := null;
[L2679]  COND FALSE  !(!(sender_s487 != null))
[L2683]              __var_5 := null;
[L2684]  COND TRUE   !(recipient_s487 != null)
[L2685]              revert := true;
[L2417]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2418]  COND TRUE   revert
[L589]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L590]               assume revert || gas < 0;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

[2020-11-25 06:58:50,027 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:58:50,028 INFO  L82        PathProgramCache]: Analyzing trace with hash -564007853, now seen corresponding path program 1 times
[2020-11-25 06:58:50,028 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:58:50,036 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:58:50,065 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-11-25 06:58:50,065 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:58:50,065 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 06:58:50,066 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:58:50,066 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 06:58:50,066 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 06:58:50,066 INFO  L87              Difference]: Start difference. First operand 3303 states and 3674 transitions. cyclomatic complexity: 385 Second operand 7 states.
[2020-11-25 06:58:50,124 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:58:50,124 INFO  L93              Difference]: Finished difference Result 3401 states and 3785 transitions.
[2020-11-25 06:58:50,125 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 06:58:50,125 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3401 states and 3785 transitions.
[2020-11-25 06:58:50,131 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:58:50,141 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3401 states to 3393 states and 3777 transitions.
[2020-11-25 06:58:50,141 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 842
[2020-11-25 06:58:50,142 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 842
[2020-11-25 06:58:50,142 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3393 states and 3777 transitions.
[2020-11-25 06:58:50,145 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:58:50,145 INFO  L728         BuchiCegarLoop]: Abstraction has 3393 states and 3777 transitions.
[2020-11-25 06:58:50,147 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3393 states and 3777 transitions.
[2020-11-25 06:58:50,171 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3393 to 3380.
[2020-11-25 06:58:50,172 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3380 states.
[2020-11-25 06:58:50,175 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3380 states to 3380 states and 3762 transitions.
[2020-11-25 06:58:50,175 INFO  L751         BuchiCegarLoop]: Abstraction has 3380 states and 3762 transitions.
[2020-11-25 06:58:50,175 INFO  L631         BuchiCegarLoop]: Abstraction has 3380 states and 3762 transitions.
[2020-11-25 06:58:50,175 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 06:58:50,175 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3380 states and 3762 transitions.
[2020-11-25 06:58:50,179 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:58:50,179 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:58:50,179 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:58:50,181 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:58:50,181 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4923]              assume null == 0;
[L4924]  CALL        call this := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L4924]  RET         call this := FreshRefGenerator__success();
[L4925]              assume now >= 0;
[L4926]              assume DType[this] == TulipToken;
[L4927]              assume msgvalue_MSG == 0;
[L4928]              gas := gas - 53000;
[L4929]  CALL        call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1197]              havoc __exception;
[L1198]              revert := false;
[L1199]  COND FALSE  !(__exception)
[L1223]  CALL        call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3265]  CALL        call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2999]  CALL        call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]              assume msgsender_MSG != null;
[L2970]              Balance[this] := 0;
[L2972]  CALL        call __var_18 := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L2972]  RET         call __var_18 := FreshRefGenerator__success();
[L2973]  COND FALSE  !(revert)
[L2976]              _owner_MultOwnable[this] := __var_18;
[L2977]              assume Length[_owner_MultOwnable[this]] == 0;
[L2979]              __var_17 := Length[_owner_MultOwnable[this]];
[L2980]              M_int_Ref[_owner_MultOwnable[this]][__var_17] := msgsender_MSG;
[L2981]              Length[_owner_MultOwnable[this]] := __var_17 + 1;
[L2982]              assert { :EventEmitted "OwnershipTransferred_MultOwnable" } true;
[L2999]  RET         call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3000]  COND FALSE  !(revert)
[L3265]  RET         call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3269]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L3269]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3270]  COND FALSE  !(revert)
[L3273]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L2344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L2344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND FALSE  !(revert)
[L2348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2314]              assume msgsender_MSG != null;
[L2315]              Balance[this] := 0;
[L2316]              _balances_ERC20[this] := zeroRefintArr();
[L2317]              sum__balances0[this] := 0;
[L2318]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2319]              sum__allowances1[this] := 0;
[L2320]              _totalSupply_ERC20[this] := 0;
[L2321]              _name_ERC20[this] := 214025342;
[L2322]              _symbol_ERC20[this] := 214025342;
[L2323]              _decimals_ERC20[this] := 0;
[L2325]              _name_ERC20[this] := name_s244;
[L2326]              _symbol_ERC20[this] := symbol_s244;
[L2327]              _decimals_ERC20[this] := 9;
[L2348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2349]  COND FALSE  !(revert)
[L3273]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3274]  COND FALSE  !(revert)
[L3277]  CALL        call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3238]              assume msgsender_MSG != null;
[L3239]              Balance[this] := 0;
[L3277]  RET         call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3278]  COND FALSE  !(revert)
[L1223]  RET         call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1224]              assume !revert && gas >= 0;
[L4929]  RET         call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L4930]              assume !revert && gas >= 0;
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND TRUE   __exception
[L569]               __tmp__Balance := Balance;
[L570]               __tmp__DType := DType;
[L571]               __tmp__Alloc := Alloc;
[L572]               __tmp__balance_ADDR := balance_ADDR;
[L573]               __tmp__M_Ref_int := M_Ref_int;
[L574]               __tmp__sum__balances0 := sum__balances0;
[L575]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L576]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L577]               __tmp__sum__allowances1 := sum__allowances1;
[L578]               __tmp__M_int_Ref := M_int_Ref;
[L579]               __tmp__sum := sum;
[L580]               __tmp__Length := Length;
[L581]               __tmp__now := now;
[L582]               __tmp___balances_ERC20 := _balances_ERC20;
[L583]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L584]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L585]               __tmp___name_ERC20 := _name_ERC20;
[L586]               __tmp___symbol_ERC20 := _symbol_ERC20;
[L587]               __tmp___decimals_ERC20 := _decimals_ERC20;
[L588]               __tmp___owner_MultOwnable := _owner_MultOwnable;
[L589]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2416]  COND TRUE   __tmp__DType[this] == TulipToken
[L2417]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2678]              __var_4 := null;
[L2679]  COND FALSE  !(!(sender_s487 != null))
[L2683]              __var_5 := null;
[L2684]  COND FALSE  !(!(recipient_s487 != null))
[L2688]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s487], amount_s487);
[L2195]  COND TRUE   !(b_s119 <= a_s119)
[L2196]              revert := true;
[L2688]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s487], amount_s487);
[L2689]  COND TRUE   revert
[L2417]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2418]  COND TRUE   revert
[L589]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L590]               assume revert || gas < 0;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

Loop:
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND TRUE   __exception
[L569]               __tmp__Balance := Balance;
[L570]               __tmp__DType := DType;
[L571]               __tmp__Alloc := Alloc;
[L572]               __tmp__balance_ADDR := balance_ADDR;
[L573]               __tmp__M_Ref_int := M_Ref_int;
[L574]               __tmp__sum__balances0 := sum__balances0;
[L575]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L576]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L577]               __tmp__sum__allowances1 := sum__allowances1;
[L578]               __tmp__M_int_Ref := M_int_Ref;
[L579]               __tmp__sum := sum;
[L580]               __tmp__Length := Length;
[L581]               __tmp__now := now;
[L582]               __tmp___balances_ERC20 := _balances_ERC20;
[L583]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L584]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L585]               __tmp___name_ERC20 := _name_ERC20;
[L586]               __tmp___symbol_ERC20 := _symbol_ERC20;
[L587]               __tmp___decimals_ERC20 := _decimals_ERC20;
[L588]               __tmp___owner_MultOwnable := _owner_MultOwnable;
[L589]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2416]  COND TRUE   __tmp__DType[this] == TulipToken
[L2417]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2678]              __var_4 := null;
[L2679]  COND FALSE  !(!(sender_s487 != null))
[L2683]              __var_5 := null;
[L2684]  COND FALSE  !(!(recipient_s487 != null))
[L2688]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s487], amount_s487);
[L2195]  COND TRUE   !(b_s119 <= a_s119)
[L2196]              revert := true;
[L2688]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s487], amount_s487);
[L2689]  COND TRUE   revert
[L2417]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2418]  COND TRUE   revert
[L589]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L590]               assume revert || gas < 0;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

[2020-11-25 06:58:50,184 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:58:50,184 INFO  L82        PathProgramCache]: Analyzing trace with hash -48125821, now seen corresponding path program 1 times
[2020-11-25 06:58:50,185 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:58:50,194 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:58:50,308 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-11-25 06:58:50,308 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:58:50,308 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [15] imperfect sequences [] total 15
[2020-11-25 06:58:50,309 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:58:50,309 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 06:58:50,309 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=30, Invalid=210, Unknown=0, NotChecked=0, Total=240
[2020-11-25 06:58:50,309 INFO  L87              Difference]: Start difference. First operand 3380 states and 3762 transitions. cyclomatic complexity: 396 Second operand 16 states.
[2020-11-25 06:58:52,480 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:58:52,480 INFO  L93              Difference]: Finished difference Result 3577 states and 4007 transitions.
[2020-11-25 06:58:52,480 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 06:58:52,480 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3577 states and 4007 transitions.
[2020-11-25 06:58:52,488 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 06:58:52,498 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3577 states to 3577 states and 4007 transitions.
[2020-11-25 06:58:52,498 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 936
[2020-11-25 06:58:52,498 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 936
[2020-11-25 06:58:52,498 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3577 states and 4007 transitions.
[2020-11-25 06:58:52,501 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:58:52,501 INFO  L728         BuchiCegarLoop]: Abstraction has 3577 states and 4007 transitions.
[2020-11-25 06:58:52,503 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3577 states and 4007 transitions.
[2020-11-25 06:58:52,525 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3577 to 3495.
[2020-11-25 06:58:52,525 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3495 states.
[2020-11-25 06:58:52,528 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3495 states to 3495 states and 3896 transitions.
[2020-11-25 06:58:52,528 INFO  L751         BuchiCegarLoop]: Abstraction has 3495 states and 3896 transitions.
[2020-11-25 06:58:52,528 INFO  L631         BuchiCegarLoop]: Abstraction has 3495 states and 3896 transitions.
[2020-11-25 06:58:52,529 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 06:58:52,529 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3495 states and 3896 transitions.
[2020-11-25 06:58:52,532 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 06:58:52,533 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:58:52,533 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:58:52,534 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:58:52,534 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4923]              assume null == 0;
[L4924]  CALL        call this := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L4924]  RET         call this := FreshRefGenerator__success();
[L4925]              assume now >= 0;
[L4926]              assume DType[this] == TulipToken;
[L4927]              assume msgvalue_MSG == 0;
[L4928]              gas := gas - 53000;
[L4929]  CALL        call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1197]              havoc __exception;
[L1198]              revert := false;
[L1199]  COND FALSE  !(__exception)
[L1223]  CALL        call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3265]  CALL        call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2999]  CALL        call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]              assume msgsender_MSG != null;
[L2970]              Balance[this] := 0;
[L2972]  CALL        call __var_18 := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L2972]  RET         call __var_18 := FreshRefGenerator__success();
[L2973]  COND FALSE  !(revert)
[L2976]              _owner_MultOwnable[this] := __var_18;
[L2977]              assume Length[_owner_MultOwnable[this]] == 0;
[L2979]              __var_17 := Length[_owner_MultOwnable[this]];
[L2980]              M_int_Ref[_owner_MultOwnable[this]][__var_17] := msgsender_MSG;
[L2981]              Length[_owner_MultOwnable[this]] := __var_17 + 1;
[L2982]              assert { :EventEmitted "OwnershipTransferred_MultOwnable" } true;
[L2999]  RET         call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3000]  COND FALSE  !(revert)
[L3265]  RET         call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3269]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L3269]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3270]  COND FALSE  !(revert)
[L3273]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L2344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L2344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND FALSE  !(revert)
[L2348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2314]              assume msgsender_MSG != null;
[L2315]              Balance[this] := 0;
[L2316]              _balances_ERC20[this] := zeroRefintArr();
[L2317]              sum__balances0[this] := 0;
[L2318]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2319]              sum__allowances1[this] := 0;
[L2320]              _totalSupply_ERC20[this] := 0;
[L2321]              _name_ERC20[this] := 214025342;
[L2322]              _symbol_ERC20[this] := 214025342;
[L2323]              _decimals_ERC20[this] := 0;
[L2325]              _name_ERC20[this] := name_s244;
[L2326]              _symbol_ERC20[this] := symbol_s244;
[L2327]              _decimals_ERC20[this] := 9;
[L2348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2349]  COND FALSE  !(revert)
[L3273]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3274]  COND FALSE  !(revert)
[L3277]  CALL        call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3238]              assume msgsender_MSG != null;
[L3239]              Balance[this] := 0;
[L3277]  RET         call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3278]  COND FALSE  !(revert)
[L1223]  RET         call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1224]              assume !revert && gas >= 0;
[L4929]  RET         call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L4930]              assume !revert && gas >= 0;
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2435]  COND TRUE   DType[this] == TulipToken
[L2436]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2436]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2437]  COND FALSE  !(revert)
[L2448]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L593]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20[this] == old(_name_ERC20[this])) && _symbol_ERC20[this] == old(_symbol_ERC20[this])) && _decimals_ERC20[this] == old(_decimals_ERC20[this])) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]));
[L2]                 revert := revert_hold;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

Loop:
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND TRUE   __exception
[L569]               __tmp__Balance := Balance;
[L570]               __tmp__DType := DType;
[L571]               __tmp__Alloc := Alloc;
[L572]               __tmp__balance_ADDR := balance_ADDR;
[L573]               __tmp__M_Ref_int := M_Ref_int;
[L574]               __tmp__sum__balances0 := sum__balances0;
[L575]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L576]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L577]               __tmp__sum__allowances1 := sum__allowances1;
[L578]               __tmp__M_int_Ref := M_int_Ref;
[L579]               __tmp__sum := sum;
[L580]               __tmp__Length := Length;
[L581]               __tmp__now := now;
[L582]               __tmp___balances_ERC20 := _balances_ERC20;
[L583]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L584]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L585]               __tmp___name_ERC20 := _name_ERC20;
[L586]               __tmp___symbol_ERC20 := _symbol_ERC20;
[L587]               __tmp___decimals_ERC20 := _decimals_ERC20;
[L588]               __tmp___owner_MultOwnable := _owner_MultOwnable;
[L589]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2416]  COND TRUE   __tmp__DType[this] == TulipToken
[L2417]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2678]              __var_4 := null;
[L2679]  COND FALSE  !(!(sender_s487 != null))
[L2683]              __var_5 := null;
[L2684]  COND FALSE  !(!(recipient_s487 != null))
[L2688]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s487], amount_s487);
[L2195]  COND TRUE   !(b_s119 <= a_s119)
[L2196]              revert := true;
[L2688]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s487], amount_s487);
[L2689]  COND TRUE   revert
[L2417]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2418]  COND TRUE   revert
[L589]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L590]               assume revert || gas < 0;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

[2020-11-25 06:58:52,537 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:58:52,537 INFO  L82        PathProgramCache]: Analyzing trace with hash -1488083626, now seen corresponding path program 1 times
[2020-11-25 06:58:52,538 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:58:52,561 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:58:52,863 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-11-25 06:58:52,863 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:58:52,864 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [24] imperfect sequences [] total 24
[2020-11-25 06:58:52,864 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:58:52,864 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-25 06:58:52,864 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=63, Invalid=537, Unknown=0, NotChecked=0, Total=600
[2020-11-25 06:58:52,864 INFO  L87              Difference]: Start difference. First operand 3495 states and 3896 transitions. cyclomatic complexity: 417 Second operand 25 states.
[2020-11-25 06:58:58,089 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:58:58,090 INFO  L93              Difference]: Finished difference Result 3529 states and 3961 transitions.
[2020-11-25 06:58:58,090 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 26 states. 
[2020-11-25 06:58:58,090 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3529 states and 3961 transitions.
[2020-11-25 06:58:58,096 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 06:58:58,104 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3529 states to 3529 states and 3961 transitions.
[2020-11-25 06:58:58,104 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 931
[2020-11-25 06:58:58,105 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 931
[2020-11-25 06:58:58,105 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3529 states and 3961 transitions.
[2020-11-25 06:58:58,108 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:58:58,108 INFO  L728         BuchiCegarLoop]: Abstraction has 3529 states and 3961 transitions.
[2020-11-25 06:58:58,110 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3529 states and 3961 transitions.
[2020-11-25 06:58:58,131 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3529 to 3455.
[2020-11-25 06:58:58,131 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3455 states.
[2020-11-25 06:58:58,134 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3455 states to 3455 states and 3855 transitions.
[2020-11-25 06:58:58,134 INFO  L751         BuchiCegarLoop]: Abstraction has 3455 states and 3855 transitions.
[2020-11-25 06:58:58,134 INFO  L631         BuchiCegarLoop]: Abstraction has 3455 states and 3855 transitions.
[2020-11-25 06:58:58,134 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 06:58:58,134 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3455 states and 3855 transitions.
[2020-11-25 06:58:58,138 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 06:58:58,138 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:58:58,138 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:58:58,139 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:58:58,139 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4923]              assume null == 0;
[L4924]  CALL        call this := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L4924]  RET         call this := FreshRefGenerator__success();
[L4925]              assume now >= 0;
[L4926]              assume DType[this] == TulipToken;
[L4927]              assume msgvalue_MSG == 0;
[L4928]              gas := gas - 53000;
[L4929]  CALL        call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1197]              havoc __exception;
[L1198]              revert := false;
[L1199]  COND FALSE  !(__exception)
[L1223]  CALL        call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3265]  CALL        call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2999]  CALL        call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]              assume msgsender_MSG != null;
[L2970]              Balance[this] := 0;
[L2972]  CALL        call __var_18 := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L2972]  RET         call __var_18 := FreshRefGenerator__success();
[L2973]  COND FALSE  !(revert)
[L2976]              _owner_MultOwnable[this] := __var_18;
[L2977]              assume Length[_owner_MultOwnable[this]] == 0;
[L2979]              __var_17 := Length[_owner_MultOwnable[this]];
[L2980]              M_int_Ref[_owner_MultOwnable[this]][__var_17] := msgsender_MSG;
[L2981]              Length[_owner_MultOwnable[this]] := __var_17 + 1;
[L2982]              assert { :EventEmitted "OwnershipTransferred_MultOwnable" } true;
[L2999]  RET         call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3000]  COND FALSE  !(revert)
[L3265]  RET         call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3269]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L3269]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3270]  COND FALSE  !(revert)
[L3273]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L2344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L2344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND FALSE  !(revert)
[L2348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2314]              assume msgsender_MSG != null;
[L2315]              Balance[this] := 0;
[L2316]              _balances_ERC20[this] := zeroRefintArr();
[L2317]              sum__balances0[this] := 0;
[L2318]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2319]              sum__allowances1[this] := 0;
[L2320]              _totalSupply_ERC20[this] := 0;
[L2321]              _name_ERC20[this] := 214025342;
[L2322]              _symbol_ERC20[this] := 214025342;
[L2323]              _decimals_ERC20[this] := 0;
[L2325]              _name_ERC20[this] := name_s244;
[L2326]              _symbol_ERC20[this] := symbol_s244;
[L2327]              _decimals_ERC20[this] := 9;
[L2348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2349]  COND FALSE  !(revert)
[L3273]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3274]  COND FALSE  !(revert)
[L3277]  CALL        call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3238]              assume msgsender_MSG != null;
[L3239]              Balance[this] := 0;
[L3277]  RET         call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3278]  COND FALSE  !(revert)
[L1223]  RET         call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1224]              assume !revert && gas >= 0;
[L4929]  RET         call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L4930]              assume !revert && gas >= 0;
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND TRUE   __exception
[L569]               __tmp__Balance := Balance;
[L570]               __tmp__DType := DType;
[L571]               __tmp__Alloc := Alloc;
[L572]               __tmp__balance_ADDR := balance_ADDR;
[L573]               __tmp__M_Ref_int := M_Ref_int;
[L574]               __tmp__sum__balances0 := sum__balances0;
[L575]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L576]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L577]               __tmp__sum__allowances1 := sum__allowances1;
[L578]               __tmp__M_int_Ref := M_int_Ref;
[L579]               __tmp__sum := sum;
[L580]               __tmp__Length := Length;
[L581]               __tmp__now := now;
[L582]               __tmp___balances_ERC20 := _balances_ERC20;
[L583]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L584]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L585]               __tmp___name_ERC20 := _name_ERC20;
[L586]               __tmp___symbol_ERC20 := _symbol_ERC20;
[L587]               __tmp___decimals_ERC20 := _decimals_ERC20;
[L588]               __tmp___owner_MultOwnable := _owner_MultOwnable;
[L589]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2416]  COND TRUE   __tmp__DType[this] == TulipToken
[L2417]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2678]              __var_4 := null;
[L2679]  COND FALSE  !(!(sender_s487 != null))
[L2683]              __var_5 := null;
[L2684]  COND FALSE  !(!(recipient_s487 != null))
[L2688]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s487], amount_s487);
[L2195]  COND FALSE  !(!(b_s119 <= a_s119))
[L2199]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2200]              __ret_0_ := c_s119;
[L2688]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s487], amount_s487);
[L2689]  COND FALSE  !(revert)
[L2692]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s487];
[L2693]              __tmp___balances_ERC20[this][sender_s487] := __var_6;
[L2694]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s487];
[L2695]  CALL        call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s487], amount_s487);
[L2171]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2172]  COND TRUE   !(c_s94 >= a_s94)
[L2173]              revert := true;
[L2695]  RET         call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s487], amount_s487);
[L2696]  COND TRUE   revert
[L2417]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2418]  COND TRUE   revert
[L589]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L590]               assume revert || gas < 0;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

Loop:
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND TRUE   choice == 19
[L4793]              gas := gas - 21000;
[L4794]  COND FALSE  !(gas >= 0)
[L4933]  RET         call CorralChoice_TulipToken(this);

[2020-11-25 06:58:58,142 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:58:58,142 INFO  L82        PathProgramCache]: Analyzing trace with hash -1073074466, now seen corresponding path program 1 times
[2020-11-25 06:58:58,142 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:58:58,152 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:58:58,248 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-11-25 06:58:58,249 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:58:58,249 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [21] imperfect sequences [] total 21
[2020-11-25 06:58:58,249 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:58:58,249 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 22 interpolants.
[2020-11-25 06:58:58,249 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=43, Invalid=419, Unknown=0, NotChecked=0, Total=462
[2020-11-25 06:58:58,250 INFO  L87              Difference]: Start difference. First operand 3455 states and 3855 transitions. cyclomatic complexity: 416 Second operand 22 states.
[2020-11-25 06:59:01,592 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:59:01,592 INFO  L93              Difference]: Finished difference Result 3611 states and 4057 transitions.
[2020-11-25 06:59:01,593 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 06:59:01,593 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3611 states and 4057 transitions.
[2020-11-25 06:59:01,600 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 06:59:01,608 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3611 states to 3611 states and 4057 transitions.
[2020-11-25 06:59:01,608 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 950
[2020-11-25 06:59:01,608 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 950
[2020-11-25 06:59:01,608 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3611 states and 4057 transitions.
[2020-11-25 06:59:01,611 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:59:01,611 INFO  L728         BuchiCegarLoop]: Abstraction has 3611 states and 4057 transitions.
[2020-11-25 06:59:01,614 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3611 states and 4057 transitions.
[2020-11-25 06:59:01,633 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3611 to 3443.
[2020-11-25 06:59:01,633 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3443 states.
[2020-11-25 06:59:01,636 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3443 states to 3443 states and 3837 transitions.
[2020-11-25 06:59:01,636 INFO  L751         BuchiCegarLoop]: Abstraction has 3443 states and 3837 transitions.
[2020-11-25 06:59:01,636 INFO  L631         BuchiCegarLoop]: Abstraction has 3443 states and 3837 transitions.
[2020-11-25 06:59:01,636 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 06:59:01,636 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3443 states and 3837 transitions.
[2020-11-25 06:59:01,639 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 06:59:01,640 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:59:01,640 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:59:01,641 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:59:01,641 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4923]              assume null == 0;
[L4924]  CALL        call this := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L4924]  RET         call this := FreshRefGenerator__success();
[L4925]              assume now >= 0;
[L4926]              assume DType[this] == TulipToken;
[L4927]              assume msgvalue_MSG == 0;
[L4928]              gas := gas - 53000;
[L4929]  CALL        call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1197]              havoc __exception;
[L1198]              revert := false;
[L1199]  COND FALSE  !(__exception)
[L1223]  CALL        call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3265]  CALL        call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2999]  CALL        call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]              assume msgsender_MSG != null;
[L2970]              Balance[this] := 0;
[L2972]  CALL        call __var_18 := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L2972]  RET         call __var_18 := FreshRefGenerator__success();
[L2973]  COND FALSE  !(revert)
[L2976]              _owner_MultOwnable[this] := __var_18;
[L2977]              assume Length[_owner_MultOwnable[this]] == 0;
[L2979]              __var_17 := Length[_owner_MultOwnable[this]];
[L2980]              M_int_Ref[_owner_MultOwnable[this]][__var_17] := msgsender_MSG;
[L2981]              Length[_owner_MultOwnable[this]] := __var_17 + 1;
[L2982]              assert { :EventEmitted "OwnershipTransferred_MultOwnable" } true;
[L2999]  RET         call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3000]  COND FALSE  !(revert)
[L3265]  RET         call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3269]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L3269]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3270]  COND FALSE  !(revert)
[L3273]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L2344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L2344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND FALSE  !(revert)
[L2348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2314]              assume msgsender_MSG != null;
[L2315]              Balance[this] := 0;
[L2316]              _balances_ERC20[this] := zeroRefintArr();
[L2317]              sum__balances0[this] := 0;
[L2318]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2319]              sum__allowances1[this] := 0;
[L2320]              _totalSupply_ERC20[this] := 0;
[L2321]              _name_ERC20[this] := 214025342;
[L2322]              _symbol_ERC20[this] := 214025342;
[L2323]              _decimals_ERC20[this] := 0;
[L2325]              _name_ERC20[this] := name_s244;
[L2326]              _symbol_ERC20[this] := symbol_s244;
[L2327]              _decimals_ERC20[this] := 9;
[L2348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2349]  COND FALSE  !(revert)
[L3273]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3274]  COND FALSE  !(revert)
[L3277]  CALL        call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3238]              assume msgsender_MSG != null;
[L3239]              Balance[this] := 0;
[L3277]  RET         call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3278]  COND FALSE  !(revert)
[L1223]  RET         call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1224]              assume !revert && gas >= 0;
[L4929]  RET         call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L4930]              assume !revert && gas >= 0;
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND TRUE   __exception
[L569]               __tmp__Balance := Balance;
[L570]               __tmp__DType := DType;
[L571]               __tmp__Alloc := Alloc;
[L572]               __tmp__balance_ADDR := balance_ADDR;
[L573]               __tmp__M_Ref_int := M_Ref_int;
[L574]               __tmp__sum__balances0 := sum__balances0;
[L575]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L576]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L577]               __tmp__sum__allowances1 := sum__allowances1;
[L578]               __tmp__M_int_Ref := M_int_Ref;
[L579]               __tmp__sum := sum;
[L580]               __tmp__Length := Length;
[L581]               __tmp__now := now;
[L582]               __tmp___balances_ERC20 := _balances_ERC20;
[L583]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L584]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L585]               __tmp___name_ERC20 := _name_ERC20;
[L586]               __tmp___symbol_ERC20 := _symbol_ERC20;
[L587]               __tmp___decimals_ERC20 := _decimals_ERC20;
[L588]               __tmp___owner_MultOwnable := _owner_MultOwnable;
[L589]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2416]  COND TRUE   __tmp__DType[this] == TulipToken
[L2417]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2678]              __var_4 := null;
[L2679]  COND FALSE  !(!(sender_s487 != null))
[L2683]              __var_5 := null;
[L2684]  COND FALSE  !(!(recipient_s487 != null))
[L2688]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s487], amount_s487);
[L2195]  COND FALSE  !(!(b_s119 <= a_s119))
[L2199]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2200]              __ret_0_ := c_s119;
[L2688]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s487], amount_s487);
[L2689]  COND FALSE  !(revert)
[L2692]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s487];
[L2693]              __tmp___balances_ERC20[this][sender_s487] := __var_6;
[L2694]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s487];
[L2695]  CALL        call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s487], amount_s487);
[L2171]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2172]  COND FALSE  !(!(c_s94 >= a_s94))
[L2176]              __ret_0_ := c_s94;
[L2695]  RET         call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s487], amount_s487);
[L2696]  COND FALSE  !(revert)
[L2699]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][recipient_s487];
[L2700]              __tmp___balances_ERC20[this][recipient_s487] := __var_7;
[L2701]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][recipient_s487];
[L2417]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2418]  COND FALSE  !(revert)
[L2429]              __ret_0_ := true;
[L589]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L590]               assume revert || gas < 0;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

Loop:
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND TRUE   __exception
[L569]               __tmp__Balance := Balance;
[L570]               __tmp__DType := DType;
[L571]               __tmp__Alloc := Alloc;
[L572]               __tmp__balance_ADDR := balance_ADDR;
[L573]               __tmp__M_Ref_int := M_Ref_int;
[L574]               __tmp__sum__balances0 := sum__balances0;
[L575]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L576]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L577]               __tmp__sum__allowances1 := sum__allowances1;
[L578]               __tmp__M_int_Ref := M_int_Ref;
[L579]               __tmp__sum := sum;
[L580]               __tmp__Length := Length;
[L581]               __tmp__now := now;
[L582]               __tmp___balances_ERC20 := _balances_ERC20;
[L583]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L584]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L585]               __tmp___name_ERC20 := _name_ERC20;
[L586]               __tmp___symbol_ERC20 := _symbol_ERC20;
[L587]               __tmp___decimals_ERC20 := _decimals_ERC20;
[L588]               __tmp___owner_MultOwnable := _owner_MultOwnable;
[L589]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2416]  COND TRUE   __tmp__DType[this] == TulipToken
[L2417]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2678]              __var_4 := null;
[L2679]  COND FALSE  !(!(sender_s487 != null))
[L2683]              __var_5 := null;
[L2684]  COND FALSE  !(!(recipient_s487 != null))
[L2688]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s487], amount_s487);
[L2195]  COND FALSE  !(!(b_s119 <= a_s119))
[L2199]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2200]              __ret_0_ := c_s119;
[L2688]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s487], amount_s487);
[L2689]  COND FALSE  !(revert)
[L2692]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s487];
[L2693]              __tmp___balances_ERC20[this][sender_s487] := __var_6;
[L2694]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s487];
[L2695]  CALL        call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s487], amount_s487);
[L2171]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2172]  COND FALSE  !(!(c_s94 >= a_s94))
[L2176]              __ret_0_ := c_s94;
[L2695]  RET         call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s487], amount_s487);
[L2696]  COND FALSE  !(revert)
[L2699]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][recipient_s487];
[L2700]              __tmp___balances_ERC20[this][recipient_s487] := __var_7;
[L2701]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][recipient_s487];
[L2417]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2418]  COND FALSE  !(revert)
[L2429]              __ret_0_ := true;
[L589]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L590]               assume revert || gas < 0;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

[2020-11-25 06:59:01,644 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:59:01,644 INFO  L82        PathProgramCache]: Analyzing trace with hash 1087264041, now seen corresponding path program 1 times
[2020-11-25 06:59:01,644 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:59:01,652 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:59:01,696 INFO  L134       CoverageAnalysis]: Checked inductivity of 16 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 16 trivial. 0 not checked.
[2020-11-25 06:59:01,696 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:59:01,696 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 06:59:01,696 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:59:01,696 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 06:59:01,696 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 06:59:01,697 INFO  L87              Difference]: Start difference. First operand 3443 states and 3837 transitions. cyclomatic complexity: 410 Second operand 5 states.
[2020-11-25 06:59:02,139 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:59:02,139 INFO  L93              Difference]: Finished difference Result 4197 states and 4732 transitions.
[2020-11-25 06:59:02,139 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 06:59:02,139 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4197 states and 4732 transitions.
[2020-11-25 06:59:02,147 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 06:59:02,156 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4197 states to 3457 states and 3972 transitions.
[2020-11-25 06:59:02,156 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 703
[2020-11-25 06:59:02,156 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 703
[2020-11-25 06:59:02,156 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3457 states and 3972 transitions.
[2020-11-25 06:59:02,158 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:59:02,159 INFO  L728         BuchiCegarLoop]: Abstraction has 3457 states and 3972 transitions.
[2020-11-25 06:59:02,161 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3457 states and 3972 transitions.
[2020-11-25 06:59:02,176 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3457 to 2767.
[2020-11-25 06:59:02,176 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2767 states.
[2020-11-25 06:59:02,179 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2767 states to 2767 states and 3083 transitions.
[2020-11-25 06:59:02,179 INFO  L751         BuchiCegarLoop]: Abstraction has 2767 states and 3083 transitions.
[2020-11-25 06:59:02,179 INFO  L631         BuchiCegarLoop]: Abstraction has 2767 states and 3083 transitions.
[2020-11-25 06:59:02,179 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 06:59:02,179 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2767 states and 3083 transitions.
[2020-11-25 06:59:02,181 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:59:02,181 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:59:02,182 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:59:02,182 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:59:02,183 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4923]              assume null == 0;
[L4924]  CALL        call this := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L4924]  RET         call this := FreshRefGenerator__success();
[L4925]              assume now >= 0;
[L4926]              assume DType[this] == TulipToken;
[L4927]              assume msgvalue_MSG == 0;
[L4928]              gas := gas - 53000;
[L4929]  CALL        call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1197]              havoc __exception;
[L1198]              revert := false;
[L1199]  COND FALSE  !(__exception)
[L1223]  CALL        call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3265]  CALL        call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2999]  CALL        call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]              assume msgsender_MSG != null;
[L2970]              Balance[this] := 0;
[L2972]  CALL        call __var_18 := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L2972]  RET         call __var_18 := FreshRefGenerator__success();
[L2973]  COND FALSE  !(revert)
[L2976]              _owner_MultOwnable[this] := __var_18;
[L2977]              assume Length[_owner_MultOwnable[this]] == 0;
[L2979]              __var_17 := Length[_owner_MultOwnable[this]];
[L2980]              M_int_Ref[_owner_MultOwnable[this]][__var_17] := msgsender_MSG;
[L2981]              Length[_owner_MultOwnable[this]] := __var_17 + 1;
[L2982]              assert { :EventEmitted "OwnershipTransferred_MultOwnable" } true;
[L2999]  RET         call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3000]  COND FALSE  !(revert)
[L3265]  RET         call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3269]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L3269]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3270]  COND FALSE  !(revert)
[L3273]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L2344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L2344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND FALSE  !(revert)
[L2348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2314]              assume msgsender_MSG != null;
[L2315]              Balance[this] := 0;
[L2316]              _balances_ERC20[this] := zeroRefintArr();
[L2317]              sum__balances0[this] := 0;
[L2318]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2319]              sum__allowances1[this] := 0;
[L2320]              _totalSupply_ERC20[this] := 0;
[L2321]              _name_ERC20[this] := 214025342;
[L2322]              _symbol_ERC20[this] := 214025342;
[L2323]              _decimals_ERC20[this] := 0;
[L2325]              _name_ERC20[this] := name_s244;
[L2326]              _symbol_ERC20[this] := symbol_s244;
[L2327]              _decimals_ERC20[this] := 9;
[L2348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2349]  COND FALSE  !(revert)
[L3273]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3274]  COND FALSE  !(revert)
[L3277]  CALL        call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3238]              assume msgsender_MSG != null;
[L3239]              Balance[this] := 0;
[L3277]  RET         call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3278]  COND FALSE  !(revert)
[L1223]  RET         call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1224]              assume !revert && gas >= 0;
[L4929]  RET         call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L4930]              assume !revert && gas >= 0;
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND FALSE  !(choice == 17)
[L4811]  COND FALSE  !(choice == 16)
[L4817]  COND FALSE  !(choice == 15)
[L4824]  COND FALSE  !(choice == 14)
[L4831]  COND FALSE  !(choice == 13)
[L4837]  COND FALSE  !(choice == 12)
[L4843]  COND FALSE  !(choice == 11)
[L4849]  COND FALSE  !(choice == 10)
[L4856]  COND FALSE  !(choice == 9)
[L4863]  COND FALSE  !(choice == 8)
[L4869]  COND FALSE  !(choice == 7)
[L4875]  COND FALSE  !(choice == 6)
[L4881]  COND FALSE  !(choice == 5)
[L4888]  COND TRUE   choice == 4
[L4889]              gas := gas - 21000;
[L4890]  COND TRUE   gas >= 0
[L4891]              assume amount_s899 >= 0 && amount_s899 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4892]              assume msgvalue_MSG == 0;
[L4893]  CALL        call contractBurn~address~uint256_TulipToken(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L1315]              havoc __exception;
[L1316]              revert := false;
[L1317]  COND FALSE  !(__exception)
[L1341]  CALL        call contractBurn~address~uint256_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L3333]  CALL        call isAnOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4365]  CALL        call __var_19 := checkOwner_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]              i_s705 := 0;
[L3028]  COND FALSE  !(i_s705 < Length[_owner_MultOwnable[this]])
[L3039]              __ret_0_ := false;
[L4365]  RET         call __var_19 := checkOwner_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4366]  COND FALSE  !(revert)
[L4369]  COND FALSE  !(!__var_19)
[L3333]  RET         call isAnOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3334]  COND FALSE  !(revert)
[L3337]  COND TRUE   DType[this] == TulipToken
[L3338]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L2815]              __var_11 := null;
[L2816]  COND FALSE  !(!(account_s573 != null))
[L2820]  CALL        call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s573);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2820]  RET         call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s573);
[L2821]  COND FALSE  !(revert)
[L2824]              _totalSupply_ERC20[this] := __var_12;
[L2825]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s573], value_s573);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2825]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s573], value_s573);
[L2826]  COND FALSE  !(revert)
[L2829]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s573];
[L2830]              _balances_ERC20[this][account_s573] := __var_13;
[L2831]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s573];
[L2832]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3338]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L3339]  COND FALSE  !(revert)
[L1341]  RET         call contractBurn~address~uint256_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L1342]              assume !revert && gas >= 0;
[L4893]  RET         call contractBurn~address~uint256_TulipToken(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L4933]  RET         call CorralChoice_TulipToken(this);
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND TRUE   __exception
[L569]               __tmp__Balance := Balance;
[L570]               __tmp__DType := DType;
[L571]               __tmp__Alloc := Alloc;
[L572]               __tmp__balance_ADDR := balance_ADDR;
[L573]               __tmp__M_Ref_int := M_Ref_int;
[L574]               __tmp__sum__balances0 := sum__balances0;
[L575]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L576]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L577]               __tmp__sum__allowances1 := sum__allowances1;
[L578]               __tmp__M_int_Ref := M_int_Ref;
[L579]               __tmp__sum := sum;
[L580]               __tmp__Length := Length;
[L581]               __tmp__now := now;
[L582]               __tmp___balances_ERC20 := _balances_ERC20;
[L583]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L584]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L585]               __tmp___name_ERC20 := _name_ERC20;
[L586]               __tmp___symbol_ERC20 := _symbol_ERC20;
[L587]               __tmp___decimals_ERC20 := _decimals_ERC20;
[L588]               __tmp___owner_MultOwnable := _owner_MultOwnable;
[L589]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2416]  COND TRUE   __tmp__DType[this] == TulipToken
[L2417]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2678]              __var_4 := null;
[L2679]  COND FALSE  !(!(sender_s487 != null))
[L2683]              __var_5 := null;
[L2684]  COND FALSE  !(!(recipient_s487 != null))
[L2688]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s487], amount_s487);
[L2195]  COND TRUE   !(b_s119 <= a_s119)
[L2196]              revert := true;
[L2688]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s487], amount_s487);
[L2689]  COND TRUE   revert
[L2417]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2418]  COND TRUE   revert
[L589]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L590]               assume revert || gas < 0;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

Loop:
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND TRUE   choice == 19
[L4793]              gas := gas - 21000;
[L4794]  COND FALSE  !(gas >= 0)
[L4933]  RET         call CorralChoice_TulipToken(this);

[2020-11-25 06:59:02,186 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:59:02,186 INFO  L82        PathProgramCache]: Analyzing trace with hash -1427717258, now seen corresponding path program 1 times
[2020-11-25 06:59:02,186 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:59:02,195 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:59:02,234 INFO  L134       CoverageAnalysis]: Checked inductivity of 78 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 77 trivial. 0 not checked.
[2020-11-25 06:59:02,234 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:59:02,234 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 06:59:02,234 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:59:02,234 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 06:59:02,235 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 06:59:02,235 INFO  L87              Difference]: Start difference. First operand 2767 states and 3083 transitions. cyclomatic complexity: 329 Second operand 4 states.
[2020-11-25 06:59:02,248 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:59:02,248 INFO  L93              Difference]: Finished difference Result 2777 states and 3091 transitions.
[2020-11-25 06:59:02,248 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 06:59:02,248 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2777 states and 3091 transitions.
[2020-11-25 06:59:02,252 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:59:02,258 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2777 states to 2765 states and 3079 transitions.
[2020-11-25 06:59:02,258 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 584
[2020-11-25 06:59:02,258 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 584
[2020-11-25 06:59:02,258 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2765 states and 3079 transitions.
[2020-11-25 06:59:02,260 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:59:02,260 INFO  L728         BuchiCegarLoop]: Abstraction has 2765 states and 3079 transitions.
[2020-11-25 06:59:02,262 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2765 states and 3079 transitions.
[2020-11-25 06:59:02,274 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2765 to 2765.
[2020-11-25 06:59:02,274 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2765 states.
[2020-11-25 06:59:02,276 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2765 states to 2765 states and 3079 transitions.
[2020-11-25 06:59:02,276 INFO  L751         BuchiCegarLoop]: Abstraction has 2765 states and 3079 transitions.
[2020-11-25 06:59:02,276 INFO  L631         BuchiCegarLoop]: Abstraction has 2765 states and 3079 transitions.
[2020-11-25 06:59:02,276 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 06:59:02,277 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2765 states and 3079 transitions.
[2020-11-25 06:59:02,279 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:59:02,279 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:59:02,279 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:59:02,280 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:59:02,280 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4923]              assume null == 0;
[L4924]  CALL        call this := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L4924]  RET         call this := FreshRefGenerator__success();
[L4925]              assume now >= 0;
[L4926]              assume DType[this] == TulipToken;
[L4927]              assume msgvalue_MSG == 0;
[L4928]              gas := gas - 53000;
[L4929]  CALL        call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1197]              havoc __exception;
[L1198]              revert := false;
[L1199]  COND FALSE  !(__exception)
[L1223]  CALL        call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3265]  CALL        call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2999]  CALL        call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]              assume msgsender_MSG != null;
[L2970]              Balance[this] := 0;
[L2972]  CALL        call __var_18 := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L2972]  RET         call __var_18 := FreshRefGenerator__success();
[L2973]  COND FALSE  !(revert)
[L2976]              _owner_MultOwnable[this] := __var_18;
[L2977]              assume Length[_owner_MultOwnable[this]] == 0;
[L2979]              __var_17 := Length[_owner_MultOwnable[this]];
[L2980]              M_int_Ref[_owner_MultOwnable[this]][__var_17] := msgsender_MSG;
[L2981]              Length[_owner_MultOwnable[this]] := __var_17 + 1;
[L2982]              assert { :EventEmitted "OwnershipTransferred_MultOwnable" } true;
[L2999]  RET         call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3000]  COND FALSE  !(revert)
[L3265]  RET         call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3269]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L3269]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3270]  COND FALSE  !(revert)
[L3273]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L2344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L2344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND FALSE  !(revert)
[L2348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2314]              assume msgsender_MSG != null;
[L2315]              Balance[this] := 0;
[L2316]              _balances_ERC20[this] := zeroRefintArr();
[L2317]              sum__balances0[this] := 0;
[L2318]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2319]              sum__allowances1[this] := 0;
[L2320]              _totalSupply_ERC20[this] := 0;
[L2321]              _name_ERC20[this] := 214025342;
[L2322]              _symbol_ERC20[this] := 214025342;
[L2323]              _decimals_ERC20[this] := 0;
[L2325]              _name_ERC20[this] := name_s244;
[L2326]              _symbol_ERC20[this] := symbol_s244;
[L2327]              _decimals_ERC20[this] := 9;
[L2348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2349]  COND FALSE  !(revert)
[L3273]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3274]  COND FALSE  !(revert)
[L3277]  CALL        call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3238]              assume msgsender_MSG != null;
[L3239]              Balance[this] := 0;
[L3277]  RET         call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3278]  COND FALSE  !(revert)
[L1223]  RET         call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1224]              assume !revert && gas >= 0;
[L4929]  RET         call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L4930]              assume !revert && gas >= 0;
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND FALSE  !(choice == 17)
[L4811]  COND FALSE  !(choice == 16)
[L4817]  COND FALSE  !(choice == 15)
[L4824]  COND FALSE  !(choice == 14)
[L4831]  COND FALSE  !(choice == 13)
[L4837]  COND FALSE  !(choice == 12)
[L4843]  COND FALSE  !(choice == 11)
[L4849]  COND FALSE  !(choice == 10)
[L4856]  COND FALSE  !(choice == 9)
[L4863]  COND FALSE  !(choice == 8)
[L4869]  COND FALSE  !(choice == 7)
[L4875]  COND FALSE  !(choice == 6)
[L4881]  COND FALSE  !(choice == 5)
[L4888]  COND TRUE   choice == 4
[L4889]              gas := gas - 21000;
[L4890]  COND TRUE   gas >= 0
[L4891]              assume amount_s899 >= 0 && amount_s899 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4892]              assume msgvalue_MSG == 0;
[L4893]  CALL        call contractBurn~address~uint256_TulipToken(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L1315]              havoc __exception;
[L1316]              revert := false;
[L1317]  COND FALSE  !(__exception)
[L1341]  CALL        call contractBurn~address~uint256_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L3333]  CALL        call isAnOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4365]  CALL        call __var_19 := checkOwner_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]              i_s705 := 0;
[L3028]  COND TRUE   i_s705 < Length[_owner_MultOwnable[this]]
[L3030]  COND TRUE   M_int_Ref[_owner_MultOwnable[this]][i_s705] == msgsender_MSG
[L3031]              __ret_0_ := true;
[L4365]  RET         call __var_19 := checkOwner_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4366]  COND FALSE  !(revert)
[L4369]  COND FALSE  !(!__var_19)
[L3333]  RET         call isAnOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3334]  COND FALSE  !(revert)
[L3337]  COND TRUE   DType[this] == TulipToken
[L3338]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L2815]              __var_11 := null;
[L2816]  COND FALSE  !(!(account_s573 != null))
[L2820]  CALL        call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s573);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2820]  RET         call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s573);
[L2821]  COND FALSE  !(revert)
[L2824]              _totalSupply_ERC20[this] := __var_12;
[L2825]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s573], value_s573);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2825]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s573], value_s573);
[L2826]  COND FALSE  !(revert)
[L2829]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s573];
[L2830]              _balances_ERC20[this][account_s573] := __var_13;
[L2831]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s573];
[L2832]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3338]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L3339]  COND FALSE  !(revert)
[L1341]  RET         call contractBurn~address~uint256_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L1342]              assume !revert && gas >= 0;
[L4893]  RET         call contractBurn~address~uint256_TulipToken(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L4933]  RET         call CorralChoice_TulipToken(this);
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND TRUE   __exception
[L569]               __tmp__Balance := Balance;
[L570]               __tmp__DType := DType;
[L571]               __tmp__Alloc := Alloc;
[L572]               __tmp__balance_ADDR := balance_ADDR;
[L573]               __tmp__M_Ref_int := M_Ref_int;
[L574]               __tmp__sum__balances0 := sum__balances0;
[L575]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L576]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L577]               __tmp__sum__allowances1 := sum__allowances1;
[L578]               __tmp__M_int_Ref := M_int_Ref;
[L579]               __tmp__sum := sum;
[L580]               __tmp__Length := Length;
[L581]               __tmp__now := now;
[L582]               __tmp___balances_ERC20 := _balances_ERC20;
[L583]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L584]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L585]               __tmp___name_ERC20 := _name_ERC20;
[L586]               __tmp___symbol_ERC20 := _symbol_ERC20;
[L587]               __tmp___decimals_ERC20 := _decimals_ERC20;
[L588]               __tmp___owner_MultOwnable := _owner_MultOwnable;
[L589]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2416]  COND TRUE   __tmp__DType[this] == TulipToken
[L2417]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2678]              __var_4 := null;
[L2679]  COND FALSE  !(!(sender_s487 != null))
[L2683]              __var_5 := null;
[L2684]  COND FALSE  !(!(recipient_s487 != null))
[L2688]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s487], amount_s487);
[L2195]  COND TRUE   !(b_s119 <= a_s119)
[L2196]              revert := true;
[L2688]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s487], amount_s487);
[L2689]  COND TRUE   revert
[L2417]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2418]  COND TRUE   revert
[L589]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L590]               assume revert || gas < 0;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

Loop:
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND TRUE   __exception
[L569]               __tmp__Balance := Balance;
[L570]               __tmp__DType := DType;
[L571]               __tmp__Alloc := Alloc;
[L572]               __tmp__balance_ADDR := balance_ADDR;
[L573]               __tmp__M_Ref_int := M_Ref_int;
[L574]               __tmp__sum__balances0 := sum__balances0;
[L575]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L576]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L577]               __tmp__sum__allowances1 := sum__allowances1;
[L578]               __tmp__M_int_Ref := M_int_Ref;
[L579]               __tmp__sum := sum;
[L580]               __tmp__Length := Length;
[L581]               __tmp__now := now;
[L582]               __tmp___balances_ERC20 := _balances_ERC20;
[L583]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L584]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L585]               __tmp___name_ERC20 := _name_ERC20;
[L586]               __tmp___symbol_ERC20 := _symbol_ERC20;
[L587]               __tmp___decimals_ERC20 := _decimals_ERC20;
[L588]               __tmp___owner_MultOwnable := _owner_MultOwnable;
[L589]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2416]  COND TRUE   __tmp__DType[this] == TulipToken
[L2417]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2678]              __var_4 := null;
[L2679]  COND FALSE  !(!(sender_s487 != null))
[L2683]              __var_5 := null;
[L2684]  COND FALSE  !(!(recipient_s487 != null))
[L2688]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s487], amount_s487);
[L2195]  COND TRUE   !(b_s119 <= a_s119)
[L2196]              revert := true;
[L2688]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s487], amount_s487);
[L2689]  COND TRUE   revert
[L2417]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2418]  COND TRUE   revert
[L589]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L590]               assume revert || gas < 0;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

[2020-11-25 06:59:02,284 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:59:02,284 INFO  L82        PathProgramCache]: Analyzing trace with hash -1911928043, now seen corresponding path program 1 times
[2020-11-25 06:59:02,284 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:59:02,294 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:59:02,350 INFO  L134       CoverageAnalysis]: Checked inductivity of 78 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 78 trivial. 0 not checked.
[2020-11-25 06:59:02,350 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:59:02,350 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 06:59:02,351 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:59:02,351 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 06:59:02,351 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 06:59:02,351 INFO  L87              Difference]: Start difference. First operand 2765 states and 3079 transitions. cyclomatic complexity: 327 Second operand 8 states.
[2020-11-25 06:59:03,176 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:59:03,177 INFO  L93              Difference]: Finished difference Result 2873 states and 3210 transitions.
[2020-11-25 06:59:03,177 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 9 states. 
[2020-11-25 06:59:03,178 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2873 states and 3210 transitions.
[2020-11-25 06:59:03,183 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 06:59:03,189 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2873 states to 2873 states and 3210 transitions.
[2020-11-25 06:59:03,189 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 643
[2020-11-25 06:59:03,190 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 643
[2020-11-25 06:59:03,190 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2873 states and 3210 transitions.
[2020-11-25 06:59:03,192 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:59:03,192 INFO  L728         BuchiCegarLoop]: Abstraction has 2873 states and 3210 transitions.
[2020-11-25 06:59:03,194 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2873 states and 3210 transitions.
[2020-11-25 06:59:03,210 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2873 to 2765.
[2020-11-25 06:59:03,210 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2765 states.
[2020-11-25 06:59:03,213 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2765 states to 2765 states and 3079 transitions.
[2020-11-25 06:59:03,213 INFO  L751         BuchiCegarLoop]: Abstraction has 2765 states and 3079 transitions.
[2020-11-25 06:59:03,213 INFO  L631         BuchiCegarLoop]: Abstraction has 2765 states and 3079 transitions.
[2020-11-25 06:59:03,213 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 06:59:03,213 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2765 states and 3079 transitions.
[2020-11-25 06:59:03,215 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:59:03,215 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:59:03,215 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:59:03,216 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:59:03,216 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4923]              assume null == 0;
[L4924]  CALL        call this := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L4924]  RET         call this := FreshRefGenerator__success();
[L4925]              assume now >= 0;
[L4926]              assume DType[this] == TulipToken;
[L4927]              assume msgvalue_MSG == 0;
[L4928]              gas := gas - 53000;
[L4929]  CALL        call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1197]              havoc __exception;
[L1198]              revert := false;
[L1199]  COND FALSE  !(__exception)
[L1223]  CALL        call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3265]  CALL        call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2999]  CALL        call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]              assume msgsender_MSG != null;
[L2970]              Balance[this] := 0;
[L2972]  CALL        call __var_18 := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L2972]  RET         call __var_18 := FreshRefGenerator__success();
[L2973]  COND FALSE  !(revert)
[L2976]              _owner_MultOwnable[this] := __var_18;
[L2977]              assume Length[_owner_MultOwnable[this]] == 0;
[L2979]              __var_17 := Length[_owner_MultOwnable[this]];
[L2980]              M_int_Ref[_owner_MultOwnable[this]][__var_17] := msgsender_MSG;
[L2981]              Length[_owner_MultOwnable[this]] := __var_17 + 1;
[L2982]              assert { :EventEmitted "OwnershipTransferred_MultOwnable" } true;
[L2999]  RET         call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3000]  COND FALSE  !(revert)
[L3265]  RET         call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3269]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L3269]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3270]  COND FALSE  !(revert)
[L3273]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L2344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L2344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND FALSE  !(revert)
[L2348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2314]              assume msgsender_MSG != null;
[L2315]              Balance[this] := 0;
[L2316]              _balances_ERC20[this] := zeroRefintArr();
[L2317]              sum__balances0[this] := 0;
[L2318]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2319]              sum__allowances1[this] := 0;
[L2320]              _totalSupply_ERC20[this] := 0;
[L2321]              _name_ERC20[this] := 214025342;
[L2322]              _symbol_ERC20[this] := 214025342;
[L2323]              _decimals_ERC20[this] := 0;
[L2325]              _name_ERC20[this] := name_s244;
[L2326]              _symbol_ERC20[this] := symbol_s244;
[L2327]              _decimals_ERC20[this] := 9;
[L2348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2349]  COND FALSE  !(revert)
[L3273]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3274]  COND FALSE  !(revert)
[L3277]  CALL        call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3238]              assume msgsender_MSG != null;
[L3239]              Balance[this] := 0;
[L3277]  RET         call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3278]  COND FALSE  !(revert)
[L1223]  RET         call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1224]              assume !revert && gas >= 0;
[L4929]  RET         call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L4930]              assume !revert && gas >= 0;
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND FALSE  !(choice == 17)
[L4811]  COND FALSE  !(choice == 16)
[L4817]  COND FALSE  !(choice == 15)
[L4824]  COND FALSE  !(choice == 14)
[L4831]  COND FALSE  !(choice == 13)
[L4837]  COND FALSE  !(choice == 12)
[L4843]  COND FALSE  !(choice == 11)
[L4849]  COND FALSE  !(choice == 10)
[L4856]  COND FALSE  !(choice == 9)
[L4863]  COND FALSE  !(choice == 8)
[L4869]  COND FALSE  !(choice == 7)
[L4875]  COND FALSE  !(choice == 6)
[L4881]  COND FALSE  !(choice == 5)
[L4888]  COND TRUE   choice == 4
[L4889]              gas := gas - 21000;
[L4890]  COND TRUE   gas >= 0
[L4891]              assume amount_s899 >= 0 && amount_s899 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4892]              assume msgvalue_MSG == 0;
[L4893]  CALL        call contractBurn~address~uint256_TulipToken(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L1315]              havoc __exception;
[L1316]              revert := false;
[L1317]  COND FALSE  !(__exception)
[L1341]  CALL        call contractBurn~address~uint256_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L3333]  CALL        call isAnOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4365]  CALL        call __var_19 := checkOwner_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]              i_s705 := 0;
[L3028]  COND TRUE   i_s705 < Length[_owner_MultOwnable[this]]
[L3030]  COND TRUE   M_int_Ref[_owner_MultOwnable[this]][i_s705] == msgsender_MSG
[L3031]              __ret_0_ := true;
[L4365]  RET         call __var_19 := checkOwner_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4366]  COND FALSE  !(revert)
[L4369]  COND FALSE  !(!__var_19)
[L3333]  RET         call isAnOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3334]  COND FALSE  !(revert)
[L3337]  COND TRUE   DType[this] == TulipToken
[L3338]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L2815]              __var_11 := null;
[L2816]  COND FALSE  !(!(account_s573 != null))
[L2820]  CALL        call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s573);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2820]  RET         call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s573);
[L2821]  COND FALSE  !(revert)
[L2824]              _totalSupply_ERC20[this] := __var_12;
[L2825]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s573], value_s573);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2825]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s573], value_s573);
[L2826]  COND FALSE  !(revert)
[L2829]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s573];
[L2830]              _balances_ERC20[this][account_s573] := __var_13;
[L2831]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s573];
[L2832]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3338]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L3339]  COND FALSE  !(revert)
[L1341]  RET         call contractBurn~address~uint256_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L1342]              assume !revert && gas >= 0;
[L4893]  RET         call contractBurn~address~uint256_TulipToken(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L4933]  RET         call CorralChoice_TulipToken(this);
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2435]  COND TRUE   DType[this] == TulipToken
[L2436]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2436]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2437]  COND FALSE  !(revert)
[L2448]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L593]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20[this] == old(_name_ERC20[this])) && _symbol_ERC20[this] == old(_symbol_ERC20[this])) && _decimals_ERC20[this] == old(_decimals_ERC20[this])) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]));
[L2]                 revert := revert_hold;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

Loop:
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2435]  COND TRUE   DType[this] == TulipToken
[L2436]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2436]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2437]  COND FALSE  !(revert)
[L2448]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L593]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20[this] == old(_name_ERC20[this])) && _symbol_ERC20[this] == old(_symbol_ERC20[this])) && _decimals_ERC20[this] == old(_decimals_ERC20[this])) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]));
[L2]                 revert := revert_hold;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

[2020-11-25 06:59:03,219 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:59:03,220 INFO  L82        PathProgramCache]: Analyzing trace with hash -1600656536, now seen corresponding path program 1 times
[2020-11-25 06:59:03,220 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:59:03,236 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:59:04,139 INFO  L134       CoverageAnalysis]: Checked inductivity of 78 backedges. 4 proven. 57 refuted. 0 times theorem prover too weak. 17 trivial. 0 not checked.
[2020-11-25 06:59:04,139 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 06:59:04,139 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [39] total 39
[2020-11-25 06:59:04,140 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:59:04,140 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 40 interpolants.
[2020-11-25 06:59:04,140 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=141, Invalid=1419, Unknown=0, NotChecked=0, Total=1560
[2020-11-25 06:59:04,141 INFO  L87              Difference]: Start difference. First operand 2765 states and 3079 transitions. cyclomatic complexity: 327 Second operand 40 states.
[2020-11-25 06:59:08,314 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:59:08,314 INFO  L93              Difference]: Finished difference Result 2808 states and 3151 transitions.
[2020-11-25 06:59:08,315 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 37 states. 
[2020-11-25 06:59:08,315 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2808 states and 3151 transitions.
[2020-11-25 06:59:08,326 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 06:59:08,337 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2808 states to 2808 states and 3151 transitions.
[2020-11-25 06:59:08,337 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 611
[2020-11-25 06:59:08,337 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 611
[2020-11-25 06:59:08,338 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2808 states and 3151 transitions.
[2020-11-25 06:59:08,340 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:59:08,340 INFO  L728         BuchiCegarLoop]: Abstraction has 2808 states and 3151 transitions.
[2020-11-25 06:59:08,343 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2808 states and 3151 transitions.
[2020-11-25 06:59:08,361 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2808 to 2795.
[2020-11-25 06:59:08,361 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2795 states.
[2020-11-25 06:59:08,364 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2795 states to 2795 states and 3120 transitions.
[2020-11-25 06:59:08,365 INFO  L751         BuchiCegarLoop]: Abstraction has 2795 states and 3120 transitions.
[2020-11-25 06:59:08,365 INFO  L631         BuchiCegarLoop]: Abstraction has 2795 states and 3120 transitions.
[2020-11-25 06:59:08,365 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 06:59:08,365 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2795 states and 3120 transitions.
[2020-11-25 06:59:08,369 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 06:59:08,369 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:59:08,369 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:59:08,371 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:59:08,372 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4923]              assume null == 0;
[L4924]  CALL        call this := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L4924]  RET         call this := FreshRefGenerator__success();
[L4925]              assume now >= 0;
[L4926]              assume DType[this] == TulipToken;
[L4927]              assume msgvalue_MSG == 0;
[L4928]              gas := gas - 53000;
[L4929]  CALL        call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1197]              havoc __exception;
[L1198]              revert := false;
[L1199]  COND FALSE  !(__exception)
[L1223]  CALL        call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3265]  CALL        call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2999]  CALL        call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]              assume msgsender_MSG != null;
[L2970]              Balance[this] := 0;
[L2972]  CALL        call __var_18 := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L2972]  RET         call __var_18 := FreshRefGenerator__success();
[L2973]  COND FALSE  !(revert)
[L2976]              _owner_MultOwnable[this] := __var_18;
[L2977]              assume Length[_owner_MultOwnable[this]] == 0;
[L2979]              __var_17 := Length[_owner_MultOwnable[this]];
[L2980]              M_int_Ref[_owner_MultOwnable[this]][__var_17] := msgsender_MSG;
[L2981]              Length[_owner_MultOwnable[this]] := __var_17 + 1;
[L2982]              assert { :EventEmitted "OwnershipTransferred_MultOwnable" } true;
[L2999]  RET         call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3000]  COND FALSE  !(revert)
[L3265]  RET         call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3269]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L3269]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3270]  COND FALSE  !(revert)
[L3273]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L2344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L2344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND FALSE  !(revert)
[L2348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2314]              assume msgsender_MSG != null;
[L2315]              Balance[this] := 0;
[L2316]              _balances_ERC20[this] := zeroRefintArr();
[L2317]              sum__balances0[this] := 0;
[L2318]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2319]              sum__allowances1[this] := 0;
[L2320]              _totalSupply_ERC20[this] := 0;
[L2321]              _name_ERC20[this] := 214025342;
[L2322]              _symbol_ERC20[this] := 214025342;
[L2323]              _decimals_ERC20[this] := 0;
[L2325]              _name_ERC20[this] := name_s244;
[L2326]              _symbol_ERC20[this] := symbol_s244;
[L2327]              _decimals_ERC20[this] := 9;
[L2348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2349]  COND FALSE  !(revert)
[L3273]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3274]  COND FALSE  !(revert)
[L3277]  CALL        call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3238]              assume msgsender_MSG != null;
[L3239]              Balance[this] := 0;
[L3277]  RET         call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3278]  COND FALSE  !(revert)
[L1223]  RET         call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1224]              assume !revert && gas >= 0;
[L4929]  RET         call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L4930]              assume !revert && gas >= 0;
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND FALSE  !(choice == 17)
[L4811]  COND FALSE  !(choice == 16)
[L4817]  COND FALSE  !(choice == 15)
[L4824]  COND FALSE  !(choice == 14)
[L4831]  COND FALSE  !(choice == 13)
[L4837]  COND FALSE  !(choice == 12)
[L4843]  COND FALSE  !(choice == 11)
[L4849]  COND FALSE  !(choice == 10)
[L4856]  COND FALSE  !(choice == 9)
[L4863]  COND FALSE  !(choice == 8)
[L4869]  COND FALSE  !(choice == 7)
[L4875]  COND FALSE  !(choice == 6)
[L4881]  COND TRUE   choice == 5
[L4882]              gas := gas - 21000;
[L4883]  COND TRUE   gas >= 0
[L4884]              assume amount_s884 >= 0 && amount_s884 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4885]              assume msgvalue_MSG == 0;
[L4886]  CALL        call contractMint~address~uint256_TulipToken(this, msgsender_MSG, msgvalue_MSG, account_s884, amount_s884);
[L1256]              havoc __exception;
[L1257]              revert := false;
[L1258]  COND FALSE  !(__exception)
[L1282]  CALL        call contractMint~address~uint256_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, account_s884, amount_s884);
[L3301]  CALL        call isAnOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4365]  CALL        call __var_19 := checkOwner_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]              i_s705 := 0;
[L3028]  COND TRUE   i_s705 < Length[_owner_MultOwnable[this]]
[L3030]  COND TRUE   M_int_Ref[_owner_MultOwnable[this]][i_s705] == msgsender_MSG
[L3031]              __ret_0_ := true;
[L4365]  RET         call __var_19 := checkOwner_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4366]  COND FALSE  !(revert)
[L4369]  COND FALSE  !(!__var_19)
[L3301]  RET         call isAnOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3302]  COND FALSE  !(revert)
[L3305]  COND TRUE   DType[this] == TulipToken
[L3306]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s884, amount_s884);
[L2766]              __var_8 := null;
[L2767]  COND FALSE  !(!(account_s530 != null))
[L2771]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s530);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2771]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s530);
[L2772]  COND FALSE  !(revert)
[L2775]              _totalSupply_ERC20[this] := __var_9;
[L2776]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s530], amount_s530);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2776]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s530], amount_s530);
[L2777]  COND FALSE  !(revert)
[L2780]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s530];
[L2781]              _balances_ERC20[this][account_s530] := __var_10;
[L2782]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s530];
[L2783]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3306]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s884, amount_s884);
[L3307]  COND FALSE  !(revert)
[L1282]  RET         call contractMint~address~uint256_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, account_s884, amount_s884);
[L1283]              assume !revert && gas >= 0;
[L4886]  RET         call contractMint~address~uint256_TulipToken(this, msgsender_MSG, msgvalue_MSG, account_s884, amount_s884);
[L4933]  RET         call CorralChoice_TulipToken(this);
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2435]  COND TRUE   DType[this] == TulipToken
[L2436]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2436]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2437]  COND FALSE  !(revert)
[L2448]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L593]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20[this] == old(_name_ERC20[this])) && _symbol_ERC20[this] == old(_symbol_ERC20[this])) && _decimals_ERC20[this] == old(_decimals_ERC20[this])) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]));
[L2]                 revert := revert_hold;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

Loop:
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND TRUE   choice == 19
[L4793]              gas := gas - 21000;
[L4794]  COND FALSE  !(gas >= 0)
[L4933]  RET         call CorralChoice_TulipToken(this);

[2020-11-25 06:59:08,376 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:59:08,376 INFO  L82        PathProgramCache]: Analyzing trace with hash 2101568185, now seen corresponding path program 1 times
[2020-11-25 06:59:08,377 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:59:08,417 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:59:09,050 INFO  L134       CoverageAnalysis]: Checked inductivity of 78 backedges. 0 proven. 57 refuted. 0 times theorem prover too weak. 21 trivial. 0 not checked.
[2020-11-25 06:59:09,051 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 06:59:09,051 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [34] total 34
[2020-11-25 06:59:09,051 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:59:09,051 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 35 interpolants.
[2020-11-25 06:59:09,051 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=112, Invalid=1078, Unknown=0, NotChecked=0, Total=1190
[2020-11-25 06:59:09,052 INFO  L87              Difference]: Start difference. First operand 2795 states and 3120 transitions. cyclomatic complexity: 340 Second operand 35 states.
[2020-11-25 06:59:14,122 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:59:14,123 INFO  L93              Difference]: Finished difference Result 2810 states and 3161 transitions.
[2020-11-25 06:59:14,123 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 35 states. 
[2020-11-25 06:59:14,124 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2810 states and 3161 transitions.
[2020-11-25 06:59:14,129 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 06:59:14,134 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2810 states to 2810 states and 3161 transitions.
[2020-11-25 06:59:14,134 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 611
[2020-11-25 06:59:14,134 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 611
[2020-11-25 06:59:14,135 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2810 states and 3161 transitions.
[2020-11-25 06:59:14,137 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:59:14,137 INFO  L728         BuchiCegarLoop]: Abstraction has 2810 states and 3161 transitions.
[2020-11-25 06:59:14,140 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2810 states and 3161 transitions.
[2020-11-25 06:59:14,156 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2810 to 2795.
[2020-11-25 06:59:14,156 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2795 states.
[2020-11-25 06:59:14,158 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2795 states to 2795 states and 3120 transitions.
[2020-11-25 06:59:14,158 INFO  L751         BuchiCegarLoop]: Abstraction has 2795 states and 3120 transitions.
[2020-11-25 06:59:14,158 INFO  L631         BuchiCegarLoop]: Abstraction has 2795 states and 3120 transitions.
[2020-11-25 06:59:14,158 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 06:59:14,158 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2795 states and 3120 transitions.
[2020-11-25 06:59:14,161 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 06:59:14,161 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:59:14,161 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:59:14,162 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:59:14,162 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4923]              assume null == 0;
[L4924]  CALL        call this := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L4924]  RET         call this := FreshRefGenerator__success();
[L4925]              assume now >= 0;
[L4926]              assume DType[this] == TulipToken;
[L4927]              assume msgvalue_MSG == 0;
[L4928]              gas := gas - 53000;
[L4929]  CALL        call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1197]              havoc __exception;
[L1198]              revert := false;
[L1199]  COND FALSE  !(__exception)
[L1223]  CALL        call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3265]  CALL        call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2999]  CALL        call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]              assume msgsender_MSG != null;
[L2970]              Balance[this] := 0;
[L2972]  CALL        call __var_18 := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L2972]  RET         call __var_18 := FreshRefGenerator__success();
[L2973]  COND FALSE  !(revert)
[L2976]              _owner_MultOwnable[this] := __var_18;
[L2977]              assume Length[_owner_MultOwnable[this]] == 0;
[L2979]              __var_17 := Length[_owner_MultOwnable[this]];
[L2980]              M_int_Ref[_owner_MultOwnable[this]][__var_17] := msgsender_MSG;
[L2981]              Length[_owner_MultOwnable[this]] := __var_17 + 1;
[L2982]              assert { :EventEmitted "OwnershipTransferred_MultOwnable" } true;
[L2999]  RET         call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3000]  COND FALSE  !(revert)
[L3265]  RET         call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3269]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L3269]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3270]  COND FALSE  !(revert)
[L3273]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L2344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L2344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND FALSE  !(revert)
[L2348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2314]              assume msgsender_MSG != null;
[L2315]              Balance[this] := 0;
[L2316]              _balances_ERC20[this] := zeroRefintArr();
[L2317]              sum__balances0[this] := 0;
[L2318]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2319]              sum__allowances1[this] := 0;
[L2320]              _totalSupply_ERC20[this] := 0;
[L2321]              _name_ERC20[this] := 214025342;
[L2322]              _symbol_ERC20[this] := 214025342;
[L2323]              _decimals_ERC20[this] := 0;
[L2325]              _name_ERC20[this] := name_s244;
[L2326]              _symbol_ERC20[this] := symbol_s244;
[L2327]              _decimals_ERC20[this] := 9;
[L2348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2349]  COND FALSE  !(revert)
[L3273]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3274]  COND FALSE  !(revert)
[L3277]  CALL        call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3238]              assume msgsender_MSG != null;
[L3239]              Balance[this] := 0;
[L3277]  RET         call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3278]  COND FALSE  !(revert)
[L1223]  RET         call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1224]              assume !revert && gas >= 0;
[L4929]  RET         call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L4930]              assume !revert && gas >= 0;
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2435]  COND FALSE  !(DType[this] == TulipToken)
[L2440]  COND TRUE   DType[this] == ERC20
[L2441]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2441]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2442]  COND FALSE  !(revert)
[L2448]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L593]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20[this] == old(_name_ERC20[this])) && _symbol_ERC20[this] == old(_symbol_ERC20[this])) && _decimals_ERC20[this] == old(_decimals_ERC20[this])) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]));
[L2]                 revert := revert_hold;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2435]  COND TRUE   DType[this] == TulipToken
[L2436]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2436]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2437]  COND FALSE  !(revert)
[L2448]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L593]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20[this] == old(_name_ERC20[this])) && _symbol_ERC20[this] == old(_symbol_ERC20[this])) && _decimals_ERC20[this] == old(_decimals_ERC20[this])) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]));
[L2]                 revert := revert_hold;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

Loop:
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND TRUE   choice == 19
[L4793]              gas := gas - 21000;
[L4794]  COND FALSE  !(gas >= 0)
[L4933]  RET         call CorralChoice_TulipToken(this);

[2020-11-25 06:59:14,165 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:59:14,165 INFO  L82        PathProgramCache]: Analyzing trace with hash -1214932428, now seen corresponding path program 1 times
[2020-11-25 06:59:14,165 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:59:14,174 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:59:14,216 INFO  L134       CoverageAnalysis]: Checked inductivity of 82 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 81 trivial. 0 not checked.
[2020-11-25 06:59:14,216 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:59:14,216 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 06:59:14,216 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:59:14,216 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 06:59:14,217 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 06:59:14,217 INFO  L87              Difference]: Start difference. First operand 2795 states and 3120 transitions. cyclomatic complexity: 340 Second operand 6 states.
[2020-11-25 06:59:14,256 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:59:14,256 INFO  L93              Difference]: Finished difference Result 2847 states and 3173 transitions.
[2020-11-25 06:59:14,256 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 06:59:14,257 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2847 states and 3173 transitions.
[2020-11-25 06:59:14,261 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 06:59:14,265 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2847 states to 2785 states and 3106 transitions.
[2020-11-25 06:59:14,265 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 603
[2020-11-25 06:59:14,266 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 603
[2020-11-25 06:59:14,266 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2785 states and 3106 transitions.
[2020-11-25 06:59:14,267 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:59:14,267 INFO  L728         BuchiCegarLoop]: Abstraction has 2785 states and 3106 transitions.
[2020-11-25 06:59:14,269 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2785 states and 3106 transitions.
[2020-11-25 06:59:14,281 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2785 to 2785.
[2020-11-25 06:59:14,281 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2785 states.
[2020-11-25 06:59:14,283 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2785 states to 2785 states and 3106 transitions.
[2020-11-25 06:59:14,283 INFO  L751         BuchiCegarLoop]: Abstraction has 2785 states and 3106 transitions.
[2020-11-25 06:59:14,283 INFO  L631         BuchiCegarLoop]: Abstraction has 2785 states and 3106 transitions.
[2020-11-25 06:59:14,283 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 06:59:14,283 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2785 states and 3106 transitions.
[2020-11-25 06:59:14,286 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 06:59:14,286 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:59:14,286 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:59:14,287 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:59:14,287 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4923]              assume null == 0;
[L4924]  CALL        call this := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L4924]  RET         call this := FreshRefGenerator__success();
[L4925]              assume now >= 0;
[L4926]              assume DType[this] == TulipToken;
[L4927]              assume msgvalue_MSG == 0;
[L4928]              gas := gas - 53000;
[L4929]  CALL        call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1197]              havoc __exception;
[L1198]              revert := false;
[L1199]  COND FALSE  !(__exception)
[L1223]  CALL        call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3265]  CALL        call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2999]  CALL        call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]              assume msgsender_MSG != null;
[L2970]              Balance[this] := 0;
[L2972]  CALL        call __var_18 := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L2972]  RET         call __var_18 := FreshRefGenerator__success();
[L2973]  COND FALSE  !(revert)
[L2976]              _owner_MultOwnable[this] := __var_18;
[L2977]              assume Length[_owner_MultOwnable[this]] == 0;
[L2979]              __var_17 := Length[_owner_MultOwnable[this]];
[L2980]              M_int_Ref[_owner_MultOwnable[this]][__var_17] := msgsender_MSG;
[L2981]              Length[_owner_MultOwnable[this]] := __var_17 + 1;
[L2982]              assert { :EventEmitted "OwnershipTransferred_MultOwnable" } true;
[L2999]  RET         call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3000]  COND FALSE  !(revert)
[L3265]  RET         call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3269]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L3269]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3270]  COND FALSE  !(revert)
[L3273]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L2344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L2344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND FALSE  !(revert)
[L2348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2314]              assume msgsender_MSG != null;
[L2315]              Balance[this] := 0;
[L2316]              _balances_ERC20[this] := zeroRefintArr();
[L2317]              sum__balances0[this] := 0;
[L2318]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2319]              sum__allowances1[this] := 0;
[L2320]              _totalSupply_ERC20[this] := 0;
[L2321]              _name_ERC20[this] := 214025342;
[L2322]              _symbol_ERC20[this] := 214025342;
[L2323]              _decimals_ERC20[this] := 0;
[L2325]              _name_ERC20[this] := name_s244;
[L2326]              _symbol_ERC20[this] := symbol_s244;
[L2327]              _decimals_ERC20[this] := 9;
[L2348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2349]  COND FALSE  !(revert)
[L3273]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3274]  COND FALSE  !(revert)
[L3277]  CALL        call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3238]              assume msgsender_MSG != null;
[L3239]              Balance[this] := 0;
[L3277]  RET         call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3278]  COND FALSE  !(revert)
[L1223]  RET         call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1224]              assume !revert && gas >= 0;
[L4929]  RET         call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L4930]              assume !revert && gas >= 0;
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2435]  COND TRUE   DType[this] == TulipToken
[L2436]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2436]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2437]  COND FALSE  !(revert)
[L2448]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L593]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20[this] == old(_name_ERC20[this])) && _symbol_ERC20[this] == old(_symbol_ERC20[this])) && _decimals_ERC20[this] == old(_decimals_ERC20[this])) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]));
[L2]                 revert := revert_hold;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2435]  COND TRUE   DType[this] == TulipToken
[L2436]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2436]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2437]  COND FALSE  !(revert)
[L2448]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L593]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20[this] == old(_name_ERC20[this])) && _symbol_ERC20[this] == old(_symbol_ERC20[this])) && _decimals_ERC20[this] == old(_decimals_ERC20[this])) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]));
[L2]                 revert := revert_hold;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

Loop:
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2435]  COND TRUE   DType[this] == TulipToken
[L2436]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2436]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2437]  COND FALSE  !(revert)
[L2448]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L593]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20[this] == old(_name_ERC20[this])) && _symbol_ERC20[this] == old(_symbol_ERC20[this])) && _decimals_ERC20[this] == old(_decimals_ERC20[this])) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]));
[L2]                 revert := revert_hold;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

[2020-11-25 06:59:14,290 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:59:14,290 INFO  L82        PathProgramCache]: Analyzing trace with hash 734688756, now seen corresponding path program 1 times
[2020-11-25 06:59:14,291 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:59:14,310 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:59:14,744 INFO  L134       CoverageAnalysis]: Checked inductivity of 82 backedges. 1 proven. 2 refuted. 0 times theorem prover too weak. 79 trivial. 0 not checked.
[2020-11-25 06:59:14,744 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 06:59:14,744 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [26] total 26
[2020-11-25 06:59:14,744 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:59:14,744 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 06:59:14,744 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=60, Invalid=590, Unknown=0, NotChecked=0, Total=650
[2020-11-25 06:59:14,745 INFO  L87              Difference]: Start difference. First operand 2785 states and 3106 transitions. cyclomatic complexity: 336 Second operand 26 states.
[2020-11-25 06:59:17,694 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:59:17,694 INFO  L93              Difference]: Finished difference Result 2797 states and 3123 transitions.
[2020-11-25 06:59:17,695 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 26 states. 
[2020-11-25 06:59:17,695 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2797 states and 3123 transitions.
[2020-11-25 06:59:17,699 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 06:59:17,704 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2797 states to 2797 states and 3123 transitions.
[2020-11-25 06:59:17,704 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 607
[2020-11-25 06:59:17,704 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 607
[2020-11-25 06:59:17,704 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2797 states and 3123 transitions.
[2020-11-25 06:59:17,706 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:59:17,706 INFO  L728         BuchiCegarLoop]: Abstraction has 2797 states and 3123 transitions.
[2020-11-25 06:59:17,707 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2797 states and 3123 transitions.
[2020-11-25 06:59:17,719 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2797 to 2791.
[2020-11-25 06:59:17,719 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2791 states.
[2020-11-25 06:59:17,722 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2791 states to 2791 states and 3113 transitions.
[2020-11-25 06:59:17,722 INFO  L751         BuchiCegarLoop]: Abstraction has 2791 states and 3113 transitions.
[2020-11-25 06:59:17,722 INFO  L631         BuchiCegarLoop]: Abstraction has 2791 states and 3113 transitions.
[2020-11-25 06:59:17,722 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 06:59:17,722 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2791 states and 3113 transitions.
[2020-11-25 06:59:17,725 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 06:59:17,725 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:59:17,725 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:59:17,726 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:59:17,726 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4923]              assume null == 0;
[L4924]  CALL        call this := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L4924]  RET         call this := FreshRefGenerator__success();
[L4925]              assume now >= 0;
[L4926]              assume DType[this] == TulipToken;
[L4927]              assume msgvalue_MSG == 0;
[L4928]              gas := gas - 53000;
[L4929]  CALL        call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1197]              havoc __exception;
[L1198]              revert := false;
[L1199]  COND FALSE  !(__exception)
[L1223]  CALL        call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3265]  CALL        call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2999]  CALL        call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]              assume msgsender_MSG != null;
[L2970]              Balance[this] := 0;
[L2972]  CALL        call __var_18 := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L2972]  RET         call __var_18 := FreshRefGenerator__success();
[L2973]  COND FALSE  !(revert)
[L2976]              _owner_MultOwnable[this] := __var_18;
[L2977]              assume Length[_owner_MultOwnable[this]] == 0;
[L2979]              __var_17 := Length[_owner_MultOwnable[this]];
[L2980]              M_int_Ref[_owner_MultOwnable[this]][__var_17] := msgsender_MSG;
[L2981]              Length[_owner_MultOwnable[this]] := __var_17 + 1;
[L2982]              assert { :EventEmitted "OwnershipTransferred_MultOwnable" } true;
[L2999]  RET         call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3000]  COND FALSE  !(revert)
[L3265]  RET         call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3269]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L3269]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3270]  COND FALSE  !(revert)
[L3273]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L2344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L2344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND FALSE  !(revert)
[L2348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2314]              assume msgsender_MSG != null;
[L2315]              Balance[this] := 0;
[L2316]              _balances_ERC20[this] := zeroRefintArr();
[L2317]              sum__balances0[this] := 0;
[L2318]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2319]              sum__allowances1[this] := 0;
[L2320]              _totalSupply_ERC20[this] := 0;
[L2321]              _name_ERC20[this] := 214025342;
[L2322]              _symbol_ERC20[this] := 214025342;
[L2323]              _decimals_ERC20[this] := 0;
[L2325]              _name_ERC20[this] := name_s244;
[L2326]              _symbol_ERC20[this] := symbol_s244;
[L2327]              _decimals_ERC20[this] := 9;
[L2348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2349]  COND FALSE  !(revert)
[L3273]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3274]  COND FALSE  !(revert)
[L3277]  CALL        call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3238]              assume msgsender_MSG != null;
[L3239]              Balance[this] := 0;
[L3277]  RET         call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3278]  COND FALSE  !(revert)
[L1223]  RET         call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1224]              assume !revert && gas >= 0;
[L4929]  RET         call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L4930]              assume !revert && gas >= 0;
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2435]  COND TRUE   DType[this] == TulipToken
[L2436]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2436]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2437]  COND FALSE  !(revert)
[L2448]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L593]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20[this] == old(_name_ERC20[this])) && _symbol_ERC20[this] == old(_symbol_ERC20[this])) && _decimals_ERC20[this] == old(_decimals_ERC20[this])) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]);
[L2]                 success_transfer_ERC200 := true;
[L2]                 success_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2435]  COND TRUE   DType[this] == TulipToken
[L2436]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2436]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2437]  COND FALSE  !(revert)
[L2448]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L593]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20[this] == old(_name_ERC20[this])) && _symbol_ERC20[this] == old(_symbol_ERC20[this])) && _decimals_ERC20[this] == old(_decimals_ERC20[this])) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]));
[L2]                 revert := revert_hold;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

Loop:
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2435]  COND TRUE   DType[this] == TulipToken
[L2436]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2436]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2437]  COND FALSE  !(revert)
[L2448]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L593]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20[this] == old(_name_ERC20[this])) && _symbol_ERC20[this] == old(_symbol_ERC20[this])) && _decimals_ERC20[this] == old(_decimals_ERC20[this])) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]));
[L2]                 revert := revert_hold;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

[2020-11-25 06:59:17,729 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:59:17,729 INFO  L82        PathProgramCache]: Analyzing trace with hash -410065452, now seen corresponding path program 1 times
[2020-11-25 06:59:17,729 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:59:17,743 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:59:17,967 INFO  L134       CoverageAnalysis]: Checked inductivity of 83 backedges. 5 proven. 0 refuted. 0 times theorem prover too weak. 78 trivial. 0 not checked.
[2020-11-25 06:59:17,967 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:59:17,967 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [26] imperfect sequences [] total 26
[2020-11-25 06:59:17,967 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:59:17,968 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-25 06:59:17,968 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=66, Invalid=636, Unknown=0, NotChecked=0, Total=702
[2020-11-25 06:59:17,968 INFO  L87              Difference]: Start difference. First operand 2791 states and 3113 transitions. cyclomatic complexity: 337 Second operand 27 states.
[2020-11-25 06:59:21,213 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:59:21,213 INFO  L93              Difference]: Finished difference Result 2797 states and 3131 transitions.
[2020-11-25 06:59:21,214 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 06:59:21,214 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2797 states and 3131 transitions.
[2020-11-25 06:59:21,219 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 06:59:21,224 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2797 states to 2797 states and 3131 transitions.
[2020-11-25 06:59:21,224 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 605
[2020-11-25 06:59:21,224 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 605
[2020-11-25 06:59:21,225 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2797 states and 3131 transitions.
[2020-11-25 06:59:21,226 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:59:21,226 INFO  L728         BuchiCegarLoop]: Abstraction has 2797 states and 3131 transitions.
[2020-11-25 06:59:21,228 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2797 states and 3131 transitions.
[2020-11-25 06:59:21,239 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2797 to 2795.
[2020-11-25 06:59:21,239 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2795 states.
[2020-11-25 06:59:21,242 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2795 states to 2795 states and 3126 transitions.
[2020-11-25 06:59:21,242 INFO  L751         BuchiCegarLoop]: Abstraction has 2795 states and 3126 transitions.
[2020-11-25 06:59:21,242 INFO  L631         BuchiCegarLoop]: Abstraction has 2795 states and 3126 transitions.
[2020-11-25 06:59:21,242 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 06:59:21,242 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2795 states and 3126 transitions.
[2020-11-25 06:59:21,245 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 06:59:21,245 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:59:21,245 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:59:21,246 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:59:21,246 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4923]              assume null == 0;
[L4924]  CALL        call this := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L4924]  RET         call this := FreshRefGenerator__success();
[L4925]              assume now >= 0;
[L4926]              assume DType[this] == TulipToken;
[L4927]              assume msgvalue_MSG == 0;
[L4928]              gas := gas - 53000;
[L4929]  CALL        call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1197]              havoc __exception;
[L1198]              revert := false;
[L1199]  COND FALSE  !(__exception)
[L1223]  CALL        call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3265]  CALL        call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2999]  CALL        call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]              assume msgsender_MSG != null;
[L2970]              Balance[this] := 0;
[L2972]  CALL        call __var_18 := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L2972]  RET         call __var_18 := FreshRefGenerator__success();
[L2973]  COND FALSE  !(revert)
[L2976]              _owner_MultOwnable[this] := __var_18;
[L2977]              assume Length[_owner_MultOwnable[this]] == 0;
[L2979]              __var_17 := Length[_owner_MultOwnable[this]];
[L2980]              M_int_Ref[_owner_MultOwnable[this]][__var_17] := msgsender_MSG;
[L2981]              Length[_owner_MultOwnable[this]] := __var_17 + 1;
[L2982]              assert { :EventEmitted "OwnershipTransferred_MultOwnable" } true;
[L2999]  RET         call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3000]  COND FALSE  !(revert)
[L3265]  RET         call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3269]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L3269]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3270]  COND FALSE  !(revert)
[L3273]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L2344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L2344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND FALSE  !(revert)
[L2348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2314]              assume msgsender_MSG != null;
[L2315]              Balance[this] := 0;
[L2316]              _balances_ERC20[this] := zeroRefintArr();
[L2317]              sum__balances0[this] := 0;
[L2318]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2319]              sum__allowances1[this] := 0;
[L2320]              _totalSupply_ERC20[this] := 0;
[L2321]              _name_ERC20[this] := 214025342;
[L2322]              _symbol_ERC20[this] := 214025342;
[L2323]              _decimals_ERC20[this] := 0;
[L2325]              _name_ERC20[this] := name_s244;
[L2326]              _symbol_ERC20[this] := symbol_s244;
[L2327]              _decimals_ERC20[this] := 9;
[L2348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2349]  COND FALSE  !(revert)
[L3273]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3274]  COND FALSE  !(revert)
[L3277]  CALL        call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3238]              assume msgsender_MSG != null;
[L3239]              Balance[this] := 0;
[L3277]  RET         call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3278]  COND FALSE  !(revert)
[L1223]  RET         call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1224]              assume !revert && gas >= 0;
[L4929]  RET         call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L4930]              assume !revert && gas >= 0;
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND FALSE  !(choice == 17)
[L4811]  COND FALSE  !(choice == 16)
[L4817]  COND FALSE  !(choice == 15)
[L4824]  COND FALSE  !(choice == 14)
[L4831]  COND FALSE  !(choice == 13)
[L4837]  COND FALSE  !(choice == 12)
[L4843]  COND FALSE  !(choice == 11)
[L4849]  COND FALSE  !(choice == 10)
[L4856]  COND FALSE  !(choice == 9)
[L4863]  COND FALSE  !(choice == 8)
[L4869]  COND FALSE  !(choice == 7)
[L4875]  COND FALSE  !(choice == 6)
[L4881]  COND FALSE  !(choice == 5)
[L4888]  COND TRUE   choice == 4
[L4889]              gas := gas - 21000;
[L4890]  COND TRUE   gas >= 0
[L4891]              assume amount_s899 >= 0 && amount_s899 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4892]              assume msgvalue_MSG == 0;
[L4893]  CALL        call contractBurn~address~uint256_TulipToken(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L1315]              havoc __exception;
[L1316]              revert := false;
[L1317]  COND FALSE  !(__exception)
[L1341]  CALL        call contractBurn~address~uint256_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L3333]  CALL        call isAnOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4365]  CALL        call __var_19 := checkOwner_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]              i_s705 := 0;
[L3028]  COND TRUE   i_s705 < Length[_owner_MultOwnable[this]]
[L3030]  COND TRUE   M_int_Ref[_owner_MultOwnable[this]][i_s705] == msgsender_MSG
[L3031]              __ret_0_ := true;
[L4365]  RET         call __var_19 := checkOwner_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4366]  COND FALSE  !(revert)
[L4369]  COND FALSE  !(!__var_19)
[L3333]  RET         call isAnOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3334]  COND FALSE  !(revert)
[L3337]  COND TRUE   DType[this] == TulipToken
[L3338]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L2815]              __var_11 := null;
[L2816]  COND FALSE  !(!(account_s573 != null))
[L2820]  CALL        call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s573);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2820]  RET         call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s573);
[L2821]  COND FALSE  !(revert)
[L2824]              _totalSupply_ERC20[this] := __var_12;
[L2825]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s573], value_s573);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2825]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s573], value_s573);
[L2826]  COND FALSE  !(revert)
[L2829]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s573];
[L2830]              _balances_ERC20[this][account_s573] := __var_13;
[L2831]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s573];
[L2832]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3338]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L3339]  COND FALSE  !(revert)
[L1341]  RET         call contractBurn~address~uint256_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L1342]              assume !revert && gas >= 0;
[L4893]  RET         call contractBurn~address~uint256_TulipToken(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L4933]  RET         call CorralChoice_TulipToken(this);
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND TRUE   __exception
[L569]               __tmp__Balance := Balance;
[L570]               __tmp__DType := DType;
[L571]               __tmp__Alloc := Alloc;
[L572]               __tmp__balance_ADDR := balance_ADDR;
[L573]               __tmp__M_Ref_int := M_Ref_int;
[L574]               __tmp__sum__balances0 := sum__balances0;
[L575]               __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L576]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L577]               __tmp__sum__allowances1 := sum__allowances1;
[L578]               __tmp__M_int_Ref := M_int_Ref;
[L579]               __tmp__sum := sum;
[L580]               __tmp__Length := Length;
[L581]               __tmp__now := now;
[L582]               __tmp___balances_ERC20 := _balances_ERC20;
[L583]               __tmp___allowances_ERC20 := _allowances_ERC20;
[L584]               __tmp___totalSupply_ERC20 := _totalSupply_ERC20;
[L585]               __tmp___name_ERC20 := _name_ERC20;
[L586]               __tmp___symbol_ERC20 := _symbol_ERC20;
[L587]               __tmp___decimals_ERC20 := _decimals_ERC20;
[L588]               __tmp___owner_MultOwnable := _owner_MultOwnable;
[L589]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2416]  COND TRUE   __tmp__DType[this] == TulipToken
[L2417]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2678]              __var_4 := null;
[L2679]  COND FALSE  !(!(sender_s487 != null))
[L2683]              __var_5 := null;
[L2684]  COND FALSE  !(!(recipient_s487 != null))
[L2688]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s487], amount_s487);
[L2195]  COND FALSE  !(!(b_s119 <= a_s119))
[L2199]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2200]              __ret_0_ := c_s119;
[L2688]  RET         call __var_6 := sub~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][sender_s487], amount_s487);
[L2689]  COND FALSE  !(revert)
[L2692]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_ERC20[this][sender_s487];
[L2693]              __tmp___balances_ERC20[this][sender_s487] := __var_6;
[L2694]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_ERC20[this][sender_s487];
[L2695]  CALL        call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s487], amount_s487);
[L2171]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2172]  COND TRUE   !(c_s94 >= a_s94)
[L2173]              revert := true;
[L2695]  RET         call __var_7 := add~uint256~uint256_SafeMath__fail(this, this, 0, __tmp___balances_ERC20[this][recipient_s487], amount_s487);
[L2696]  COND TRUE   revert
[L2417]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2418]  COND TRUE   revert
[L589]   RET         call __ret_0_ := transfer~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L590]               assume revert || gas < 0;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

Loop:
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND TRUE   choice == 19
[L4793]              gas := gas - 21000;
[L4794]  COND FALSE  !(gas >= 0)
[L4933]  RET         call CorralChoice_TulipToken(this);

[2020-11-25 06:59:21,249 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:59:21,249 INFO  L82        PathProgramCache]: Analyzing trace with hash 305514892, now seen corresponding path program 1 times
[2020-11-25 06:59:21,249 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:59:21,261 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:59:21,352 INFO  L134       CoverageAnalysis]: Checked inductivity of 78 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 78 trivial. 0 not checked.
[2020-11-25 06:59:21,353 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:59:21,353 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [14] imperfect sequences [] total 14
[2020-11-25 06:59:21,353 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:59:21,353 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 06:59:21,353 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=29, Invalid=153, Unknown=0, NotChecked=0, Total=182
[2020-11-25 06:59:21,353 INFO  L87              Difference]: Start difference. First operand 2795 states and 3126 transitions. cyclomatic complexity: 347 Second operand 14 states.
[2020-11-25 06:59:22,780 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:59:22,781 INFO  L93              Difference]: Finished difference Result 2853 states and 3205 transitions.
[2020-11-25 06:59:22,781 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 14 states. 
[2020-11-25 06:59:22,781 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2853 states and 3205 transitions.
[2020-11-25 06:59:22,786 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 06:59:22,792 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2853 states to 2811 states and 3161 transitions.
[2020-11-25 06:59:22,792 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 628
[2020-11-25 06:59:22,793 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 628
[2020-11-25 06:59:22,793 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2811 states and 3161 transitions.
[2020-11-25 06:59:22,794 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:59:22,794 INFO  L728         BuchiCegarLoop]: Abstraction has 2811 states and 3161 transitions.
[2020-11-25 06:59:22,796 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2811 states and 3161 transitions.
[2020-11-25 06:59:22,806 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2811 to 2707.
[2020-11-25 06:59:22,806 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2707 states.
[2020-11-25 06:59:22,809 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2707 states to 2707 states and 3019 transitions.
[2020-11-25 06:59:22,809 INFO  L751         BuchiCegarLoop]: Abstraction has 2707 states and 3019 transitions.
[2020-11-25 06:59:22,809 INFO  L631         BuchiCegarLoop]: Abstraction has 2707 states and 3019 transitions.
[2020-11-25 06:59:22,809 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 06:59:22,809 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2707 states and 3019 transitions.
[2020-11-25 06:59:22,811 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:59:22,811 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:59:22,811 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:59:22,812 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:59:22,812 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4923]              assume null == 0;
[L4924]  CALL        call this := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L4924]  RET         call this := FreshRefGenerator__success();
[L4925]              assume now >= 0;
[L4926]              assume DType[this] == TulipToken;
[L4927]              assume msgvalue_MSG == 0;
[L4928]              gas := gas - 53000;
[L4929]  CALL        call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1197]              havoc __exception;
[L1198]              revert := false;
[L1199]  COND FALSE  !(__exception)
[L1223]  CALL        call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3265]  CALL        call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2999]  CALL        call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]              assume msgsender_MSG != null;
[L2970]              Balance[this] := 0;
[L2972]  CALL        call __var_18 := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L2972]  RET         call __var_18 := FreshRefGenerator__success();
[L2973]  COND FALSE  !(revert)
[L2976]              _owner_MultOwnable[this] := __var_18;
[L2977]              assume Length[_owner_MultOwnable[this]] == 0;
[L2979]              __var_17 := Length[_owner_MultOwnable[this]];
[L2980]              M_int_Ref[_owner_MultOwnable[this]][__var_17] := msgsender_MSG;
[L2981]              Length[_owner_MultOwnable[this]] := __var_17 + 1;
[L2982]              assert { :EventEmitted "OwnershipTransferred_MultOwnable" } true;
[L2999]  RET         call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3000]  COND FALSE  !(revert)
[L3265]  RET         call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3269]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L3269]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3270]  COND FALSE  !(revert)
[L3273]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L2344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L2344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND FALSE  !(revert)
[L2348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2314]              assume msgsender_MSG != null;
[L2315]              Balance[this] := 0;
[L2316]              _balances_ERC20[this] := zeroRefintArr();
[L2317]              sum__balances0[this] := 0;
[L2318]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2319]              sum__allowances1[this] := 0;
[L2320]              _totalSupply_ERC20[this] := 0;
[L2321]              _name_ERC20[this] := 214025342;
[L2322]              _symbol_ERC20[this] := 214025342;
[L2323]              _decimals_ERC20[this] := 0;
[L2325]              _name_ERC20[this] := name_s244;
[L2326]              _symbol_ERC20[this] := symbol_s244;
[L2327]              _decimals_ERC20[this] := 9;
[L2348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2349]  COND FALSE  !(revert)
[L3273]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3274]  COND FALSE  !(revert)
[L3277]  CALL        call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3238]              assume msgsender_MSG != null;
[L3239]              Balance[this] := 0;
[L3277]  RET         call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3278]  COND FALSE  !(revert)
[L1223]  RET         call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1224]              assume !revert && gas >= 0;
[L4929]  RET         call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L4930]              assume !revert && gas >= 0;
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND FALSE  !(choice == 17)
[L4811]  COND FALSE  !(choice == 16)
[L4817]  COND FALSE  !(choice == 15)
[L4824]  COND TRUE   choice == 14
[L4825]              gas := gas - 21000;
[L4826]  COND TRUE   gas >= 0
[L4827]              assume amount_s377 >= 0 && amount_s377 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4828]              assume msgvalue_MSG == 0;
[L4829]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s377, recipient_s377, amount_s377);
[L740]               havoc __exception;
[L741]               revert := false;
[L742]   COND FALSE  !(__exception)
[L766]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s377, recipient_s377, amount_s377);
[L2542]  COND FALSE  !(DType[this] == TulipToken)
[L2547]  COND TRUE   DType[this] == ERC20
[L2548]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s377, recipient_s377, amount_s377);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2548]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s377, recipient_s377, amount_s377);
[L2549]  COND FALSE  !(revert)
[L2555]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s377][msgsender_MSG], amount_s377);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2555]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s377][msgsender_MSG], amount_s377);
[L2556]  COND FALSE  !(revert)
[L2559]  COND TRUE   DType[this] == TulipToken
[L2560]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s377, msgsender_MSG, __var_1);
[L2858]              __var_14 := null;
[L2859]  COND FALSE  !(!(owner_s615 != null))
[L2863]              __var_15 := null;
[L2864]  COND FALSE  !(!(spender_s615 != null))
[L2868]              sum__allowances1[owner_s615] := sum__allowances1[owner_s615] - _allowances_ERC20[this][owner_s615][spender_s615];
[L2869]              _allowances_ERC20[this][owner_s615][spender_s615] := value_s615;
[L2870]              sum__allowances1[owner_s615] := sum__allowances1[owner_s615] + _allowances_ERC20[this][owner_s615][spender_s615];
[L2871]              assert { :EventEmitted "Approval_ERC20" } true;
[L2560]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s377, msgsender_MSG, __var_1);
[L2561]  COND FALSE  !(revert)
[L2572]              __ret_0_ := true;
[L766]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s377, recipient_s377, amount_s377);
[L767]               assume !revert && gas >= 0;
[L4829]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s377, recipient_s377, amount_s377);
[L4933]  RET         call CorralChoice_TulipToken(this);
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2435]  COND TRUE   DType[this] == TulipToken
[L2436]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2436]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2437]  COND FALSE  !(revert)
[L2448]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L593]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20[this] == old(_name_ERC20[this])) && _symbol_ERC20[this] == old(_symbol_ERC20[this])) && _decimals_ERC20[this] == old(_decimals_ERC20[this])) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]));
[L2]                 revert := revert_hold;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

Loop:
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2435]  COND TRUE   DType[this] == TulipToken
[L2436]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2436]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2437]  COND FALSE  !(revert)
[L2448]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L593]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20[this] == old(_name_ERC20[this])) && _symbol_ERC20[this] == old(_symbol_ERC20[this])) && _decimals_ERC20[this] == old(_decimals_ERC20[this])) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]));
[L2]                 revert := revert_hold;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

[2020-11-25 06:59:22,816 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:59:22,816 INFO  L82        PathProgramCache]: Analyzing trace with hash 1852926127, now seen corresponding path program 1 times
[2020-11-25 06:59:22,816 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:59:22,825 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:59:22,870 INFO  L134       CoverageAnalysis]: Checked inductivity of 78 backedges. 1 proven. 0 refuted. 0 times theorem prover too weak. 77 trivial. 0 not checked.
[2020-11-25 06:59:22,870 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 06:59:22,870 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 06:59:22,871 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:59:22,871 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 6 interpolants.
[2020-11-25 06:59:22,871 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=9, Invalid=21, Unknown=0, NotChecked=0, Total=30
[2020-11-25 06:59:22,871 INFO  L87              Difference]: Start difference. First operand 2707 states and 3019 transitions. cyclomatic complexity: 327 Second operand 6 states.
[2020-11-25 06:59:22,916 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:59:22,916 INFO  L93              Difference]: Finished difference Result 2737 states and 3049 transitions.
[2020-11-25 06:59:22,916 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 6 states. 
[2020-11-25 06:59:22,916 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2737 states and 3049 transitions.
[2020-11-25 06:59:22,920 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:59:22,925 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2737 states to 2687 states and 2991 transitions.
[2020-11-25 06:59:22,925 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 567
[2020-11-25 06:59:22,925 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 567
[2020-11-25 06:59:22,925 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2687 states and 2991 transitions.
[2020-11-25 06:59:22,926 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:59:22,926 INFO  L728         BuchiCegarLoop]: Abstraction has 2687 states and 2991 transitions.
[2020-11-25 06:59:22,928 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2687 states and 2991 transitions.
[2020-11-25 06:59:22,938 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2687 to 2687.
[2020-11-25 06:59:22,938 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2687 states.
[2020-11-25 06:59:22,940 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2687 states to 2687 states and 2991 transitions.
[2020-11-25 06:59:22,940 INFO  L751         BuchiCegarLoop]: Abstraction has 2687 states and 2991 transitions.
[2020-11-25 06:59:22,940 INFO  L631         BuchiCegarLoop]: Abstraction has 2687 states and 2991 transitions.
[2020-11-25 06:59:22,940 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 06:59:22,940 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2687 states and 2991 transitions.
[2020-11-25 06:59:22,943 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 06:59:22,943 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:59:22,943 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:59:22,944 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:59:22,944 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4923]              assume null == 0;
[L4924]  CALL        call this := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L4924]  RET         call this := FreshRefGenerator__success();
[L4925]              assume now >= 0;
[L4926]              assume DType[this] == TulipToken;
[L4927]              assume msgvalue_MSG == 0;
[L4928]              gas := gas - 53000;
[L4929]  CALL        call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1197]              havoc __exception;
[L1198]              revert := false;
[L1199]  COND FALSE  !(__exception)
[L1223]  CALL        call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3265]  CALL        call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2999]  CALL        call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]              assume msgsender_MSG != null;
[L2970]              Balance[this] := 0;
[L2972]  CALL        call __var_18 := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L2972]  RET         call __var_18 := FreshRefGenerator__success();
[L2973]  COND FALSE  !(revert)
[L2976]              _owner_MultOwnable[this] := __var_18;
[L2977]              assume Length[_owner_MultOwnable[this]] == 0;
[L2979]              __var_17 := Length[_owner_MultOwnable[this]];
[L2980]              M_int_Ref[_owner_MultOwnable[this]][__var_17] := msgsender_MSG;
[L2981]              Length[_owner_MultOwnable[this]] := __var_17 + 1;
[L2982]              assert { :EventEmitted "OwnershipTransferred_MultOwnable" } true;
[L2999]  RET         call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3000]  COND FALSE  !(revert)
[L3265]  RET         call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3269]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L3269]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3270]  COND FALSE  !(revert)
[L3273]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L2344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L2344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND FALSE  !(revert)
[L2348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2314]              assume msgsender_MSG != null;
[L2315]              Balance[this] := 0;
[L2316]              _balances_ERC20[this] := zeroRefintArr();
[L2317]              sum__balances0[this] := 0;
[L2318]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2319]              sum__allowances1[this] := 0;
[L2320]              _totalSupply_ERC20[this] := 0;
[L2321]              _name_ERC20[this] := 214025342;
[L2322]              _symbol_ERC20[this] := 214025342;
[L2323]              _decimals_ERC20[this] := 0;
[L2325]              _name_ERC20[this] := name_s244;
[L2326]              _symbol_ERC20[this] := symbol_s244;
[L2327]              _decimals_ERC20[this] := 9;
[L2348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2349]  COND FALSE  !(revert)
[L3273]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3274]  COND FALSE  !(revert)
[L3277]  CALL        call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3238]              assume msgsender_MSG != null;
[L3239]              Balance[this] := 0;
[L3277]  RET         call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3278]  COND FALSE  !(revert)
[L1223]  RET         call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1224]              assume !revert && gas >= 0;
[L4929]  RET         call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L4930]              assume !revert && gas >= 0;
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND FALSE  !(choice == 17)
[L4811]  COND FALSE  !(choice == 16)
[L4817]  COND FALSE  !(choice == 15)
[L4824]  COND TRUE   choice == 14
[L4825]              gas := gas - 21000;
[L4826]  COND TRUE   gas >= 0
[L4827]              assume amount_s377 >= 0 && amount_s377 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4828]              assume msgvalue_MSG == 0;
[L4829]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s377, recipient_s377, amount_s377);
[L740]               havoc __exception;
[L741]               revert := false;
[L742]   COND FALSE  !(__exception)
[L766]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s377, recipient_s377, amount_s377);
[L2542]  COND TRUE   DType[this] == TulipToken
[L2543]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s377, recipient_s377, amount_s377);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2543]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s377, recipient_s377, amount_s377);
[L2544]  COND FALSE  !(revert)
[L2555]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s377][msgsender_MSG], amount_s377);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2555]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s377][msgsender_MSG], amount_s377);
[L2556]  COND FALSE  !(revert)
[L2559]  COND TRUE   DType[this] == TulipToken
[L2560]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s377, msgsender_MSG, __var_1);
[L2858]              __var_14 := null;
[L2859]  COND FALSE  !(!(owner_s615 != null))
[L2863]              __var_15 := null;
[L2864]  COND FALSE  !(!(spender_s615 != null))
[L2868]              sum__allowances1[owner_s615] := sum__allowances1[owner_s615] - _allowances_ERC20[this][owner_s615][spender_s615];
[L2869]              _allowances_ERC20[this][owner_s615][spender_s615] := value_s615;
[L2870]              sum__allowances1[owner_s615] := sum__allowances1[owner_s615] + _allowances_ERC20[this][owner_s615][spender_s615];
[L2871]              assert { :EventEmitted "Approval_ERC20" } true;
[L2560]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s377, msgsender_MSG, __var_1);
[L2561]  COND FALSE  !(revert)
[L2572]              __ret_0_ := true;
[L766]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s377, recipient_s377, amount_s377);
[L767]               assume !revert && gas >= 0;
[L4829]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s377, recipient_s377, amount_s377);
[L4933]  RET         call CorralChoice_TulipToken(this);
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2435]  COND TRUE   DType[this] == TulipToken
[L2436]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2436]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2437]  COND FALSE  !(revert)
[L2448]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L593]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20[this] == old(_name_ERC20[this])) && _symbol_ERC20[this] == old(_symbol_ERC20[this])) && _decimals_ERC20[this] == old(_decimals_ERC20[this])) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]));
[L2]                 revert := revert_hold;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

Loop:
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2435]  COND TRUE   DType[this] == TulipToken
[L2436]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2436]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2437]  COND FALSE  !(revert)
[L2448]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L593]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20[this] == old(_name_ERC20[this])) && _symbol_ERC20[this] == old(_symbol_ERC20[this])) && _decimals_ERC20[this] == old(_decimals_ERC20[this])) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]));
[L2]                 revert := revert_hold;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

[2020-11-25 06:59:22,947 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:59:22,947 INFO  L82        PathProgramCache]: Analyzing trace with hash 1510542921, now seen corresponding path program 1 times
[2020-11-25 06:59:22,948 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:59:22,969 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:59:24,190 INFO  L134       CoverageAnalysis]: Checked inductivity of 78 backedges. 0 proven. 61 refuted. 0 times theorem prover too weak. 17 trivial. 0 not checked.
[2020-11-25 06:59:24,190 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 06:59:24,190 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [43] total 43
[2020-11-25 06:59:24,190 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:59:24,190 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 44 interpolants.
[2020-11-25 06:59:24,191 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=158, Invalid=1734, Unknown=0, NotChecked=0, Total=1892
[2020-11-25 06:59:24,191 INFO  L87              Difference]: Start difference. First operand 2687 states and 2991 transitions. cyclomatic complexity: 319 Second operand 44 states.
[2020-11-25 06:59:33,644 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:59:33,644 INFO  L93              Difference]: Finished difference Result 2899 states and 3289 transitions.
[2020-11-25 06:59:33,644 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 38 states. 
[2020-11-25 06:59:33,644 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2899 states and 3289 transitions.
[2020-11-25 06:59:33,650 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 06:59:33,655 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2899 states to 2899 states and 3289 transitions.
[2020-11-25 06:59:33,655 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 654
[2020-11-25 06:59:33,655 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 654
[2020-11-25 06:59:33,655 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2899 states and 3289 transitions.
[2020-11-25 06:59:33,657 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:59:33,657 INFO  L728         BuchiCegarLoop]: Abstraction has 2899 states and 3289 transitions.
[2020-11-25 06:59:33,659 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2899 states and 3289 transitions.
[2020-11-25 06:59:33,669 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2899 to 2882.
[2020-11-25 06:59:33,669 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2882 states.
[2020-11-25 06:59:33,672 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2882 states to 2882 states and 3265 transitions.
[2020-11-25 06:59:33,672 INFO  L751         BuchiCegarLoop]: Abstraction has 2882 states and 3265 transitions.
[2020-11-25 06:59:33,672 INFO  L631         BuchiCegarLoop]: Abstraction has 2882 states and 3265 transitions.
[2020-11-25 06:59:33,672 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 06:59:33,672 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2882 states and 3265 transitions.
[2020-11-25 06:59:33,675 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 06:59:33,675 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:59:33,675 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:59:33,676 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:59:33,676 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4923]              assume null == 0;
[L4924]  CALL        call this := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L4924]  RET         call this := FreshRefGenerator__success();
[L4925]              assume now >= 0;
[L4926]              assume DType[this] == TulipToken;
[L4927]              assume msgvalue_MSG == 0;
[L4928]              gas := gas - 53000;
[L4929]  CALL        call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1197]              havoc __exception;
[L1198]              revert := false;
[L1199]  COND FALSE  !(__exception)
[L1223]  CALL        call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3265]  CALL        call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2999]  CALL        call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]              assume msgsender_MSG != null;
[L2970]              Balance[this] := 0;
[L2972]  CALL        call __var_18 := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L2972]  RET         call __var_18 := FreshRefGenerator__success();
[L2973]  COND FALSE  !(revert)
[L2976]              _owner_MultOwnable[this] := __var_18;
[L2977]              assume Length[_owner_MultOwnable[this]] == 0;
[L2979]              __var_17 := Length[_owner_MultOwnable[this]];
[L2980]              M_int_Ref[_owner_MultOwnable[this]][__var_17] := msgsender_MSG;
[L2981]              Length[_owner_MultOwnable[this]] := __var_17 + 1;
[L2982]              assert { :EventEmitted "OwnershipTransferred_MultOwnable" } true;
[L2999]  RET         call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3000]  COND FALSE  !(revert)
[L3265]  RET         call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3269]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L3269]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3270]  COND FALSE  !(revert)
[L3273]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L2344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L2344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND FALSE  !(revert)
[L2348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2314]              assume msgsender_MSG != null;
[L2315]              Balance[this] := 0;
[L2316]              _balances_ERC20[this] := zeroRefintArr();
[L2317]              sum__balances0[this] := 0;
[L2318]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2319]              sum__allowances1[this] := 0;
[L2320]              _totalSupply_ERC20[this] := 0;
[L2321]              _name_ERC20[this] := 214025342;
[L2322]              _symbol_ERC20[this] := 214025342;
[L2323]              _decimals_ERC20[this] := 0;
[L2325]              _name_ERC20[this] := name_s244;
[L2326]              _symbol_ERC20[this] := symbol_s244;
[L2327]              _decimals_ERC20[this] := 9;
[L2348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2349]  COND FALSE  !(revert)
[L3273]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3274]  COND FALSE  !(revert)
[L3277]  CALL        call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3238]              assume msgsender_MSG != null;
[L3239]              Balance[this] := 0;
[L3277]  RET         call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3278]  COND FALSE  !(revert)
[L1223]  RET         call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1224]              assume !revert && gas >= 0;
[L4929]  RET         call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L4930]              assume !revert && gas >= 0;
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND FALSE  !(choice == 17)
[L4811]  COND FALSE  !(choice == 16)
[L4817]  COND FALSE  !(choice == 15)
[L4824]  COND FALSE  !(choice == 14)
[L4831]  COND FALSE  !(choice == 13)
[L4837]  COND FALSE  !(choice == 12)
[L4843]  COND FALSE  !(choice == 11)
[L4849]  COND FALSE  !(choice == 10)
[L4856]  COND FALSE  !(choice == 9)
[L4863]  COND FALSE  !(choice == 8)
[L4869]  COND FALSE  !(choice == 7)
[L4875]  COND FALSE  !(choice == 6)
[L4881]  COND FALSE  !(choice == 5)
[L4888]  COND TRUE   choice == 4
[L4889]              gas := gas - 21000;
[L4890]  COND TRUE   gas >= 0
[L4891]              assume amount_s899 >= 0 && amount_s899 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4892]              assume msgvalue_MSG == 0;
[L4893]  CALL        call contractBurn~address~uint256_TulipToken(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L1315]              havoc __exception;
[L1316]              revert := false;
[L1317]  COND FALSE  !(__exception)
[L1341]  CALL        call contractBurn~address~uint256_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L3333]  CALL        call isAnOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4365]  CALL        call __var_19 := checkOwner_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]              i_s705 := 0;
[L3028]  COND TRUE   i_s705 < Length[_owner_MultOwnable[this]]
[L3030]  COND TRUE   M_int_Ref[_owner_MultOwnable[this]][i_s705] == msgsender_MSG
[L3031]              __ret_0_ := true;
[L4365]  RET         call __var_19 := checkOwner_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4366]  COND FALSE  !(revert)
[L4369]  COND FALSE  !(!__var_19)
[L3333]  RET         call isAnOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3334]  COND FALSE  !(revert)
[L3337]  COND TRUE   DType[this] == TulipToken
[L3338]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L2815]              __var_11 := null;
[L2816]  COND FALSE  !(!(account_s573 != null))
[L2820]  CALL        call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s573);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2820]  RET         call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s573);
[L2821]  COND FALSE  !(revert)
[L2824]              _totalSupply_ERC20[this] := __var_12;
[L2825]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s573], value_s573);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2825]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s573], value_s573);
[L2826]  COND FALSE  !(revert)
[L2829]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s573];
[L2830]              _balances_ERC20[this][account_s573] := __var_13;
[L2831]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s573];
[L2832]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3338]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L3339]  COND FALSE  !(revert)
[L1341]  RET         call contractBurn~address~uint256_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L1342]              assume !revert && gas >= 0;
[L4893]  RET         call contractBurn~address~uint256_TulipToken(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L4933]  RET         call CorralChoice_TulipToken(this);
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND FALSE  !(choice == 17)
[L4811]  COND FALSE  !(choice == 16)
[L4817]  COND FALSE  !(choice == 15)
[L4824]  COND FALSE  !(choice == 14)
[L4831]  COND FALSE  !(choice == 13)
[L4837]  COND FALSE  !(choice == 12)
[L4843]  COND FALSE  !(choice == 11)
[L4849]  COND FALSE  !(choice == 10)
[L4856]  COND FALSE  !(choice == 9)
[L4863]  COND FALSE  !(choice == 8)
[L4869]  COND FALSE  !(choice == 7)
[L4875]  COND FALSE  !(choice == 6)
[L4881]  COND FALSE  !(choice == 5)
[L4888]  COND TRUE   choice == 4
[L4889]              gas := gas - 21000;
[L4890]  COND TRUE   gas >= 0
[L4891]              assume amount_s899 >= 0 && amount_s899 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4892]              assume msgvalue_MSG == 0;
[L4893]  CALL        call contractBurn~address~uint256_TulipToken(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L1315]              havoc __exception;
[L1316]              revert := false;
[L1317]  COND FALSE  !(__exception)
[L1341]  CALL        call contractBurn~address~uint256_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L3333]  CALL        call isAnOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4365]  CALL        call __var_19 := checkOwner_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]              i_s705 := 0;
[L3028]  COND TRUE   i_s705 < Length[_owner_MultOwnable[this]]
[L3030]  COND TRUE   M_int_Ref[_owner_MultOwnable[this]][i_s705] == msgsender_MSG
[L3031]              __ret_0_ := true;
[L4365]  RET         call __var_19 := checkOwner_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4366]  COND FALSE  !(revert)
[L4369]  COND FALSE  !(!__var_19)
[L3333]  RET         call isAnOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3334]  COND FALSE  !(revert)
[L3337]  COND TRUE   DType[this] == TulipToken
[L3338]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L2815]              __var_11 := null;
[L2816]  COND FALSE  !(!(account_s573 != null))
[L2820]  CALL        call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s573);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2820]  RET         call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s573);
[L2821]  COND FALSE  !(revert)
[L2824]              _totalSupply_ERC20[this] := __var_12;
[L2825]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s573], value_s573);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2825]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s573], value_s573);
[L2826]  COND FALSE  !(revert)
[L2829]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s573];
[L2830]              _balances_ERC20[this][account_s573] := __var_13;
[L2831]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s573];
[L2832]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3338]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L3339]  COND FALSE  !(revert)
[L1341]  RET         call contractBurn~address~uint256_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L1342]              assume !revert && gas >= 0;
[L4893]  RET         call contractBurn~address~uint256_TulipToken(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L4933]  RET         call CorralChoice_TulipToken(this);
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2435]  COND TRUE   DType[this] == TulipToken
[L2436]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2436]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2437]  COND FALSE  !(revert)
[L2448]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L593]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20[this] == old(_name_ERC20[this])) && _symbol_ERC20[this] == old(_symbol_ERC20[this])) && _decimals_ERC20[this] == old(_decimals_ERC20[this])) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]));
[L2]                 revert := revert_hold;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

Loop:
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2435]  COND TRUE   DType[this] == TulipToken
[L2436]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2436]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2437]  COND FALSE  !(revert)
[L2448]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L593]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20[this] == old(_name_ERC20[this])) && _symbol_ERC20[this] == old(_symbol_ERC20[this])) && _decimals_ERC20[this] == old(_decimals_ERC20[this])) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]));
[L2]                 revert := revert_hold;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

[2020-11-25 06:59:33,680 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:59:33,680 INFO  L82        PathProgramCache]: Analyzing trace with hash -1600354694, now seen corresponding path program 2 times
[2020-11-25 06:59:33,680 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:59:33,705 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:59:34,312 WARN  L188               SmtUtils]: Spent 148.00 ms on a formula simplification. DAG size of input: 74 DAG size of output: 32
[2020-11-25 06:59:35,275 INFO  L134       CoverageAnalysis]: Checked inductivity of 290 backedges. 16 proven. 29 refuted. 0 times theorem prover too weak. 245 trivial. 0 not checked.
[2020-11-25 06:59:35,275 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 06:59:35,275 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [49] total 49
[2020-11-25 06:59:35,276 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:59:35,276 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 50 interpolants.
[2020-11-25 06:59:35,276 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=190, Invalid=2260, Unknown=0, NotChecked=0, Total=2450
[2020-11-25 06:59:35,277 INFO  L87              Difference]: Start difference. First operand 2882 states and 3265 transitions. cyclomatic complexity: 402 Second operand 50 states.
[2020-11-25 06:59:40,697 WARN  L188               SmtUtils]: Spent 120.00 ms on a formula simplification. DAG size of input: 177 DAG size of output: 169
[2020-11-25 06:59:45,798 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 06:59:45,798 INFO  L93              Difference]: Finished difference Result 2907 states and 3318 transitions.
[2020-11-25 06:59:45,799 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 37 states. 
[2020-11-25 06:59:45,799 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2907 states and 3318 transitions.
[2020-11-25 06:59:45,807 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 06:59:45,814 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2907 states to 2907 states and 3318 transitions.
[2020-11-25 06:59:45,814 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 656
[2020-11-25 06:59:45,815 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 656
[2020-11-25 06:59:45,815 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2907 states and 3318 transitions.
[2020-11-25 06:59:45,817 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 06:59:45,817 INFO  L728         BuchiCegarLoop]: Abstraction has 2907 states and 3318 transitions.
[2020-11-25 06:59:45,820 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2907 states and 3318 transitions.
[2020-11-25 06:59:45,831 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2907 to 2886.
[2020-11-25 06:59:45,831 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2886 states.
[2020-11-25 06:59:45,834 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2886 states to 2886 states and 3281 transitions.
[2020-11-25 06:59:45,834 INFO  L751         BuchiCegarLoop]: Abstraction has 2886 states and 3281 transitions.
[2020-11-25 06:59:45,834 INFO  L631         BuchiCegarLoop]: Abstraction has 2886 states and 3281 transitions.
[2020-11-25 06:59:45,834 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 06:59:45,834 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2886 states and 3281 transitions.
[2020-11-25 06:59:45,837 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 06:59:45,837 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 06:59:45,837 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 06:59:45,838 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 06:59:45,838 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4923]              assume null == 0;
[L4924]  CALL        call this := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L4924]  RET         call this := FreshRefGenerator__success();
[L4925]              assume now >= 0;
[L4926]              assume DType[this] == TulipToken;
[L4927]              assume msgvalue_MSG == 0;
[L4928]              gas := gas - 53000;
[L4929]  CALL        call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1197]              havoc __exception;
[L1198]              revert := false;
[L1199]  COND FALSE  !(__exception)
[L1223]  CALL        call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3265]  CALL        call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2999]  CALL        call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]              assume msgsender_MSG != null;
[L2970]              Balance[this] := 0;
[L2972]  CALL        call __var_18 := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L2972]  RET         call __var_18 := FreshRefGenerator__success();
[L2973]  COND FALSE  !(revert)
[L2976]              _owner_MultOwnable[this] := __var_18;
[L2977]              assume Length[_owner_MultOwnable[this]] == 0;
[L2979]              __var_17 := Length[_owner_MultOwnable[this]];
[L2980]              M_int_Ref[_owner_MultOwnable[this]][__var_17] := msgsender_MSG;
[L2981]              Length[_owner_MultOwnable[this]] := __var_17 + 1;
[L2982]              assert { :EventEmitted "OwnershipTransferred_MultOwnable" } true;
[L2999]  RET         call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3000]  COND FALSE  !(revert)
[L3265]  RET         call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3269]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L3269]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3270]  COND FALSE  !(revert)
[L3273]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L2344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L2344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND FALSE  !(revert)
[L2348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2314]              assume msgsender_MSG != null;
[L2315]              Balance[this] := 0;
[L2316]              _balances_ERC20[this] := zeroRefintArr();
[L2317]              sum__balances0[this] := 0;
[L2318]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2319]              sum__allowances1[this] := 0;
[L2320]              _totalSupply_ERC20[this] := 0;
[L2321]              _name_ERC20[this] := 214025342;
[L2322]              _symbol_ERC20[this] := 214025342;
[L2323]              _decimals_ERC20[this] := 0;
[L2325]              _name_ERC20[this] := name_s244;
[L2326]              _symbol_ERC20[this] := symbol_s244;
[L2327]              _decimals_ERC20[this] := 9;
[L2348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2349]  COND FALSE  !(revert)
[L3273]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3274]  COND FALSE  !(revert)
[L3277]  CALL        call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3238]              assume msgsender_MSG != null;
[L3239]              Balance[this] := 0;
[L3277]  RET         call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3278]  COND FALSE  !(revert)
[L1223]  RET         call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1224]              assume !revert && gas >= 0;
[L4929]  RET         call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L4930]              assume !revert && gas >= 0;
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND FALSE  !(choice == 17)
[L4811]  COND FALSE  !(choice == 16)
[L4817]  COND FALSE  !(choice == 15)
[L4824]  COND FALSE  !(choice == 14)
[L4831]  COND FALSE  !(choice == 13)
[L4837]  COND FALSE  !(choice == 12)
[L4843]  COND FALSE  !(choice == 11)
[L4849]  COND FALSE  !(choice == 10)
[L4856]  COND FALSE  !(choice == 9)
[L4863]  COND FALSE  !(choice == 8)
[L4869]  COND FALSE  !(choice == 7)
[L4875]  COND FALSE  !(choice == 6)
[L4881]  COND FALSE  !(choice == 5)
[L4888]  COND TRUE   choice == 4
[L4889]              gas := gas - 21000;
[L4890]  COND TRUE   gas >= 0
[L4891]              assume amount_s899 >= 0 && amount_s899 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4892]              assume msgvalue_MSG == 0;
[L4893]  CALL        call contractBurn~address~uint256_TulipToken(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L1315]              havoc __exception;
[L1316]              revert := false;
[L1317]  COND FALSE  !(__exception)
[L1341]  CALL        call contractBurn~address~uint256_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L3333]  CALL        call isAnOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4365]  CALL        call __var_19 := checkOwner_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]              i_s705 := 0;
[L3028]  COND TRUE   i_s705 < Length[_owner_MultOwnable[this]]
[L3030]  COND TRUE   M_int_Ref[_owner_MultOwnable[this]][i_s705] == msgsender_MSG
[L3031]              __ret_0_ := true;
[L4365]  RET         call __var_19 := checkOwner_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4366]  COND FALSE  !(revert)
[L4369]  COND FALSE  !(!__var_19)
[L3333]  RET         call isAnOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3334]  COND FALSE  !(revert)
[L3337]  COND TRUE   DType[this] == TulipToken
[L3338]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L2815]              __var_11 := null;
[L2816]  COND FALSE  !(!(account_s573 != null))
[L2820]  CALL        call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s573);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2820]  RET         call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s573);
[L2821]  COND FALSE  !(revert)
[L2824]              _totalSupply_ERC20[this] := __var_12;
[L2825]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s573], value_s573);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2825]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s573], value_s573);
[L2826]  COND FALSE  !(revert)
[L2829]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s573];
[L2830]              _balances_ERC20[this][account_s573] := __var_13;
[L2831]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s573];
[L2832]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3338]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L3339]  COND FALSE  !(revert)
[L1341]  RET         call contractBurn~address~uint256_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L1342]              assume !revert && gas >= 0;
[L4893]  RET         call contractBurn~address~uint256_TulipToken(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L4933]  RET         call CorralChoice_TulipToken(this);
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND FALSE  !(choice == 17)
[L4811]  COND FALSE  !(choice == 16)
[L4817]  COND FALSE  !(choice == 15)
[L4824]  COND FALSE  !(choice == 14)
[L4831]  COND FALSE  !(choice == 13)
[L4837]  COND FALSE  !(choice == 12)
[L4843]  COND FALSE  !(choice == 11)
[L4849]  COND FALSE  !(choice == 10)
[L4856]  COND FALSE  !(choice == 9)
[L4863]  COND FALSE  !(choice == 8)
[L4869]  COND FALSE  !(choice == 7)
[L4875]  COND FALSE  !(choice == 6)
[L4881]  COND TRUE   choice == 5
[L4882]              gas := gas - 21000;
[L4883]  COND TRUE   gas >= 0
[L4884]              assume amount_s884 >= 0 && amount_s884 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4885]              assume msgvalue_MSG == 0;
[L4886]  CALL        call contractMint~address~uint256_TulipToken(this, msgsender_MSG, msgvalue_MSG, account_s884, amount_s884);
[L1256]              havoc __exception;
[L1257]              revert := false;
[L1258]  COND FALSE  !(__exception)
[L1282]  CALL        call contractMint~address~uint256_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, account_s884, amount_s884);
[L3301]  CALL        call isAnOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4365]  CALL        call __var_19 := checkOwner_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]              i_s705 := 0;
[L3028]  COND TRUE   i_s705 < Length[_owner_MultOwnable[this]]
[L3030]  COND TRUE   M_int_Ref[_owner_MultOwnable[this]][i_s705] == msgsender_MSG
[L3031]              __ret_0_ := true;
[L4365]  RET         call __var_19 := checkOwner_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4366]  COND FALSE  !(revert)
[L4369]  COND FALSE  !(!__var_19)
[L3301]  RET         call isAnOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3302]  COND FALSE  !(revert)
[L3305]  COND TRUE   DType[this] == TulipToken
[L3306]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s884, amount_s884);
[L2766]              __var_8 := null;
[L2767]  COND FALSE  !(!(account_s530 != null))
[L2771]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s530);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2771]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s530);
[L2772]  COND FALSE  !(revert)
[L2775]              _totalSupply_ERC20[this] := __var_9;
[L2776]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s530], amount_s530);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2776]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s530], amount_s530);
[L2777]  COND FALSE  !(revert)
[L2780]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s530];
[L2781]              _balances_ERC20[this][account_s530] := __var_10;
[L2782]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s530];
[L2783]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3306]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s884, amount_s884);
[L3307]  COND FALSE  !(revert)
[L1282]  RET         call contractMint~address~uint256_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, account_s884, amount_s884);
[L1283]              assume !revert && gas >= 0;
[L4886]  RET         call contractMint~address~uint256_TulipToken(this, msgsender_MSG, msgvalue_MSG, account_s884, amount_s884);
[L4933]  RET         call CorralChoice_TulipToken(this);
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2435]  COND TRUE   DType[this] == TulipToken
[L2436]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2436]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2437]  COND FALSE  !(revert)
[L2448]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L593]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20[this] == old(_name_ERC20[this])) && _symbol_ERC20[this] == old(_symbol_ERC20[this])) && _decimals_ERC20[this] == old(_decimals_ERC20[this])) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]));
[L2]                 revert := revert_hold;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

Loop:
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2435]  COND TRUE   DType[this] == TulipToken
[L2436]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2436]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2437]  COND FALSE  !(revert)
[L2448]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L593]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20[this] == old(_name_ERC20[this])) && _symbol_ERC20[this] == old(_symbol_ERC20[this])) && _decimals_ERC20[this] == old(_decimals_ERC20[this])) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]));
[L2]                 revert := revert_hold;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

[2020-11-25 06:59:45,841 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 06:59:45,842 INFO  L82        PathProgramCache]: Analyzing trace with hash -946463385, now seen corresponding path program 1 times
[2020-11-25 06:59:45,842 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 06:59:45,875 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 06:59:47,378 WARN  L188               SmtUtils]: Spent 159.00 ms on a formula simplification. DAG size of input: 107 DAG size of output: 67
[2020-11-25 06:59:47,728 WARN  L188               SmtUtils]: Spent 119.00 ms on a formula simplification. DAG size of input: 102 DAG size of output: 64
[2020-11-25 06:59:49,018 WARN  L188               SmtUtils]: Spent 153.00 ms on a formula simplification. DAG size of input: 112 DAG size of output: 50
[2020-11-25 06:59:50,417 INFO  L134       CoverageAnalysis]: Checked inductivity of 225 backedges. 4 proven. 138 refuted. 0 times theorem prover too weak. 83 trivial. 0 not checked.
[2020-11-25 06:59:50,417 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 06:59:50,417 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [55] total 55
[2020-11-25 06:59:50,417 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 06:59:50,418 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 56 interpolants.
[2020-11-25 06:59:50,418 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=233, Invalid=2847, Unknown=0, NotChecked=0, Total=3080
[2020-11-25 06:59:50,418 INFO  L87              Difference]: Start difference. First operand 2886 states and 3281 transitions. cyclomatic complexity: 415 Second operand 56 states.
[2020-11-25 06:59:56,123 WARN  L188               SmtUtils]: Spent 107.00 ms on a formula simplification. DAG size of input: 94 DAG size of output: 91
[2020-11-25 07:00:00,994 WARN  L188               SmtUtils]: Spent 997.00 ms on a formula simplification. DAG size of input: 281 DAG size of output: 279
[2020-11-25 07:00:11,956 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:00:11,956 INFO  L93              Difference]: Finished difference Result 3108 states and 3602 transitions.
[2020-11-25 07:00:11,956 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 54 states. 
[2020-11-25 07:00:11,957 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3108 states and 3602 transitions.
[2020-11-25 07:00:11,962 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 07:00:11,968 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3108 states to 3108 states and 3602 transitions.
[2020-11-25 07:00:11,968 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 736
[2020-11-25 07:00:11,969 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 736
[2020-11-25 07:00:11,969 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3108 states and 3602 transitions.
[2020-11-25 07:00:11,970 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:00:11,971 INFO  L728         BuchiCegarLoop]: Abstraction has 3108 states and 3602 transitions.
[2020-11-25 07:00:11,972 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3108 states and 3602 transitions.
[2020-11-25 07:00:11,984 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3108 to 3073.
[2020-11-25 07:00:11,984 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3073 states.
[2020-11-25 07:00:11,987 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3073 states to 3073 states and 3542 transitions.
[2020-11-25 07:00:11,987 INFO  L751         BuchiCegarLoop]: Abstraction has 3073 states and 3542 transitions.
[2020-11-25 07:00:11,987 INFO  L631         BuchiCegarLoop]: Abstraction has 3073 states and 3542 transitions.
[2020-11-25 07:00:11,987 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-11-25 07:00:11,987 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3073 states and 3542 transitions.
[2020-11-25 07:00:11,990 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 07:00:11,990 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:00:11,990 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:00:11,991 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:00:11,991 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4923]              assume null == 0;
[L4924]  CALL        call this := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L4924]  RET         call this := FreshRefGenerator__success();
[L4925]              assume now >= 0;
[L4926]              assume DType[this] == TulipToken;
[L4927]              assume msgvalue_MSG == 0;
[L4928]              gas := gas - 53000;
[L4929]  CALL        call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1197]              havoc __exception;
[L1198]              revert := false;
[L1199]  COND FALSE  !(__exception)
[L1223]  CALL        call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3265]  CALL        call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2999]  CALL        call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]              assume msgsender_MSG != null;
[L2970]              Balance[this] := 0;
[L2972]  CALL        call __var_18 := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L2972]  RET         call __var_18 := FreshRefGenerator__success();
[L2973]  COND FALSE  !(revert)
[L2976]              _owner_MultOwnable[this] := __var_18;
[L2977]              assume Length[_owner_MultOwnable[this]] == 0;
[L2979]              __var_17 := Length[_owner_MultOwnable[this]];
[L2980]              M_int_Ref[_owner_MultOwnable[this]][__var_17] := msgsender_MSG;
[L2981]              Length[_owner_MultOwnable[this]] := __var_17 + 1;
[L2982]              assert { :EventEmitted "OwnershipTransferred_MultOwnable" } true;
[L2999]  RET         call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3000]  COND FALSE  !(revert)
[L3265]  RET         call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3269]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L3269]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3270]  COND FALSE  !(revert)
[L3273]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L2344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L2344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND FALSE  !(revert)
[L2348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2314]              assume msgsender_MSG != null;
[L2315]              Balance[this] := 0;
[L2316]              _balances_ERC20[this] := zeroRefintArr();
[L2317]              sum__balances0[this] := 0;
[L2318]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2319]              sum__allowances1[this] := 0;
[L2320]              _totalSupply_ERC20[this] := 0;
[L2321]              _name_ERC20[this] := 214025342;
[L2322]              _symbol_ERC20[this] := 214025342;
[L2323]              _decimals_ERC20[this] := 0;
[L2325]              _name_ERC20[this] := name_s244;
[L2326]              _symbol_ERC20[this] := symbol_s244;
[L2327]              _decimals_ERC20[this] := 9;
[L2348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2349]  COND FALSE  !(revert)
[L3273]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3274]  COND FALSE  !(revert)
[L3277]  CALL        call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3238]              assume msgsender_MSG != null;
[L3239]              Balance[this] := 0;
[L3277]  RET         call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3278]  COND FALSE  !(revert)
[L1223]  RET         call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1224]              assume !revert && gas >= 0;
[L4929]  RET         call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L4930]              assume !revert && gas >= 0;
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND FALSE  !(choice == 17)
[L4811]  COND FALSE  !(choice == 16)
[L4817]  COND FALSE  !(choice == 15)
[L4824]  COND FALSE  !(choice == 14)
[L4831]  COND FALSE  !(choice == 13)
[L4837]  COND FALSE  !(choice == 12)
[L4843]  COND FALSE  !(choice == 11)
[L4849]  COND FALSE  !(choice == 10)
[L4856]  COND FALSE  !(choice == 9)
[L4863]  COND FALSE  !(choice == 8)
[L4869]  COND FALSE  !(choice == 7)
[L4875]  COND FALSE  !(choice == 6)
[L4881]  COND FALSE  !(choice == 5)
[L4888]  COND TRUE   choice == 4
[L4889]              gas := gas - 21000;
[L4890]  COND TRUE   gas >= 0
[L4891]              assume amount_s899 >= 0 && amount_s899 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4892]              assume msgvalue_MSG == 0;
[L4893]  CALL        call contractBurn~address~uint256_TulipToken(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L1315]              havoc __exception;
[L1316]              revert := false;
[L1317]  COND FALSE  !(__exception)
[L1341]  CALL        call contractBurn~address~uint256_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L3333]  CALL        call isAnOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4365]  CALL        call __var_19 := checkOwner_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]              i_s705 := 0;
[L3028]  COND TRUE   i_s705 < Length[_owner_MultOwnable[this]]
[L3030]  COND TRUE   M_int_Ref[_owner_MultOwnable[this]][i_s705] == msgsender_MSG
[L3031]              __ret_0_ := true;
[L4365]  RET         call __var_19 := checkOwner_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4366]  COND FALSE  !(revert)
[L4369]  COND FALSE  !(!__var_19)
[L3333]  RET         call isAnOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3334]  COND FALSE  !(revert)
[L3337]  COND TRUE   DType[this] == TulipToken
[L3338]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L2815]              __var_11 := null;
[L2816]  COND FALSE  !(!(account_s573 != null))
[L2820]  CALL        call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s573);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2820]  RET         call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s573);
[L2821]  COND FALSE  !(revert)
[L2824]              _totalSupply_ERC20[this] := __var_12;
[L2825]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s573], value_s573);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2825]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s573], value_s573);
[L2826]  COND FALSE  !(revert)
[L2829]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s573];
[L2830]              _balances_ERC20[this][account_s573] := __var_13;
[L2831]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s573];
[L2832]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3338]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L3339]  COND FALSE  !(revert)
[L1341]  RET         call contractBurn~address~uint256_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L1342]              assume !revert && gas >= 0;
[L4893]  RET         call contractBurn~address~uint256_TulipToken(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L4933]  RET         call CorralChoice_TulipToken(this);
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2435]  COND TRUE   DType[this] == TulipToken
[L2436]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2436]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2437]  COND FALSE  !(revert)
[L2448]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L593]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20[this] == old(_name_ERC20[this])) && _symbol_ERC20[this] == old(_symbol_ERC20[this])) && _decimals_ERC20[this] == old(_decimals_ERC20[this])) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]));
[L2]                 revert := revert_hold;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2435]  COND TRUE   DType[this] == TulipToken
[L2436]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2436]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2437]  COND FALSE  !(revert)
[L2448]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L593]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20[this] == old(_name_ERC20[this])) && _symbol_ERC20[this] == old(_symbol_ERC20[this])) && _decimals_ERC20[this] == old(_decimals_ERC20[this])) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]));
[L2]                 revert := revert_hold;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

Loop:
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND FALSE  !(choice == 17)
[L4811]  COND FALSE  !(choice == 16)
[L4817]  COND FALSE  !(choice == 15)
[L4824]  COND FALSE  !(choice == 14)
[L4831]  COND FALSE  !(choice == 13)
[L4837]  COND FALSE  !(choice == 12)
[L4843]  COND FALSE  !(choice == 11)
[L4849]  COND FALSE  !(choice == 10)
[L4856]  COND FALSE  !(choice == 9)
[L4863]  COND FALSE  !(choice == 8)
[L4869]  COND FALSE  !(choice == 7)
[L4875]  COND FALSE  !(choice == 6)
[L4881]  COND TRUE   choice == 5
[L4882]              gas := gas - 21000;
[L4883]  COND TRUE   gas >= 0
[L4884]              assume amount_s884 >= 0 && amount_s884 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4885]              assume msgvalue_MSG == 0;
[L4886]  CALL        call contractMint~address~uint256_TulipToken(this, msgsender_MSG, msgvalue_MSG, account_s884, amount_s884);
[L1256]              havoc __exception;
[L1257]              revert := false;
[L1258]  COND FALSE  !(__exception)
[L1282]  CALL        call contractMint~address~uint256_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, account_s884, amount_s884);
[L3301]  CALL        call isAnOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4365]  CALL        call __var_19 := checkOwner_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]              i_s705 := 0;
[L3028]  COND TRUE   i_s705 < Length[_owner_MultOwnable[this]]
[L3030]  COND TRUE   M_int_Ref[_owner_MultOwnable[this]][i_s705] == msgsender_MSG
[L3031]              __ret_0_ := true;
[L4365]  RET         call __var_19 := checkOwner_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4366]  COND FALSE  !(revert)
[L4369]  COND FALSE  !(!__var_19)
[L3301]  RET         call isAnOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3302]  COND FALSE  !(revert)
[L3305]  COND TRUE   DType[this] == TulipToken
[L3306]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s884, amount_s884);
[L2766]              __var_8 := null;
[L2767]  COND FALSE  !(!(account_s530 != null))
[L2771]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s530);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2771]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s530);
[L2772]  COND FALSE  !(revert)
[L2775]              _totalSupply_ERC20[this] := __var_9;
[L2776]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s530], amount_s530);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2776]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s530], amount_s530);
[L2777]  COND FALSE  !(revert)
[L2780]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s530];
[L2781]              _balances_ERC20[this][account_s530] := __var_10;
[L2782]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s530];
[L2783]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3306]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s884, amount_s884);
[L3307]  COND FALSE  !(revert)
[L1282]  RET         call contractMint~address~uint256_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, account_s884, amount_s884);
[L1283]              assume !revert && gas >= 0;
[L4886]  RET         call contractMint~address~uint256_TulipToken(this, msgsender_MSG, msgvalue_MSG, account_s884, amount_s884);
[L4933]  RET         call CorralChoice_TulipToken(this);

[2020-11-25 07:00:11,994 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:00:11,994 INFO  L82        PathProgramCache]: Analyzing trace with hash 1427393698, now seen corresponding path program 1 times
[2020-11-25 07:00:11,995 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:00:12,027 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:00:13,657 INFO  L134       CoverageAnalysis]: Checked inductivity of 214 backedges. 12 proven. 7 refuted. 0 times theorem prover too weak. 195 trivial. 0 not checked.
[2020-11-25 07:00:13,657 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 07:00:13,657 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [50] total 50
[2020-11-25 07:00:13,658 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:00:13,658 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 51 interpolants.
[2020-11-25 07:00:13,658 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=172, Invalid=2378, Unknown=0, NotChecked=0, Total=2550
[2020-11-25 07:00:13,658 INFO  L87              Difference]: Start difference. First operand 3073 states and 3542 transitions. cyclomatic complexity: 491 Second operand 51 states.
[2020-11-25 07:00:22,361 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:00:22,361 INFO  L93              Difference]: Finished difference Result 3106 states and 3591 transitions.
[2020-11-25 07:00:22,361 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 36 states. 
[2020-11-25 07:00:22,361 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3106 states and 3591 transitions.
[2020-11-25 07:00:22,367 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 07:00:22,372 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3106 states to 3106 states and 3591 transitions.
[2020-11-25 07:00:22,372 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 736
[2020-11-25 07:00:22,373 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 736
[2020-11-25 07:00:22,373 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3106 states and 3591 transitions.
[2020-11-25 07:00:22,374 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:00:22,374 INFO  L728         BuchiCegarLoop]: Abstraction has 3106 states and 3591 transitions.
[2020-11-25 07:00:22,376 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3106 states and 3591 transitions.
[2020-11-25 07:00:22,388 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3106 to 3073.
[2020-11-25 07:00:22,388 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3073 states.
[2020-11-25 07:00:22,391 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3073 states to 3073 states and 3541 transitions.
[2020-11-25 07:00:22,391 INFO  L751         BuchiCegarLoop]: Abstraction has 3073 states and 3541 transitions.
[2020-11-25 07:00:22,391 INFO  L631         BuchiCegarLoop]: Abstraction has 3073 states and 3541 transitions.
[2020-11-25 07:00:22,391 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-11-25 07:00:22,391 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3073 states and 3541 transitions.
[2020-11-25 07:00:22,394 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 07:00:22,394 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:00:22,394 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:00:22,395 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:00:22,395 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4923]              assume null == 0;
[L4924]  CALL        call this := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L4924]  RET         call this := FreshRefGenerator__success();
[L4925]              assume now >= 0;
[L4926]              assume DType[this] == TulipToken;
[L4927]              assume msgvalue_MSG == 0;
[L4928]              gas := gas - 53000;
[L4929]  CALL        call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1197]              havoc __exception;
[L1198]              revert := false;
[L1199]  COND FALSE  !(__exception)
[L1223]  CALL        call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3265]  CALL        call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2999]  CALL        call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]              assume msgsender_MSG != null;
[L2970]              Balance[this] := 0;
[L2972]  CALL        call __var_18 := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L2972]  RET         call __var_18 := FreshRefGenerator__success();
[L2973]  COND FALSE  !(revert)
[L2976]              _owner_MultOwnable[this] := __var_18;
[L2977]              assume Length[_owner_MultOwnable[this]] == 0;
[L2979]              __var_17 := Length[_owner_MultOwnable[this]];
[L2980]              M_int_Ref[_owner_MultOwnable[this]][__var_17] := msgsender_MSG;
[L2981]              Length[_owner_MultOwnable[this]] := __var_17 + 1;
[L2982]              assert { :EventEmitted "OwnershipTransferred_MultOwnable" } true;
[L2999]  RET         call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3000]  COND FALSE  !(revert)
[L3265]  RET         call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3269]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L3269]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3270]  COND FALSE  !(revert)
[L3273]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L2344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L2344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND FALSE  !(revert)
[L2348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2314]              assume msgsender_MSG != null;
[L2315]              Balance[this] := 0;
[L2316]              _balances_ERC20[this] := zeroRefintArr();
[L2317]              sum__balances0[this] := 0;
[L2318]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2319]              sum__allowances1[this] := 0;
[L2320]              _totalSupply_ERC20[this] := 0;
[L2321]              _name_ERC20[this] := 214025342;
[L2322]              _symbol_ERC20[this] := 214025342;
[L2323]              _decimals_ERC20[this] := 0;
[L2325]              _name_ERC20[this] := name_s244;
[L2326]              _symbol_ERC20[this] := symbol_s244;
[L2327]              _decimals_ERC20[this] := 9;
[L2348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2349]  COND FALSE  !(revert)
[L3273]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3274]  COND FALSE  !(revert)
[L3277]  CALL        call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3238]              assume msgsender_MSG != null;
[L3239]              Balance[this] := 0;
[L3277]  RET         call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3278]  COND FALSE  !(revert)
[L1223]  RET         call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1224]              assume !revert && gas >= 0;
[L4929]  RET         call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L4930]              assume !revert && gas >= 0;
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND FALSE  !(choice == 17)
[L4811]  COND FALSE  !(choice == 16)
[L4817]  COND FALSE  !(choice == 15)
[L4824]  COND FALSE  !(choice == 14)
[L4831]  COND FALSE  !(choice == 13)
[L4837]  COND FALSE  !(choice == 12)
[L4843]  COND FALSE  !(choice == 11)
[L4849]  COND FALSE  !(choice == 10)
[L4856]  COND FALSE  !(choice == 9)
[L4863]  COND FALSE  !(choice == 8)
[L4869]  COND FALSE  !(choice == 7)
[L4875]  COND FALSE  !(choice == 6)
[L4881]  COND FALSE  !(choice == 5)
[L4888]  COND TRUE   choice == 4
[L4889]              gas := gas - 21000;
[L4890]  COND TRUE   gas >= 0
[L4891]              assume amount_s899 >= 0 && amount_s899 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4892]              assume msgvalue_MSG == 0;
[L4893]  CALL        call contractBurn~address~uint256_TulipToken(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L1315]              havoc __exception;
[L1316]              revert := false;
[L1317]  COND FALSE  !(__exception)
[L1341]  CALL        call contractBurn~address~uint256_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L3333]  CALL        call isAnOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4365]  CALL        call __var_19 := checkOwner_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]              i_s705 := 0;
[L3028]  COND TRUE   i_s705 < Length[_owner_MultOwnable[this]]
[L3030]  COND TRUE   M_int_Ref[_owner_MultOwnable[this]][i_s705] == msgsender_MSG
[L3031]              __ret_0_ := true;
[L4365]  RET         call __var_19 := checkOwner_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4366]  COND FALSE  !(revert)
[L4369]  COND FALSE  !(!__var_19)
[L3333]  RET         call isAnOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3334]  COND FALSE  !(revert)
[L3337]  COND TRUE   DType[this] == TulipToken
[L3338]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L2815]              __var_11 := null;
[L2816]  COND FALSE  !(!(account_s573 != null))
[L2820]  CALL        call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s573);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2820]  RET         call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s573);
[L2821]  COND FALSE  !(revert)
[L2824]              _totalSupply_ERC20[this] := __var_12;
[L2825]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s573], value_s573);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2825]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s573], value_s573);
[L2826]  COND FALSE  !(revert)
[L2829]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s573];
[L2830]              _balances_ERC20[this][account_s573] := __var_13;
[L2831]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s573];
[L2832]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3338]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L3339]  COND FALSE  !(revert)
[L1341]  RET         call contractBurn~address~uint256_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L1342]              assume !revert && gas >= 0;
[L4893]  RET         call contractBurn~address~uint256_TulipToken(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L4933]  RET         call CorralChoice_TulipToken(this);
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2435]  COND TRUE   DType[this] == TulipToken
[L2436]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2436]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2437]  COND FALSE  !(revert)
[L2448]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L593]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20[this] == old(_name_ERC20[this])) && _symbol_ERC20[this] == old(_symbol_ERC20[this])) && _decimals_ERC20[this] == old(_decimals_ERC20[this])) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]);
[L2]                 success_transfer_ERC200 := true;
[L2]                 success_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2435]  COND TRUE   DType[this] == TulipToken
[L2436]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2436]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2437]  COND FALSE  !(revert)
[L2448]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L593]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20[this] == old(_name_ERC20[this])) && _symbol_ERC20[this] == old(_symbol_ERC20[this])) && _decimals_ERC20[this] == old(_decimals_ERC20[this])) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]));
[L2]                 revert := revert_hold;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

Loop:
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2435]  COND TRUE   DType[this] == TulipToken
[L2436]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2436]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2437]  COND FALSE  !(revert)
[L2448]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L593]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20[this] == old(_name_ERC20[this])) && _symbol_ERC20[this] == old(_symbol_ERC20[this])) && _decimals_ERC20[this] == old(_decimals_ERC20[this])) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]));
[L2]                 revert := revert_hold;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

[2020-11-25 07:00:22,398 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:00:22,398 INFO  L82        PathProgramCache]: Analyzing trace with hash 361870722, now seen corresponding path program 1 times
[2020-11-25 07:00:22,399 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:00:22,422 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:00:22,688 WARN  L188               SmtUtils]: Spent 141.00 ms on a formula simplification. DAG size of input: 31 DAG size of output: 24
[2020-11-25 07:00:23,013 INFO  L134       CoverageAnalysis]: Checked inductivity of 215 backedges. 11 proven. 6 refuted. 0 times theorem prover too weak. 198 trivial. 0 not checked.
[2020-11-25 07:00:23,013 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 07:00:23,013 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [36] total 36
[2020-11-25 07:00:23,014 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:00:23,014 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 37 interpolants.
[2020-11-25 07:00:23,014 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=119, Invalid=1213, Unknown=0, NotChecked=0, Total=1332
[2020-11-25 07:00:23,014 INFO  L87              Difference]: Start difference. First operand 3073 states and 3541 transitions. cyclomatic complexity: 490 Second operand 37 states.
[2020-11-25 07:00:28,492 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:00:28,493 INFO  L93              Difference]: Finished difference Result 3667 states and 4394 transitions.
[2020-11-25 07:00:28,493 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 38 states. 
[2020-11-25 07:00:28,493 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3667 states and 4394 transitions.
[2020-11-25 07:00:28,500 INFO  L131   ngComponentsAnalysis]: Automaton has 6 accepting balls. 12
[2020-11-25 07:00:28,508 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3667 states to 3667 states and 4394 transitions.
[2020-11-25 07:00:28,508 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 934
[2020-11-25 07:00:28,509 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 934
[2020-11-25 07:00:28,509 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3667 states and 4394 transitions.
[2020-11-25 07:00:28,511 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:00:28,511 INFO  L728         BuchiCegarLoop]: Abstraction has 3667 states and 4394 transitions.
[2020-11-25 07:00:28,513 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3667 states and 4394 transitions.
[2020-11-25 07:00:28,526 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3667 to 3449.
[2020-11-25 07:00:28,526 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 3449 states.
[2020-11-25 07:00:28,531 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 3449 states to 3449 states and 4088 transitions.
[2020-11-25 07:00:28,531 INFO  L751         BuchiCegarLoop]: Abstraction has 3449 states and 4088 transitions.
[2020-11-25 07:00:28,531 INFO  L631         BuchiCegarLoop]: Abstraction has 3449 states and 4088 transitions.
[2020-11-25 07:00:28,531 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-11-25 07:00:28,531 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3449 states and 4088 transitions.
[2020-11-25 07:00:28,534 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 07:00:28,534 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:00:28,534 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:00:28,535 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:00:28,535 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4923]              assume null == 0;
[L4924]  CALL        call this := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L4924]  RET         call this := FreshRefGenerator__success();
[L4925]              assume now >= 0;
[L4926]              assume DType[this] == TulipToken;
[L4927]              assume msgvalue_MSG == 0;
[L4928]              gas := gas - 53000;
[L4929]  CALL        call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1197]              havoc __exception;
[L1198]              revert := false;
[L1199]  COND FALSE  !(__exception)
[L1223]  CALL        call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3265]  CALL        call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2999]  CALL        call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]              assume msgsender_MSG != null;
[L2970]              Balance[this] := 0;
[L2972]  CALL        call __var_18 := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L2972]  RET         call __var_18 := FreshRefGenerator__success();
[L2973]  COND FALSE  !(revert)
[L2976]              _owner_MultOwnable[this] := __var_18;
[L2977]              assume Length[_owner_MultOwnable[this]] == 0;
[L2979]              __var_17 := Length[_owner_MultOwnable[this]];
[L2980]              M_int_Ref[_owner_MultOwnable[this]][__var_17] := msgsender_MSG;
[L2981]              Length[_owner_MultOwnable[this]] := __var_17 + 1;
[L2982]              assert { :EventEmitted "OwnershipTransferred_MultOwnable" } true;
[L2999]  RET         call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3000]  COND FALSE  !(revert)
[L3265]  RET         call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3269]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L3269]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3270]  COND FALSE  !(revert)
[L3273]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L2344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L2344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND FALSE  !(revert)
[L2348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2314]              assume msgsender_MSG != null;
[L2315]              Balance[this] := 0;
[L2316]              _balances_ERC20[this] := zeroRefintArr();
[L2317]              sum__balances0[this] := 0;
[L2318]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2319]              sum__allowances1[this] := 0;
[L2320]              _totalSupply_ERC20[this] := 0;
[L2321]              _name_ERC20[this] := 214025342;
[L2322]              _symbol_ERC20[this] := 214025342;
[L2323]              _decimals_ERC20[this] := 0;
[L2325]              _name_ERC20[this] := name_s244;
[L2326]              _symbol_ERC20[this] := symbol_s244;
[L2327]              _decimals_ERC20[this] := 9;
[L2348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2349]  COND FALSE  !(revert)
[L3273]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3274]  COND FALSE  !(revert)
[L3277]  CALL        call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3238]              assume msgsender_MSG != null;
[L3239]              Balance[this] := 0;
[L3277]  RET         call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3278]  COND FALSE  !(revert)
[L1223]  RET         call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1224]              assume !revert && gas >= 0;
[L4929]  RET         call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L4930]              assume !revert && gas >= 0;
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND FALSE  !(choice == 17)
[L4811]  COND FALSE  !(choice == 16)
[L4817]  COND FALSE  !(choice == 15)
[L4824]  COND FALSE  !(choice == 14)
[L4831]  COND FALSE  !(choice == 13)
[L4837]  COND FALSE  !(choice == 12)
[L4843]  COND FALSE  !(choice == 11)
[L4849]  COND FALSE  !(choice == 10)
[L4856]  COND FALSE  !(choice == 9)
[L4863]  COND FALSE  !(choice == 8)
[L4869]  COND FALSE  !(choice == 7)
[L4875]  COND FALSE  !(choice == 6)
[L4881]  COND FALSE  !(choice == 5)
[L4888]  COND TRUE   choice == 4
[L4889]              gas := gas - 21000;
[L4890]  COND TRUE   gas >= 0
[L4891]              assume amount_s899 >= 0 && amount_s899 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4892]              assume msgvalue_MSG == 0;
[L4893]  CALL        call contractBurn~address~uint256_TulipToken(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L1315]              havoc __exception;
[L1316]              revert := false;
[L1317]  COND FALSE  !(__exception)
[L1341]  CALL        call contractBurn~address~uint256_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L3333]  CALL        call isAnOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4365]  CALL        call __var_19 := checkOwner_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]              i_s705 := 0;
[L3028]  COND TRUE   i_s705 < Length[_owner_MultOwnable[this]]
[L3030]  COND TRUE   M_int_Ref[_owner_MultOwnable[this]][i_s705] == msgsender_MSG
[L3031]              __ret_0_ := true;
[L4365]  RET         call __var_19 := checkOwner_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4366]  COND FALSE  !(revert)
[L4369]  COND FALSE  !(!__var_19)
[L3333]  RET         call isAnOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3334]  COND FALSE  !(revert)
[L3337]  COND TRUE   DType[this] == TulipToken
[L3338]  CALL        call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L2815]              __var_11 := null;
[L2816]  COND FALSE  !(!(account_s573 != null))
[L2820]  CALL        call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s573);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2820]  RET         call __var_12 := sub~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], value_s573);
[L2821]  COND FALSE  !(revert)
[L2824]              _totalSupply_ERC20[this] := __var_12;
[L2825]  CALL        call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s573], value_s573);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2825]  RET         call __var_13 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s573], value_s573);
[L2826]  COND FALSE  !(revert)
[L2829]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s573];
[L2830]              _balances_ERC20[this][account_s573] := __var_13;
[L2831]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s573];
[L2832]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3338]  RET         call _burn~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L3339]  COND FALSE  !(revert)
[L1341]  RET         call contractBurn~address~uint256_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L1342]              assume !revert && gas >= 0;
[L4893]  RET         call contractBurn~address~uint256_TulipToken(this, msgsender_MSG, msgvalue_MSG, account_s899, amount_s899);
[L4933]  RET         call CorralChoice_TulipToken(this);
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND FALSE  !(choice == 17)
[L4811]  COND FALSE  !(choice == 16)
[L4817]  COND FALSE  !(choice == 15)
[L4824]  COND TRUE   choice == 14
[L4825]              gas := gas - 21000;
[L4826]  COND TRUE   gas >= 0
[L4827]              assume amount_s377 >= 0 && amount_s377 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4828]              assume msgvalue_MSG == 0;
[L4829]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s377, recipient_s377, amount_s377);
[L740]               havoc __exception;
[L741]               revert := false;
[L742]   COND FALSE  !(__exception)
[L766]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s377, recipient_s377, amount_s377);
[L2542]  COND TRUE   DType[this] == TulipToken
[L2543]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s377, recipient_s377, amount_s377);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2543]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s377, recipient_s377, amount_s377);
[L2544]  COND FALSE  !(revert)
[L2555]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s377][msgsender_MSG], amount_s377);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2555]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s377][msgsender_MSG], amount_s377);
[L2556]  COND FALSE  !(revert)
[L2559]  COND TRUE   DType[this] == TulipToken
[L2560]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s377, msgsender_MSG, __var_1);
[L2858]              __var_14 := null;
[L2859]  COND FALSE  !(!(owner_s615 != null))
[L2863]              __var_15 := null;
[L2864]  COND FALSE  !(!(spender_s615 != null))
[L2868]              sum__allowances1[owner_s615] := sum__allowances1[owner_s615] - _allowances_ERC20[this][owner_s615][spender_s615];
[L2869]              _allowances_ERC20[this][owner_s615][spender_s615] := value_s615;
[L2870]              sum__allowances1[owner_s615] := sum__allowances1[owner_s615] + _allowances_ERC20[this][owner_s615][spender_s615];
[L2871]              assert { :EventEmitted "Approval_ERC20" } true;
[L2560]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s377, msgsender_MSG, __var_1);
[L2561]  COND FALSE  !(revert)
[L2572]              __ret_0_ := true;
[L766]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s377, recipient_s377, amount_s377);
[L767]               assume !revert && gas >= 0;
[L4829]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s377, recipient_s377, amount_s377);
[L4933]  RET         call CorralChoice_TulipToken(this);
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2435]  COND TRUE   DType[this] == TulipToken
[L2436]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2436]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2437]  COND FALSE  !(revert)
[L2448]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L593]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20[this] == old(_name_ERC20[this])) && _symbol_ERC20[this] == old(_symbol_ERC20[this])) && _decimals_ERC20[this] == old(_decimals_ERC20[this])) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]));
[L2]                 revert := revert_hold;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

Loop:
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND FALSE  !(choice == 17)
[L4811]  COND FALSE  !(choice == 16)
[L4817]  COND FALSE  !(choice == 15)
[L4824]  COND TRUE   choice == 14
[L4825]              gas := gas - 21000;
[L4826]  COND TRUE   gas >= 0
[L4827]              assume amount_s377 >= 0 && amount_s377 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4828]              assume msgvalue_MSG == 0;
[L4829]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s377, recipient_s377, amount_s377);
[L740]               havoc __exception;
[L741]               revert := false;
[L742]   COND FALSE  !(__exception)
[L766]   CALL        call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s377, recipient_s377, amount_s377);
[L2542]  COND TRUE   DType[this] == TulipToken
[L2543]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s377, recipient_s377, amount_s377);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2543]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s377, recipient_s377, amount_s377);
[L2544]  COND FALSE  !(revert)
[L2555]  CALL        call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s377][msgsender_MSG], amount_s377);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2555]  RET         call __var_1 := sub~uint256~uint256_SafeMath__success(this, this, 0, _allowances_ERC20[this][sender_s377][msgsender_MSG], amount_s377);
[L2556]  COND FALSE  !(revert)
[L2559]  COND TRUE   DType[this] == TulipToken
[L2560]  CALL        call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s377, msgsender_MSG, __var_1);
[L2858]              __var_14 := null;
[L2859]  COND FALSE  !(!(owner_s615 != null))
[L2863]              __var_15 := null;
[L2864]  COND FALSE  !(!(spender_s615 != null))
[L2868]              sum__allowances1[owner_s615] := sum__allowances1[owner_s615] - _allowances_ERC20[this][owner_s615][spender_s615];
[L2869]              _allowances_ERC20[this][owner_s615][spender_s615] := value_s615;
[L2870]              sum__allowances1[owner_s615] := sum__allowances1[owner_s615] + _allowances_ERC20[this][owner_s615][spender_s615];
[L2871]              assert { :EventEmitted "Approval_ERC20" } true;
[L2560]  RET         call _approve~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s377, msgsender_MSG, __var_1);
[L2561]  COND FALSE  !(revert)
[L2572]              __ret_0_ := true;
[L766]   RET         call __ret_0_ := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s377, recipient_s377, amount_s377);
[L767]               assume !revert && gas >= 0;
[L4829]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, sender_s377, recipient_s377, amount_s377);
[L4933]  RET         call CorralChoice_TulipToken(this);

[2020-11-25 07:00:28,538 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:00:28,539 INFO  L82        PathProgramCache]: Analyzing trace with hash 1800613083, now seen corresponding path program 1 times
[2020-11-25 07:00:28,539 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:00:28,576 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 07:00:29,304 WARN  L188               SmtUtils]: Spent 141.00 ms on a formula simplification. DAG size of input: 137 DAG size of output: 55
[2020-11-25 07:00:29,804 WARN  L188               SmtUtils]: Spent 175.00 ms on a formula simplification. DAG size of input: 113 DAG size of output: 46
[2020-11-25 07:00:31,167 INFO  L134       CoverageAnalysis]: Checked inductivity of 223 backedges. 12 proven. 128 refuted. 0 times theorem prover too weak. 83 trivial. 0 not checked.
[2020-11-25 07:00:31,167 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 07:00:31,167 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [49] total 49
[2020-11-25 07:00:31,168 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 07:00:31,168 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 50 interpolants.
[2020-11-25 07:00:31,168 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=175, Invalid=2275, Unknown=0, NotChecked=0, Total=2450
[2020-11-25 07:00:31,168 INFO  L87              Difference]: Start difference. First operand 3449 states and 4088 transitions. cyclomatic complexity: 669 Second operand 50 states.
[2020-11-25 07:00:44,681 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 07:00:44,681 INFO  L93              Difference]: Finished difference Result 4338 states and 5440 transitions.
[2020-11-25 07:00:44,681 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 46 states. 
[2020-11-25 07:00:44,681 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4338 states and 5440 transitions.
[2020-11-25 07:00:44,691 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 18
[2020-11-25 07:00:44,701 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4338 states to 4338 states and 5440 transitions.
[2020-11-25 07:00:44,701 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1213
[2020-11-25 07:00:44,702 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1213
[2020-11-25 07:00:44,702 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4338 states and 5440 transitions.
[2020-11-25 07:00:44,704 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 07:00:44,704 INFO  L728         BuchiCegarLoop]: Abstraction has 4338 states and 5440 transitions.
[2020-11-25 07:00:44,706 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4338 states and 5440 transitions.
[2020-11-25 07:00:44,724 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4338 to 4211.
[2020-11-25 07:00:44,724 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4211 states.
[2020-11-25 07:00:44,730 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4211 states to 4211 states and 5231 transitions.
[2020-11-25 07:00:44,730 INFO  L751         BuchiCegarLoop]: Abstraction has 4211 states and 5231 transitions.
[2020-11-25 07:00:44,730 INFO  L631         BuchiCegarLoop]: Abstraction has 4211 states and 5231 transitions.
[2020-11-25 07:00:44,730 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-11-25 07:00:44,730 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4211 states and 5231 transitions.
[2020-11-25 07:00:44,734 INFO  L131   ngComponentsAnalysis]: Automaton has 9 accepting balls. 18
[2020-11-25 07:00:44,734 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 07:00:44,734 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 07:00:44,735 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 07:00:44,735 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 success_transfer_ERC200 := false;
[L2]                 call_transfer_ERC200 := false;
[L2]     CALL        call main();
[L4923]              assume null == 0;
[L4924]  CALL        call this := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L4924]  RET         call this := FreshRefGenerator__success();
[L4925]              assume now >= 0;
[L4926]              assume DType[this] == TulipToken;
[L4927]              assume msgvalue_MSG == 0;
[L4928]              gas := gas - 53000;
[L4929]  CALL        call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1197]              havoc __exception;
[L1198]              revert := false;
[L1199]  COND FALSE  !(__exception)
[L1223]  CALL        call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3265]  CALL        call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L2999]  CALL        call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2969]              assume msgsender_MSG != null;
[L2970]              Balance[this] := 0;
[L2972]  CALL        call __var_18 := FreshRefGenerator__success();
[L2098]              havoc newRef;
[L2099]              assume Alloc[newRef] == false;
[L2100]              Alloc[newRef] := true;
[L2101]              assume newRef != null;
[L2972]  RET         call __var_18 := FreshRefGenerator__success();
[L2973]  COND FALSE  !(revert)
[L2976]              _owner_MultOwnable[this] := __var_18;
[L2977]              assume Length[_owner_MultOwnable[this]] == 0;
[L2979]              __var_17 := Length[_owner_MultOwnable[this]];
[L2980]              M_int_Ref[_owner_MultOwnable[this]][__var_17] := msgsender_MSG;
[L2981]              Length[_owner_MultOwnable[this]] := __var_17 + 1;
[L2982]              assert { :EventEmitted "OwnershipTransferred_MultOwnable" } true;
[L2999]  RET         call MultOwnable_MultOwnable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L3000]  COND FALSE  !(revert)
[L3265]  RET         call MultOwnable_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3266]  COND FALSE  !(revert)
[L3269]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L3269]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L3270]  COND FALSE  !(revert)
[L3273]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L2344]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2130]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2115]              assume msgsender_MSG != null;
[L2116]              Balance[this] := 0;
[L2130]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2131]  COND FALSE  !(revert)
[L2344]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L2345]  COND FALSE  !(revert)
[L2348]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2314]              assume msgsender_MSG != null;
[L2315]              Balance[this] := 0;
[L2316]              _balances_ERC20[this] := zeroRefintArr();
[L2317]              sum__balances0[this] := 0;
[L2318]              _allowances_ERC20[this] := zeroRefRefintArr();
[L2319]              sum__allowances1[this] := 0;
[L2320]              _totalSupply_ERC20[this] := 0;
[L2321]              _name_ERC20[this] := 214025342;
[L2322]              _symbol_ERC20[this] := 214025342;
[L2323]              _decimals_ERC20[this] := 0;
[L2325]              _name_ERC20[this] := name_s244;
[L2326]              _symbol_ERC20[this] := symbol_s244;
[L2327]              _decimals_ERC20[this] := 9;
[L2348]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s244, symbol_s244);
[L2349]  COND FALSE  !(revert)
[L3273]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3274]  COND FALSE  !(revert)
[L3277]  CALL        call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3238]              assume msgsender_MSG != null;
[L3239]              Balance[this] := 0;
[L3277]  RET         call TulipToken_TulipToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L3278]  COND FALSE  !(revert)
[L1223]  RET         call TulipToken_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L1224]              assume !revert && gas >= 0;
[L4929]  RET         call TulipToken_TulipToken(this, msgsender_MSG, msgvalue_MSG, name_s869, symbol_s869);
[L4930]              assume !revert && gas >= 0;
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND FALSE  !(choice == 17)
[L4811]  COND FALSE  !(choice == 16)
[L4817]  COND FALSE  !(choice == 15)
[L4824]  COND FALSE  !(choice == 14)
[L4831]  COND FALSE  !(choice == 13)
[L4837]  COND FALSE  !(choice == 12)
[L4843]  COND FALSE  !(choice == 11)
[L4849]  COND FALSE  !(choice == 10)
[L4856]  COND FALSE  !(choice == 9)
[L4863]  COND FALSE  !(choice == 8)
[L4869]  COND FALSE  !(choice == 7)
[L4875]  COND FALSE  !(choice == 6)
[L4881]  COND TRUE   choice == 5
[L4882]              gas := gas - 21000;
[L4883]  COND TRUE   gas >= 0
[L4884]              assume amount_s884 >= 0 && amount_s884 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4885]              assume msgvalue_MSG == 0;
[L4886]  CALL        call contractMint~address~uint256_TulipToken(this, msgsender_MSG, msgvalue_MSG, account_s884, amount_s884);
[L1256]              havoc __exception;
[L1257]              revert := false;
[L1258]  COND FALSE  !(__exception)
[L1282]  CALL        call contractMint~address~uint256_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, account_s884, amount_s884);
[L3301]  CALL        call isAnOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L4365]  CALL        call __var_19 := checkOwner_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L3027]              i_s705 := 0;
[L3028]  COND TRUE   i_s705 < Length[_owner_MultOwnable[this]]
[L3030]  COND TRUE   M_int_Ref[_owner_MultOwnable[this]][i_s705] == msgsender_MSG
[L3031]              __ret_0_ := true;
[L4365]  RET         call __var_19 := checkOwner_MultOwnable__success(this, msgsender_MSG, msgvalue_MSG);
[L4366]  COND FALSE  !(revert)
[L4369]  COND FALSE  !(!__var_19)
[L3301]  RET         call isAnOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L3302]  COND FALSE  !(revert)
[L3305]  COND TRUE   DType[this] == TulipToken
[L3306]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s884, amount_s884);
[L2766]              __var_8 := null;
[L2767]  COND FALSE  !(!(account_s530 != null))
[L2771]  CALL        call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s530);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2771]  RET         call __var_9 := add~uint256~uint256_SafeMath__success(this, this, 0, _totalSupply_ERC20[this], amount_s530);
[L2772]  COND FALSE  !(revert)
[L2775]              _totalSupply_ERC20[this] := __var_9;
[L2776]  CALL        call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s530], amount_s530);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2776]  RET         call __var_10 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s530], amount_s530);
[L2777]  COND FALSE  !(revert)
[L2780]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][account_s530];
[L2781]              _balances_ERC20[this][account_s530] := __var_10;
[L2782]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][account_s530];
[L2783]              assert { :EventEmitted "Transfer_ERC20" } true;
[L3306]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, account_s884, amount_s884);
[L3307]  COND FALSE  !(revert)
[L1282]  RET         call contractMint~address~uint256_TulipToken__success(this, msgsender_MSG, msgvalue_MSG, account_s884, amount_s884);
[L1283]              assume !revert && gas >= 0;
[L4886]  RET         call contractMint~address~uint256_TulipToken(this, msgsender_MSG, msgvalue_MSG, account_s884, amount_s884);
[L4933]  RET         call CorralChoice_TulipToken(this);
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2435]  COND TRUE   DType[this] == TulipToken
[L2436]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2436]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2437]  COND FALSE  !(revert)
[L2448]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L593]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20[this] == old(_name_ERC20[this])) && _symbol_ERC20[this] == old(_symbol_ERC20[this])) && _decimals_ERC20[this] == old(_decimals_ERC20[this])) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]));
[L2]                 revert := revert_hold;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2435]  COND TRUE   DType[this] == TulipToken
[L2436]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2436]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2437]  COND FALSE  !(revert)
[L2448]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L593]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20[this] == old(_name_ERC20[this])) && _symbol_ERC20[this] == old(_symbol_ERC20[this])) && _decimals_ERC20[this] == old(_decimals_ERC20[this])) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]));
[L2]                 revert := revert_hold;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

Loop:
[L4933]  CALL        call CorralChoice_TulipToken(this);
[L4740]              havoc msgsender_MSG;
[L4741]              havoc msgvalue_MSG;
[L4742]              havoc choice;
[L4743]              havoc __ret_0_totalSupply;
[L4744]              havoc account_s288;
[L4745]              havoc __ret_0_balanceOf;
[L4746]              havoc recipient_s307;
[L4747]              havoc amount_s307;
[L4748]              havoc __ret_0_transfer;
[L4749]              havoc owner_s323;
[L4750]              havoc spender_s323;
[L4751]              havoc __ret_0_allowance;
[L4752]              havoc spender_s342;
[L4753]              havoc value_s342;
[L4754]              havoc __ret_0_approve;
[L4755]              havoc sender_s377;
[L4756]              havoc recipient_s377;
[L4757]              havoc amount_s377;
[L4758]              havoc __ret_0_transferFrom;
[L4759]              havoc name_s244;
[L4760]              havoc symbol_s244;
[L4761]              havoc __ret_0_name;
[L4762]              havoc __ret_0_symbol;
[L4763]              havoc __ret_0_decimals;
[L4764]              havoc spender_s404;
[L4765]              havoc addedValue_s404;
[L4766]              havoc __ret_0_increaseAllowance;
[L4767]              havoc spender_s431;
[L4768]              havoc subtractedValue_s431;
[L4769]              havoc __ret_0_decreaseAllowance;
[L4770]              havoc __ret_0_getOwners;
[L4771]              havoc newOwner_s811;
[L4772]              havoc name_s869;
[L4773]              havoc symbol_s869;
[L4774]              havoc account_s884;
[L4775]              havoc amount_s884;
[L4776]              havoc account_s899;
[L4777]              havoc amount_s899;
[L4778]              havoc _newOwner_s911;
[L4779]              havoc tmpNow;
[L4780]              havoc gas;
[L4781]              assume gas > 4000000 && gas <= 8000000;
[L4782]              tmpNow := now;
[L4783]              havoc now;
[L4784]              assume now > tmpNow;
[L4785]              assume msgsender_MSG != null;
[L4786]              assume DType[msgsender_MSG] != IERC20;
[L4787]              assume DType[msgsender_MSG] != SafeMath;
[L4788]              assume DType[msgsender_MSG] != ERC20;
[L4789]              assume DType[msgsender_MSG] != MultOwnable;
[L4790]              assume DType[msgsender_MSG] != TulipToken;
[L4791]              Alloc[msgsender_MSG] := true;
[L4792]  COND FALSE  !(choice == 19)
[L4798]  COND FALSE  !(choice == 18)
[L4804]  COND TRUE   choice == 17
[L4805]              gas := gas - 21000;
[L4806]  COND TRUE   gas >= 0
[L4807]              assume amount_s307 >= 0 && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4808]              assume msgvalue_MSG == 0;
[L4809]  CALL        call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG == recipient_s307 && amount_s307 <= _balances_ERC20[this][msgsender_MSG]) && amount_s307 >= 0) && amount_s307 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][recipient_s307] >= 0) && _balances_ERC20[this][recipient_s307] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][msgsender_MSG] >= 0) && _balances_ERC20[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_ERC200 := true;
[L2]                 call_transfer_ERC200 := false;
[L2]                 revert := revert_hold;
[L566]               havoc __exception;
[L567]               revert := false;
[L568]   COND FALSE  !(__exception)
[L592]   CALL        call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L2435]  COND TRUE   DType[this] == TulipToken
[L2436]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2710]              __var_4 := null;
[L2711]  COND FALSE  !(!(sender_s487 != null))
[L2715]              __var_5 := null;
[L2716]  COND FALSE  !(!(recipient_s487 != null))
[L2720]  CALL        call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2207]  COND FALSE  !(!(b_s119 <= a_s119))
[L2211]              c_s119 := (a_s119 - b_s119) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2212]              __ret_0_ := c_s119;
[L2720]  RET         call __var_6 := sub~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][sender_s487], amount_s487);
[L2721]  COND FALSE  !(revert)
[L2724]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][sender_s487];
[L2725]              _balances_ERC20[this][sender_s487] := __var_6;
[L2726]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][sender_s487];
[L2727]  CALL        call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2183]              c_s94 := (a_s94 + b_s94) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2184]  COND FALSE  !(!(c_s94 >= a_s94))
[L2188]              __ret_0_ := c_s94;
[L2727]  RET         call __var_7 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][recipient_s487], amount_s487);
[L2728]  COND FALSE  !(revert)
[L2731]              sum__balances0[this] := sum__balances0[this] - _balances_ERC20[this][recipient_s487];
[L2732]              _balances_ERC20[this][recipient_s487] := __var_7;
[L2733]              sum__balances0[this] := sum__balances0[this] + _balances_ERC20[this][recipient_s487];
[L2734]              assert { :EventEmitted "Transfer_ERC20" } true;
[L2436]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, recipient_s307, amount_s307);
[L2437]  COND FALSE  !(revert)
[L2448]              __ret_0_ := true;
[L592]   RET         call __ret_0_ := transfer~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L593]               assume !revert && gas >= 0;
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((__ret_0_ == true && _totalSupply_ERC20[this] == old(_totalSupply_ERC20[this])) && _balances_ERC20[this] == old(_balances_ERC20[this])) && _allowances_ERC20[this] == old(_allowances_ERC20[this])) && _name_ERC20[this] == old(_name_ERC20[this])) && _symbol_ERC20[this] == old(_symbol_ERC20[this])) && _decimals_ERC20[this] == old(_decimals_ERC20[this])) && M_int_Ref[_owner_MultOwnable[this]] == old(M_int_Ref[_owner_MultOwnable[this]]));
[L2]                 revert := revert_hold;
[L4809]  RET         call __ret_0_transfer := transfer~address~uint256_ERC20(this, msgsender_MSG, msgvalue_MSG, recipient_s307, amount_s307);
[L4933]  RET         call CorralChoice_TulipToken(this);

[2020-11-25 07:00:44,738 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 07:00:44,738 INFO  L82        PathProgramCache]: Analyzing trace with hash 1030608561, now seen corresponding path program 1 times
[2020-11-25 07:00:44,738 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 07:00:44,820 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Received shutdown request...
[2020-11-25 07:13:44,494 FATAL L265        ToolchainWalker]: An unrecoverable error occured during an interaction with an SMT solver:
de.uni_freiburg.informatik.ultimate.logic.SMTLIBException: Timeout exceeded
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$MixedLAInterpolator.convert(Interpolator.java:1288)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.cacheConvert(TermTransformer.java:131)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.access$0(TermTransformer.java:127)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer$Convert.walk(TermTransformer.java:79)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.transform(TermTransformer.java:253)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.mixedPivotLA(Interpolator.java:1478)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.combine(Interpolator.java:359)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.access$2(Interpolator.java:328)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$CombineInterpolants.walk(Interpolator.java:153)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.interpolate(Interpolator.java:220)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.getInterpolants(Interpolator.java:201)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.smtlib2.SMTInterpol.getInterpolants(SMTInterpol.java:919)
	at de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.managedscript.ManagedScript.getInterpolants(ManagedScript.java:200)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.computeCraigInterpolants(NestedInterpolantsBuilder.java:303)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:167)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:182)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolantsTree(InterpolatingTraceCheckCraig.java:271)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolants(InterpolatingTraceCheckCraig.java:207)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.<init>(InterpolatingTraceCheckCraig.java:109)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructCraig(TraceCheckConstructor.java:211)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructTraceCheck(TraceCheckConstructor.java:183)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.get(TraceCheckConstructor.java:165)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.FixedRefinementStrategy.getTraceCheck(FixedRefinementStrategy.java:134)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.checkFeasibility(BaseRefinementStrategy.java:223)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.executeStrategy(BaseRefinementStrategy.java:197)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceAbstractionRefinementEngine.<init>(TraceAbstractionRefinementEngine.java:70)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkFeasibilityAndComputeInterpolants(LassoCheck.java:1126)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkStemFeasibility(LassoCheck.java:1080)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:994)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-25 07:13:44,495 INFO  L168              Benchmark]: Toolchain (without parser) took 898724.13 ms. Allocated memory was 1.0 GB in the beginning and 6.6 GB in the end (delta: 5.5 GB). Free memory was 935.2 MB in the beginning and 4.6 GB in the end (delta: -3.7 GB). Peak memory consumption was 6.2 GB. Max. memory is 15.3 GB.
[2020-11-25 07:13:44,496 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 07:13:44,496 INFO  L168              Benchmark]: Boogie Preprocessor took 101.00 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 07:13:44,497 INFO  L168              Benchmark]: UtopiaSpecLang took 73.01 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.0 MB in the end (delta: 5.5 MB). Peak memory consumption was 5.5 MB. Max. memory is 15.3 GB.
[2020-11-25 07:13:44,497 INFO  L168              Benchmark]: Boogie Printer took 18.24 ms. Allocated memory is still 1.0 GB. Free memory was 919.0 MB in the beginning and 913.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 07:13:44,497 INFO  L168              Benchmark]: RCFGBuilder took 754.22 ms. Allocated memory is still 1.0 GB. Free memory was 913.6 MB in the beginning and 784.7 MB in the end (delta: 128.9 MB). Peak memory consumption was 128.9 MB. Max. memory is 15.3 GB.
[2020-11-25 07:13:44,497 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.74 ms. Allocated memory is still 1.0 GB. Free memory was 784.7 MB in the beginning and 781.2 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
[2020-11-25 07:13:44,498 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1247.11 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 195.0 MB). Free memory was 781.2 MB in the beginning and 933.2 MB in the end (delta: -152.1 MB). Peak memory consumption was 165.4 MB. Max. memory is 15.3 GB.
[2020-11-25 07:13:44,498 INFO  L168              Benchmark]: BlockEncodingV2 took 172.93 ms. Allocated memory is still 1.2 GB. Free memory was 933.2 MB in the beginning and 862.2 MB in the end (delta: 71.0 MB). Peak memory consumption was 71.0 MB. Max. memory is 15.3 GB.
[2020-11-25 07:13:44,498 INFO  L168              Benchmark]: BuchiAutomizer took 896317.07 ms. Allocated memory was 1.2 GB in the beginning and 6.6 GB in the end (delta: 5.3 GB). Free memory was 862.2 MB in the beginning and 4.6 GB in the end (delta: -3.8 GB). Peak memory consumption was 5.9 GB. Max. memory is 15.3 GB.
[2020-11-25 07:13:44,501 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    4558 locations, 8195 edges
  - StatisticsResult: Encoded RCFG
    4468 locations, 7945 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.15 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 101.00 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 73.01 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.0 MB in the end (delta: 5.5 MB). Peak memory consumption was 5.5 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 18.24 ms. Allocated memory is still 1.0 GB. Free memory was 919.0 MB in the beginning and 913.6 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 754.22 ms. Allocated memory is still 1.0 GB. Free memory was 913.6 MB in the beginning and 784.7 MB in the end (delta: 128.9 MB). Peak memory consumption was 128.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.74 ms. Allocated memory is still 1.0 GB. Free memory was 784.7 MB in the beginning and 781.2 MB in the end (delta: 3.6 MB). Peak memory consumption was 3.6 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1247.11 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 195.0 MB). Free memory was 781.2 MB in the beginning and 933.2 MB in the end (delta: -152.1 MB). Peak memory consumption was 165.4 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 172.93 ms. Allocated memory is still 1.2 GB. Free memory was 933.2 MB in the beginning and 862.2 MB in the end (delta: 71.0 MB). Peak memory consumption was 71.0 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 896317.07 ms. Allocated memory was 1.2 GB in the beginning and 6.6 GB in the end (delta: 5.3 GB). Free memory was 862.2 MB in the beginning and 4.6 GB in the end (delta: -3.8 GB). Peak memory consumption was 5.9 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1825 locations, 2511 edges
  - StatisticsResult: BuchiProgram size
    4558 locations, 8195 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: SMTLIBException: Timeout exceeded
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: SMTLIBException: Timeout exceeded: de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Completed graceful shutdown
