This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 01:33:21,138 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 01:33:21,140 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 01:33:21,152 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 01:33:21,152 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 01:33:21,153 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 01:33:21,154 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 01:33:21,155 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 01:33:21,157 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 01:33:21,158 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 01:33:21,158 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 01:33:21,159 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 01:33:21,159 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 01:33:21,160 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 01:33:21,161 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 01:33:21,161 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 01:33:21,162 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 01:33:21,163 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 01:33:21,165 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 01:33:21,166 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 01:33:21,167 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 01:33:21,167 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 01:33:21,170 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 01:33:21,170 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 01:33:21,170 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 01:33:21,170 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 01:33:21,171 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 01:33:21,171 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 01:33:21,172 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 01:33:21,172 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 01:33:21,172 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 01:33:21,173 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 01:33:21,173 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 01:33:21,174 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 01:33:21,175 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 01:33:21,175 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 01:33:21,175 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 01:33:21,175 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 01:33:21,176 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 01:33:21,176 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 01:33:21,177 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 01:33:21,177 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 01:33:21,185 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 01:33:21,185 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 01:33:21,186 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 01:33:21,186 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 01:33:21,187 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 01:33:21,187 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 01:33:21,187 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 01:33:21,187 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 01:33:21,187 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 01:33:21,187 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 01:33:21,187 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 01:33:21,187 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 01:33:21,188 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 01:33:21,188 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 01:33:21,188 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 01:33:21,188 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 01:33:21,188 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 01:33:21,188 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 01:33:21,188 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 01:33:21,188 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 01:33:21,189 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 01:33:21,189 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 01:33:21,189 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 01:33:21,189 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 01:33:21,189 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 01:33:21,189 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 01:33:21,211 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 01:33:21,222 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 01:33:21,224 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 01:33:21,225 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 01:33:21,226 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 01:33:21,226 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/MRDF_0x5f3e90b7ecfbc4f63b60c55ec0e825a927467bcc_transfer-fail.bpl
[2020-11-25 01:33:21,227 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/MRDF_0x5f3e90b7ecfbc4f63b60c55ec0e825a927467bcc_transfer-fail.bpl'
[2020-11-25 01:33:21,302 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 01:33:21,303 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 01:33:21,304 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 01:33:21,304 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 01:33:21,304 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 01:33:21,321 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "MRDF_0x5f3e90b7ecfbc4f63b60c55ec0e825a927467bcc_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:33:21" (1/1) ...
[2020-11-25 01:33:21,323 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "MRDF_0x5f3e90b7ecfbc4f63b60c55ec0e825a927467bcc_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:33:21" (1/1) ...
[2020-11-25 01:33:21,357 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "MRDF_0x5f3e90b7ecfbc4f63b60c55ec0e825a927467bcc_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:33:21" (1/1) ...
[2020-11-25 01:33:21,358 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "MRDF_0x5f3e90b7ecfbc4f63b60c55ec0e825a927467bcc_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:33:21" (1/1) ...
[2020-11-25 01:33:21,378 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "MRDF_0x5f3e90b7ecfbc4f63b60c55ec0e825a927467bcc_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:33:21" (1/1) ...
[2020-11-25 01:33:21,389 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "MRDF_0x5f3e90b7ecfbc4f63b60c55ec0e825a927467bcc_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:33:21" (1/1) ...
[2020-11-25 01:33:21,395 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "MRDF_0x5f3e90b7ecfbc4f63b60c55ec0e825a927467bcc_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:33:21" (1/1) ...
[2020-11-25 01:33:21,404 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 01:33:21,404 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 01:33:21,404 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 01:33:21,406 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 01:33:21,410 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "MRDF_0x5f3e90b7ecfbc4f63b60c55ec0e825a927467bcc_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:33:21" (1/1) ...
[2020-11-25 01:33:21,427 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(MRDF.transfer(to, value), msg.sender != to && (value > _balances_MRDF[this][msg.sender] || _balances_MRDF[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_MRDF[this][to] >= 0 && _balances_MRDF[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_MRDF[this][msg.sender] >= 0 &&  _balances_MRDF[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(MRDF.transfer)))
[2020-11-25 01:33:21,433 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(MRDF.transfer(to, value), msg.sender != to && (value > _balances_MRDF[this][msg.sender] || _balances_MRDF[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_MRDF[this][to] >= 0 && _balances_MRDF[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_MRDF[this][msg.sender] >= 0 &&  _balances_MRDF[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(MRDF.transfer)))
[2020-11-25 01:33:21,440 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(MRDF.transfer(to, value), msg.sender != to && (value > _balances_MRDF[this][msg.sender] || _balances_MRDF[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_MRDF[this][to] >= 0 && _balances_MRDF[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_MRDF[this][msg.sender] >= 0 &&  _balances_MRDF[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(MRDF.transfer)))
[2020-11-25 01:33:21,447 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( msg.sender!=_to_s342 && ( _value_s342>_balances_MRDF[this][msg.sender] || ( _balances_MRDF[this][_to_s342] + _value_s342 )>=115792089237316195423570985008687907853269984665640564039457584007913129639936 ) ) && _value_s342>=0 ) && _value_s342<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_MRDF[this][_to_s342]>=0 ) && _balances_MRDF[this][_to_s342]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_MRDF[this][msg.sender]>=0 ) && _balances_MRDF[this][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MRDF>],IdentifierExpression[_to_s342,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MRDF>]],BinaryExpression[LOGICOR,BinaryExpression[COMPGT,IdentifierExpression[_value_s342,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MRDF>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_MRDF,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MRDF>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MRDF>]]]],BinaryExpression[COMPGEQ,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_MRDF,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MRDF>]]],[IdentifierExpression[_to_s342,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MRDF>]]],IdentifierExpression[_value_s342,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MRDF>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]],BinaryExpression[COMPGEQ,IdentifierExpression[_value_s342,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MRDF>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[_value_s342,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MRDF>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_MRDF,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MRDF>]]],[IdentifierExpression[_to_s342,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MRDF>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_MRDF,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MRDF>]]],[IdentifierExpression[_to_s342,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MRDF>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_MRDF,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MRDF>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MRDF>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_MRDF,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MRDF>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transfer~address~uint256_MRDF>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 01:33:21,452 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(MRDF.transfer(to, value), msg.sender != to && (value > _balances_MRDF[this][msg.sender] || _balances_MRDF[this][to] + value >= 0x10000000000000000000000000000000000000000000000000000000000000000) && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_MRDF[this][to] >= 0 && _balances_MRDF[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_MRDF[this][msg.sender] >= 0 &&  _balances_MRDF[this][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(reverted(MRDF.transfer)))
[2020-11-25 01:33:21,452 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transfer_MRDF0) ==> ( <>AP(fail_transfer_MRDF0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 01:33:21,460 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:33:21 PropertyContainer
[2020-11-25 01:33:21,460 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 01:33:21,461 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 01:33:21,461 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 01:33:21,461 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 01:33:21,462 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "MRDF_0x5f3e90b7ecfbc4f63b60c55ec0e825a927467bcc_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:33:21" (1/2) ...
[2020-11-25 01:33:21,462 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 01:33:21,462 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 01:33:21,474 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:33:21" (2/2) ...
[2020-11-25 01:33:21,474 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 01:33:21,476 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 01:33:21,476 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 01:33:21,476 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 01:33:21,476 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "MRDF_0x5f3e90b7ecfbc4f63b60c55ec0e825a927467bcc_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:33:21" (1/2) ...
[2020-11-25 01:33:21,529 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 01:33:21,530 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 01:33:21,530 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 01:33:21,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 01:33:21,530 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 01:33:21,530 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 01:33:21,530 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 01:33:21,530 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 01:33:21,530 INFO  L130     BoogieDeclarations]: Found specification of procedure _assert~bool_SafeMath__success
[2020-11-25 01:33:21,530 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 01:33:21,530 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 01:33:21,530 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 01:33:21,531 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 01:33:21,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 01:33:21,531 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 01:33:21,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 01:33:21,531 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 01:33:21,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 01:33:21,531 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 01:33:21,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 01:33:21,531 INFO  L130     BoogieDeclarations]: Found specification of procedure MRDF_MRDF_NoBaseCtor__success
[2020-11-25 01:33:21,531 INFO  L130     BoogieDeclarations]: Found specification of procedure MRDF_MRDF
[2020-11-25 01:33:21,531 INFO  L138     BoogieDeclarations]: Found implementation of procedure MRDF_MRDF
[2020-11-25 01:33:21,532 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_MRDF
[2020-11-25 01:33:21,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_MRDF
[2020-11-25 01:33:21,532 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MRDF
[2020-11-25 01:33:21,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MRDF
[2020-11-25 01:33:21,532 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_MRDF
[2020-11-25 01:33:21,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_MRDF
[2020-11-25 01:33:21,532 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MRDF
[2020-11-25 01:33:21,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MRDF
[2020-11-25 01:33:21,532 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_MRDF
[2020-11-25 01:33:21,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_MRDF
[2020-11-25 01:33:21,532 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_MRDF
[2020-11-25 01:33:21,532 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_MRDF
[2020-11-25 01:33:21,533 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MRDF
[2020-11-25 01:33:21,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MRDF
[2020-11-25 01:33:21,533 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MRDF
[2020-11-25 01:33:21,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MRDF
[2020-11-25 01:33:21,533 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MRDF
[2020-11-25 01:33:21,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MRDF
[2020-11-25 01:33:21,533 INFO  L130     BoogieDeclarations]: Found specification of procedure _allowed~address~address_MRDF
[2020-11-25 01:33:21,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure _allowed~address~address_MRDF
[2020-11-25 01:33:21,533 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_MRDF
[2020-11-25 01:33:21,533 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_MRDF
[2020-11-25 01:33:21,533 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 01:33:21,533 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 01:33:21,533 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 01:33:21,534 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 01:33:21,534 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 01:33:21,534 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 01:33:21,534 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 01:33:21,534 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 01:33:21,534 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MRDF
[2020-11-25 01:33:21,534 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 01:33:21,534 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 01:33:21,534 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 01:33:21,534 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 01:33:21,534 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 01:33:21,534 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 01:33:21,534 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 01:33:21,535 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 01:33:21,535 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 01:33:21,535 INFO  L130     BoogieDeclarations]: Found specification of procedure _assert~bool_SafeMath__fail
[2020-11-25 01:33:21,535 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 01:33:21,535 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 01:33:21,535 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 01:33:21,535 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 01:33:21,535 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 01:33:21,535 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 01:33:21,535 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 01:33:21,535 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 01:33:21,535 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 01:33:21,535 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 01:33:21,536 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 01:33:21,536 INFO  L130     BoogieDeclarations]: Found specification of procedure MRDF_MRDF_NoBaseCtor__fail
[2020-11-25 01:33:21,536 INFO  L130     BoogieDeclarations]: Found specification of procedure MRDF_MRDF__success
[2020-11-25 01:33:21,536 INFO  L130     BoogieDeclarations]: Found specification of procedure MRDF_MRDF__fail
[2020-11-25 01:33:21,536 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_MRDF__success
[2020-11-25 01:33:21,536 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_MRDF__fail
[2020-11-25 01:33:21,536 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MRDF__success
[2020-11-25 01:33:21,536 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MRDF__fail
[2020-11-25 01:33:21,536 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_MRDF__success
[2020-11-25 01:33:21,536 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_MRDF__fail
[2020-11-25 01:33:21,536 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MRDF__success
[2020-11-25 01:33:21,536 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MRDF__fail
[2020-11-25 01:33:21,537 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_MRDF__success
[2020-11-25 01:33:21,537 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_MRDF__fail
[2020-11-25 01:33:21,537 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_MRDF__success
[2020-11-25 01:33:21,537 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_MRDF__fail
[2020-11-25 01:33:21,537 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MRDF__success
[2020-11-25 01:33:21,537 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MRDF__fail
[2020-11-25 01:33:21,537 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MRDF__success
[2020-11-25 01:33:21,537 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MRDF__fail
[2020-11-25 01:33:21,537 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MRDF__success
[2020-11-25 01:33:21,537 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MRDF__fail
[2020-11-25 01:33:21,537 INFO  L130     BoogieDeclarations]: Found specification of procedure _allowed~address~address_MRDF__success
[2020-11-25 01:33:21,537 INFO  L130     BoogieDeclarations]: Found specification of procedure _allowed~address~address_MRDF__fail
[2020-11-25 01:33:21,538 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_MRDF__success
[2020-11-25 01:33:21,538 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_MRDF__fail
[2020-11-25 01:33:21,538 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 01:33:21,538 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 01:33:21,538 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 01:33:21,538 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 01:33:21,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 01:33:21,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 01:33:21,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 01:33:21,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 01:33:21,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 01:33:21,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 01:33:21,538 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 01:33:21,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 01:33:21,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 01:33:21,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 01:33:21,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 01:33:21,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 01:33:21,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 01:33:21,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 01:33:21,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure _assert~bool_SafeMath__fail
[2020-11-25 01:33:21,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure _assert~bool_SafeMath__success
[2020-11-25 01:33:21,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 01:33:21,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 01:33:21,539 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 01:33:21,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 01:33:21,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 01:33:21,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 01:33:21,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 01:33:21,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 01:33:21,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 01:33:21,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 01:33:21,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 01:33:21,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 01:33:21,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure MRDF_MRDF_NoBaseCtor__fail
[2020-11-25 01:33:21,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure MRDF_MRDF_NoBaseCtor__success
[2020-11-25 01:33:21,540 INFO  L138     BoogieDeclarations]: Found implementation of procedure MRDF_MRDF__fail
[2020-11-25 01:33:21,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure MRDF_MRDF__success
[2020-11-25 01:33:21,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_MRDF__fail
[2020-11-25 01:33:21,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_MRDF__success
[2020-11-25 01:33:21,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MRDF__fail
[2020-11-25 01:33:21,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MRDF__success
[2020-11-25 01:33:21,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_MRDF__fail
[2020-11-25 01:33:21,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_MRDF__success
[2020-11-25 01:33:21,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MRDF__fail
[2020-11-25 01:33:21,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MRDF__success
[2020-11-25 01:33:21,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_MRDF__fail
[2020-11-25 01:33:21,541 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_MRDF__success
[2020-11-25 01:33:21,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_MRDF__fail
[2020-11-25 01:33:21,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_MRDF__success
[2020-11-25 01:33:21,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MRDF__fail
[2020-11-25 01:33:21,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MRDF__success
[2020-11-25 01:33:21,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MRDF__fail
[2020-11-25 01:33:21,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MRDF__success
[2020-11-25 01:33:21,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MRDF__fail
[2020-11-25 01:33:21,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MRDF__success
[2020-11-25 01:33:21,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure _allowed~address~address_MRDF__fail
[2020-11-25 01:33:21,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure _allowed~address~address_MRDF__success
[2020-11-25 01:33:21,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_MRDF__fail
[2020-11-25 01:33:21,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_MRDF__success
[2020-11-25 01:33:21,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 01:33:21,542 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 01:33:21,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 01:33:21,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 01:33:21,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 01:33:21,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 01:33:21,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 01:33:21,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 01:33:21,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 01:33:21,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 01:33:21,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 01:33:21,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 01:33:21,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MRDF
[2020-11-25 01:33:21,543 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 01:33:21,543 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 01:33:21,544 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 01:33:21,909 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:33:21,910 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 01:33:22,167 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 01:33:22,167 INFO  L286             CfgBuilder]: Removed 3 assue(true) statements.
[2020-11-25 01:33:22,169 INFO  L202        PluginConnector]: Adding new model MRDF_0x5f3e90b7ecfbc4f63b60c55ec0e825a927467bcc_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:33:22 BoogieIcfgContainer
[2020-11-25 01:33:22,169 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:33:21" (2/2) ...
[2020-11-25 01:33:22,169 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 01:33:22,170 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@5300448d and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:33:22, skipping insertion in model container
[2020-11-25 01:33:22,170 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 01:33:22,170 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 01:33:22,170 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 01:33:22,171 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 01:33:22,172 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "MRDF_0x5f3e90b7ecfbc4f63b60c55ec0e825a927467bcc_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:33:21" (1/3) ...
[2020-11-25 01:33:22,172 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@41326f39 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:33:22, skipping insertion in model container
[2020-11-25 01:33:22,172 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:33:21" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 01:33:22,208 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:33:22 NWAContainer
[2020-11-25 01:33:22,208 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 01:33:22,208 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 01:33:22,208 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 01:33:22,209 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 01:33:22,210 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "MRDF_0x5f3e90b7ecfbc4f63b60c55ec0e825a927467bcc_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:33:22" (3/4) ...
[2020-11-25 01:33:22,211 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@28a5680c and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:33:22, skipping insertion in model container
[2020-11-25 01:33:22,211 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:33:22" (4/4) ...
[2020-11-25 01:33:22,214 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 01:33:22,217 INFO  L110   BuchiProductObserver]: Initial RCFG 1238 locations, 1609 edges
[2020-11-25 01:33:22,218 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 01:33:22,228 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 01:33:23,324 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 01:33:23,329 INFO  L110   BuchiProductObserver]: BuchiProgram size 2982 locations, 5228 edges
[2020-11-25 01:33:23,329 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:33:23 BoogieIcfgContainer
[2020-11-25 01:33:23,329 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 01:33:23,329 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 01:33:23,329 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 01:33:23,331 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 01:33:23,331 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:33:23" (1/1) ...
[2020-11-25 01:33:23,403 INFO  L313           BlockEncoder]: Initial Icfg 2982 locations, 5228 edges
[2020-11-25 01:33:23,404 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 01:33:23,404 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 01:33:23,405 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 01:33:23,405 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 01:33:23,414 INFO  L70    emoveInfeasibleEdges]: Removed 105 edges and 10 locations because of local infeasibility
[2020-11-25 01:33:23,421 INFO  L70        RemoveSinkStates]: Removed 148 edges and 84 locations by removing sink states
[2020-11-25 01:33:23,430 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 01:33:23,435 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 01:33:23,437 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 01:33:23,438 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 01:33:23,442 INFO  L313           BlockEncoder]: Encoded RCFG 2870 locations, 4949 edges
[2020-11-25 01:33:23,442 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:33:23 BasicIcfg
[2020-11-25 01:33:23,442 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 01:33:23,443 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 01:33:23,443 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 01:33:23,445 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 01:33:23,445 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:33:23,445 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MRDF_0x5f3e90b7ecfbc4f63b60c55ec0e825a927467bcc_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 01:33:21" (1/6) ...
[2020-11-25 01:33:23,446 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@32ef369 and model type MRDF_0x5f3e90b7ecfbc4f63b60c55ec0e825a927467bcc_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:33:23, skipping insertion in model container
[2020-11-25 01:33:23,447 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:33:23,447 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 01:33:21" (2/6) ...
[2020-11-25 01:33:23,447 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@32ef369 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:33:23, skipping insertion in model container
[2020-11-25 01:33:23,447 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:33:23,447 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MRDF_0x5f3e90b7ecfbc4f63b60c55ec0e825a927467bcc_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 01:33:22" (3/6) ...
[2020-11-25 01:33:23,447 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@32ef369 and model type MRDF_0x5f3e90b7ecfbc4f63b60c55ec0e825a927467bcc_transfer-fail.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:33:23, skipping insertion in model container
[2020-11-25 01:33:23,447 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:33:23,447 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 01:33:22" (4/6) ...
[2020-11-25 01:33:23,447 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@32ef369 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 01:33:23, skipping insertion in model container
[2020-11-25 01:33:23,447 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:33:23,448 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 01:33:23" (5/6) ...
[2020-11-25 01:33:23,448 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@32ef369 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 01:33:23, skipping insertion in model container
[2020-11-25 01:33:23,448 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 01:33:23,448 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 01:33:23" (6/6) ...
[2020-11-25 01:33:23,449 INFO  L404   chiAutomizerObserver]: Analyzing ICFG MRDF_0x5f3e90b7ecfbc4f63b60c55ec0e825a927467bcc_transfer-fail.bpl_BEv2
[2020-11-25 01:33:23,515 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 01:33:23,515 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 01:33:23,515 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 01:33:23,515 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 01:33:23,515 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 01:33:23,515 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 01:33:23,515 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 01:33:23,516 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 01:33:23,516 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 01:33:23,546 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2870 states.
[2020-11-25 01:33:23,587 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:33:23,587 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:33:23,587 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:33:23,594 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:33:23,594 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:33:23,594 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 01:33:23,594 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2870 states.
[2020-11-25 01:33:23,608 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:33:23,608 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:33:23,608 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:33:23,610 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:33:23,610 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND TRUE   revert
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:33:23,628 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:33:23,629 INFO  L82        PathProgramCache]: Analyzing trace with hash 1755590286, now seen corresponding path program 1 times
[2020-11-25 01:33:23,635 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:33:23,659 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:33:23,708 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:33:23,710 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:33:23,710 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 01:33:23,714 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:33:23,831 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:33:23,831 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:33:23,833 INFO  L87              Difference]: Start difference. First operand 2870 states. Second operand 4 states.
[2020-11-25 01:33:24,182 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:33:24,182 INFO  L93              Difference]: Finished difference Result 2024 states and 2253 transitions.
[2020-11-25 01:33:24,182 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 01:33:24,184 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2024 states and 2253 transitions.
[2020-11-25 01:33:24,198 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:33:24,216 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2024 states to 2024 states and 2253 transitions.
[2020-11-25 01:33:24,217 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 3
[2020-11-25 01:33:24,220 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 646
[2020-11-25 01:33:24,220 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2024 states and 2253 transitions.
[2020-11-25 01:33:24,228 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:33:24,228 INFO  L728         BuchiCegarLoop]: Abstraction has 2024 states and 2253 transitions.
[2020-11-25 01:33:24,245 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2024 states and 2253 transitions.
[2020-11-25 01:33:24,287 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2024 to 2024.
[2020-11-25 01:33:24,288 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2024 states.
[2020-11-25 01:33:24,293 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2024 states to 2024 states and 2253 transitions.
[2020-11-25 01:33:24,294 INFO  L751         BuchiCegarLoop]: Abstraction has 2024 states and 2253 transitions.
[2020-11-25 01:33:24,294 INFO  L631         BuchiCegarLoop]: Abstraction has 2024 states and 2253 transitions.
[2020-11-25 01:33:24,294 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 01:33:24,294 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2024 states and 2253 transitions.
[2020-11-25 01:33:24,301 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:33:24,301 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:33:24,302 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:33:24,304 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:33:24,304 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND TRUE   revert
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND TRUE   !(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0)
[L1972]              revert := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND TRUE   !(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0)
[L1972]              revert := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:33:24,308 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:33:24,308 INFO  L82        PathProgramCache]: Analyzing trace with hash -1954783618, now seen corresponding path program 1 times
[2020-11-25 01:33:24,309 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:33:24,320 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:33:24,345 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 01:33:24,345 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:33:24,345 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 01:33:24,346 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:33:24,347 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:33:24,347 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:33:24,347 INFO  L87              Difference]: Start difference. First operand 2024 states and 2253 transitions. cyclomatic complexity: 231 Second operand 4 states.
[2020-11-25 01:33:24,745 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:33:24,746 INFO  L93              Difference]: Finished difference Result 2632 states and 2948 transitions.
[2020-11-25 01:33:24,746 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 01:33:24,746 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2632 states and 2948 transitions.
[2020-11-25 01:33:24,761 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:33:24,772 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2632 states to 2492 states and 2778 transitions.
[2020-11-25 01:33:24,773 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 768
[2020-11-25 01:33:24,773 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 779
[2020-11-25 01:33:24,773 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2492 states and 2778 transitions.
[2020-11-25 01:33:24,777 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:33:24,777 INFO  L728         BuchiCegarLoop]: Abstraction has 2492 states and 2778 transitions.
[2020-11-25 01:33:24,780 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2492 states and 2778 transitions.
[2020-11-25 01:33:24,802 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2492 to 2200.
[2020-11-25 01:33:24,802 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2200 states.
[2020-11-25 01:33:24,805 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2200 states to 2200 states and 2412 transitions.
[2020-11-25 01:33:24,806 INFO  L751         BuchiCegarLoop]: Abstraction has 2200 states and 2412 transitions.
[2020-11-25 01:33:24,806 INFO  L631         BuchiCegarLoop]: Abstraction has 2200 states and 2412 transitions.
[2020-11-25 01:33:24,806 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 01:33:24,806 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2200 states and 2412 transitions.
[2020-11-25 01:33:24,811 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:33:24,811 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:33:24,811 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:33:24,813 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:33:24,813 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND FALSE  !(DType[this] == MRDF)
[L1684]  COND TRUE   DType[this] == SafeMath
[L1685]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1685]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1686]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND FALSE  !(DType[this] == MRDF)
[L1684]  COND TRUE   DType[this] == SafeMath
[L1685]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1685]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1686]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:33:24,817 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:33:24,817 INFO  L82        PathProgramCache]: Analyzing trace with hash -1027365058, now seen corresponding path program 1 times
[2020-11-25 01:33:24,818 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:33:24,833 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:33:24,879 INFO  L134       CoverageAnalysis]: Checked inductivity of 3 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3 trivial. 0 not checked.
[2020-11-25 01:33:24,879 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:33:24,879 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [6] imperfect sequences [] total 6
[2020-11-25 01:33:24,880 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:33:24,880 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:33:24,880 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:33:24,880 INFO  L87              Difference]: Start difference. First operand 2200 states and 2412 transitions. cyclomatic complexity: 214 Second operand 7 states.
[2020-11-25 01:33:25,002 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:33:25,003 INFO  L93              Difference]: Finished difference Result 2238 states and 2451 transitions.
[2020-11-25 01:33:25,003 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 01:33:25,003 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2238 states and 2451 transitions.
[2020-11-25 01:33:25,014 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:33:25,024 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2238 states to 2206 states and 2418 transitions.
[2020-11-25 01:33:25,024 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 712
[2020-11-25 01:33:25,024 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 712
[2020-11-25 01:33:25,025 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2206 states and 2418 transitions.
[2020-11-25 01:33:25,027 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:33:25,027 INFO  L728         BuchiCegarLoop]: Abstraction has 2206 states and 2418 transitions.
[2020-11-25 01:33:25,030 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2206 states and 2418 transitions.
[2020-11-25 01:33:25,053 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2206 to 2206.
[2020-11-25 01:33:25,053 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2206 states.
[2020-11-25 01:33:25,057 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2206 states to 2206 states and 2418 transitions.
[2020-11-25 01:33:25,057 INFO  L751         BuchiCegarLoop]: Abstraction has 2206 states and 2418 transitions.
[2020-11-25 01:33:25,057 INFO  L631         BuchiCegarLoop]: Abstraction has 2206 states and 2418 transitions.
[2020-11-25 01:33:25,057 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 01:33:25,058 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2206 states and 2418 transitions.
[2020-11-25 01:33:25,064 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:33:25,064 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:33:25,064 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:33:25,068 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:33:25,068 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:33:25,072 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:33:25,072 INFO  L82        PathProgramCache]: Analyzing trace with hash -2145970651, now seen corresponding path program 1 times
[2020-11-25 01:33:25,073 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:33:25,091 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:33:25,311 INFO  L134       CoverageAnalysis]: Checked inductivity of 3 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 01:33:25,311 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:33:25,311 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [15] total 15
[2020-11-25 01:33:25,312 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:33:25,312 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 16 interpolants.
[2020-11-25 01:33:25,312 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=35, Invalid=205, Unknown=0, NotChecked=0, Total=240
[2020-11-25 01:33:25,312 INFO  L87              Difference]: Start difference. First operand 2206 states and 2418 transitions. cyclomatic complexity: 214 Second operand 16 states.
[2020-11-25 01:33:26,858 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:33:26,858 INFO  L93              Difference]: Finished difference Result 2287 states and 2517 transitions.
[2020-11-25 01:33:26,858 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 15 states. 
[2020-11-25 01:33:26,858 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2287 states and 2517 transitions.
[2020-11-25 01:33:26,864 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 01:33:26,871 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2287 states to 2287 states and 2517 transitions.
[2020-11-25 01:33:26,871 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 727
[2020-11-25 01:33:26,872 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 727
[2020-11-25 01:33:26,872 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2287 states and 2517 transitions.
[2020-11-25 01:33:26,874 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:33:26,874 INFO  L728         BuchiCegarLoop]: Abstraction has 2287 states and 2517 transitions.
[2020-11-25 01:33:26,876 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2287 states and 2517 transitions.
[2020-11-25 01:33:26,891 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2287 to 2137.
[2020-11-25 01:33:26,891 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2137 states.
[2020-11-25 01:33:26,893 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2137 states to 2137 states and 2327 transitions.
[2020-11-25 01:33:26,893 INFO  L751         BuchiCegarLoop]: Abstraction has 2137 states and 2327 transitions.
[2020-11-25 01:33:26,893 INFO  L631         BuchiCegarLoop]: Abstraction has 2137 states and 2327 transitions.
[2020-11-25 01:33:26,893 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 01:33:26,893 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2137 states and 2327 transitions.
[2020-11-25 01:33:26,896 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:33:26,896 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:33:26,896 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:33:26,898 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:33:26,898 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:33:26,901 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:33:26,901 INFO  L82        PathProgramCache]: Analyzing trace with hash 2064811469, now seen corresponding path program 1 times
[2020-11-25 01:33:26,902 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:33:26,910 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:33:26,989 INFO  L134       CoverageAnalysis]: Checked inductivity of 11 backedges. 0 proven. 7 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-25 01:33:26,989 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:33:26,989 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [19] total 19
[2020-11-25 01:33:26,989 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:33:26,989 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 20 interpolants.
[2020-11-25 01:33:26,989 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=41, Invalid=339, Unknown=0, NotChecked=0, Total=380
[2020-11-25 01:33:26,990 INFO  L87              Difference]: Start difference. First operand 2137 states and 2327 transitions. cyclomatic complexity: 193 Second operand 20 states.
[2020-11-25 01:33:28,452 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:33:28,452 INFO  L93              Difference]: Finished difference Result 2196 states and 2398 transitions.
[2020-11-25 01:33:28,453 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 20 states. 
[2020-11-25 01:33:28,453 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2196 states and 2398 transitions.
[2020-11-25 01:33:28,457 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:33:28,465 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2196 states to 2196 states and 2398 transitions.
[2020-11-25 01:33:28,465 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 674
[2020-11-25 01:33:28,465 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 674
[2020-11-25 01:33:28,466 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2196 states and 2398 transitions.
[2020-11-25 01:33:28,468 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:33:28,468 INFO  L728         BuchiCegarLoop]: Abstraction has 2196 states and 2398 transitions.
[2020-11-25 01:33:28,470 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2196 states and 2398 transitions.
[2020-11-25 01:33:28,484 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2196 to 2128.
[2020-11-25 01:33:28,484 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2128 states.
[2020-11-25 01:33:28,487 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2128 states to 2128 states and 2313 transitions.
[2020-11-25 01:33:28,487 INFO  L751         BuchiCegarLoop]: Abstraction has 2128 states and 2313 transitions.
[2020-11-25 01:33:28,488 INFO  L631         BuchiCegarLoop]: Abstraction has 2128 states and 2313 transitions.
[2020-11-25 01:33:28,488 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 01:33:28,488 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2128 states and 2313 transitions.
[2020-11-25 01:33:28,491 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:33:28,491 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:33:28,491 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:33:28,492 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:33:28,492 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND TRUE   __exception
[L442]               __tmp__Balance := Balance;
[L443]               __tmp__DType := DType;
[L444]               __tmp__Alloc := Alloc;
[L445]               __tmp__balance_ADDR := balance_ADDR;
[L446]               __tmp__M_Ref_int := M_Ref_int;
[L447]               __tmp__sum__balances0 := sum__balances0;
[L448]               __tmp__alloc__allowed_MRDF_lvl0 := alloc__allowed_MRDF_lvl0;
[L449]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L450]               __tmp__sum__allowed1 := sum__allowed1;
[L451]               __tmp__Length := Length;
[L452]               __tmp__now := now;
[L453]               __tmp__owner_Owned := owner_Owned;
[L454]               __tmp__newOwner_Owned := newOwner_Owned;
[L455]               __tmp__name_MRDF := name_MRDF;
[L456]               __tmp__symbol_MRDF := symbol_MRDF;
[L457]               __tmp__decimals_MRDF := decimals_MRDF;
[L458]               __tmp___balances_MRDF := _balances_MRDF;
[L459]               __tmp___allowed_MRDF := _allowed_MRDF;
[L460]               __tmp__totalSupply_MRDF := totalSupply_MRDF;
[L461]   CALL        call MRDF_MRDF__fail(this, msgsender_MSG, msgvalue_MSG);
[L1863]  CALL        call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[L1492]  CALL        call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1477]              assume msgsender_MSG != null;
[L1478]              __tmp__Balance[this] := 0;
[L1492]  RET         call SafeMath_SafeMath_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1493]  COND FALSE  !(revert)
[L1863]  RET         call SafeMath_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG);
[L1864]  COND FALSE  !(revert)
[L1867]  CALL        call Owned_Owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L1736]  CALL        call Owned_Owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1715]              assume msgsender_MSG != null;
[L1716]              __tmp__Balance[this] := 0;
[L1717]              __tmp__owner_Owned[this] := null;
[L1718]              __tmp__newOwner_Owned[this] := null;
[L1720]              __tmp__owner_Owned[this] := msgsender_MSG;
[L1736]  RET         call Owned_Owned_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1737]  COND FALSE  !(revert)
[L1867]  RET         call Owned_Owned__fail(this, msgsender_MSG, msgvalue_MSG);
[L1868]  COND FALSE  !(revert)
[L1871]  CALL        call MRDF_MRDF_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1821]              assume msgsender_MSG != null;
[L1822]              __tmp__Balance[this] := 0;
[L1823]              __tmp__name_MRDF[this] := 1027038588;
[L1824]              __tmp__symbol_MRDF[this] := 671542533;
[L1825]              __tmp__decimals_MRDF[this] := 18;
[L1826]              __tmp___balances_MRDF[this] := zeroRefintArr();
[L1827]              __tmp__sum__balances0[this] := 0;
[L1828]              __tmp___allowed_MRDF[this] := zeroRefRefintArr();
[L1829]              __tmp__sum__allowed1[this] := 0;
[L1830]              __var_2 := __tmp__decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1831]              __tmp__totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, __tmp__decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1833]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] - __tmp___balances_MRDF[this][msgsender_MSG];
[L1834]              __tmp___balances_MRDF[this][msgsender_MSG] := __tmp__totalSupply_MRDF[this];
[L1835]              __tmp__sum__balances0[this] := __tmp__sum__balances0[this] + __tmp___balances_MRDF[this][msgsender_MSG];
[L1871]  RET         call MRDF_MRDF_NoBaseCtor__fail(this, msgsender_MSG, msgvalue_MSG);
[L1872]  COND FALSE  !(revert)
[L461]   RET         call MRDF_MRDF__fail(this, msgsender_MSG, msgvalue_MSG);
[L462]               assume revert || gas < 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:33:28,496 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:33:28,496 INFO  L82        PathProgramCache]: Analyzing trace with hash 835665260, now seen corresponding path program 1 times
[2020-11-25 01:33:28,496 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:33:28,505 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:33:28,538 INFO  L134       CoverageAnalysis]: Checked inductivity of 3 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 3 trivial. 0 not checked.
[2020-11-25 01:33:28,538 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:33:28,538 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 01:33:28,538 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:33:28,539 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 01:33:28,539 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=6, Invalid=6, Unknown=0, NotChecked=0, Total=12
[2020-11-25 01:33:28,539 INFO  L87              Difference]: Start difference. First operand 2128 states and 2313 transitions. cyclomatic complexity: 188 Second operand 4 states.
[2020-11-25 01:33:28,712 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:33:28,713 INFO  L93              Difference]: Finished difference Result 2692 states and 3037 transitions.
[2020-11-25 01:33:28,713 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 01:33:28,713 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2692 states and 3037 transitions.
[2020-11-25 01:33:28,720 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 01:33:28,730 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2692 states to 2612 states and 2957 transitions.
[2020-11-25 01:33:28,730 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 830
[2020-11-25 01:33:28,731 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 830
[2020-11-25 01:33:28,731 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2612 states and 2957 transitions.
[2020-11-25 01:33:28,733 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:33:28,734 INFO  L728         BuchiCegarLoop]: Abstraction has 2612 states and 2957 transitions.
[2020-11-25 01:33:28,736 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2612 states and 2957 transitions.
[2020-11-25 01:33:28,751 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2612 to 2048.
[2020-11-25 01:33:28,751 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2048 states.
[2020-11-25 01:33:28,754 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2048 states to 2048 states and 2232 transitions.
[2020-11-25 01:33:28,754 INFO  L751         BuchiCegarLoop]: Abstraction has 2048 states and 2232 transitions.
[2020-11-25 01:33:28,754 INFO  L631         BuchiCegarLoop]: Abstraction has 2048 states and 2232 transitions.
[2020-11-25 01:33:28,754 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 01:33:28,754 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2048 states and 2232 transitions.
[2020-11-25 01:33:28,757 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:33:28,757 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:33:28,757 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:33:28,759 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:33:28,759 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:33:28,763 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:33:28,763 INFO  L82        PathProgramCache]: Analyzing trace with hash -837099809, now seen corresponding path program 1 times
[2020-11-25 01:33:28,764 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:33:28,781 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:33:28,957 INFO  L134       CoverageAnalysis]: Checked inductivity of 68 backedges. 0 proven. 2 refuted. 0 times theorem prover too weak. 66 trivial. 0 not checked.
[2020-11-25 01:33:28,957 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:33:28,957 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [19] total 19
[2020-11-25 01:33:28,957 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:33:28,957 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 20 interpolants.
[2020-11-25 01:33:28,958 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=46, Invalid=334, Unknown=0, NotChecked=0, Total=380
[2020-11-25 01:33:28,958 INFO  L87              Difference]: Start difference. First operand 2048 states and 2232 transitions. cyclomatic complexity: 187 Second operand 20 states.
[2020-11-25 01:33:30,434 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:33:30,434 INFO  L93              Difference]: Finished difference Result 2106 states and 2301 transitions.
[2020-11-25 01:33:30,434 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 19 states. 
[2020-11-25 01:33:30,434 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2106 states and 2301 transitions.
[2020-11-25 01:33:30,438 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:33:30,442 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2106 states to 2106 states and 2301 transitions.
[2020-11-25 01:33:30,442 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 676
[2020-11-25 01:33:30,442 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 676
[2020-11-25 01:33:30,442 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2106 states and 2301 transitions.
[2020-11-25 01:33:30,443 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:33:30,443 INFO  L728         BuchiCegarLoop]: Abstraction has 2106 states and 2301 transitions.
[2020-11-25 01:33:30,445 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2106 states and 2301 transitions.
[2020-11-25 01:33:30,454 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2106 to 2070.
[2020-11-25 01:33:30,454 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2070 states.
[2020-11-25 01:33:30,455 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2070 states to 2070 states and 2264 transitions.
[2020-11-25 01:33:30,455 INFO  L751         BuchiCegarLoop]: Abstraction has 2070 states and 2264 transitions.
[2020-11-25 01:33:30,455 INFO  L631         BuchiCegarLoop]: Abstraction has 2070 states and 2264 transitions.
[2020-11-25 01:33:30,455 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 01:33:30,456 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2070 states and 2264 transitions.
[2020-11-25 01:33:30,459 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:33:30,459 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:33:30,459 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:33:30,460 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:33:30,460 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:33:30,465 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:33:30,465 INFO  L82        PathProgramCache]: Analyzing trace with hash 472867207, now seen corresponding path program 1 times
[2020-11-25 01:33:30,466 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:33:30,478 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:33:30,601 INFO  L134       CoverageAnalysis]: Checked inductivity of 76 backedges. 0 proven. 23 refuted. 0 times theorem prover too weak. 53 trivial. 0 not checked.
[2020-11-25 01:33:30,602 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:33:30,602 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [24] total 24
[2020-11-25 01:33:30,602 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:33:30,602 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-25 01:33:30,602 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=65, Invalid=535, Unknown=0, NotChecked=0, Total=600
[2020-11-25 01:33:30,602 INFO  L87              Difference]: Start difference. First operand 2070 states and 2264 transitions. cyclomatic complexity: 198 Second operand 25 states.
[2020-11-25 01:33:32,192 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:33:32,192 INFO  L93              Difference]: Finished difference Result 2122 states and 2326 transitions.
[2020-11-25 01:33:32,192 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 24 states. 
[2020-11-25 01:33:32,192 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2122 states and 2326 transitions.
[2020-11-25 01:33:32,198 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:33:32,203 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2122 states to 2122 states and 2326 transitions.
[2020-11-25 01:33:32,203 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 676
[2020-11-25 01:33:32,203 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 676
[2020-11-25 01:33:32,203 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2122 states and 2326 transitions.
[2020-11-25 01:33:32,204 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:33:32,205 INFO  L728         BuchiCegarLoop]: Abstraction has 2122 states and 2326 transitions.
[2020-11-25 01:33:32,206 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2122 states and 2326 transitions.
[2020-11-25 01:33:32,217 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2122 to 2072.
[2020-11-25 01:33:32,217 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2072 states.
[2020-11-25 01:33:32,219 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2072 states to 2072 states and 2269 transitions.
[2020-11-25 01:33:32,219 INFO  L751         BuchiCegarLoop]: Abstraction has 2072 states and 2269 transitions.
[2020-11-25 01:33:32,219 INFO  L631         BuchiCegarLoop]: Abstraction has 2072 states and 2269 transitions.
[2020-11-25 01:33:32,219 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 01:33:32,219 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2072 states and 2269 transitions.
[2020-11-25 01:33:32,222 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:33:32,222 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:33:32,222 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:33:32,223 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:33:32,223 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:33:32,227 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:33:32,227 INFO  L82        PathProgramCache]: Analyzing trace with hash 996240062, now seen corresponding path program 1 times
[2020-11-25 01:33:32,227 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:33:32,255 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:33:32,360 INFO  L134       CoverageAnalysis]: Checked inductivity of 69 backedges. 2 proven. 2 refuted. 0 times theorem prover too weak. 65 trivial. 0 not checked.
[2020-11-25 01:33:32,360 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:33:32,360 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-11-25 01:33:32,360 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:33:32,360 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 01:33:32,360 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=26, Invalid=106, Unknown=0, NotChecked=0, Total=132
[2020-11-25 01:33:32,361 INFO  L87              Difference]: Start difference. First operand 2072 states and 2269 transitions. cyclomatic complexity: 202 Second operand 12 states.
[2020-11-25 01:33:33,070 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:33:33,070 INFO  L93              Difference]: Finished difference Result 2106 states and 2306 transitions.
[2020-11-25 01:33:33,070 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 01:33:33,070 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2106 states and 2306 transitions.
[2020-11-25 01:33:33,074 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:33:33,078 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2106 states to 2098 states and 2298 transitions.
[2020-11-25 01:33:33,078 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 669
[2020-11-25 01:33:33,078 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 669
[2020-11-25 01:33:33,078 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2098 states and 2298 transitions.
[2020-11-25 01:33:33,080 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:33:33,080 INFO  L728         BuchiCegarLoop]: Abstraction has 2098 states and 2298 transitions.
[2020-11-25 01:33:33,081 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2098 states and 2298 transitions.
[2020-11-25 01:33:33,090 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2098 to 2056.
[2020-11-25 01:33:33,090 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2056 states.
[2020-11-25 01:33:33,091 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2056 states to 2056 states and 2244 transitions.
[2020-11-25 01:33:33,091 INFO  L751         BuchiCegarLoop]: Abstraction has 2056 states and 2244 transitions.
[2020-11-25 01:33:33,091 INFO  L631         BuchiCegarLoop]: Abstraction has 2056 states and 2244 transitions.
[2020-11-25 01:33:33,091 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 01:33:33,091 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2056 states and 2244 transitions.
[2020-11-25 01:33:33,093 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:33:33,094 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:33:33,094 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:33:33,094 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:33:33,094 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:33:33,098 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:33:33,098 INFO  L82        PathProgramCache]: Analyzing trace with hash 696182246, now seen corresponding path program 1 times
[2020-11-25 01:33:33,098 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:33:33,108 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:33:33,258 INFO  L134       CoverageAnalysis]: Checked inductivity of 77 backedges. 0 proven. 28 refuted. 0 times theorem prover too weak. 49 trivial. 0 not checked.
[2020-11-25 01:33:33,258 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:33:33,258 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [26] total 26
[2020-11-25 01:33:33,258 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:33:33,259 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-25 01:33:33,259 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=71, Invalid=631, Unknown=0, NotChecked=0, Total=702
[2020-11-25 01:33:33,259 INFO  L87              Difference]: Start difference. First operand 2056 states and 2244 transitions. cyclomatic complexity: 192 Second operand 27 states.
[2020-11-25 01:33:35,503 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:33:35,503 INFO  L93              Difference]: Finished difference Result 2120 states and 2321 transitions.
[2020-11-25 01:33:35,503 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 01:33:35,503 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2120 states and 2321 transitions.
[2020-11-25 01:33:35,506 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:33:35,510 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2120 states to 2120 states and 2321 transitions.
[2020-11-25 01:33:35,510 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 674
[2020-11-25 01:33:35,511 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 674
[2020-11-25 01:33:35,511 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2120 states and 2321 transitions.
[2020-11-25 01:33:35,512 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:33:35,512 INFO  L728         BuchiCegarLoop]: Abstraction has 2120 states and 2321 transitions.
[2020-11-25 01:33:35,513 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2120 states and 2321 transitions.
[2020-11-25 01:33:35,522 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2120 to 2061.
[2020-11-25 01:33:35,522 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2061 states.
[2020-11-25 01:33:35,524 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2061 states to 2061 states and 2249 transitions.
[2020-11-25 01:33:35,524 INFO  L751         BuchiCegarLoop]: Abstraction has 2061 states and 2249 transitions.
[2020-11-25 01:33:35,524 INFO  L631         BuchiCegarLoop]: Abstraction has 2061 states and 2249 transitions.
[2020-11-25 01:33:35,524 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 01:33:35,524 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2061 states and 2249 transitions.
[2020-11-25 01:33:35,526 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:33:35,526 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:33:35,526 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:33:35,527 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:33:35,527 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:33:35,530 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:33:35,530 INFO  L82        PathProgramCache]: Analyzing trace with hash -1445186130, now seen corresponding path program 1 times
[2020-11-25 01:33:35,530 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:33:35,539 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:33:35,602 INFO  L134       CoverageAnalysis]: Checked inductivity of 82 backedges. 1 proven. 53 refuted. 0 times theorem prover too weak. 28 trivial. 0 not checked.
[2020-11-25 01:33:35,602 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:33:35,602 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [12] total 12
[2020-11-25 01:33:35,603 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:33:35,603 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 12 interpolants.
[2020-11-25 01:33:35,603 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=23, Invalid=109, Unknown=0, NotChecked=0, Total=132
[2020-11-25 01:33:35,603 INFO  L87              Difference]: Start difference. First operand 2061 states and 2249 transitions. cyclomatic complexity: 192 Second operand 12 states.
[2020-11-25 01:33:36,127 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:33:36,127 INFO  L93              Difference]: Finished difference Result 2083 states and 2292 transitions.
[2020-11-25 01:33:36,127 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 12 states. 
[2020-11-25 01:33:36,128 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2083 states and 2292 transitions.
[2020-11-25 01:33:36,131 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:33:36,135 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2083 states to 2083 states and 2292 transitions.
[2020-11-25 01:33:36,135 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 671
[2020-11-25 01:33:36,135 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 671
[2020-11-25 01:33:36,135 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2083 states and 2292 transitions.
[2020-11-25 01:33:36,137 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:33:36,137 INFO  L728         BuchiCegarLoop]: Abstraction has 2083 states and 2292 transitions.
[2020-11-25 01:33:36,138 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2083 states and 2292 transitions.
[2020-11-25 01:33:36,148 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2083 to 2083.
[2020-11-25 01:33:36,148 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2083 states.
[2020-11-25 01:33:36,150 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2083 states to 2083 states and 2292 transitions.
[2020-11-25 01:33:36,150 INFO  L751         BuchiCegarLoop]: Abstraction has 2083 states and 2292 transitions.
[2020-11-25 01:33:36,150 INFO  L631         BuchiCegarLoop]: Abstraction has 2083 states and 2292 transitions.
[2020-11-25 01:33:36,150 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 01:33:36,150 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2083 states and 2292 transitions.
[2020-11-25 01:33:36,152 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:33:36,152 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:33:36,152 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:33:36,153 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:33:36,153 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:33:36,156 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:33:36,156 INFO  L82        PathProgramCache]: Analyzing trace with hash 1633263067, now seen corresponding path program 1 times
[2020-11-25 01:33:36,156 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:33:36,166 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:33:36,285 INFO  L134       CoverageAnalysis]: Checked inductivity of 85 backedges. 0 proven. 28 refuted. 0 times theorem prover too weak. 57 trivial. 0 not checked.
[2020-11-25 01:33:36,285 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:33:36,285 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [26] total 26
[2020-11-25 01:33:36,286 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:33:36,286 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 27 interpolants.
[2020-11-25 01:33:36,286 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=73, Invalid=629, Unknown=0, NotChecked=0, Total=702
[2020-11-25 01:33:36,286 INFO  L87              Difference]: Start difference. First operand 2083 states and 2292 transitions. cyclomatic complexity: 217 Second operand 27 states.
[2020-11-25 01:33:37,684 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:33:37,684 INFO  L93              Difference]: Finished difference Result 2142 states and 2369 transitions.
[2020-11-25 01:33:37,684 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 24 states. 
[2020-11-25 01:33:37,684 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2142 states and 2369 transitions.
[2020-11-25 01:33:37,688 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:33:37,692 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2142 states to 2142 states and 2369 transitions.
[2020-11-25 01:33:37,693 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 683
[2020-11-25 01:33:37,693 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 683
[2020-11-25 01:33:37,693 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2142 states and 2369 transitions.
[2020-11-25 01:33:37,694 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:33:37,694 INFO  L728         BuchiCegarLoop]: Abstraction has 2142 states and 2369 transitions.
[2020-11-25 01:33:37,696 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2142 states and 2369 transitions.
[2020-11-25 01:33:37,706 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2142 to 2076.
[2020-11-25 01:33:37,706 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2076 states.
[2020-11-25 01:33:37,708 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2076 states to 2076 states and 2280 transitions.
[2020-11-25 01:33:37,708 INFO  L751         BuchiCegarLoop]: Abstraction has 2076 states and 2280 transitions.
[2020-11-25 01:33:37,708 INFO  L631         BuchiCegarLoop]: Abstraction has 2076 states and 2280 transitions.
[2020-11-25 01:33:37,708 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 01:33:37,708 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2076 states and 2280 transitions.
[2020-11-25 01:33:37,710 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:33:37,710 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:33:37,710 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:33:37,711 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:33:37,711 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:33:37,714 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:33:37,715 INFO  L82        PathProgramCache]: Analyzing trace with hash 1250212574, now seen corresponding path program 1 times
[2020-11-25 01:33:37,715 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:33:37,727 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:33:38,050 INFO  L134       CoverageAnalysis]: Checked inductivity of 195 backedges. 0 proven. 136 refuted. 0 times theorem prover too weak. 59 trivial. 0 not checked.
[2020-11-25 01:33:38,051 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:33:38,051 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [36] total 36
[2020-11-25 01:33:38,051 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:33:38,051 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 37 interpolants.
[2020-11-25 01:33:38,052 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=119, Invalid=1213, Unknown=0, NotChecked=0, Total=1332
[2020-11-25 01:33:38,052 INFO  L87              Difference]: Start difference. First operand 2076 states and 2280 transitions. cyclomatic complexity: 212 Second operand 37 states.
[2020-11-25 01:33:41,694 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:33:41,694 INFO  L93              Difference]: Finished difference Result 2128 states and 2348 transitions.
[2020-11-25 01:33:41,694 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 37 states. 
[2020-11-25 01:33:41,694 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2128 states and 2348 transitions.
[2020-11-25 01:33:41,698 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:33:41,702 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2128 states to 2128 states and 2348 transitions.
[2020-11-25 01:33:41,702 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 676
[2020-11-25 01:33:41,703 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 676
[2020-11-25 01:33:41,703 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2128 states and 2348 transitions.
[2020-11-25 01:33:41,704 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:33:41,704 INFO  L728         BuchiCegarLoop]: Abstraction has 2128 states and 2348 transitions.
[2020-11-25 01:33:41,706 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2128 states and 2348 transitions.
[2020-11-25 01:33:41,716 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2128 to 2078.
[2020-11-25 01:33:41,716 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2078 states.
[2020-11-25 01:33:41,718 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2078 states to 2078 states and 2286 transitions.
[2020-11-25 01:33:41,718 INFO  L751         BuchiCegarLoop]: Abstraction has 2078 states and 2286 transitions.
[2020-11-25 01:33:41,718 INFO  L631         BuchiCegarLoop]: Abstraction has 2078 states and 2286 transitions.
[2020-11-25 01:33:41,718 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 01:33:41,718 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2078 states and 2286 transitions.
[2020-11-25 01:33:41,720 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:33:41,720 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:33:41,720 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:33:41,721 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:33:41,721 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:33:41,724 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:33:41,724 INFO  L82        PathProgramCache]: Analyzing trace with hash 2069292097, now seen corresponding path program 2 times
[2020-11-25 01:33:41,725 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:33:41,738 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:33:41,963 INFO  L134       CoverageAnalysis]: Checked inductivity of 279 backedges. 0 proven. 41 refuted. 0 times theorem prover too weak. 238 trivial. 0 not checked.
[2020-11-25 01:33:41,963 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:33:41,963 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [25] total 25
[2020-11-25 01:33:41,964 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:33:41,964 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 26 interpolants.
[2020-11-25 01:33:41,964 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=69, Invalid=581, Unknown=0, NotChecked=0, Total=650
[2020-11-25 01:33:41,964 INFO  L87              Difference]: Start difference. First operand 2078 states and 2286 transitions. cyclomatic complexity: 217 Second operand 26 states.
[2020-11-25 01:33:44,263 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:33:44,263 INFO  L93              Difference]: Finished difference Result 2138 states and 2379 transitions.
[2020-11-25 01:33:44,263 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 25 states. 
[2020-11-25 01:33:44,264 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2138 states and 2379 transitions.
[2020-11-25 01:33:44,268 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:33:44,273 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2138 states to 2138 states and 2379 transitions.
[2020-11-25 01:33:44,273 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 678
[2020-11-25 01:33:44,273 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 01:33:44,273 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2138 states and 2379 transitions.
[2020-11-25 01:33:44,275 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:33:44,275 INFO  L728         BuchiCegarLoop]: Abstraction has 2138 states and 2379 transitions.
[2020-11-25 01:33:44,276 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2138 states and 2379 transitions.
[2020-11-25 01:33:44,287 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2138 to 2084.
[2020-11-25 01:33:44,287 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2084 states.
[2020-11-25 01:33:44,289 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2084 states to 2084 states and 2307 transitions.
[2020-11-25 01:33:44,289 INFO  L751         BuchiCegarLoop]: Abstraction has 2084 states and 2307 transitions.
[2020-11-25 01:33:44,289 INFO  L631         BuchiCegarLoop]: Abstraction has 2084 states and 2307 transitions.
[2020-11-25 01:33:44,289 INFO  L445         BuchiCegarLoop]: ======== Iteration 15============
[2020-11-25 01:33:44,289 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2084 states and 2307 transitions.
[2020-11-25 01:33:44,291 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:33:44,292 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:33:44,292 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:33:44,293 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:33:44,293 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:33:44,296 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:33:44,296 INFO  L82        PathProgramCache]: Analyzing trace with hash -339931488, now seen corresponding path program 1 times
[2020-11-25 01:33:44,297 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:33:44,309 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:33:44,584 INFO  L134       CoverageAnalysis]: Checked inductivity of 227 backedges. 0 proven. 48 refuted. 0 times theorem prover too weak. 179 trivial. 0 not checked.
[2020-11-25 01:33:44,584 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:33:44,584 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [30] total 30
[2020-11-25 01:33:44,585 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:33:44,585 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 31 interpolants.
[2020-11-25 01:33:44,585 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=97, Invalid=833, Unknown=0, NotChecked=0, Total=930
[2020-11-25 01:33:44,585 INFO  L87              Difference]: Start difference. First operand 2084 states and 2307 transitions. cyclomatic complexity: 234 Second operand 31 states.
[2020-11-25 01:33:47,134 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:33:47,134 INFO  L93              Difference]: Finished difference Result 2156 states and 2419 transitions.
[2020-11-25 01:33:47,134 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 30 states. 
[2020-11-25 01:33:47,134 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2156 states and 2419 transitions.
[2020-11-25 01:33:47,138 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:33:47,142 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2156 states to 2156 states and 2419 transitions.
[2020-11-25 01:33:47,142 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 685
[2020-11-25 01:33:47,143 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 685
[2020-11-25 01:33:47,143 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2156 states and 2419 transitions.
[2020-11-25 01:33:47,144 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:33:47,144 INFO  L728         BuchiCegarLoop]: Abstraction has 2156 states and 2419 transitions.
[2020-11-25 01:33:47,145 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2156 states and 2419 transitions.
[2020-11-25 01:33:47,156 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2156 to 2091.
[2020-11-25 01:33:47,156 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2091 states.
[2020-11-25 01:33:47,158 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2091 states to 2091 states and 2322 transitions.
[2020-11-25 01:33:47,158 INFO  L751         BuchiCegarLoop]: Abstraction has 2091 states and 2322 transitions.
[2020-11-25 01:33:47,159 INFO  L631         BuchiCegarLoop]: Abstraction has 2091 states and 2322 transitions.
[2020-11-25 01:33:47,159 INFO  L445         BuchiCegarLoop]: ======== Iteration 16============
[2020-11-25 01:33:47,159 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2091 states and 2322 transitions.
[2020-11-25 01:33:47,161 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:33:47,161 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:33:47,161 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:33:47,163 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:33:47,163 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:33:47,173 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:33:47,173 INFO  L82        PathProgramCache]: Analyzing trace with hash 310434197, now seen corresponding path program 1 times
[2020-11-25 01:33:47,175 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:33:47,193 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:33:47,409 INFO  L134       CoverageAnalysis]: Checked inductivity of 271 backedges. 0 proven. 46 refuted. 0 times theorem prover too weak. 225 trivial. 0 not checked.
[2020-11-25 01:33:47,409 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:33:47,409 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [27] total 27
[2020-11-25 01:33:47,410 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:33:47,410 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 28 interpolants.
[2020-11-25 01:33:47,410 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=81, Invalid=675, Unknown=0, NotChecked=0, Total=756
[2020-11-25 01:33:47,410 INFO  L87              Difference]: Start difference. First operand 2091 states and 2322 transitions. cyclomatic complexity: 242 Second operand 28 states.
[2020-11-25 01:33:49,578 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:33:49,578 INFO  L93              Difference]: Finished difference Result 2158 states and 2431 transitions.
[2020-11-25 01:33:49,578 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 01:33:49,578 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2158 states and 2431 transitions.
[2020-11-25 01:33:49,582 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:33:49,586 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2158 states to 2158 states and 2431 transitions.
[2020-11-25 01:33:49,586 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 683
[2020-11-25 01:33:49,587 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 683
[2020-11-25 01:33:49,587 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2158 states and 2431 transitions.
[2020-11-25 01:33:49,588 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:33:49,588 INFO  L728         BuchiCegarLoop]: Abstraction has 2158 states and 2431 transitions.
[2020-11-25 01:33:49,590 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2158 states and 2431 transitions.
[2020-11-25 01:33:49,599 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2158 to 2095.
[2020-11-25 01:33:49,599 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2095 states.
[2020-11-25 01:33:49,601 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2095 states to 2095 states and 2337 transitions.
[2020-11-25 01:33:49,601 INFO  L751         BuchiCegarLoop]: Abstraction has 2095 states and 2337 transitions.
[2020-11-25 01:33:49,601 INFO  L631         BuchiCegarLoop]: Abstraction has 2095 states and 2337 transitions.
[2020-11-25 01:33:49,601 INFO  L445         BuchiCegarLoop]: ======== Iteration 17============
[2020-11-25 01:33:49,601 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2095 states and 2337 transitions.
[2020-11-25 01:33:49,603 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:33:49,603 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:33:49,603 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:33:49,604 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:33:49,604 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:33:49,607 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:33:49,608 INFO  L82        PathProgramCache]: Analyzing trace with hash 422432544, now seen corresponding path program 2 times
[2020-11-25 01:33:49,608 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:33:49,620 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:33:49,864 INFO  L134       CoverageAnalysis]: Checked inductivity of 227 backedges. 2 proven. 46 refuted. 0 times theorem prover too weak. 179 trivial. 0 not checked.
[2020-11-25 01:33:49,864 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:33:49,864 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [30] total 30
[2020-11-25 01:33:49,865 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:33:49,865 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 31 interpolants.
[2020-11-25 01:33:49,865 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=97, Invalid=833, Unknown=0, NotChecked=0, Total=930
[2020-11-25 01:33:49,865 INFO  L87              Difference]: Start difference. First operand 2095 states and 2337 transitions. cyclomatic complexity: 255 Second operand 31 states.
[2020-11-25 01:33:52,616 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:33:52,617 INFO  L93              Difference]: Finished difference Result 2164 states and 2449 transitions.
[2020-11-25 01:33:52,617 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 30 states. 
[2020-11-25 01:33:52,618 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2164 states and 2449 transitions.
[2020-11-25 01:33:52,624 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:33:52,631 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2164 states to 2164 states and 2449 transitions.
[2020-11-25 01:33:52,631 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 685
[2020-11-25 01:33:52,632 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 685
[2020-11-25 01:33:52,632 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2164 states and 2449 transitions.
[2020-11-25 01:33:52,634 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:33:52,634 INFO  L728         BuchiCegarLoop]: Abstraction has 2164 states and 2449 transitions.
[2020-11-25 01:33:52,636 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2164 states and 2449 transitions.
[2020-11-25 01:33:52,651 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2164 to 2099.
[2020-11-25 01:33:52,651 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2099 states.
[2020-11-25 01:33:52,654 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2099 states to 2099 states and 2352 transitions.
[2020-11-25 01:33:52,655 INFO  L751         BuchiCegarLoop]: Abstraction has 2099 states and 2352 transitions.
[2020-11-25 01:33:52,655 INFO  L631         BuchiCegarLoop]: Abstraction has 2099 states and 2352 transitions.
[2020-11-25 01:33:52,655 INFO  L445         BuchiCegarLoop]: ======== Iteration 18============
[2020-11-25 01:33:52,655 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2099 states and 2352 transitions.
[2020-11-25 01:33:52,658 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:33:52,658 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:33:52,658 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:33:52,659 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:33:52,659 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:33:52,664 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:33:52,664 INFO  L82        PathProgramCache]: Analyzing trace with hash 145140351, now seen corresponding path program 2 times
[2020-11-25 01:33:52,665 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:33:52,683 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:33:53,038 INFO  L134       CoverageAnalysis]: Checked inductivity of 273 backedges. 0 proven. 51 refuted. 0 times theorem prover too weak. 222 trivial. 0 not checked.
[2020-11-25 01:33:53,038 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:33:53,038 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [27] total 27
[2020-11-25 01:33:53,038 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:33:53,039 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 28 interpolants.
[2020-11-25 01:33:53,039 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=75, Invalid=681, Unknown=0, NotChecked=0, Total=756
[2020-11-25 01:33:53,039 INFO  L87              Difference]: Start difference. First operand 2099 states and 2352 transitions. cyclomatic complexity: 268 Second operand 28 states.
[2020-11-25 01:33:55,495 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:33:55,495 INFO  L93              Difference]: Finished difference Result 2158 states and 2431 transitions.
[2020-11-25 01:33:55,495 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 01:33:55,495 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2158 states and 2431 transitions.
[2020-11-25 01:33:55,500 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:33:55,505 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2158 states to 2158 states and 2431 transitions.
[2020-11-25 01:33:55,505 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 683
[2020-11-25 01:33:55,505 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 683
[2020-11-25 01:33:55,505 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2158 states and 2431 transitions.
[2020-11-25 01:33:55,506 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:33:55,507 INFO  L728         BuchiCegarLoop]: Abstraction has 2158 states and 2431 transitions.
[2020-11-25 01:33:55,508 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2158 states and 2431 transitions.
[2020-11-25 01:33:55,517 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2158 to 2099.
[2020-11-25 01:33:55,518 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2099 states.
[2020-11-25 01:33:55,520 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2099 states to 2099 states and 2352 transitions.
[2020-11-25 01:33:55,520 INFO  L751         BuchiCegarLoop]: Abstraction has 2099 states and 2352 transitions.
[2020-11-25 01:33:55,520 INFO  L631         BuchiCegarLoop]: Abstraction has 2099 states and 2352 transitions.
[2020-11-25 01:33:55,520 INFO  L445         BuchiCegarLoop]: ======== Iteration 19============
[2020-11-25 01:33:55,520 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2099 states and 2352 transitions.
[2020-11-25 01:33:55,522 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:33:55,522 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:33:55,522 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:33:55,523 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:33:55,523 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:33:55,527 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:33:55,527 INFO  L82        PathProgramCache]: Analyzing trace with hash 661351924, now seen corresponding path program 1 times
[2020-11-25 01:33:55,527 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:33:55,539 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:33:55,797 INFO  L134       CoverageAnalysis]: Checked inductivity of 260 backedges. 7 proven. 53 refuted. 0 times theorem prover too weak. 200 trivial. 0 not checked.
[2020-11-25 01:33:55,797 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:33:55,797 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-11-25 01:33:55,798 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:33:55,798 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-25 01:33:55,798 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=106, Invalid=886, Unknown=0, NotChecked=0, Total=992
[2020-11-25 01:33:55,798 INFO  L87              Difference]: Start difference. First operand 2099 states and 2352 transitions. cyclomatic complexity: 268 Second operand 32 states.
[2020-11-25 01:33:58,527 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:33:58,527 INFO  L93              Difference]: Finished difference Result 2164 states and 2449 transitions.
[2020-11-25 01:33:58,527 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 30 states. 
[2020-11-25 01:33:58,528 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2164 states and 2449 transitions.
[2020-11-25 01:33:58,532 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:33:58,537 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2164 states to 2164 states and 2449 transitions.
[2020-11-25 01:33:58,538 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 685
[2020-11-25 01:33:58,538 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 685
[2020-11-25 01:33:58,538 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2164 states and 2449 transitions.
[2020-11-25 01:33:58,539 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:33:58,540 INFO  L728         BuchiCegarLoop]: Abstraction has 2164 states and 2449 transitions.
[2020-11-25 01:33:58,541 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2164 states and 2449 transitions.
[2020-11-25 01:33:58,550 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2164 to 2095.
[2020-11-25 01:33:58,550 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2095 states.
[2020-11-25 01:33:58,552 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2095 states to 2095 states and 2337 transitions.
[2020-11-25 01:33:58,552 INFO  L751         BuchiCegarLoop]: Abstraction has 2095 states and 2337 transitions.
[2020-11-25 01:33:58,552 INFO  L631         BuchiCegarLoop]: Abstraction has 2095 states and 2337 transitions.
[2020-11-25 01:33:58,552 INFO  L445         BuchiCegarLoop]: ======== Iteration 20============
[2020-11-25 01:33:58,552 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2095 states and 2337 transitions.
[2020-11-25 01:33:58,554 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:33:58,554 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:33:58,555 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:33:58,555 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:33:58,555 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:33:58,558 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:33:58,558 INFO  L82        PathProgramCache]: Analyzing trace with hash 1321293044, now seen corresponding path program 2 times
[2020-11-25 01:33:58,559 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:33:58,571 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:33:58,858 INFO  L134       CoverageAnalysis]: Checked inductivity of 260 backedges. 0 proven. 60 refuted. 0 times theorem prover too weak. 200 trivial. 0 not checked.
[2020-11-25 01:33:58,858 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:33:58,858 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-11-25 01:33:58,859 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:33:58,859 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-25 01:33:58,859 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=106, Invalid=886, Unknown=0, NotChecked=0, Total=992
[2020-11-25 01:33:58,859 INFO  L87              Difference]: Start difference. First operand 2095 states and 2337 transitions. cyclomatic complexity: 255 Second operand 32 states.
[2020-11-25 01:34:01,133 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:34:01,133 INFO  L93              Difference]: Finished difference Result 2164 states and 2449 transitions.
[2020-11-25 01:34:01,133 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 30 states. 
[2020-11-25 01:34:01,133 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2164 states and 2449 transitions.
[2020-11-25 01:34:01,138 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:34:01,143 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2164 states to 2164 states and 2449 transitions.
[2020-11-25 01:34:01,143 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 685
[2020-11-25 01:34:01,143 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 685
[2020-11-25 01:34:01,143 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2164 states and 2449 transitions.
[2020-11-25 01:34:01,144 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:34:01,144 INFO  L728         BuchiCegarLoop]: Abstraction has 2164 states and 2449 transitions.
[2020-11-25 01:34:01,146 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2164 states and 2449 transitions.
[2020-11-25 01:34:01,155 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2164 to 2082.
[2020-11-25 01:34:01,155 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2082 states.
[2020-11-25 01:34:01,157 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2082 states to 2082 states and 2297 transitions.
[2020-11-25 01:34:01,157 INFO  L751         BuchiCegarLoop]: Abstraction has 2082 states and 2297 transitions.
[2020-11-25 01:34:01,157 INFO  L631         BuchiCegarLoop]: Abstraction has 2082 states and 2297 transitions.
[2020-11-25 01:34:01,158 INFO  L445         BuchiCegarLoop]: ======== Iteration 21============
[2020-11-25 01:34:01,158 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2082 states and 2297 transitions.
[2020-11-25 01:34:01,160 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:34:01,160 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:34:01,160 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:34:01,161 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:34:01,161 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND FALSE  !(DType[this] == MRDF)
[L1684]  COND TRUE   DType[this] == SafeMath
[L1685]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1685]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1686]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:34:01,164 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:34:01,164 INFO  L82        PathProgramCache]: Analyzing trace with hash -1484578807, now seen corresponding path program 1 times
[2020-11-25 01:34:01,164 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:34:01,176 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:34:01,265 INFO  L134       CoverageAnalysis]: Checked inductivity of 426 backedges. 9 proven. 0 refuted. 0 times theorem prover too weak. 417 trivial. 0 not checked.
[2020-11-25 01:34:01,265 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 01:34:01,265 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 01:34:01,266 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:34:01,266 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 01:34:01,266 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 01:34:01,266 INFO  L87              Difference]: Start difference. First operand 2082 states and 2297 transitions. cyclomatic complexity: 226 Second operand 7 states.
[2020-11-25 01:34:01,299 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:34:01,299 INFO  L93              Difference]: Finished difference Result 2094 states and 2307 transitions.
[2020-11-25 01:34:01,299 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 5 states. 
[2020-11-25 01:34:01,299 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2094 states and 2307 transitions.
[2020-11-25 01:34:01,303 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:34:01,306 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2094 states to 2066 states and 2277 transitions.
[2020-11-25 01:34:01,307 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 671
[2020-11-25 01:34:01,307 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 671
[2020-11-25 01:34:01,307 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2066 states and 2277 transitions.
[2020-11-25 01:34:01,308 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:34:01,308 INFO  L728         BuchiCegarLoop]: Abstraction has 2066 states and 2277 transitions.
[2020-11-25 01:34:01,309 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2066 states and 2277 transitions.
[2020-11-25 01:34:01,317 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2066 to 2066.
[2020-11-25 01:34:01,317 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2066 states.
[2020-11-25 01:34:01,319 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2066 states to 2066 states and 2277 transitions.
[2020-11-25 01:34:01,319 INFO  L751         BuchiCegarLoop]: Abstraction has 2066 states and 2277 transitions.
[2020-11-25 01:34:01,319 INFO  L631         BuchiCegarLoop]: Abstraction has 2066 states and 2277 transitions.
[2020-11-25 01:34:01,319 INFO  L445         BuchiCegarLoop]: ======== Iteration 22============
[2020-11-25 01:34:01,319 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2066 states and 2277 transitions.
[2020-11-25 01:34:01,321 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:34:01,321 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:34:01,321 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:34:01,322 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:34:01,322 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:34:01,325 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:34:01,325 INFO  L82        PathProgramCache]: Analyzing trace with hash 1586180376, now seen corresponding path program 1 times
[2020-11-25 01:34:01,325 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:34:01,340 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:34:01,799 INFO  L134       CoverageAnalysis]: Checked inductivity of 426 backedges. 16 proven. 52 refuted. 0 times theorem prover too weak. 358 trivial. 0 not checked.
[2020-11-25 01:34:01,799 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:34:01,799 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [32] total 32
[2020-11-25 01:34:01,799 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:34:01,800 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 33 interpolants.
[2020-11-25 01:34:01,800 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=108, Invalid=948, Unknown=0, NotChecked=0, Total=1056
[2020-11-25 01:34:01,800 INFO  L87              Difference]: Start difference. First operand 2066 states and 2277 transitions. cyclomatic complexity: 222 Second operand 33 states.
[2020-11-25 01:34:04,857 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:34:04,857 INFO  L93              Difference]: Finished difference Result 2134 states and 2399 transitions.
[2020-11-25 01:34:04,857 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 30 states. 
[2020-11-25 01:34:04,857 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2134 states and 2399 transitions.
[2020-11-25 01:34:04,861 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:34:04,865 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2134 states to 2134 states and 2399 transitions.
[2020-11-25 01:34:04,866 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 678
[2020-11-25 01:34:04,866 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 01:34:04,866 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2134 states and 2399 transitions.
[2020-11-25 01:34:04,867 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:34:04,867 INFO  L728         BuchiCegarLoop]: Abstraction has 2134 states and 2399 transitions.
[2020-11-25 01:34:04,868 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2134 states and 2399 transitions.
[2020-11-25 01:34:04,877 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2134 to 2074.
[2020-11-25 01:34:04,877 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2074 states.
[2020-11-25 01:34:04,879 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2074 states to 2074 states and 2306 transitions.
[2020-11-25 01:34:04,879 INFO  L751         BuchiCegarLoop]: Abstraction has 2074 states and 2306 transitions.
[2020-11-25 01:34:04,879 INFO  L631         BuchiCegarLoop]: Abstraction has 2074 states and 2306 transitions.
[2020-11-25 01:34:04,879 INFO  L445         BuchiCegarLoop]: ======== Iteration 23============
[2020-11-25 01:34:04,879 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2074 states and 2306 transitions.
[2020-11-25 01:34:04,881 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:34:04,881 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:34:04,881 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:34:04,882 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:34:04,882 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:34:04,886 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:34:04,886 INFO  L82        PathProgramCache]: Analyzing trace with hash 243729207, now seen corresponding path program 1 times
[2020-11-25 01:34:04,886 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:34:04,900 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:34:05,423 INFO  L134       CoverageAnalysis]: Checked inductivity of 418 backedges. 15 proven. 56 refuted. 0 times theorem prover too weak. 347 trivial. 0 not checked.
[2020-11-25 01:34:05,423 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:34:05,423 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [34] total 34
[2020-11-25 01:34:05,424 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:34:05,424 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 35 interpolants.
[2020-11-25 01:34:05,424 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=120, Invalid=1070, Unknown=0, NotChecked=0, Total=1190
[2020-11-25 01:34:05,424 INFO  L87              Difference]: Start difference. First operand 2074 states and 2306 transitions. cyclomatic complexity: 246 Second operand 35 states.
[2020-11-25 01:34:09,118 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:34:09,118 INFO  L93              Difference]: Finished difference Result 2148 states and 2434 transitions.
[2020-11-25 01:34:09,119 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 35 states. 
[2020-11-25 01:34:09,119 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2148 states and 2434 transitions.
[2020-11-25 01:34:09,123 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:34:09,127 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2148 states to 2148 states and 2434 transitions.
[2020-11-25 01:34:09,127 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 683
[2020-11-25 01:34:09,128 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 683
[2020-11-25 01:34:09,128 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2148 states and 2434 transitions.
[2020-11-25 01:34:09,129 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:34:09,129 INFO  L728         BuchiCegarLoop]: Abstraction has 2148 states and 2434 transitions.
[2020-11-25 01:34:09,130 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2148 states and 2434 transitions.
[2020-11-25 01:34:09,139 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2148 to 2087.
[2020-11-25 01:34:09,139 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2087 states.
[2020-11-25 01:34:09,141 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2087 states to 2087 states and 2347 transitions.
[2020-11-25 01:34:09,141 INFO  L751         BuchiCegarLoop]: Abstraction has 2087 states and 2347 transitions.
[2020-11-25 01:34:09,141 INFO  L631         BuchiCegarLoop]: Abstraction has 2087 states and 2347 transitions.
[2020-11-25 01:34:09,141 INFO  L445         BuchiCegarLoop]: ======== Iteration 24============
[2020-11-25 01:34:09,141 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2087 states and 2347 transitions.
[2020-11-25 01:34:09,143 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:34:09,143 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:34:09,143 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:34:09,144 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:34:09,144 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:34:09,147 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:34:09,147 INFO  L82        PathProgramCache]: Analyzing trace with hash -378027412, now seen corresponding path program 1 times
[2020-11-25 01:34:09,148 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:34:09,162 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:34:09,601 INFO  L134       CoverageAnalysis]: Checked inductivity of 433 backedges. 15 proven. 56 refuted. 0 times theorem prover too weak. 362 trivial. 0 not checked.
[2020-11-25 01:34:09,601 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:34:09,601 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [33] total 33
[2020-11-25 01:34:09,602 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:34:09,602 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 34 interpolants.
[2020-11-25 01:34:09,602 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=117, Invalid=1005, Unknown=0, NotChecked=0, Total=1122
[2020-11-25 01:34:09,602 INFO  L87              Difference]: Start difference. First operand 2087 states and 2347 transitions. cyclomatic complexity: 277 Second operand 34 states.
[2020-11-25 01:34:12,813 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:34:12,814 INFO  L93              Difference]: Finished difference Result 2152 states and 2449 transitions.
[2020-11-25 01:34:12,814 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 30 states. 
[2020-11-25 01:34:12,814 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2152 states and 2449 transitions.
[2020-11-25 01:34:12,818 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:34:12,823 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2152 states to 2152 states and 2449 transitions.
[2020-11-25 01:34:12,823 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 683
[2020-11-25 01:34:12,823 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 683
[2020-11-25 01:34:12,823 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2152 states and 2449 transitions.
[2020-11-25 01:34:12,825 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:34:12,825 INFO  L728         BuchiCegarLoop]: Abstraction has 2152 states and 2449 transitions.
[2020-11-25 01:34:12,826 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2152 states and 2449 transitions.
[2020-11-25 01:34:12,834 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2152 to 2091.
[2020-11-25 01:34:12,834 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2091 states.
[2020-11-25 01:34:12,837 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2091 states to 2091 states and 2362 transitions.
[2020-11-25 01:34:12,837 INFO  L751         BuchiCegarLoop]: Abstraction has 2091 states and 2362 transitions.
[2020-11-25 01:34:12,837 INFO  L631         BuchiCegarLoop]: Abstraction has 2091 states and 2362 transitions.
[2020-11-25 01:34:12,837 INFO  L445         BuchiCegarLoop]: ======== Iteration 25============
[2020-11-25 01:34:12,837 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2091 states and 2362 transitions.
[2020-11-25 01:34:12,839 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:34:12,839 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:34:12,839 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:34:12,840 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:34:12,840 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:34:12,843 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:34:12,844 INFO  L82        PathProgramCache]: Analyzing trace with hash 214554648, now seen corresponding path program 2 times
[2020-11-25 01:34:12,844 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:34:12,859 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:34:13,184 INFO  L134       CoverageAnalysis]: Checked inductivity of 426 backedges. 34 proven. 34 refuted. 0 times theorem prover too weak. 358 trivial. 0 not checked.
[2020-11-25 01:34:13,184 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:34:13,184 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-11-25 01:34:13,184 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:34:13,184 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-25 01:34:13,185 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=106, Invalid=886, Unknown=0, NotChecked=0, Total=992
[2020-11-25 01:34:13,185 INFO  L87              Difference]: Start difference. First operand 2091 states and 2362 transitions. cyclomatic complexity: 290 Second operand 32 states.
[2020-11-25 01:34:15,900 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:34:15,900 INFO  L93              Difference]: Finished difference Result 2147 states and 2444 transitions.
[2020-11-25 01:34:15,900 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 01:34:15,900 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2147 states and 2444 transitions.
[2020-11-25 01:34:15,904 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:34:15,909 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2147 states to 2147 states and 2444 transitions.
[2020-11-25 01:34:15,909 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 678
[2020-11-25 01:34:15,909 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 01:34:15,909 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2147 states and 2444 transitions.
[2020-11-25 01:34:15,910 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:34:15,910 INFO  L728         BuchiCegarLoop]: Abstraction has 2147 states and 2444 transitions.
[2020-11-25 01:34:15,911 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2147 states and 2444 transitions.
[2020-11-25 01:34:15,919 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2147 to 2091.
[2020-11-25 01:34:15,919 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2091 states.
[2020-11-25 01:34:15,921 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2091 states to 2091 states and 2362 transitions.
[2020-11-25 01:34:15,921 INFO  L751         BuchiCegarLoop]: Abstraction has 2091 states and 2362 transitions.
[2020-11-25 01:34:15,921 INFO  L631         BuchiCegarLoop]: Abstraction has 2091 states and 2362 transitions.
[2020-11-25 01:34:15,921 INFO  L445         BuchiCegarLoop]: ======== Iteration 26============
[2020-11-25 01:34:15,921 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2091 states and 2362 transitions.
[2020-11-25 01:34:15,923 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:34:15,924 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:34:15,924 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:34:15,924 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:34:15,924 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:34:15,927 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:34:15,928 INFO  L82        PathProgramCache]: Analyzing trace with hash -1205222676, now seen corresponding path program 2 times
[2020-11-25 01:34:15,928 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:34:15,942 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:34:16,280 INFO  L134       CoverageAnalysis]: Checked inductivity of 433 backedges. 32 proven. 39 refuted. 0 times theorem prover too weak. 362 trivial. 0 not checked.
[2020-11-25 01:34:16,280 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:34:16,280 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [32] total 32
[2020-11-25 01:34:16,281 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:34:16,281 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 33 interpolants.
[2020-11-25 01:34:16,281 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=114, Invalid=942, Unknown=0, NotChecked=0, Total=1056
[2020-11-25 01:34:16,281 INFO  L87              Difference]: Start difference. First operand 2091 states and 2362 transitions. cyclomatic complexity: 290 Second operand 33 states.
[2020-11-25 01:34:19,332 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:34:19,332 INFO  L93              Difference]: Finished difference Result 2152 states and 2449 transitions.
[2020-11-25 01:34:19,332 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 32 states. 
[2020-11-25 01:34:19,332 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2152 states and 2449 transitions.
[2020-11-25 01:34:19,336 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:34:19,341 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2152 states to 2152 states and 2449 transitions.
[2020-11-25 01:34:19,341 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 683
[2020-11-25 01:34:19,342 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 683
[2020-11-25 01:34:19,342 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2152 states and 2449 transitions.
[2020-11-25 01:34:19,343 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:34:19,343 INFO  L728         BuchiCegarLoop]: Abstraction has 2152 states and 2449 transitions.
[2020-11-25 01:34:19,344 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2152 states and 2449 transitions.
[2020-11-25 01:34:19,353 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2152 to 2089.
[2020-11-25 01:34:19,353 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2089 states.
[2020-11-25 01:34:19,355 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2089 states to 2089 states and 2354 transitions.
[2020-11-25 01:34:19,355 INFO  L751         BuchiCegarLoop]: Abstraction has 2089 states and 2354 transitions.
[2020-11-25 01:34:19,355 INFO  L631         BuchiCegarLoop]: Abstraction has 2089 states and 2354 transitions.
[2020-11-25 01:34:19,355 INFO  L445         BuchiCegarLoop]: ======== Iteration 27============
[2020-11-25 01:34:19,355 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2089 states and 2354 transitions.
[2020-11-25 01:34:19,357 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:34:19,358 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:34:19,358 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:34:19,358 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:34:19,359 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:34:19,361 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:34:19,361 INFO  L82        PathProgramCache]: Analyzing trace with hash -713941286, now seen corresponding path program 3 times
[2020-11-25 01:34:19,362 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:34:19,377 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:34:19,780 INFO  L134       CoverageAnalysis]: Checked inductivity of 515 backedges. 2 proven. 68 refuted. 0 times theorem prover too weak. 445 trivial. 0 not checked.
[2020-11-25 01:34:19,780 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:34:19,781 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-11-25 01:34:19,781 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:34:19,781 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-25 01:34:19,781 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=102, Invalid=890, Unknown=0, NotChecked=0, Total=992
[2020-11-25 01:34:19,781 INFO  L87              Difference]: Start difference. First operand 2089 states and 2354 transitions. cyclomatic complexity: 283 Second operand 32 states.
[2020-11-25 01:34:22,660 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:34:22,661 INFO  L93              Difference]: Finished difference Result 2168 states and 2504 transitions.
[2020-11-25 01:34:22,661 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 01:34:22,661 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2168 states and 2504 transitions.
[2020-11-25 01:34:22,665 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:34:22,671 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2168 states to 2168 states and 2504 transitions.
[2020-11-25 01:34:22,671 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 685
[2020-11-25 01:34:22,671 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 685
[2020-11-25 01:34:22,671 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2168 states and 2504 transitions.
[2020-11-25 01:34:22,672 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:34:22,672 INFO  L728         BuchiCegarLoop]: Abstraction has 2168 states and 2504 transitions.
[2020-11-25 01:34:22,674 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2168 states and 2504 transitions.
[2020-11-25 01:34:22,682 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2168 to 2093.
[2020-11-25 01:34:22,682 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2093 states.
[2020-11-25 01:34:22,684 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2093 states to 2093 states and 2369 transitions.
[2020-11-25 01:34:22,684 INFO  L751         BuchiCegarLoop]: Abstraction has 2093 states and 2369 transitions.
[2020-11-25 01:34:22,684 INFO  L631         BuchiCegarLoop]: Abstraction has 2093 states and 2369 transitions.
[2020-11-25 01:34:22,684 INFO  L445         BuchiCegarLoop]: ======== Iteration 28============
[2020-11-25 01:34:22,684 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2093 states and 2369 transitions.
[2020-11-25 01:34:22,686 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:34:22,686 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:34:22,686 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:34:22,687 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:34:22,687 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:34:22,690 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:34:22,690 INFO  L82        PathProgramCache]: Analyzing trace with hash 1747099983, now seen corresponding path program 2 times
[2020-11-25 01:34:22,691 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:34:22,705 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:34:23,009 INFO  L134       CoverageAnalysis]: Checked inductivity of 595 backedges. 0 proven. 66 refuted. 0 times theorem prover too weak. 529 trivial. 0 not checked.
[2020-11-25 01:34:23,009 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:34:23,010 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [28] total 28
[2020-11-25 01:34:23,010 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:34:23,010 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 29 interpolants.
[2020-11-25 01:34:23,010 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=86, Invalid=726, Unknown=0, NotChecked=0, Total=812
[2020-11-25 01:34:23,010 INFO  L87              Difference]: Start difference. First operand 2093 states and 2369 transitions. cyclomatic complexity: 296 Second operand 29 states.
[2020-11-25 01:34:25,829 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:34:25,830 INFO  L93              Difference]: Finished difference Result 2172 states and 2523 transitions.
[2020-11-25 01:34:25,830 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 28 states. 
[2020-11-25 01:34:25,830 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2172 states and 2523 transitions.
[2020-11-25 01:34:25,834 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:34:25,839 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2172 states to 2172 states and 2523 transitions.
[2020-11-25 01:34:25,839 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 683
[2020-11-25 01:34:25,840 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 683
[2020-11-25 01:34:25,840 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2172 states and 2523 transitions.
[2020-11-25 01:34:25,841 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:34:25,841 INFO  L728         BuchiCegarLoop]: Abstraction has 2172 states and 2523 transitions.
[2020-11-25 01:34:25,843 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2172 states and 2523 transitions.
[2020-11-25 01:34:25,851 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2172 to 2105.
[2020-11-25 01:34:25,851 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2105 states.
[2020-11-25 01:34:25,854 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2105 states to 2105 states and 2414 transitions.
[2020-11-25 01:34:25,854 INFO  L751         BuchiCegarLoop]: Abstraction has 2105 states and 2414 transitions.
[2020-11-25 01:34:25,854 INFO  L631         BuchiCegarLoop]: Abstraction has 2105 states and 2414 transitions.
[2020-11-25 01:34:25,854 INFO  L445         BuchiCegarLoop]: ======== Iteration 29============
[2020-11-25 01:34:25,854 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2105 states and 2414 transitions.
[2020-11-25 01:34:25,856 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:34:25,856 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:34:25,856 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:34:25,857 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:34:25,857 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:34:25,860 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:34:25,860 INFO  L82        PathProgramCache]: Analyzing trace with hash 2134498734, now seen corresponding path program 1 times
[2020-11-25 01:34:25,860 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:34:25,875 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:34:26,273 INFO  L134       CoverageAnalysis]: Checked inductivity of 531 backedges. 0 proven. 82 refuted. 0 times theorem prover too weak. 449 trivial. 0 not checked.
[2020-11-25 01:34:26,273 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:34:26,273 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [33] total 33
[2020-11-25 01:34:26,274 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:34:26,274 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 34 interpolants.
[2020-11-25 01:34:26,274 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=118, Invalid=1004, Unknown=0, NotChecked=0, Total=1122
[2020-11-25 01:34:26,274 INFO  L87              Difference]: Start difference. First operand 2105 states and 2414 transitions. cyclomatic complexity: 335 Second operand 34 states.
[2020-11-25 01:34:29,576 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:34:29,576 INFO  L93              Difference]: Finished difference Result 2178 states and 2546 transitions.
[2020-11-25 01:34:29,576 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 32 states. 
[2020-11-25 01:34:29,576 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2178 states and 2546 transitions.
[2020-11-25 01:34:29,581 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:34:29,586 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2178 states to 2178 states and 2546 transitions.
[2020-11-25 01:34:29,586 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 683
[2020-11-25 01:34:29,586 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 683
[2020-11-25 01:34:29,587 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2178 states and 2546 transitions.
[2020-11-25 01:34:29,588 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:34:29,588 INFO  L728         BuchiCegarLoop]: Abstraction has 2178 states and 2546 transitions.
[2020-11-25 01:34:29,589 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2178 states and 2546 transitions.
[2020-11-25 01:34:29,598 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2178 to 2105.
[2020-11-25 01:34:29,598 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2105 states.
[2020-11-25 01:34:29,601 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2105 states to 2105 states and 2414 transitions.
[2020-11-25 01:34:29,601 INFO  L751         BuchiCegarLoop]: Abstraction has 2105 states and 2414 transitions.
[2020-11-25 01:34:29,601 INFO  L631         BuchiCegarLoop]: Abstraction has 2105 states and 2414 transitions.
[2020-11-25 01:34:29,601 INFO  L445         BuchiCegarLoop]: ======== Iteration 30============
[2020-11-25 01:34:29,601 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2105 states and 2414 transitions.
[2020-11-25 01:34:29,603 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:34:29,603 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:34:29,603 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:34:29,604 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:34:29,604 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:34:29,607 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:34:29,607 INFO  L82        PathProgramCache]: Analyzing trace with hash 417636409, now seen corresponding path program 4 times
[2020-11-25 01:34:29,608 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:34:29,622 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:34:30,354 INFO  L134       CoverageAnalysis]: Checked inductivity of 508 backedges. 0 proven. 75 refuted. 0 times theorem prover too weak. 433 trivial. 0 not checked.
[2020-11-25 01:34:30,355 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:34:30,355 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-11-25 01:34:30,355 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:34:30,355 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-25 01:34:30,355 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=102, Invalid=890, Unknown=0, NotChecked=0, Total=992
[2020-11-25 01:34:30,355 INFO  L87              Difference]: Start difference. First operand 2105 states and 2414 transitions. cyclomatic complexity: 335 Second operand 32 states.
[2020-11-25 01:34:34,073 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:34:34,073 INFO  L93              Difference]: Finished difference Result 2176 states and 2534 transitions.
[2020-11-25 01:34:34,073 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 01:34:34,073 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2176 states and 2534 transitions.
[2020-11-25 01:34:34,078 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:34:34,084 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2176 states to 2176 states and 2534 transitions.
[2020-11-25 01:34:34,084 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 685
[2020-11-25 01:34:34,084 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 685
[2020-11-25 01:34:34,084 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2176 states and 2534 transitions.
[2020-11-25 01:34:34,086 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:34:34,086 INFO  L728         BuchiCegarLoop]: Abstraction has 2176 states and 2534 transitions.
[2020-11-25 01:34:34,087 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2176 states and 2534 transitions.
[2020-11-25 01:34:34,096 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2176 to 2105.
[2020-11-25 01:34:34,096 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2105 states.
[2020-11-25 01:34:34,098 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2105 states to 2105 states and 2414 transitions.
[2020-11-25 01:34:34,098 INFO  L751         BuchiCegarLoop]: Abstraction has 2105 states and 2414 transitions.
[2020-11-25 01:34:34,098 INFO  L631         BuchiCegarLoop]: Abstraction has 2105 states and 2414 transitions.
[2020-11-25 01:34:34,098 INFO  L445         BuchiCegarLoop]: ======== Iteration 31============
[2020-11-25 01:34:34,098 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2105 states and 2414 transitions.
[2020-11-25 01:34:34,100 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:34:34,100 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:34:34,100 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:34:34,101 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:34:34,101 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:34:34,104 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:34:34,104 INFO  L82        PathProgramCache]: Analyzing trace with hash 1474557614, now seen corresponding path program 2 times
[2020-11-25 01:34:34,105 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:34:34,119 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:34:34,522 INFO  L134       CoverageAnalysis]: Checked inductivity of 531 backedges. 7 proven. 75 refuted. 0 times theorem prover too weak. 449 trivial. 0 not checked.
[2020-11-25 01:34:34,523 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:34:34,523 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [33] total 33
[2020-11-25 01:34:34,523 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:34:34,523 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 34 interpolants.
[2020-11-25 01:34:34,523 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=118, Invalid=1004, Unknown=0, NotChecked=0, Total=1122
[2020-11-25 01:34:34,524 INFO  L87              Difference]: Start difference. First operand 2105 states and 2414 transitions. cyclomatic complexity: 335 Second operand 34 states.
[2020-11-25 01:34:37,900 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:34:37,900 INFO  L93              Difference]: Finished difference Result 2182 states and 2561 transitions.
[2020-11-25 01:34:37,900 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 32 states. 
[2020-11-25 01:34:37,900 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2182 states and 2561 transitions.
[2020-11-25 01:34:37,906 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:34:37,911 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2182 states to 2182 states and 2561 transitions.
[2020-11-25 01:34:37,911 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 683
[2020-11-25 01:34:37,911 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 683
[2020-11-25 01:34:37,911 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2182 states and 2561 transitions.
[2020-11-25 01:34:37,913 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:34:37,913 INFO  L728         BuchiCegarLoop]: Abstraction has 2182 states and 2561 transitions.
[2020-11-25 01:34:37,914 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2182 states and 2561 transitions.
[2020-11-25 01:34:37,923 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2182 to 2105.
[2020-11-25 01:34:37,923 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2105 states.
[2020-11-25 01:34:37,925 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2105 states to 2105 states and 2414 transitions.
[2020-11-25 01:34:37,926 INFO  L751         BuchiCegarLoop]: Abstraction has 2105 states and 2414 transitions.
[2020-11-25 01:34:37,926 INFO  L631         BuchiCegarLoop]: Abstraction has 2105 states and 2414 transitions.
[2020-11-25 01:34:37,926 INFO  L445         BuchiCegarLoop]: ======== Iteration 32============
[2020-11-25 01:34:37,926 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2105 states and 2414 transitions.
[2020-11-25 01:34:37,928 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:34:37,928 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:34:37,928 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:34:37,929 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:34:37,929 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:34:37,932 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:34:37,932 INFO  L82        PathProgramCache]: Analyzing trace with hash -1592287398, now seen corresponding path program 5 times
[2020-11-25 01:34:37,932 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:34:37,947 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:34:38,381 INFO  L134       CoverageAnalysis]: Checked inductivity of 515 backedges. 4 proven. 66 refuted. 0 times theorem prover too weak. 445 trivial. 0 not checked.
[2020-11-25 01:34:38,381 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:34:38,381 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-11-25 01:34:38,382 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:34:38,382 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-25 01:34:38,382 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=102, Invalid=890, Unknown=0, NotChecked=0, Total=992
[2020-11-25 01:34:38,382 INFO  L87              Difference]: Start difference. First operand 2105 states and 2414 transitions. cyclomatic complexity: 335 Second operand 32 states.
[2020-11-25 01:34:42,271 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:34:42,271 INFO  L93              Difference]: Finished difference Result 2184 states and 2564 transitions.
[2020-11-25 01:34:42,271 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 01:34:42,271 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2184 states and 2564 transitions.
[2020-11-25 01:34:42,277 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:34:42,282 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2184 states to 2184 states and 2564 transitions.
[2020-11-25 01:34:42,282 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 685
[2020-11-25 01:34:42,283 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 685
[2020-11-25 01:34:42,283 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2184 states and 2564 transitions.
[2020-11-25 01:34:42,284 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:34:42,284 INFO  L728         BuchiCegarLoop]: Abstraction has 2184 states and 2564 transitions.
[2020-11-25 01:34:42,286 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2184 states and 2564 transitions.
[2020-11-25 01:34:42,294 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2184 to 2111.
[2020-11-25 01:34:42,294 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2111 states.
[2020-11-25 01:34:42,297 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2111 states to 2111 states and 2437 transitions.
[2020-11-25 01:34:42,297 INFO  L751         BuchiCegarLoop]: Abstraction has 2111 states and 2437 transitions.
[2020-11-25 01:34:42,297 INFO  L631         BuchiCegarLoop]: Abstraction has 2111 states and 2437 transitions.
[2020-11-25 01:34:42,297 INFO  L445         BuchiCegarLoop]: ======== Iteration 33============
[2020-11-25 01:34:42,297 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2111 states and 2437 transitions.
[2020-11-25 01:34:42,299 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:34:42,299 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:34:42,299 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:34:42,300 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:34:42,300 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:34:42,302 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:34:42,303 INFO  L82        PathProgramCache]: Analyzing trace with hash -156081863, now seen corresponding path program 6 times
[2020-11-25 01:34:42,303 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:34:42,317 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:34:43,096 INFO  L134       CoverageAnalysis]: Checked inductivity of 508 backedges. 4 proven. 71 refuted. 0 times theorem prover too weak. 433 trivial. 0 not checked.
[2020-11-25 01:34:43,096 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:34:43,096 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-11-25 01:34:43,097 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:34:43,097 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-25 01:34:43,097 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=102, Invalid=890, Unknown=0, NotChecked=0, Total=992
[2020-11-25 01:34:43,097 INFO  L87              Difference]: Start difference. First operand 2111 states and 2437 transitions. cyclomatic complexity: 355 Second operand 32 states.
[2020-11-25 01:34:46,973 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:34:46,973 INFO  L93              Difference]: Finished difference Result 2188 states and 2579 transitions.
[2020-11-25 01:34:46,973 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 01:34:46,973 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2188 states and 2579 transitions.
[2020-11-25 01:34:46,978 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:34:46,983 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2188 states to 2188 states and 2579 transitions.
[2020-11-25 01:34:46,984 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 685
[2020-11-25 01:34:46,984 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 685
[2020-11-25 01:34:46,984 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2188 states and 2579 transitions.
[2020-11-25 01:34:46,986 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:34:46,986 INFO  L728         BuchiCegarLoop]: Abstraction has 2188 states and 2579 transitions.
[2020-11-25 01:34:46,987 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2188 states and 2579 transitions.
[2020-11-25 01:34:46,995 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2188 to 2111.
[2020-11-25 01:34:46,995 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2111 states.
[2020-11-25 01:34:46,998 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2111 states to 2111 states and 2437 transitions.
[2020-11-25 01:34:46,998 INFO  L751         BuchiCegarLoop]: Abstraction has 2111 states and 2437 transitions.
[2020-11-25 01:34:46,998 INFO  L631         BuchiCegarLoop]: Abstraction has 2111 states and 2437 transitions.
[2020-11-25 01:34:46,998 INFO  L445         BuchiCegarLoop]: ======== Iteration 34============
[2020-11-25 01:34:46,998 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2111 states and 2437 transitions.
[2020-11-25 01:34:47,000 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:34:47,000 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:34:47,000 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:34:47,001 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:34:47,001 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:34:47,004 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:34:47,004 INFO  L82        PathProgramCache]: Analyzing trace with hash -918445895, now seen corresponding path program 7 times
[2020-11-25 01:34:47,004 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:34:47,019 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:34:47,726 INFO  L134       CoverageAnalysis]: Checked inductivity of 508 backedges. 2 proven. 73 refuted. 0 times theorem prover too weak. 433 trivial. 0 not checked.
[2020-11-25 01:34:47,726 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:34:47,727 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [31] total 31
[2020-11-25 01:34:47,727 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:34:47,727 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 32 interpolants.
[2020-11-25 01:34:47,727 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=102, Invalid=890, Unknown=0, NotChecked=0, Total=992
[2020-11-25 01:34:47,727 INFO  L87              Difference]: Start difference. First operand 2111 states and 2437 transitions. cyclomatic complexity: 355 Second operand 32 states.
[2020-11-25 01:34:52,000 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:34:52,000 INFO  L93              Difference]: Finished difference Result 2188 states and 2579 transitions.
[2020-11-25 01:34:52,001 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 01:34:52,001 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2188 states and 2579 transitions.
[2020-11-25 01:34:52,006 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:34:52,010 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2188 states to 2188 states and 2579 transitions.
[2020-11-25 01:34:52,010 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 685
[2020-11-25 01:34:52,011 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 685
[2020-11-25 01:34:52,011 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2188 states and 2579 transitions.
[2020-11-25 01:34:52,012 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:34:52,012 INFO  L728         BuchiCegarLoop]: Abstraction has 2188 states and 2579 transitions.
[2020-11-25 01:34:52,013 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2188 states and 2579 transitions.
[2020-11-25 01:34:52,021 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2188 to 2115.
[2020-11-25 01:34:52,021 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2115 states.
[2020-11-25 01:34:52,024 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2115 states to 2115 states and 2452 transitions.
[2020-11-25 01:34:52,024 INFO  L751         BuchiCegarLoop]: Abstraction has 2115 states and 2452 transitions.
[2020-11-25 01:34:52,024 INFO  L631         BuchiCegarLoop]: Abstraction has 2115 states and 2452 transitions.
[2020-11-25 01:34:52,024 INFO  L445         BuchiCegarLoop]: ======== Iteration 35============
[2020-11-25 01:34:52,024 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2115 states and 2452 transitions.
[2020-11-25 01:34:52,026 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 01:34:52,026 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:34:52,026 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:34:52,027 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:34:52,027 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:34:52,029 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:34:52,029 INFO  L82        PathProgramCache]: Analyzing trace with hash -1867736018, now seen corresponding path program 3 times
[2020-11-25 01:34:52,030 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:34:52,044 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:34:52,349 INFO  L134       CoverageAnalysis]: Checked inductivity of 531 backedges. 4 proven. 83 refuted. 0 times theorem prover too weak. 444 trivial. 0 not checked.
[2020-11-25 01:34:52,349 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:34:52,349 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [34] total 34
[2020-11-25 01:34:52,349 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:34:52,350 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 35 interpolants.
[2020-11-25 01:34:52,350 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=128, Invalid=1062, Unknown=0, NotChecked=0, Total=1190
[2020-11-25 01:34:52,350 INFO  L87              Difference]: Start difference. First operand 2115 states and 2452 transitions. cyclomatic complexity: 368 Second operand 35 states.
[2020-11-25 01:34:54,599 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:34:54,599 INFO  L93              Difference]: Finished difference Result 2171 states and 2522 transitions.
[2020-11-25 01:34:54,599 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 31 states. 
[2020-11-25 01:34:54,599 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2171 states and 2522 transitions.
[2020-11-25 01:34:54,604 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:34:54,608 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2171 states to 2171 states and 2522 transitions.
[2020-11-25 01:34:54,609 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 680
[2020-11-25 01:34:54,609 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 680
[2020-11-25 01:34:54,609 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2171 states and 2522 transitions.
[2020-11-25 01:34:54,610 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:34:54,610 INFO  L728         BuchiCegarLoop]: Abstraction has 2171 states and 2522 transitions.
[2020-11-25 01:34:54,612 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2171 states and 2522 transitions.
[2020-11-25 01:34:54,619 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2171 to 2074.
[2020-11-25 01:34:54,620 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2074 states.
[2020-11-25 01:34:54,622 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2074 states to 2074 states and 2319 transitions.
[2020-11-25 01:34:54,622 INFO  L751         BuchiCegarLoop]: Abstraction has 2074 states and 2319 transitions.
[2020-11-25 01:34:54,622 INFO  L631         BuchiCegarLoop]: Abstraction has 2074 states and 2319 transitions.
[2020-11-25 01:34:54,622 INFO  L445         BuchiCegarLoop]: ======== Iteration 36============
[2020-11-25 01:34:54,622 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2074 states and 2319 transitions.
[2020-11-25 01:34:54,624 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:34:54,624 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:34:54,624 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:34:54,625 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:34:54,625 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:34:54,628 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:34:54,628 INFO  L82        PathProgramCache]: Analyzing trace with hash 432400113, now seen corresponding path program 1 times
[2020-11-25 01:34:54,628 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:34:54,645 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:34:55,658 INFO  L134       CoverageAnalysis]: Checked inductivity of 734 backedges. 33 proven. 98 refuted. 0 times theorem prover too weak. 603 trivial. 0 not checked.
[2020-11-25 01:34:55,658 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:34:55,658 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [38] total 38
[2020-11-25 01:34:55,659 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:34:55,659 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 39 interpolants.
[2020-11-25 01:34:55,659 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=157, Invalid=1325, Unknown=0, NotChecked=0, Total=1482
[2020-11-25 01:34:55,659 INFO  L87              Difference]: Start difference. First operand 2074 states and 2319 transitions. cyclomatic complexity: 259 Second operand 39 states.
[2020-11-25 01:35:02,148 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:35:02,148 INFO  L93              Difference]: Finished difference Result 2159 states and 2484 transitions.
[2020-11-25 01:35:02,148 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 38 states. 
[2020-11-25 01:35:02,148 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2159 states and 2484 transitions.
[2020-11-25 01:35:02,152 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:35:02,157 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2159 states to 2159 states and 2484 transitions.
[2020-11-25 01:35:02,157 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 678
[2020-11-25 01:35:02,157 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 01:35:02,157 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2159 states and 2484 transitions.
[2020-11-25 01:35:02,158 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:35:02,158 INFO  L728         BuchiCegarLoop]: Abstraction has 2159 states and 2484 transitions.
[2020-11-25 01:35:02,160 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2159 states and 2484 transitions.
[2020-11-25 01:35:02,167 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2159 to 2080.
[2020-11-25 01:35:02,167 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2080 states.
[2020-11-25 01:35:02,169 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2080 states to 2080 states and 2342 transitions.
[2020-11-25 01:35:02,169 INFO  L751         BuchiCegarLoop]: Abstraction has 2080 states and 2342 transitions.
[2020-11-25 01:35:02,169 INFO  L631         BuchiCegarLoop]: Abstraction has 2080 states and 2342 transitions.
[2020-11-25 01:35:02,169 INFO  L445         BuchiCegarLoop]: ======== Iteration 37============
[2020-11-25 01:35:02,169 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2080 states and 2342 transitions.
[2020-11-25 01:35:02,171 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:35:02,171 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:35:02,171 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:35:02,172 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:35:02,172 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:35:02,175 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:35:02,175 INFO  L82        PathProgramCache]: Analyzing trace with hash -1380205146, now seen corresponding path program 1 times
[2020-11-25 01:35:02,176 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:35:02,192 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:35:02,818 INFO  L134       CoverageAnalysis]: Checked inductivity of 785 backedges. 31 proven. 117 refuted. 0 times theorem prover too weak. 637 trivial. 0 not checked.
[2020-11-25 01:35:02,818 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:35:02,818 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [37] total 37
[2020-11-25 01:35:02,818 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:35:02,819 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 38 interpolants.
[2020-11-25 01:35:02,819 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=152, Invalid=1254, Unknown=0, NotChecked=0, Total=1406
[2020-11-25 01:35:02,819 INFO  L87              Difference]: Start difference. First operand 2080 states and 2342 transitions. cyclomatic complexity: 279 Second operand 38 states.
[2020-11-25 01:35:07,618 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:35:07,618 INFO  L93              Difference]: Finished difference Result 2169 states and 2522 transitions.
[2020-11-25 01:35:07,619 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 34 states. 
[2020-11-25 01:35:07,619 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2169 states and 2522 transitions.
[2020-11-25 01:35:07,624 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:35:07,629 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2169 states to 2169 states and 2522 transitions.
[2020-11-25 01:35:07,629 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 678
[2020-11-25 01:35:07,629 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 01:35:07,629 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2169 states and 2522 transitions.
[2020-11-25 01:35:07,631 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:35:07,631 INFO  L728         BuchiCegarLoop]: Abstraction has 2169 states and 2522 transitions.
[2020-11-25 01:35:07,632 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2169 states and 2522 transitions.
[2020-11-25 01:35:07,639 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2169 to 2090.
[2020-11-25 01:35:07,639 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2090 states.
[2020-11-25 01:35:07,642 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2090 states to 2090 states and 2380 transitions.
[2020-11-25 01:35:07,642 INFO  L751         BuchiCegarLoop]: Abstraction has 2090 states and 2380 transitions.
[2020-11-25 01:35:07,642 INFO  L631         BuchiCegarLoop]: Abstraction has 2090 states and 2380 transitions.
[2020-11-25 01:35:07,642 INFO  L445         BuchiCegarLoop]: ======== Iteration 38============
[2020-11-25 01:35:07,642 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2090 states and 2380 transitions.
[2020-11-25 01:35:07,644 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:35:07,644 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:35:07,644 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:35:07,646 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:35:07,646 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:35:07,651 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:35:07,651 INFO  L82        PathProgramCache]: Analyzing trace with hash -664723003, now seen corresponding path program 1 times
[2020-11-25 01:35:07,651 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:35:07,668 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:35:08,739 INFO  L134       CoverageAnalysis]: Checked inductivity of 765 backedges. 30 proven. 111 refuted. 0 times theorem prover too weak. 624 trivial. 0 not checked.
[2020-11-25 01:35:08,740 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:35:08,740 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [39] total 39
[2020-11-25 01:35:08,740 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:35:08,741 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 40 interpolants.
[2020-11-25 01:35:08,741 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=160, Invalid=1400, Unknown=0, NotChecked=0, Total=1560
[2020-11-25 01:35:08,741 INFO  L87              Difference]: Start difference. First operand 2090 states and 2380 transitions. cyclomatic complexity: 312 Second operand 40 states.
[2020-11-25 01:35:15,264 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:35:15,264 INFO  L93              Difference]: Finished difference Result 2161 states and 2492 transitions.
[2020-11-25 01:35:15,265 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 36 states. 
[2020-11-25 01:35:15,265 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2161 states and 2492 transitions.
[2020-11-25 01:35:15,269 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:35:15,273 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2161 states to 2161 states and 2492 transitions.
[2020-11-25 01:35:15,274 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 678
[2020-11-25 01:35:15,274 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 01:35:15,274 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2161 states and 2492 transitions.
[2020-11-25 01:35:15,275 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:35:15,275 INFO  L728         BuchiCegarLoop]: Abstraction has 2161 states and 2492 transitions.
[2020-11-25 01:35:15,277 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2161 states and 2492 transitions.
[2020-11-25 01:35:15,284 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2161 to 2090.
[2020-11-25 01:35:15,284 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2090 states.
[2020-11-25 01:35:15,286 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2090 states to 2090 states and 2380 transitions.
[2020-11-25 01:35:15,286 INFO  L751         BuchiCegarLoop]: Abstraction has 2090 states and 2380 transitions.
[2020-11-25 01:35:15,286 INFO  L631         BuchiCegarLoop]: Abstraction has 2090 states and 2380 transitions.
[2020-11-25 01:35:15,286 INFO  L445         BuchiCegarLoop]: ======== Iteration 39============
[2020-11-25 01:35:15,286 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2090 states and 2380 transitions.
[2020-11-25 01:35:15,288 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:35:15,288 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:35:15,288 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:35:15,289 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:35:15,289 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:35:15,292 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:35:15,292 INFO  L82        PathProgramCache]: Analyzing trace with hash 4116496, now seen corresponding path program 2 times
[2020-11-25 01:35:15,293 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:35:15,310 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:35:18,879 INFO  L134       CoverageAnalysis]: Checked inductivity of 771 backedges. 4 proven. 298 refuted. 0 times theorem prover too weak. 469 trivial. 0 not checked.
[2020-11-25 01:35:18,880 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:35:18,880 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [43] total 43
[2020-11-25 01:35:18,880 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:35:18,880 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 44 interpolants.
[2020-11-25 01:35:18,880 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=158, Invalid=1734, Unknown=0, NotChecked=0, Total=1892
[2020-11-25 01:35:18,881 INFO  L87              Difference]: Start difference. First operand 2090 states and 2380 transitions. cyclomatic complexity: 312 Second operand 44 states.
[2020-11-25 01:35:27,623 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:35:27,623 INFO  L93              Difference]: Finished difference Result 2174 states and 2533 transitions.
[2020-11-25 01:35:27,623 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 44 states. 
[2020-11-25 01:35:27,623 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2174 states and 2533 transitions.
[2020-11-25 01:35:27,627 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:35:27,632 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2174 states to 2174 states and 2533 transitions.
[2020-11-25 01:35:27,632 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 681
[2020-11-25 01:35:27,632 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 681
[2020-11-25 01:35:27,632 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2174 states and 2533 transitions.
[2020-11-25 01:35:27,634 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:35:27,634 INFO  L728         BuchiCegarLoop]: Abstraction has 2174 states and 2533 transitions.
[2020-11-25 01:35:27,635 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2174 states and 2533 transitions.
[2020-11-25 01:35:27,642 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2174 to 2096.
[2020-11-25 01:35:27,642 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2096 states.
[2020-11-25 01:35:27,644 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2096 states to 2096 states and 2404 transitions.
[2020-11-25 01:35:27,644 INFO  L751         BuchiCegarLoop]: Abstraction has 2096 states and 2404 transitions.
[2020-11-25 01:35:27,644 INFO  L631         BuchiCegarLoop]: Abstraction has 2096 states and 2404 transitions.
[2020-11-25 01:35:27,644 INFO  L445         BuchiCegarLoop]: ======== Iteration 40============
[2020-11-25 01:35:27,644 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2096 states and 2404 transitions.
[2020-11-25 01:35:27,646 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:35:27,646 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:35:27,646 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:35:27,647 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:35:27,647 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:35:27,651 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:35:27,651 INFO  L82        PathProgramCache]: Analyzing trace with hash 1851488965, now seen corresponding path program 2 times
[2020-11-25 01:35:27,651 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:35:27,668 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:35:28,701 INFO  L134       CoverageAnalysis]: Checked inductivity of 765 backedges. 33 proven. 108 refuted. 0 times theorem prover too weak. 624 trivial. 0 not checked.
[2020-11-25 01:35:28,701 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:35:28,701 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [39] total 39
[2020-11-25 01:35:28,702 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:35:28,702 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 40 interpolants.
[2020-11-25 01:35:28,702 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=168, Invalid=1392, Unknown=0, NotChecked=0, Total=1560
[2020-11-25 01:35:28,702 INFO  L87              Difference]: Start difference. First operand 2096 states and 2404 transitions. cyclomatic complexity: 333 Second operand 40 states.
[2020-11-25 01:35:37,231 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:35:37,231 INFO  L93              Difference]: Finished difference Result 2187 states and 2592 transitions.
[2020-11-25 01:35:37,231 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 38 states. 
[2020-11-25 01:35:37,232 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2187 states and 2592 transitions.
[2020-11-25 01:35:37,236 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:35:37,241 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2187 states to 2187 states and 2592 transitions.
[2020-11-25 01:35:37,241 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 678
[2020-11-25 01:35:37,242 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 01:35:37,242 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2187 states and 2592 transitions.
[2020-11-25 01:35:37,243 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:35:37,243 INFO  L728         BuchiCegarLoop]: Abstraction has 2187 states and 2592 transitions.
[2020-11-25 01:35:37,245 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2187 states and 2592 transitions.
[2020-11-25 01:35:37,252 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2187 to 2094.
[2020-11-25 01:35:37,252 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2094 states.
[2020-11-25 01:35:37,254 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2094 states to 2094 states and 2397 transitions.
[2020-11-25 01:35:37,255 INFO  L751         BuchiCegarLoop]: Abstraction has 2094 states and 2397 transitions.
[2020-11-25 01:35:37,255 INFO  L631         BuchiCegarLoop]: Abstraction has 2094 states and 2397 transitions.
[2020-11-25 01:35:37,255 INFO  L445         BuchiCegarLoop]: ======== Iteration 41============
[2020-11-25 01:35:37,255 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2094 states and 2397 transitions.
[2020-11-25 01:35:37,257 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:35:37,257 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:35:37,257 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:35:37,258 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:35:37,258 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:35:37,261 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:35:37,261 INFO  L82        PathProgramCache]: Analyzing trace with hash 293078641, now seen corresponding path program 2 times
[2020-11-25 01:35:37,262 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:35:37,278 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:35:38,025 WARN  L188               SmtUtils]: Spent 160.00 ms on a formula simplification that was a NOOP. DAG size: 58
[2020-11-25 01:35:38,686 INFO  L134       CoverageAnalysis]: Checked inductivity of 734 backedges. 31 proven. 100 refuted. 0 times theorem prover too weak. 603 trivial. 0 not checked.
[2020-11-25 01:35:38,686 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:35:38,686 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [38] total 38
[2020-11-25 01:35:38,686 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:35:38,686 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 39 interpolants.
[2020-11-25 01:35:38,687 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=149, Invalid=1333, Unknown=0, NotChecked=0, Total=1482
[2020-11-25 01:35:38,687 INFO  L87              Difference]: Start difference. First operand 2094 states and 2397 transitions. cyclomatic complexity: 327 Second operand 39 states.
[2020-11-25 01:35:42,454 WARN  L188               SmtUtils]: Spent 100.00 ms on a formula simplification that was a NOOP. DAG size: 126
[2020-11-25 01:35:46,637 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:35:46,637 INFO  L93              Difference]: Finished difference Result 2175 states and 2547 transitions.
[2020-11-25 01:35:46,637 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 36 states. 
[2020-11-25 01:35:46,637 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2175 states and 2547 transitions.
[2020-11-25 01:35:46,642 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:35:46,647 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2175 states to 2175 states and 2547 transitions.
[2020-11-25 01:35:46,647 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 678
[2020-11-25 01:35:46,647 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 01:35:46,647 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2175 states and 2547 transitions.
[2020-11-25 01:35:46,649 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:35:46,649 INFO  L728         BuchiCegarLoop]: Abstraction has 2175 states and 2547 transitions.
[2020-11-25 01:35:46,650 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2175 states and 2547 transitions.
[2020-11-25 01:35:46,657 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2175 to 2094.
[2020-11-25 01:35:46,657 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2094 states.
[2020-11-25 01:35:46,659 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2094 states to 2094 states and 2397 transitions.
[2020-11-25 01:35:46,659 INFO  L751         BuchiCegarLoop]: Abstraction has 2094 states and 2397 transitions.
[2020-11-25 01:35:46,659 INFO  L631         BuchiCegarLoop]: Abstraction has 2094 states and 2397 transitions.
[2020-11-25 01:35:46,659 INFO  L445         BuchiCegarLoop]: ======== Iteration 42============
[2020-11-25 01:35:46,659 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2094 states and 2397 transitions.
[2020-11-25 01:35:46,661 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:35:46,661 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:35:46,661 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:35:46,662 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:35:46,662 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:35:46,665 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:35:46,666 INFO  L82        PathProgramCache]: Analyzing trace with hash -939225615, now seen corresponding path program 3 times
[2020-11-25 01:35:46,666 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:35:46,682 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:35:47,674 INFO  L134       CoverageAnalysis]: Checked inductivity of 734 backedges. 51 proven. 80 refuted. 0 times theorem prover too weak. 603 trivial. 0 not checked.
[2020-11-25 01:35:47,674 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:35:47,674 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [38] total 38
[2020-11-25 01:35:47,674 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:35:47,674 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 39 interpolants.
[2020-11-25 01:35:47,674 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=157, Invalid=1325, Unknown=0, NotChecked=0, Total=1482
[2020-11-25 01:35:47,675 INFO  L87              Difference]: Start difference. First operand 2094 states and 2397 transitions. cyclomatic complexity: 327 Second operand 39 states.
[2020-11-25 01:35:56,365 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:35:56,365 INFO  L93              Difference]: Finished difference Result 2185 states and 2585 transitions.
[2020-11-25 01:35:56,366 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 38 states. 
[2020-11-25 01:35:56,366 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2185 states and 2585 transitions.
[2020-11-25 01:35:56,371 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:35:56,376 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2185 states to 2185 states and 2585 transitions.
[2020-11-25 01:35:56,376 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 678
[2020-11-25 01:35:56,376 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 01:35:56,376 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2185 states and 2585 transitions.
[2020-11-25 01:35:56,378 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:35:56,378 INFO  L728         BuchiCegarLoop]: Abstraction has 2185 states and 2585 transitions.
[2020-11-25 01:35:56,379 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2185 states and 2585 transitions.
[2020-11-25 01:35:56,386 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2185 to 2100.
[2020-11-25 01:35:56,386 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2100 states.
[2020-11-25 01:35:56,389 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2100 states to 2100 states and 2420 transitions.
[2020-11-25 01:35:56,389 INFO  L751         BuchiCegarLoop]: Abstraction has 2100 states and 2420 transitions.
[2020-11-25 01:35:56,389 INFO  L631         BuchiCegarLoop]: Abstraction has 2100 states and 2420 transitions.
[2020-11-25 01:35:56,389 INFO  L445         BuchiCegarLoop]: ======== Iteration 43============
[2020-11-25 01:35:56,389 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2100 states and 2420 transitions.
[2020-11-25 01:35:56,391 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:35:56,391 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:35:56,391 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:35:56,392 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:35:56,392 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:35:56,395 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:35:56,395 INFO  L82        PathProgramCache]: Analyzing trace with hash 1472071760, now seen corresponding path program 3 times
[2020-11-25 01:35:56,396 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:35:56,413 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:35:59,858 INFO  L134       CoverageAnalysis]: Checked inductivity of 771 backedges. 47 proven. 108 refuted. 0 times theorem prover too weak. 616 trivial. 0 not checked.
[2020-11-25 01:35:59,858 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:35:59,858 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [38] total 38
[2020-11-25 01:35:59,859 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:35:59,859 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 39 interpolants.
[2020-11-25 01:35:59,859 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=148, Invalid=1334, Unknown=0, NotChecked=0, Total=1482
[2020-11-25 01:35:59,859 INFO  L87              Difference]: Start difference. First operand 2100 states and 2420 transitions. cyclomatic complexity: 347 Second operand 39 states.
[2020-11-25 01:36:13,109 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:36:13,109 INFO  L93              Difference]: Finished difference Result 2167 states and 2522 transitions.
[2020-11-25 01:36:13,109 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 36 states. 
[2020-11-25 01:36:13,109 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2167 states and 2522 transitions.
[2020-11-25 01:36:13,114 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:36:13,119 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2167 states to 2167 states and 2522 transitions.
[2020-11-25 01:36:13,119 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 676
[2020-11-25 01:36:13,119 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 676
[2020-11-25 01:36:13,119 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2167 states and 2522 transitions.
[2020-11-25 01:36:13,121 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:36:13,121 INFO  L728         BuchiCegarLoop]: Abstraction has 2167 states and 2522 transitions.
[2020-11-25 01:36:13,122 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2167 states and 2522 transitions.
[2020-11-25 01:36:13,129 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2167 to 2100.
[2020-11-25 01:36:13,129 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2100 states.
[2020-11-25 01:36:13,131 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2100 states to 2100 states and 2420 transitions.
[2020-11-25 01:36:13,132 INFO  L751         BuchiCegarLoop]: Abstraction has 2100 states and 2420 transitions.
[2020-11-25 01:36:13,132 INFO  L631         BuchiCegarLoop]: Abstraction has 2100 states and 2420 transitions.
[2020-11-25 01:36:13,132 INFO  L445         BuchiCegarLoop]: ======== Iteration 44============
[2020-11-25 01:36:13,132 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2100 states and 2420 transitions.
[2020-11-25 01:36:13,134 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:36:13,134 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:36:13,134 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:36:13,135 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:36:13,135 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:36:13,138 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:36:13,138 INFO  L82        PathProgramCache]: Analyzing trace with hash 803426712, now seen corresponding path program 4 times
[2020-11-25 01:36:13,138 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:36:13,158 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:36:16,743 INFO  L134       CoverageAnalysis]: Checked inductivity of 824 backedges. 22 proven. 109 refuted. 0 times theorem prover too weak. 693 trivial. 0 not checked.
[2020-11-25 01:36:16,743 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:36:16,743 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [40] total 40
[2020-11-25 01:36:16,743 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:36:16,743 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 41 interpolants.
[2020-11-25 01:36:16,744 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=150, Invalid=1490, Unknown=0, NotChecked=0, Total=1640
[2020-11-25 01:36:16,744 INFO  L87              Difference]: Start difference. First operand 2100 states and 2420 transitions. cyclomatic complexity: 347 Second operand 41 states.
[2020-11-25 01:36:19,866 WARN  L188               SmtUtils]: Spent 165.00 ms on a formula simplification that was a NOOP. DAG size: 138
[2020-11-25 01:36:20,749 WARN  L188               SmtUtils]: Spent 157.00 ms on a formula simplification that was a NOOP. DAG size: 139
[2020-11-25 01:36:21,311 WARN  L188               SmtUtils]: Spent 165.00 ms on a formula simplification that was a NOOP. DAG size: 140
[2020-11-25 01:36:22,267 WARN  L188               SmtUtils]: Spent 165.00 ms on a formula simplification that was a NOOP. DAG size: 140
[2020-11-25 01:36:27,044 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:36:27,044 INFO  L93              Difference]: Finished difference Result 2161 states and 2500 transitions.
[2020-11-25 01:36:27,045 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 36 states. 
[2020-11-25 01:36:27,045 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2161 states and 2500 transitions.
[2020-11-25 01:36:27,049 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:36:27,053 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2161 states to 2161 states and 2500 transitions.
[2020-11-25 01:36:27,054 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 676
[2020-11-25 01:36:27,054 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 676
[2020-11-25 01:36:27,054 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2161 states and 2500 transitions.
[2020-11-25 01:36:27,055 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:36:27,056 INFO  L728         BuchiCegarLoop]: Abstraction has 2161 states and 2500 transitions.
[2020-11-25 01:36:27,057 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2161 states and 2500 transitions.
[2020-11-25 01:36:27,064 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2161 to 2100.
[2020-11-25 01:36:27,064 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2100 states.
[2020-11-25 01:36:27,067 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2100 states to 2100 states and 2420 transitions.
[2020-11-25 01:36:27,067 INFO  L751         BuchiCegarLoop]: Abstraction has 2100 states and 2420 transitions.
[2020-11-25 01:36:27,067 INFO  L631         BuchiCegarLoop]: Abstraction has 2100 states and 2420 transitions.
[2020-11-25 01:36:27,067 INFO  L445         BuchiCegarLoop]: ======== Iteration 45============
[2020-11-25 01:36:27,067 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2100 states and 2420 transitions.
[2020-11-25 01:36:27,069 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:36:27,069 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:36:27,069 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:36:27,070 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:36:27,070 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:36:27,073 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:36:27,073 INFO  L82        PathProgramCache]: Analyzing trace with hash 1024293701, now seen corresponding path program 3 times
[2020-11-25 01:36:27,074 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:36:27,090 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:36:28,063 INFO  L134       CoverageAnalysis]: Checked inductivity of 765 backedges. 50 proven. 91 refuted. 0 times theorem prover too weak. 624 trivial. 0 not checked.
[2020-11-25 01:36:28,063 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:36:28,063 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [39] total 39
[2020-11-25 01:36:28,064 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:36:28,064 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 40 interpolants.
[2020-11-25 01:36:28,064 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=168, Invalid=1392, Unknown=0, NotChecked=0, Total=1560
[2020-11-25 01:36:28,064 INFO  L87              Difference]: Start difference. First operand 2100 states and 2420 transitions. cyclomatic complexity: 347 Second operand 40 states.
[2020-11-25 01:36:36,689 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:36:36,689 INFO  L93              Difference]: Finished difference Result 2191 states and 2608 transitions.
[2020-11-25 01:36:36,689 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 38 states. 
[2020-11-25 01:36:36,689 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2191 states and 2608 transitions.
[2020-11-25 01:36:36,695 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:36:36,700 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2191 states to 2191 states and 2608 transitions.
[2020-11-25 01:36:36,700 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 678
[2020-11-25 01:36:36,701 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 01:36:36,701 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2191 states and 2608 transitions.
[2020-11-25 01:36:36,702 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:36:36,702 INFO  L728         BuchiCegarLoop]: Abstraction has 2191 states and 2608 transitions.
[2020-11-25 01:36:36,704 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2191 states and 2608 transitions.
[2020-11-25 01:36:36,711 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2191 to 2100.
[2020-11-25 01:36:36,711 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2100 states.
[2020-11-25 01:36:36,714 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2100 states to 2100 states and 2420 transitions.
[2020-11-25 01:36:36,714 INFO  L751         BuchiCegarLoop]: Abstraction has 2100 states and 2420 transitions.
[2020-11-25 01:36:36,714 INFO  L631         BuchiCegarLoop]: Abstraction has 2100 states and 2420 transitions.
[2020-11-25 01:36:36,714 INFO  L445         BuchiCegarLoop]: ======== Iteration 46============
[2020-11-25 01:36:36,714 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2100 states and 2420 transitions.
[2020-11-25 01:36:36,716 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:36:36,716 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:36:36,716 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:36:36,717 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [8, 8, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:36:36,717 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:36:36,720 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:36:36,720 INFO  L82        PathProgramCache]: Analyzing trace with hash 511121880, now seen corresponding path program 5 times
[2020-11-25 01:36:36,721 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:36:36,737 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:36:41,182 INFO  L134       CoverageAnalysis]: Checked inductivity of 824 backedges. 30 proven. 101 refuted. 0 times theorem prover too weak. 693 trivial. 0 not checked.
[2020-11-25 01:36:41,182 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:36:41,182 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [39] total 39
[2020-11-25 01:36:41,182 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:36:41,183 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 40 interpolants.
[2020-11-25 01:36:41,183 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=141, Invalid=1419, Unknown=0, NotChecked=0, Total=1560
[2020-11-25 01:36:41,183 INFO  L87              Difference]: Start difference. First operand 2100 states and 2420 transitions. cyclomatic complexity: 347 Second operand 40 states.
[2020-11-25 01:36:45,641 WARN  L188               SmtUtils]: Spent 162.00 ms on a formula simplification that was a NOOP. DAG size: 140
[2020-11-25 01:36:50,567 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:36:50,567 INFO  L93              Difference]: Finished difference Result 2171 states and 2538 transitions.
[2020-11-25 01:36:50,567 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 35 states. 
[2020-11-25 01:36:50,567 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2171 states and 2538 transitions.
[2020-11-25 01:36:50,572 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:36:50,576 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2171 states to 2171 states and 2538 transitions.
[2020-11-25 01:36:50,577 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 676
[2020-11-25 01:36:50,577 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 676
[2020-11-25 01:36:50,577 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2171 states and 2538 transitions.
[2020-11-25 01:36:50,578 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:36:50,578 INFO  L728         BuchiCegarLoop]: Abstraction has 2171 states and 2538 transitions.
[2020-11-25 01:36:50,580 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2171 states and 2538 transitions.
[2020-11-25 01:36:50,587 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2171 to 2092.
[2020-11-25 01:36:50,587 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2092 states.
[2020-11-25 01:36:50,589 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2092 states to 2092 states and 2388 transitions.
[2020-11-25 01:36:50,589 INFO  L751         BuchiCegarLoop]: Abstraction has 2092 states and 2388 transitions.
[2020-11-25 01:36:50,589 INFO  L631         BuchiCegarLoop]: Abstraction has 2092 states and 2388 transitions.
[2020-11-25 01:36:50,589 INFO  L445         BuchiCegarLoop]: ======== Iteration 47============
[2020-11-25 01:36:50,589 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2092 states and 2388 transitions.
[2020-11-25 01:36:50,591 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:36:50,591 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:36:50,591 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:36:50,592 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:36:50,592 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:36:50,595 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:36:50,595 INFO  L82        PathProgramCache]: Analyzing trace with hash 1556161830, now seen corresponding path program 2 times
[2020-11-25 01:36:50,596 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:36:50,612 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:36:51,231 INFO  L134       CoverageAnalysis]: Checked inductivity of 785 backedges. 66 proven. 63 refuted. 0 times theorem prover too weak. 656 trivial. 0 not checked.
[2020-11-25 01:36:51,231 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:36:51,231 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [34] total 34
[2020-11-25 01:36:51,232 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:36:51,232 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 35 interpolants.
[2020-11-25 01:36:51,232 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=127, Invalid=1063, Unknown=0, NotChecked=0, Total=1190
[2020-11-25 01:36:51,232 INFO  L87              Difference]: Start difference. First operand 2092 states and 2388 transitions. cyclomatic complexity: 319 Second operand 35 states.
[2020-11-25 01:36:55,308 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:36:55,309 INFO  L93              Difference]: Finished difference Result 2195 states and 2626 transitions.
[2020-11-25 01:36:55,309 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 34 states. 
[2020-11-25 01:36:55,309 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2195 states and 2626 transitions.
[2020-11-25 01:36:55,315 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:36:55,320 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2195 states to 2195 states and 2626 transitions.
[2020-11-25 01:36:55,320 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 676
[2020-11-25 01:36:55,320 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 676
[2020-11-25 01:36:55,320 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2195 states and 2626 transitions.
[2020-11-25 01:36:55,322 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:36:55,322 INFO  L728         BuchiCegarLoop]: Abstraction has 2195 states and 2626 transitions.
[2020-11-25 01:36:55,323 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2195 states and 2626 transitions.
[2020-11-25 01:36:55,331 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2195 to 2090.
[2020-11-25 01:36:55,331 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2090 states.
[2020-11-25 01:36:55,333 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2090 states to 2090 states and 2380 transitions.
[2020-11-25 01:36:55,333 INFO  L751         BuchiCegarLoop]: Abstraction has 2090 states and 2380 transitions.
[2020-11-25 01:36:55,333 INFO  L631         BuchiCegarLoop]: Abstraction has 2090 states and 2380 transitions.
[2020-11-25 01:36:55,333 INFO  L445         BuchiCegarLoop]: ======== Iteration 48============
[2020-11-25 01:36:55,333 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2090 states and 2380 transitions.
[2020-11-25 01:36:55,335 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:36:55,335 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:36:55,335 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:36:55,336 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:36:55,336 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:36:55,339 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:36:55,340 INFO  L82        PathProgramCache]: Analyzing trace with hash 135436582, now seen corresponding path program 3 times
[2020-11-25 01:36:55,340 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:36:55,357 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:36:55,926 INFO  L134       CoverageAnalysis]: Checked inductivity of 785 backedges. 48 proven. 100 refuted. 0 times theorem prover too weak. 637 trivial. 0 not checked.
[2020-11-25 01:36:55,926 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:36:55,926 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [37] total 37
[2020-11-25 01:36:55,927 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:36:55,927 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 38 interpolants.
[2020-11-25 01:36:55,927 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=152, Invalid=1254, Unknown=0, NotChecked=0, Total=1406
[2020-11-25 01:36:55,927 INFO  L87              Difference]: Start difference. First operand 2090 states and 2380 transitions. cyclomatic complexity: 312 Second operand 38 states.
[2020-11-25 01:37:00,746 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:37:00,746 INFO  L93              Difference]: Finished difference Result 2201 states and 2644 transitions.
[2020-11-25 01:37:00,746 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 35 states. 
[2020-11-25 01:37:00,746 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2201 states and 2644 transitions.
[2020-11-25 01:37:00,751 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:37:00,757 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2201 states to 2201 states and 2644 transitions.
[2020-11-25 01:37:00,757 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 678
[2020-11-25 01:37:00,757 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 01:37:00,757 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2201 states and 2644 transitions.
[2020-11-25 01:37:00,759 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:37:00,759 INFO  L728         BuchiCegarLoop]: Abstraction has 2201 states and 2644 transitions.
[2020-11-25 01:37:00,760 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2201 states and 2644 transitions.
[2020-11-25 01:37:00,768 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2201 to 2090.
[2020-11-25 01:37:00,768 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2090 states.
[2020-11-25 01:37:00,770 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2090 states to 2090 states and 2380 transitions.
[2020-11-25 01:37:00,770 INFO  L751         BuchiCegarLoop]: Abstraction has 2090 states and 2380 transitions.
[2020-11-25 01:37:00,770 INFO  L631         BuchiCegarLoop]: Abstraction has 2090 states and 2380 transitions.
[2020-11-25 01:37:00,770 INFO  L445         BuchiCegarLoop]: ======== Iteration 49============
[2020-11-25 01:37:00,770 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2090 states and 2380 transitions.
[2020-11-25 01:37:00,772 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:37:00,772 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:37:00,772 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:37:00,773 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 4, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:37:00,773 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:37:00,777 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:37:00,777 INFO  L82        PathProgramCache]: Analyzing trace with hash -681872981, now seen corresponding path program 4 times
[2020-11-25 01:37:00,777 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:37:00,796 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:37:04,501 INFO  L134       CoverageAnalysis]: Checked inductivity of 1188 backedges. 51 proven. 142 refuted. 0 times theorem prover too weak. 995 trivial. 0 not checked.
[2020-11-25 01:37:04,501 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:37:04,501 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [39] total 39
[2020-11-25 01:37:04,501 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:37:04,501 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 40 interpolants.
[2020-11-25 01:37:04,502 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=163, Invalid=1397, Unknown=0, NotChecked=0, Total=1560
[2020-11-25 01:37:04,502 INFO  L87              Difference]: Start difference. First operand 2090 states and 2380 transitions. cyclomatic complexity: 312 Second operand 40 states.
[2020-11-25 01:37:07,348 WARN  L188               SmtUtils]: Spent 166.00 ms on a formula simplification that was a NOOP. DAG size: 138
[2020-11-25 01:37:08,641 WARN  L188               SmtUtils]: Spent 230.00 ms on a formula simplification that was a NOOP. DAG size: 140
[2020-11-25 01:37:09,412 WARN  L188               SmtUtils]: Spent 165.00 ms on a formula simplification that was a NOOP. DAG size: 142
[2020-11-25 01:37:13,887 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:37:13,887 INFO  L93              Difference]: Finished difference Result 2197 states and 2629 transitions.
[2020-11-25 01:37:13,887 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 39 states. 
[2020-11-25 01:37:13,887 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2197 states and 2629 transitions.
[2020-11-25 01:37:13,892 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:37:13,897 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2197 states to 2197 states and 2629 transitions.
[2020-11-25 01:37:13,898 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 678
[2020-11-25 01:37:13,898 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 01:37:13,898 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2197 states and 2629 transitions.
[2020-11-25 01:37:13,900 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:37:13,900 INFO  L728         BuchiCegarLoop]: Abstraction has 2197 states and 2629 transitions.
[2020-11-25 01:37:13,901 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2197 states and 2629 transitions.
[2020-11-25 01:37:13,909 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2197 to 2098.
[2020-11-25 01:37:13,909 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2098 states.
[2020-11-25 01:37:13,912 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2098 states to 2098 states and 2411 transitions.
[2020-11-25 01:37:13,912 INFO  L751         BuchiCegarLoop]: Abstraction has 2098 states and 2411 transitions.
[2020-11-25 01:37:13,912 INFO  L631         BuchiCegarLoop]: Abstraction has 2098 states and 2411 transitions.
[2020-11-25 01:37:13,912 INFO  L445         BuchiCegarLoop]: ======== Iteration 50============
[2020-11-25 01:37:13,912 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2098 states and 2411 transitions.
[2020-11-25 01:37:13,914 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:37:13,914 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:37:13,914 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:37:13,915 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:37:13,915 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:37:13,918 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:37:13,918 INFO  L82        PathProgramCache]: Analyzing trace with hash -1407710593, now seen corresponding path program 1 times
[2020-11-25 01:37:13,919 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:37:13,938 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:37:17,720 INFO  L134       CoverageAnalysis]: Checked inductivity of 1202 backedges. 48 proven. 174 refuted. 0 times theorem prover too weak. 980 trivial. 0 not checked.
[2020-11-25 01:37:17,720 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:37:17,720 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [43] total 43
[2020-11-25 01:37:17,721 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:37:17,721 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 44 interpolants.
[2020-11-25 01:37:17,721 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=200, Invalid=1692, Unknown=0, NotChecked=0, Total=1892
[2020-11-25 01:37:17,721 INFO  L87              Difference]: Start difference. First operand 2098 states and 2411 transitions. cyclomatic complexity: 339 Second operand 44 states.
[2020-11-25 01:37:20,617 WARN  L188               SmtUtils]: Spent 166.00 ms on a formula simplification that was a NOOP. DAG size: 137
[2020-11-25 01:37:21,698 WARN  L188               SmtUtils]: Spent 115.00 ms on a formula simplification that was a NOOP. DAG size: 113
[2020-11-25 01:37:22,751 WARN  L188               SmtUtils]: Spent 169.00 ms on a formula simplification that was a NOOP. DAG size: 142
[2020-11-25 01:37:28,838 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:37:28,838 INFO  L93              Difference]: Finished difference Result 2227 states and 2744 transitions.
[2020-11-25 01:37:28,838 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 40 states. 
[2020-11-25 01:37:28,838 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2227 states and 2744 transitions.
[2020-11-25 01:37:28,843 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:37:28,849 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2227 states to 2227 states and 2744 transitions.
[2020-11-25 01:37:28,849 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 678
[2020-11-25 01:37:28,850 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 01:37:28,850 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2227 states and 2744 transitions.
[2020-11-25 01:37:28,852 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:37:28,852 INFO  L728         BuchiCegarLoop]: Abstraction has 2227 states and 2744 transitions.
[2020-11-25 01:37:28,853 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2227 states and 2744 transitions.
[2020-11-25 01:37:28,861 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2227 to 2112.
[2020-11-25 01:37:28,861 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2112 states.
[2020-11-25 01:37:28,864 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2112 states to 2112 states and 2464 transitions.
[2020-11-25 01:37:28,864 INFO  L751         BuchiCegarLoop]: Abstraction has 2112 states and 2464 transitions.
[2020-11-25 01:37:28,864 INFO  L631         BuchiCegarLoop]: Abstraction has 2112 states and 2464 transitions.
[2020-11-25 01:37:28,864 INFO  L445         BuchiCegarLoop]: ======== Iteration 51============
[2020-11-25 01:37:28,864 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2112 states and 2464 transitions.
[2020-11-25 01:37:28,866 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:37:28,866 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:37:28,866 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:37:28,867 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:37:28,867 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:37:28,871 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:37:28,871 INFO  L82        PathProgramCache]: Analyzing trace with hash -21962422, now seen corresponding path program 5 times
[2020-11-25 01:37:28,871 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:37:28,891 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:37:58,305 INFO  L134       CoverageAnalysis]: Checked inductivity of 1172 backedges. 50 proven. 169 refuted. 0 times theorem prover too weak. 953 trivial. 0 not checked.
[2020-11-25 01:37:58,305 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:37:58,305 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [42] total 42
[2020-11-25 01:37:58,306 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:37:58,306 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 43 interpolants.
[2020-11-25 01:37:58,306 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=186, Invalid=1620, Unknown=0, NotChecked=0, Total=1806
[2020-11-25 01:37:58,306 INFO  L87              Difference]: Start difference. First operand 2112 states and 2464 transitions. cyclomatic complexity: 385 Second operand 43 states.
[2020-11-25 01:38:01,768 WARN  L188               SmtUtils]: Spent 217.00 ms on a formula simplification that was a NOOP. DAG size: 154
[2020-11-25 01:38:02,748 WARN  L188               SmtUtils]: Spent 103.00 ms on a formula simplification that was a NOOP. DAG size: 133
[2020-11-25 01:38:03,575 WARN  L188               SmtUtils]: Spent 361.00 ms on a formula simplification that was a NOOP. DAG size: 156
[2020-11-25 01:38:04,617 WARN  L188               SmtUtils]: Spent 297.00 ms on a formula simplification that was a NOOP. DAG size: 158
[2020-11-25 01:38:11,553 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:38:11,553 INFO  L93              Difference]: Finished difference Result 2221 states and 2721 transitions.
[2020-11-25 01:38:11,553 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 39 states. 
[2020-11-25 01:38:11,553 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2221 states and 2721 transitions.
[2020-11-25 01:38:11,558 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:38:11,564 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2221 states to 2221 states and 2721 transitions.
[2020-11-25 01:38:11,564 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 678
[2020-11-25 01:38:11,564 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 01:38:11,564 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2221 states and 2721 transitions.
[2020-11-25 01:38:11,566 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:38:11,566 INFO  L728         BuchiCegarLoop]: Abstraction has 2221 states and 2721 transitions.
[2020-11-25 01:38:11,567 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2221 states and 2721 transitions.
[2020-11-25 01:38:11,576 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2221 to 2112.
[2020-11-25 01:38:11,576 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2112 states.
[2020-11-25 01:38:11,578 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2112 states to 2112 states and 2464 transitions.
[2020-11-25 01:38:11,579 INFO  L751         BuchiCegarLoop]: Abstraction has 2112 states and 2464 transitions.
[2020-11-25 01:38:11,579 INFO  L631         BuchiCegarLoop]: Abstraction has 2112 states and 2464 transitions.
[2020-11-25 01:38:11,579 INFO  L445         BuchiCegarLoop]: ======== Iteration 52============
[2020-11-25 01:38:11,579 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2112 states and 2464 transitions.
[2020-11-25 01:38:11,581 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:38:11,581 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:38:11,581 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:38:11,582 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:38:11,582 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:38:11,585 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:38:11,585 INFO  L82        PathProgramCache]: Analyzing trace with hash -713038977, now seen corresponding path program 2 times
[2020-11-25 01:38:11,586 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:38:11,606 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:38:15,460 INFO  L134       CoverageAnalysis]: Checked inductivity of 1202 backedges. 51 proven. 152 refuted. 0 times theorem prover too weak. 999 trivial. 0 not checked.
[2020-11-25 01:38:15,460 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:38:15,460 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [41] total 41
[2020-11-25 01:38:15,461 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:38:15,461 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 42 interpolants.
[2020-11-25 01:38:15,461 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=184, Invalid=1538, Unknown=0, NotChecked=0, Total=1722
[2020-11-25 01:38:15,461 INFO  L87              Difference]: Start difference. First operand 2112 states and 2464 transitions. cyclomatic complexity: 385 Second operand 42 states.
[2020-11-25 01:38:18,116 WARN  L188               SmtUtils]: Spent 164.00 ms on a formula simplification that was a NOOP. DAG size: 138
[2020-11-25 01:38:19,389 WARN  L188               SmtUtils]: Spent 160.00 ms on a formula simplification that was a NOOP. DAG size: 140
[2020-11-25 01:38:20,105 WARN  L188               SmtUtils]: Spent 169.00 ms on a formula simplification that was a NOOP. DAG size: 142
[2020-11-25 01:38:24,709 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:38:24,709 INFO  L93              Difference]: Finished difference Result 2269 states and 2908 transitions.
[2020-11-25 01:38:24,710 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 40 states. 
[2020-11-25 01:38:24,710 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2269 states and 2908 transitions.
[2020-11-25 01:38:24,715 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:38:24,722 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2269 states to 2269 states and 2908 transitions.
[2020-11-25 01:38:24,722 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 676
[2020-11-25 01:38:24,723 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 676
[2020-11-25 01:38:24,723 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2269 states and 2908 transitions.
[2020-11-25 01:38:24,725 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:38:24,725 INFO  L728         BuchiCegarLoop]: Abstraction has 2269 states and 2908 transitions.
[2020-11-25 01:38:24,726 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2269 states and 2908 transitions.
[2020-11-25 01:38:24,735 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2269 to 2112.
[2020-11-25 01:38:24,735 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2112 states.
[2020-11-25 01:38:24,738 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2112 states to 2112 states and 2464 transitions.
[2020-11-25 01:38:24,738 INFO  L751         BuchiCegarLoop]: Abstraction has 2112 states and 2464 transitions.
[2020-11-25 01:38:24,738 INFO  L631         BuchiCegarLoop]: Abstraction has 2112 states and 2464 transitions.
[2020-11-25 01:38:24,738 INFO  L445         BuchiCegarLoop]: ======== Iteration 53============
[2020-11-25 01:38:24,738 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2112 states and 2464 transitions.
[2020-11-25 01:38:24,740 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:38:24,740 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:38:24,740 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:38:24,741 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:38:24,741 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:38:24,745 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:38:24,745 INFO  L82        PathProgramCache]: Analyzing trace with hash -1179417186, now seen corresponding path program 4 times
[2020-11-25 01:38:24,745 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:38:24,765 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:38:48,306 INFO  L134       CoverageAnalysis]: Checked inductivity of 1227 backedges. 6 proven. 400 refuted. 0 times theorem prover too weak. 821 trivial. 0 not checked.
[2020-11-25 01:38:48,306 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:38:48,306 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [48] total 48
[2020-11-25 01:38:48,307 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:38:48,307 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 49 interpolants.
[2020-11-25 01:38:48,307 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=207, Invalid=2145, Unknown=0, NotChecked=0, Total=2352
[2020-11-25 01:38:48,307 INFO  L87              Difference]: Start difference. First operand 2112 states and 2464 transitions. cyclomatic complexity: 385 Second operand 49 states.
[2020-11-25 01:38:57,822 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:38:57,822 INFO  L93              Difference]: Finished difference Result 2232 states and 2748 transitions.
[2020-11-25 01:38:57,822 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 47 states. 
[2020-11-25 01:38:57,822 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2232 states and 2748 transitions.
[2020-11-25 01:38:57,827 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:38:57,833 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2232 states to 2232 states and 2748 transitions.
[2020-11-25 01:38:57,833 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 683
[2020-11-25 01:38:57,833 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 683
[2020-11-25 01:38:57,833 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2232 states and 2748 transitions.
[2020-11-25 01:38:57,835 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:38:57,835 INFO  L728         BuchiCegarLoop]: Abstraction has 2232 states and 2748 transitions.
[2020-11-25 01:38:57,836 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2232 states and 2748 transitions.
[2020-11-25 01:38:57,845 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2232 to 2120.
[2020-11-25 01:38:57,845 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2120 states.
[2020-11-25 01:38:57,848 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2120 states to 2120 states and 2496 transitions.
[2020-11-25 01:38:57,848 INFO  L751         BuchiCegarLoop]: Abstraction has 2120 states and 2496 transitions.
[2020-11-25 01:38:57,848 INFO  L631         BuchiCegarLoop]: Abstraction has 2120 states and 2496 transitions.
[2020-11-25 01:38:57,848 INFO  L445         BuchiCegarLoop]: ======== Iteration 54============
[2020-11-25 01:38:57,848 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2120 states and 2496 transitions.
[2020-11-25 01:38:57,850 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:38:57,850 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:38:57,850 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:38:57,851 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:38:57,851 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:38:57,854 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:38:57,854 INFO  L82        PathProgramCache]: Analyzing trace with hash -1151704727, now seen corresponding path program 6 times
[2020-11-25 01:38:57,855 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:38:57,875 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:44:15,968 INFO  L134       CoverageAnalysis]: Checked inductivity of 1254 backedges. 45 proven. 196 refuted. 0 times theorem prover too weak. 1013 trivial. 0 not checked.
[2020-11-25 01:44:15,969 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:44:15,969 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [39] total 39
[2020-11-25 01:44:15,969 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:44:15,969 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 40 interpolants.
[2020-11-25 01:44:15,969 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=154, Invalid=1406, Unknown=0, NotChecked=0, Total=1560
[2020-11-25 01:44:15,969 INFO  L87              Difference]: Start difference. First operand 2120 states and 2496 transitions. cyclomatic complexity: 413 Second operand 40 states.
[2020-11-25 01:44:19,097 WARN  L188               SmtUtils]: Spent 412.00 ms on a formula simplification that was a NOOP. DAG size: 170
[2020-11-25 01:44:19,902 WARN  L188               SmtUtils]: Spent 163.00 ms on a formula simplification that was a NOOP. DAG size: 148
[2020-11-25 01:44:20,796 WARN  L188               SmtUtils]: Spent 449.00 ms on a formula simplification that was a NOOP. DAG size: 172
[2020-11-25 01:44:21,872 WARN  L188               SmtUtils]: Spent 400.00 ms on a formula simplification that was a NOOP. DAG size: 174
[2020-11-25 01:44:41,040 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:44:41,040 INFO  L93              Difference]: Finished difference Result 2189 states and 2606 transitions.
[2020-11-25 01:44:41,040 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 37 states. 
[2020-11-25 01:44:41,040 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2189 states and 2606 transitions.
[2020-11-25 01:44:41,045 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:44:41,050 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2189 states to 2189 states and 2606 transitions.
[2020-11-25 01:44:41,050 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 676
[2020-11-25 01:44:41,050 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 676
[2020-11-25 01:44:41,050 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2189 states and 2606 transitions.
[2020-11-25 01:44:41,052 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:44:41,052 INFO  L728         BuchiCegarLoop]: Abstraction has 2189 states and 2606 transitions.
[2020-11-25 01:44:41,053 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2189 states and 2606 transitions.
[2020-11-25 01:44:41,060 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2189 to 2122.
[2020-11-25 01:44:41,060 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2122 states.
[2020-11-25 01:44:41,062 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2122 states to 2122 states and 2504 transitions.
[2020-11-25 01:44:41,063 INFO  L751         BuchiCegarLoop]: Abstraction has 2122 states and 2504 transitions.
[2020-11-25 01:44:41,063 INFO  L631         BuchiCegarLoop]: Abstraction has 2122 states and 2504 transitions.
[2020-11-25 01:44:41,063 INFO  L445         BuchiCegarLoop]: ======== Iteration 55============
[2020-11-25 01:44:41,063 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2122 states and 2504 transitions.
[2020-11-25 01:44:41,065 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:44:41,065 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:44:41,065 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:44:41,066 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:44:41,066 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:44:41,069 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:44:41,069 INFO  L82        PathProgramCache]: Analyzing trace with hash 606910366, now seen corresponding path program 5 times
[2020-11-25 01:44:41,069 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:44:41,089 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:45:07,459 INFO  L134       CoverageAnalysis]: Checked inductivity of 1227 backedges. 20 proven. 386 refuted. 0 times theorem prover too weak. 821 trivial. 0 not checked.
[2020-11-25 01:45:07,460 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:45:07,460 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [48] total 48
[2020-11-25 01:45:07,460 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:45:07,460 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 49 interpolants.
[2020-11-25 01:45:07,461 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=207, Invalid=2145, Unknown=0, NotChecked=0, Total=2352
[2020-11-25 01:45:07,461 INFO  L87              Difference]: Start difference. First operand 2122 states and 2504 transitions. cyclomatic complexity: 420 Second operand 49 states.
[2020-11-25 01:45:16,463 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:45:16,463 INFO  L93              Difference]: Finished difference Result 2236 states and 2765 transitions.
[2020-11-25 01:45:16,463 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 47 states. 
[2020-11-25 01:45:16,463 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2236 states and 2765 transitions.
[2020-11-25 01:45:16,468 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:45:16,474 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2236 states to 2236 states and 2765 transitions.
[2020-11-25 01:45:16,474 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 683
[2020-11-25 01:45:16,475 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 683
[2020-11-25 01:45:16,475 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2236 states and 2765 transitions.
[2020-11-25 01:45:16,477 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:45:16,477 INFO  L728         BuchiCegarLoop]: Abstraction has 2236 states and 2765 transitions.
[2020-11-25 01:45:16,478 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2236 states and 2765 transitions.
[2020-11-25 01:45:16,486 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2236 to 2126.
[2020-11-25 01:45:16,486 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2126 states.
[2020-11-25 01:45:16,489 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2126 states to 2126 states and 2520 transitions.
[2020-11-25 01:45:16,489 INFO  L751         BuchiCegarLoop]: Abstraction has 2126 states and 2520 transitions.
[2020-11-25 01:45:16,489 INFO  L631         BuchiCegarLoop]: Abstraction has 2126 states and 2520 transitions.
[2020-11-25 01:45:16,489 INFO  L445         BuchiCegarLoop]: ======== Iteration 56============
[2020-11-25 01:45:16,489 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2126 states and 2520 transitions.
[2020-11-25 01:45:16,491 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:45:16,491 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:45:16,491 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:45:16,492 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:45:16,492 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:45:16,495 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:45:16,495 INFO  L82        PathProgramCache]: Analyzing trace with hash -161283894, now seen corresponding path program 6 times
[2020-11-25 01:45:16,495 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:45:16,515 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:45:42,930 INFO  L134       CoverageAnalysis]: Checked inductivity of 1172 backedges. 48 proven. 171 refuted. 0 times theorem prover too weak. 953 trivial. 0 not checked.
[2020-11-25 01:45:42,930 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:45:42,930 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [42] total 42
[2020-11-25 01:45:42,930 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:45:42,930 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 43 interpolants.
[2020-11-25 01:45:42,931 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=186, Invalid=1620, Unknown=0, NotChecked=0, Total=1806
[2020-11-25 01:45:42,931 INFO  L87              Difference]: Start difference. First operand 2126 states and 2520 transitions. cyclomatic complexity: 434 Second operand 43 states.
[2020-11-25 01:45:45,647 WARN  L188               SmtUtils]: Spent 234.00 ms on a formula simplification that was a NOOP. DAG size: 154
[2020-11-25 01:45:46,357 WARN  L188               SmtUtils]: Spent 103.00 ms on a formula simplification that was a NOOP. DAG size: 133
[2020-11-25 01:45:47,273 WARN  L188               SmtUtils]: Spent 556.00 ms on a formula simplification that was a NOOP. DAG size: 156
[2020-11-25 01:45:48,106 WARN  L188               SmtUtils]: Spent 299.00 ms on a formula simplification that was a NOOP. DAG size: 158
[2020-11-25 01:46:06,592 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:46:06,592 INFO  L93              Difference]: Finished difference Result 2235 states and 2777 transitions.
[2020-11-25 01:46:06,592 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 39 states. 
[2020-11-25 01:46:06,593 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2235 states and 2777 transitions.
[2020-11-25 01:46:06,598 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:46:06,604 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2235 states to 2235 states and 2777 transitions.
[2020-11-25 01:46:06,604 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 678
[2020-11-25 01:46:06,604 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 01:46:06,604 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2235 states and 2777 transitions.
[2020-11-25 01:46:06,607 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:46:06,607 INFO  L728         BuchiCegarLoop]: Abstraction has 2235 states and 2777 transitions.
[2020-11-25 01:46:06,608 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2235 states and 2777 transitions.
[2020-11-25 01:46:06,616 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2235 to 2132.
[2020-11-25 01:46:06,616 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2132 states.
[2020-11-25 01:46:06,619 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2132 states to 2132 states and 2543 transitions.
[2020-11-25 01:46:06,619 INFO  L751         BuchiCegarLoop]: Abstraction has 2132 states and 2543 transitions.
[2020-11-25 01:46:06,619 INFO  L631         BuchiCegarLoop]: Abstraction has 2132 states and 2543 transitions.
[2020-11-25 01:46:06,619 INFO  L445         BuchiCegarLoop]: ======== Iteration 57============
[2020-11-25 01:46:06,619 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2132 states and 2543 transitions.
[2020-11-25 01:46:06,621 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:46:06,621 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:46:06,621 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:46:06,622 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:46:06,622 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:46:06,625 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:46:06,625 INFO  L82        PathProgramCache]: Analyzing trace with hash -1909301602, now seen corresponding path program 6 times
[2020-11-25 01:46:06,625 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:46:06,645 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:46:31,407 INFO  L134       CoverageAnalysis]: Checked inductivity of 1227 backedges. 13 proven. 393 refuted. 0 times theorem prover too weak. 821 trivial. 0 not checked.
[2020-11-25 01:46:31,407 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:46:31,407 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [48] total 48
[2020-11-25 01:46:31,408 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:46:31,408 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 49 interpolants.
[2020-11-25 01:46:31,408 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=207, Invalid=2145, Unknown=0, NotChecked=0, Total=2352
[2020-11-25 01:46:31,408 INFO  L87              Difference]: Start difference. First operand 2132 states and 2543 transitions. cyclomatic complexity: 454 Second operand 49 states.
[2020-11-25 01:46:38,983 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:46:38,983 INFO  L93              Difference]: Finished difference Result 2244 states and 2796 transitions.
[2020-11-25 01:46:38,983 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 47 states. 
[2020-11-25 01:46:38,983 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2244 states and 2796 transitions.
[2020-11-25 01:46:38,988 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:46:38,994 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2244 states to 2244 states and 2796 transitions.
[2020-11-25 01:46:38,994 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 683
[2020-11-25 01:46:38,994 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 683
[2020-11-25 01:46:38,994 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2244 states and 2796 transitions.
[2020-11-25 01:46:38,997 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:46:38,997 INFO  L728         BuchiCegarLoop]: Abstraction has 2244 states and 2796 transitions.
[2020-11-25 01:46:38,998 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2244 states and 2796 transitions.
[2020-11-25 01:46:39,006 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2244 to 2132.
[2020-11-25 01:46:39,006 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2132 states.
[2020-11-25 01:46:39,009 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2132 states to 2132 states and 2543 transitions.
[2020-11-25 01:46:39,009 INFO  L751         BuchiCegarLoop]: Abstraction has 2132 states and 2543 transitions.
[2020-11-25 01:46:39,009 INFO  L631         BuchiCegarLoop]: Abstraction has 2132 states and 2543 transitions.
[2020-11-25 01:46:39,009 INFO  L445         BuchiCegarLoop]: ======== Iteration 58============
[2020-11-25 01:46:39,009 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2132 states and 2543 transitions.
[2020-11-25 01:46:39,011 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:46:39,011 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:46:39,011 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:46:39,012 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:46:39,012 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:46:39,015 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:46:39,015 INFO  L82        PathProgramCache]: Analyzing trace with hash 1515630975, now seen corresponding path program 3 times
[2020-11-25 01:46:39,015 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:46:39,035 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:46:42,342 INFO  L134       CoverageAnalysis]: Checked inductivity of 1202 backedges. 66 proven. 156 refuted. 0 times theorem prover too weak. 980 trivial. 0 not checked.
[2020-11-25 01:46:42,342 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:46:42,342 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [43] total 43
[2020-11-25 01:46:42,342 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:46:42,342 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 44 interpolants.
[2020-11-25 01:46:42,343 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=200, Invalid=1692, Unknown=0, NotChecked=0, Total=1892
[2020-11-25 01:46:42,343 INFO  L87              Difference]: Start difference. First operand 2132 states and 2543 transitions. cyclomatic complexity: 454 Second operand 44 states.
[2020-11-25 01:46:45,947 WARN  L188               SmtUtils]: Spent 127.00 ms on a formula simplification. DAG size of input: 65 DAG size of output: 63
[2020-11-25 01:46:54,808 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:46:54,808 INFO  L93              Difference]: Finished difference Result 2253 states and 2847 transitions.
[2020-11-25 01:46:54,808 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 40 states. 
[2020-11-25 01:46:54,808 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2253 states and 2847 transitions.
[2020-11-25 01:46:54,814 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:46:54,820 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2253 states to 2253 states and 2847 transitions.
[2020-11-25 01:46:54,820 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 678
[2020-11-25 01:46:54,820 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 01:46:54,820 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2253 states and 2847 transitions.
[2020-11-25 01:46:54,822 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:46:54,822 INFO  L728         BuchiCegarLoop]: Abstraction has 2253 states and 2847 transitions.
[2020-11-25 01:46:54,824 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2253 states and 2847 transitions.
[2020-11-25 01:46:54,832 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2253 to 2136.
[2020-11-25 01:46:54,832 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2136 states.
[2020-11-25 01:46:54,835 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2136 states to 2136 states and 2559 transitions.
[2020-11-25 01:46:54,835 INFO  L751         BuchiCegarLoop]: Abstraction has 2136 states and 2559 transitions.
[2020-11-25 01:46:54,835 INFO  L631         BuchiCegarLoop]: Abstraction has 2136 states and 2559 transitions.
[2020-11-25 01:46:54,835 INFO  L445         BuchiCegarLoop]: ======== Iteration 59============
[2020-11-25 01:46:54,835 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2136 states and 2559 transitions.
[2020-11-25 01:46:54,837 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:46:54,837 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:46:54,837 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:46:54,838 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:46:54,838 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:46:54,841 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:46:54,841 INFO  L82        PathProgramCache]: Analyzing trace with hash -2084664705, now seen corresponding path program 4 times
[2020-11-25 01:46:54,842 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:46:54,861 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:46:58,087 INFO  L134       CoverageAnalysis]: Checked inductivity of 1202 backedges. 69 proven. 134 refuted. 0 times theorem prover too weak. 999 trivial. 0 not checked.
[2020-11-25 01:46:58,087 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:46:58,087 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [41] total 41
[2020-11-25 01:46:58,087 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:46:58,088 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 42 interpolants.
[2020-11-25 01:46:58,088 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=184, Invalid=1538, Unknown=0, NotChecked=0, Total=1722
[2020-11-25 01:46:58,088 INFO  L87              Difference]: Start difference. First operand 2136 states and 2559 transitions. cyclomatic complexity: 468 Second operand 42 states.
[2020-11-25 01:47:08,922 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:47:08,923 INFO  L93              Difference]: Finished difference Result 2289 states and 2988 transitions.
[2020-11-25 01:47:08,923 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 40 states. 
[2020-11-25 01:47:08,923 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2289 states and 2988 transitions.
[2020-11-25 01:47:08,929 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:47:08,937 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2289 states to 2289 states and 2988 transitions.
[2020-11-25 01:47:08,937 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 676
[2020-11-25 01:47:08,937 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 676
[2020-11-25 01:47:08,937 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2289 states and 2988 transitions.
[2020-11-25 01:47:08,940 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:47:08,940 INFO  L728         BuchiCegarLoop]: Abstraction has 2289 states and 2988 transitions.
[2020-11-25 01:47:08,941 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2289 states and 2988 transitions.
[2020-11-25 01:47:08,950 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2289 to 2128.
[2020-11-25 01:47:08,950 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2128 states.
[2020-11-25 01:47:08,953 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2128 states to 2128 states and 2528 transitions.
[2020-11-25 01:47:08,953 INFO  L751         BuchiCegarLoop]: Abstraction has 2128 states and 2528 transitions.
[2020-11-25 01:47:08,953 INFO  L631         BuchiCegarLoop]: Abstraction has 2128 states and 2528 transitions.
[2020-11-25 01:47:08,953 INFO  L445         BuchiCegarLoop]: ======== Iteration 60============
[2020-11-25 01:47:08,953 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2128 states and 2528 transitions.
[2020-11-25 01:47:08,955 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:47:08,955 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:47:08,955 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:47:08,956 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:47:08,956 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:47:08,958 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:47:08,958 INFO  L82        PathProgramCache]: Analyzing trace with hash -2071639297, now seen corresponding path program 5 times
[2020-11-25 01:47:08,959 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:47:08,977 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:47:12,150 INFO  L134       CoverageAnalysis]: Checked inductivity of 1202 backedges. 86 proven. 117 refuted. 0 times theorem prover too weak. 999 trivial. 0 not checked.
[2020-11-25 01:47:12,150 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:47:12,151 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [41] total 41
[2020-11-25 01:47:12,151 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:47:12,151 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 42 interpolants.
[2020-11-25 01:47:12,151 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=184, Invalid=1538, Unknown=0, NotChecked=0, Total=1722
[2020-11-25 01:47:12,151 INFO  L87              Difference]: Start difference. First operand 2128 states and 2528 transitions. cyclomatic complexity: 441 Second operand 42 states.
[2020-11-25 01:47:24,000 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:47:24,000 INFO  L93              Difference]: Finished difference Result 2279 states and 2949 transitions.
[2020-11-25 01:47:24,000 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 40 states. 
[2020-11-25 01:47:24,000 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2279 states and 2949 transitions.
[2020-11-25 01:47:24,007 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:47:24,014 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2279 states to 2279 states and 2949 transitions.
[2020-11-25 01:47:24,014 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 676
[2020-11-25 01:47:24,014 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 676
[2020-11-25 01:47:24,014 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2279 states and 2949 transitions.
[2020-11-25 01:47:24,017 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:47:24,017 INFO  L728         BuchiCegarLoop]: Abstraction has 2279 states and 2949 transitions.
[2020-11-25 01:47:24,018 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2279 states and 2949 transitions.
[2020-11-25 01:47:24,027 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2279 to 2126.
[2020-11-25 01:47:24,027 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2126 states.
[2020-11-25 01:47:24,030 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2126 states to 2126 states and 2520 transitions.
[2020-11-25 01:47:24,030 INFO  L751         BuchiCegarLoop]: Abstraction has 2126 states and 2520 transitions.
[2020-11-25 01:47:24,030 INFO  L631         BuchiCegarLoop]: Abstraction has 2126 states and 2520 transitions.
[2020-11-25 01:47:24,030 INFO  L445         BuchiCegarLoop]: ======== Iteration 61============
[2020-11-25 01:47:24,030 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2126 states and 2520 transitions.
[2020-11-25 01:47:24,032 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:47:24,032 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:47:24,032 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:47:24,033 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:47:24,033 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:47:24,035 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:47:24,035 INFO  L82        PathProgramCache]: Analyzing trace with hash 563667018, now seen corresponding path program 7 times
[2020-11-25 01:47:24,036 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:47:24,055 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:47:50,183 INFO  L134       CoverageAnalysis]: Checked inductivity of 1172 backedges. 46 proven. 150 refuted. 0 times theorem prover too weak. 976 trivial. 0 not checked.
[2020-11-25 01:47:50,184 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:47:50,184 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [39] total 39
[2020-11-25 01:47:50,184 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:47:50,184 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 40 interpolants.
[2020-11-25 01:47:50,184 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=155, Invalid=1405, Unknown=0, NotChecked=0, Total=1560
[2020-11-25 01:47:50,185 INFO  L87              Difference]: Start difference. First operand 2126 states and 2520 transitions. cyclomatic complexity: 434 Second operand 40 states.
[2020-11-25 01:47:52,592 WARN  L188               SmtUtils]: Spent 245.00 ms on a formula simplification that was a NOOP. DAG size: 153
[2020-11-25 01:47:54,652 WARN  L188               SmtUtils]: Spent 403.00 ms on a formula simplification that was a NOOP. DAG size: 158
[2020-11-25 01:48:11,308 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 01:48:11,308 INFO  L93              Difference]: Finished difference Result 2225 states and 2740 transitions.
[2020-11-25 01:48:11,308 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 37 states. 
[2020-11-25 01:48:11,308 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2225 states and 2740 transitions.
[2020-11-25 01:48:11,314 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:48:11,319 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2225 states to 2225 states and 2740 transitions.
[2020-11-25 01:48:11,319 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 678
[2020-11-25 01:48:11,319 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 678
[2020-11-25 01:48:11,319 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2225 states and 2740 transitions.
[2020-11-25 01:48:11,321 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 01:48:11,321 INFO  L728         BuchiCegarLoop]: Abstraction has 2225 states and 2740 transitions.
[2020-11-25 01:48:11,322 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2225 states and 2740 transitions.
[2020-11-25 01:48:11,330 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2225 to 2134.
[2020-11-25 01:48:11,330 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2134 states.
[2020-11-25 01:48:11,333 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2134 states to 2134 states and 2551 transitions.
[2020-11-25 01:48:11,333 INFO  L751         BuchiCegarLoop]: Abstraction has 2134 states and 2551 transitions.
[2020-11-25 01:48:11,333 INFO  L631         BuchiCegarLoop]: Abstraction has 2134 states and 2551 transitions.
[2020-11-25 01:48:11,333 INFO  L445         BuchiCegarLoop]: ======== Iteration 62============
[2020-11-25 01:48:11,333 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2134 states and 2551 transitions.
[2020-11-25 01:48:11,335 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 01:48:11,335 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 01:48:11,335 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 01:48:11,336 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [9, 9, 7, 7, 7, 7, 7, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 01:48:11,336 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                 fail_transfer_MRDF0 := false;
[L2]                 call_transfer_MRDF0 := false;
[L2]     CALL        call main();
[L3215]              assume null == 0;
[L3216]  CALL        call this := FreshRefGenerator__success();
[L1468]              havoc newRef;
[L1469]              assume Alloc[newRef] == false;
[L1470]              Alloc[newRef] := true;
[L1471]              assume newRef != null;
[L3216]  RET         call this := FreshRefGenerator__success();
[L3217]              assume now >= 0;
[L3218]              assume DType[this] == MRDF;
[L3219]              assume msgvalue_MSG == 0;
[L3220]              gas := gas - 53000;
[L3221]  CALL        call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L439]               havoc __exception;
[L440]               revert := false;
[L441]   COND FALSE  !(__exception)
[L464]   CALL        call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L1880]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1500]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1485]              assume msgsender_MSG != null;
[L1486]              Balance[this] := 0;
[L1500]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1501]  COND FALSE  !(revert)
[L1880]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1881]  COND FALSE  !(revert)
[L1884]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1744]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1726]              assume msgsender_MSG != null;
[L1727]              Balance[this] := 0;
[L1728]              owner_Owned[this] := null;
[L1729]              newOwner_Owned[this] := null;
[L1731]              owner_Owned[this] := msgsender_MSG;
[L1744]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1745]  COND FALSE  !(revert)
[L1884]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L1885]  COND FALSE  !(revert)
[L1888]  CALL        call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1842]              assume msgsender_MSG != null;
[L1843]              Balance[this] := 0;
[L1844]              name_MRDF[this] := 1027038588;
[L1845]              symbol_MRDF[this] := 671542533;
[L1846]              decimals_MRDF[this] := 18;
[L1847]              _balances_MRDF[this] := zeroRefintArr();
[L1848]              sum__balances0[this] := 0;
[L1849]              _allowed_MRDF[this] := zeroRefRefintArr();
[L1850]              sum__allowed1[this] := 0;
[L1851]              __var_2 := decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1852]              totalSupply_MRDF[this] := 500000000000 * (nonlinearPow(10, decimals_MRDF[this] % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1854]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1855]              _balances_MRDF[this][msgsender_MSG] := totalSupply_MRDF[this];
[L1856]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1857]              assert { :EventEmitted "Transfer_MRDF" } true;
[L1888]  RET         call MRDF_MRDF_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1889]  COND FALSE  !(revert)
[L464]   RET         call MRDF_MRDF__success(this, msgsender_MSG, msgvalue_MSG);
[L465]               assume !revert && gas >= 0;
[L3221]  RET         call MRDF_MRDF(this, msgsender_MSG, msgvalue_MSG);
[L3222]              assume !revert && gas >= 0;
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND FALSE  !(choice == 3)
[L3194]  COND TRUE   choice == 2
[L3195]              gas := gas - 21000;
[L3196]  COND TRUE   gas >= 0
[L3197]              assume value_s535 >= 0 && value_s535 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3198]              assume msgvalue_MSG == 0;
[L3199]  CALL        call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L721]               havoc __exception;
[L722]               revert := false;
[L723]   COND FALSE  !(__exception)
[L746]   CALL        call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L2219]              __var_13 := null;
[L2220]  COND FALSE  !(!(spender_s535 != null))
[L2224]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] - _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2225]              _allowed_MRDF[this][msgsender_MSG][spender_s535] := value_s535;
[L2226]              sum__allowed1[msgsender_MSG] := sum__allowed1[msgsender_MSG] + _allowed_MRDF[this][msgsender_MSG][spender_s535];
[L2227]              assert { :EventEmitted "Approval_MRDF" } true;
[L2228]              __ret_0_ := true;
[L746]   RET         call __ret_0_ := approve~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L747]               assume !revert && gas >= 0;
[L3199]  RET         call __ret_0_approve := approve~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, spender_s535, value_s535);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND TRUE   choice == 4
[L3181]              gas := gas - 21000;
[L3182]  COND TRUE   gas >= 0
[L3183]              assume _value_s397 >= 0 && _value_s397 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3184]              assume msgvalue_MSG == 0;
[L3185]  CALL        call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L607]               havoc __exception;
[L608]               revert := false;
[L609]   COND FALSE  !(__exception)
[L632]   CALL        call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L632]   RET         call __ret_0_ := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L633]               assume !revert && gas >= 0;
[L3185]  RET         call __ret_0_burn := burn~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _value_s397);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume !(((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND FALSE  !(_to_s342 == null)
[L1971]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s342 && _value_s342 > 0))
[L1975]  COND FALSE  !(!((_balances_MRDF[this][_to_s342] + _value_s342) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s342]))
[L1979]  COND TRUE   DType[this] == MRDF
[L1980]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1980]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s342);
[L1981]  COND FALSE  !(revert)
[L1987]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L1988]              _balances_MRDF[this][msgsender_MSG] := __var_5;
[L1989]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L1990]  COND TRUE   DType[this] == MRDF
[L1991]  CALL        call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L1991]  RET         call __var_6 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s342], _value_s342);
[L1992]  COND FALSE  !(revert)
[L1998]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s342];
[L1999]              _balances_MRDF[this][_to_s342] := __var_6;
[L2000]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s342];
[L2001]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2002]              __ret_0_ := true;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND FALSE  !(choice == 5)
[L3180]  COND FALSE  !(choice == 4)
[L3187]  COND TRUE   choice == 3
[L3188]              gas := gas - 21000;
[L3189]  COND TRUE   gas >= 0
[L3190]              assume _value_s499 >= 0 && _value_s499 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3191]              assume msgvalue_MSG == 0;
[L3192]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L665]               havoc __exception;
[L666]               revert := false;
[L667]   COND FALSE  !(__exception)
[L690]   CALL        call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L2146]              __var_9 := null;
[L2147]  COND FALSE  !(!(_to_s499 != null))
[L2151]  COND FALSE  !(!(_balances_MRDF[this][_from_s499] >= _value_s499 && _value_s499 > 0))
[L2155]  COND FALSE  !(!((_balances_MRDF[this][_to_s499] + _value_s499) % 115792089237316195423570985008687907853269984665640564039457584007913129639936 >= _balances_MRDF[this][_to_s499]))
[L2159]  COND FALSE  !(!(_allowed_MRDF[this][_from_s499][msgsender_MSG] >= _value_s499))
[L2163]  COND TRUE   DType[this] == MRDF
[L2164]  CALL        call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L1678]              c_s115 := (a_s115 + b_s115) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1679]  COND TRUE   DType[this] == MRDF
[L1680]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1706]  COND FALSE  !(!assertion_s128)
[L1680]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, c_s115 >= a_s115 && c_s115 >= b_s115);
[L1681]  COND FALSE  !(revert)
[L1692]              __ret_0_ := c_s115;
[L2164]  RET         call __var_10 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_to_s499], _value_s499);
[L2165]  COND FALSE  !(revert)
[L2171]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_to_s499];
[L2172]              _balances_MRDF[this][_to_s499] := __var_10;
[L2173]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_to_s499];
[L2174]  COND TRUE   DType[this] == MRDF
[L2175]  CALL        call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2175]  RET         call __var_11 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][_from_s499], _value_s499);
[L2176]  COND FALSE  !(revert)
[L2182]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][_from_s499];
[L2183]              _balances_MRDF[this][_from_s499] := __var_11;
[L2184]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][_from_s499];
[L2185]  COND TRUE   DType[this] == MRDF
[L2186]  CALL        call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2186]  RET         call __var_12 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _allowed_MRDF[this][_from_s499][msgsender_MSG], _value_s499);
[L2187]  COND FALSE  !(revert)
[L2193]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] - _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2194]              _allowed_MRDF[this][_from_s499][msgsender_MSG] := __var_12;
[L2195]              sum__allowed1[_from_s499] := sum__allowed1[_from_s499] + _allowed_MRDF[this][_from_s499][msgsender_MSG];
[L2196]              assert { :EventEmitted "Transfer_MRDF" } true;
[L2197]              __ret_0_ := true;
[L690]   RET         call __ret_0_ := transferFrom~address~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L691]               assume !revert && gas >= 0;
[L3192]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _from_s499, _to_s499, _value_s499);
[L3225]  RET         call CorralChoice_MRDF(this);
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND FALSE  !(choice == 15)
[L3119]  COND FALSE  !(choice == 14)
[L3125]  COND FALSE  !(choice == 13)
[L3131]  COND FALSE  !(choice == 12)
[L3137]  COND FALSE  !(choice == 11)
[L3143]  COND FALSE  !(choice == 10)
[L3149]  COND FALSE  !(choice == 9)
[L3155]  COND FALSE  !(choice == 8)
[L3161]  COND FALSE  !(choice == 7)
[L3167]  COND FALSE  !(choice == 6)
[L3173]  COND TRUE   choice == 5
[L3174]              gas := gas - 21000;
[L3175]  COND TRUE   gas >= 0
[L3176]              assume _value_s342 >= 0 && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3177]              assume msgvalue_MSG == 0;
[L3178]  CALL        call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume ((((((msgsender_MSG != _to_s342 && (_value_s342 > _balances_MRDF[this][msgsender_MSG] || _balances_MRDF[this][_to_s342] + _value_s342 >= 115792089237316195423570985008687907853269984665640564039457584007913129639936)) && _value_s342 >= 0) && _value_s342 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][_to_s342] >= 0) && _balances_MRDF[this][_to_s342] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_MRDF[this][msgsender_MSG] >= 0) && _balances_MRDF[this][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_transfer_MRDF0 := true;
[L2]                 call_transfer_MRDF0 := false;
[L2]                 revert := revert_hold;
[L550]               havoc __exception;
[L551]               revert := false;
[L552]   COND FALSE  !(__exception)
[L575]   CALL        call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L1962]              __var_3 := null;
[L1963]  COND TRUE   _to_s342 == null
[L1964]  CALL        call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L2047]  COND FALSE  !(!(_balances_MRDF[this][msgsender_MSG] >= _value_s397 && _value_s397 > 0))
[L2051]  COND FALSE  !(!(totalSupply_MRDF[this] >= _value_s397))
[L2055]  COND TRUE   DType[this] == MRDF
[L2056]  CALL        call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2056]  RET         call __var_7 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, _balances_MRDF[this][msgsender_MSG], _value_s397);
[L2057]  COND FALSE  !(revert)
[L2063]              sum__balances0[this] := sum__balances0[this] - _balances_MRDF[this][msgsender_MSG];
[L2064]              _balances_MRDF[this][msgsender_MSG] := __var_7;
[L2065]              sum__balances0[this] := sum__balances0[this] + _balances_MRDF[this][msgsender_MSG];
[L2066]  COND TRUE   DType[this] == MRDF
[L2067]  CALL        call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L1637]  COND TRUE   DType[this] == MRDF
[L1638]  CALL        call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1706]  COND FALSE  !(!assertion_s128)
[L1638]  RET         call _assert~bool_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, b_s87 <= a_s87);
[L1639]  COND FALSE  !(revert)
[L1650]              __ret_0_ := (a_s87 - b_s87) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2067]  RET         call __var_8 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, totalSupply_MRDF[this], _value_s397);
[L2068]  COND FALSE  !(revert)
[L2074]              totalSupply_MRDF[this] := __var_8;
[L2075]              assert { :EventEmitted "Burn_MRDF" } true;
[L2076]              __ret_0_ := true;
[L1964]  RET         call __var_4 := burn~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _value_s342);
[L1965]  COND FALSE  !(revert)
[L1968]              __ret_0_ := __var_4;
[L575]   RET         call __ret_0_ := transfer~address~uint256_MRDF__success(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L576]               assume !revert && gas >= 0;
[L3178]  RET         call __ret_0_transfer := transfer~address~uint256_MRDF(this, msgsender_MSG, msgvalue_MSG, _to_s342, _value_s342);
[L3225]  RET         call CorralChoice_MRDF(this);

Loop:
[L3225]  CALL        call CorralChoice_MRDF(this);
[L3072]              havoc msgsender_MSG;
[L3073]              havoc msgvalue_MSG;
[L3074]              havoc choice;
[L3075]              havoc __ret_0_owner;
[L3076]              havoc __ret_0_newOwner;
[L3077]              havoc _newOwner_s171;
[L3078]              havoc __ret_0_name;
[L3079]              havoc __ret_0_symbol;
[L3080]              havoc __ret_0_decimals;
[L3081]              havoc arg576_s0;
[L3082]              havoc arg577_s0;
[L3083]              havoc __ret_0__allowed;
[L3084]              havoc __ret_0_totalSupply;
[L3085]              havoc addr_s262;
[L3086]              havoc __ret_0_balanceOf;
[L3087]              havoc _to_s342;
[L3088]              havoc _value_s342;
[L3089]              havoc __ret_0_transfer;
[L3090]              havoc _value_s397;
[L3091]              havoc __ret_0_burn;
[L3092]              havoc _from_s499;
[L3093]              havoc _to_s499;
[L3094]              havoc _value_s499;
[L3095]              havoc __ret_0_transferFrom;
[L3096]              havoc spender_s535;
[L3097]              havoc value_s535;
[L3098]              havoc __ret_0_approve;
[L3099]              havoc _master_s551;
[L3100]              havoc _spender_s551;
[L3101]              havoc __ret_0_allowance;
[L3102]              havoc tmpNow;
[L3103]              havoc gas;
[L3104]              assume gas > 4000000 && gas <= 8000000;
[L3105]              tmpNow := now;
[L3106]              havoc now;
[L3107]              assume now > tmpNow;
[L3108]              assume msgsender_MSG != null;
[L3109]              assume DType[msgsender_MSG] != SafeMath;
[L3110]              assume DType[msgsender_MSG] != Owned;
[L3111]              assume DType[msgsender_MSG] != MRDF;
[L3112]              Alloc[msgsender_MSG] := true;
[L3113]  COND TRUE   choice == 15
[L3114]              gas := gas - 21000;
[L3115]  COND FALSE  !(gas >= 0)
[L3225]  RET         call CorralChoice_MRDF(this);

[2020-11-25 01:48:11,338 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 01:48:11,338 INFO  L82        PathProgramCache]: Analyzing trace with hash -1587247873, now seen corresponding path program 6 times
[2020-11-25 01:48:11,339 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 01:48:11,357 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 01:48:15,587 INFO  L134       CoverageAnalysis]: Checked inductivity of 1202 backedges. 46 proven. 176 refuted. 0 times theorem prover too weak. 980 trivial. 0 not checked.
[2020-11-25 01:48:15,587 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 01:48:15,587 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [43] total 43
[2020-11-25 01:48:15,588 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 01:48:15,588 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 44 interpolants.
[2020-11-25 01:48:15,588 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=201, Invalid=1691, Unknown=0, NotChecked=0, Total=1892
[2020-11-25 01:48:15,588 INFO  L87              Difference]: Start difference. First operand 2134 states and 2551 transitions. cyclomatic complexity: 461 Second operand 44 states.
[2020-11-25 01:48:17,449 WARN  L188               SmtUtils]: Spent 163.00 ms on a formula simplification that was a NOOP. DAG size: 137
[2020-11-25 01:48:18,755 WARN  L188               SmtUtils]: Spent 168.00 ms on a formula simplification that was a NOOP. DAG size: 142
Received shutdown request...
[2020-11-25 01:48:19,878 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 01:48:19 BasicIcfg
[2020-11-25 01:48:19,878 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 01:48:19,879 INFO  L168              Benchmark]: Toolchain (without parser) took 898576.74 ms. Allocated memory was 1.0 GB in the beginning and 6.9 GB in the end (delta: 5.9 GB). Free memory was 945.9 MB in the beginning and 6.2 GB in the end (delta: -5.3 GB). Peak memory consumption was 4.7 GB. Max. memory is 15.3 GB.
[2020-11-25 01:48:19,879 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 01:48:19,880 INFO  L168              Benchmark]: Boogie Preprocessor took 100.41 ms. Allocated memory is still 1.0 GB. Free memory was 945.9 MB in the beginning and 929.8 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 01:48:19,880 INFO  L168              Benchmark]: UtopiaSpecLang took 56.27 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 01:48:19,880 INFO  L168              Benchmark]: Boogie Printer took 14.69 ms. Allocated memory is still 1.0 GB. Free memory is still 924.5 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 01:48:19,880 INFO  L168              Benchmark]: RCFGBuilder took 694.02 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 838.5 MB in the end (delta: 86.0 MB). Peak memory consumption was 86.0 MB. Max. memory is 15.3 GB.
[2020-11-25 01:48:19,881 INFO  L168              Benchmark]: UtopiaLTL2Aut took 38.28 ms. Allocated memory is still 1.0 GB. Free memory was 838.5 MB in the beginning and 829.5 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 01:48:19,881 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1120.77 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 69.2 MB). Free memory was 829.5 MB in the beginning and 740.8 MB in the end (delta: 88.7 MB). Peak memory consumption was 157.9 MB. Max. memory is 15.3 GB.
[2020-11-25 01:48:19,881 INFO  L168              Benchmark]: BlockEncodingV2 took 112.94 ms. Allocated memory is still 1.1 GB. Free memory was 740.8 MB in the beginning and 700.2 MB in the end (delta: 40.6 MB). Peak memory consumption was 40.6 MB. Max. memory is 15.3 GB.
[2020-11-25 01:48:19,882 INFO  L168              Benchmark]: BuchiAutomizer took 896435.95 ms. Allocated memory was 1.1 GB in the beginning and 6.9 GB in the end (delta: 5.8 GB). Free memory was 700.2 MB in the beginning and 6.2 GB in the end (delta: -5.5 GB). Peak memory consumption was 4.4 GB. Max. memory is 15.3 GB.
[2020-11-25 01:48:19,885 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    2982 locations, 5228 edges
  - StatisticsResult: Encoded RCFG
    2870 locations, 4949 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 100.41 ms. Allocated memory is still 1.0 GB. Free memory was 945.9 MB in the beginning and 929.8 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 56.27 ms. Allocated memory is still 1.0 GB. Free memory was 929.8 MB in the beginning and 924.5 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 14.69 ms. Allocated memory is still 1.0 GB. Free memory is still 924.5 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * RCFGBuilder took 694.02 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 838.5 MB in the end (delta: 86.0 MB). Peak memory consumption was 86.0 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 38.28 ms. Allocated memory is still 1.0 GB. Free memory was 838.5 MB in the beginning and 829.5 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1120.77 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 69.2 MB). Free memory was 829.5 MB in the beginning and 740.8 MB in the end (delta: 88.7 MB). Peak memory consumption was 157.9 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 112.94 ms. Allocated memory is still 1.1 GB. Free memory was 740.8 MB in the beginning and 700.2 MB in the end (delta: 40.6 MB). Peak memory consumption was 40.6 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 896435.95 ms. Allocated memory was 1.1 GB in the beginning and 6.9 GB in the end (delta: 5.8 GB). Free memory was 700.2 MB in the beginning and 6.2 GB in the end (delta: -5.5 GB). Peak memory consumption was 4.4 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1238 locations, 1609 edges
  - StatisticsResult: BuchiProgram size
    2982 locations, 5228 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Decomposition not yet finished
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 896.4s and 62 iterations.  TraceHistogramMax:9. Analysis of lassos took 534.6s. Construction of modules took 305.2s. BÃ¼chi inclusion checks took 54.4s. Highest rank in rank-based complementation 0. Minimization of det autom 61. Minimization of nondet autom 0. Automata minimization 0.8s AutomataMinimizationTime, 61 MinimizatonAttempts, 5404 StatesRemovedByMinimization, 57 NontrivialMinimizations. Non-live state removal took 0.6s Buchi closure took 0.0s. Biggest automaton had 2206 states and ocurred in iteration 3.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 117322 SDtfs, 235440 SDslu, 785836 SDs, 0 SdLazy, 1959716 SolverSat, 33750 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 305.2s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU62 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TimeoutResultAtElement [Line: 2910]: Timeout (de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction)
    Timeout while trying to prove ! ( ( []( (call_transfer_MRDF0) ==> ( <>(fail_transfer_MRDF0) ) ) )). while BuchiCegarLoop was performing iteration 62,while ReachableStatesComputation was computing reachable states (1422 states constructedinput type IntersectNwa).
RESULT: Ultimate could not prove your program: Timeout
Completed graceful shutdown
