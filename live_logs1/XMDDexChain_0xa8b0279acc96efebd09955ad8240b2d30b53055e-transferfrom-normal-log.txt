This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 09:08:16,584 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 09:08:16,586 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 09:08:16,598 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 09:08:16,598 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 09:08:16,599 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 09:08:16,600 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 09:08:16,602 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 09:08:16,603 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 09:08:16,604 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 09:08:16,605 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 09:08:16,605 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 09:08:16,606 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 09:08:16,606 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 09:08:16,607 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 09:08:16,608 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 09:08:16,609 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 09:08:16,610 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 09:08:16,611 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 09:08:16,612 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 09:08:16,613 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 09:08:16,614 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 09:08:16,615 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 09:08:16,616 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 09:08:16,616 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 09:08:16,616 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 09:08:16,616 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 09:08:16,617 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 09:08:16,617 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 09:08:16,617 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 09:08:16,618 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 09:08:16,618 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 09:08:16,619 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 09:08:16,619 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 09:08:16,620 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 09:08:16,620 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 09:08:16,621 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 09:08:16,621 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 09:08:16,621 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 09:08:16,622 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 09:08:16,622 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 09:08:16,622 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 09:08:16,630 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 09:08:16,630 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 09:08:16,631 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 09:08:16,631 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 09:08:16,631 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 09:08:16,631 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 09:08:16,631 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 09:08:16,631 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 09:08:16,631 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 09:08:16,631 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 09:08:16,631 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 09:08:16,632 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 09:08:16,632 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 09:08:16,632 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 09:08:16,632 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 09:08:16,632 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 09:08:16,632 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 09:08:16,632 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 09:08:16,632 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 09:08:16,632 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 09:08:16,632 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 09:08:16,633 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 09:08:16,633 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 09:08:16,633 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 09:08:16,633 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 09:08:16,633 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 09:08:16,657 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 09:08:16,670 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 09:08:16,672 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 09:08:16,673 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 09:08:16,674 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 09:08:16,674 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl
[2020-11-25 09:08:16,674 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl'
[2020-11-25 09:08:16,754 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 09:08:16,755 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 09:08:16,755 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 09:08:16,755 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 09:08:16,755 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 09:08:16,771 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:08:16" (1/1) ...
[2020-11-25 09:08:16,773 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:08:16" (1/1) ...
[2020-11-25 09:08:16,807 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:08:16" (1/1) ...
[2020-11-25 09:08:16,808 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:08:16" (1/1) ...
[2020-11-25 09:08:16,831 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:08:16" (1/1) ...
[2020-11-25 09:08:16,843 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:08:16" (1/1) ...
[2020-11-25 09:08:16,851 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:08:16" (1/1) ...
[2020-11-25 09:08:16,860 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 09:08:16,861 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 09:08:16,861 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 09:08:16,863 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 09:08:16,867 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:08:16" (1/1) ...
[2020-11-25 09:08:16,887 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(XMDDexChain.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_XMDDexChain[this][from] && value <= allowed_XMDDexChain[this][from][msg.sender] && balances_XMDDexChain[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_XMDDexChain[this][to] >= 0 && balances_XMDDexChain[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_XMDDexChain[this][from] >= 0 &&  balances_XMDDexChain[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_XMDDexChain[this][from][msg.sender] >= 0 && allowed_XMDDexChain[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(XMDDexChain.transferFrom(from, to, value), return == true && balances_XMDDexChain[this][from] == old(balances_XMDDexChain[this][from]) - value && balances_XMDDexChain[this][to] == old(balances_XMDDexChain[this][to]) + value && allowed_XMDDexChain[this][from][msg.sender] == old(allowed_XMDDexChain[this][from][msg.sender]) - value && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this]) && balances_XMDDexChain[this][p1] == old(balances_XMDDexChain[this][p1]) && allowed_XMDDexChain[this][p2][p3] == old(allowed_XMDDexChain[this][p2][p3]) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this]) && name_XMDDexChain[this] == old(name_XMDDexChain[this]) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 09:08:16,893 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(XMDDexChain.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_XMDDexChain[this][from] && value <= allowed_XMDDexChain[this][from][msg.sender] && balances_XMDDexChain[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_XMDDexChain[this][to] >= 0 && balances_XMDDexChain[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_XMDDexChain[this][from] >= 0 &&  balances_XMDDexChain[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_XMDDexChain[this][from][msg.sender] >= 0 && allowed_XMDDexChain[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(XMDDexChain.transferFrom(from, to, value), return == true && balances_XMDDexChain[this][from] == old(balances_XMDDexChain[this][from]) - value && balances_XMDDexChain[this][to] == old(balances_XMDDexChain[this][to]) + value && allowed_XMDDexChain[this][from][msg.sender] == old(allowed_XMDDexChain[this][from][msg.sender]) - value && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this]) && balances_XMDDexChain[this][p1] == old(balances_XMDDexChain[this][p1]) && allowed_XMDDexChain[this][p2][p3] == old(allowed_XMDDexChain[this][p2][p3]) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this]) && name_XMDDexChain[this] == old(name_XMDDexChain[this]) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 09:08:16,901 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(XMDDexChain.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_XMDDexChain[this][from] && value <= allowed_XMDDexChain[this][from][msg.sender] && balances_XMDDexChain[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_XMDDexChain[this][to] >= 0 && balances_XMDDexChain[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_XMDDexChain[this][from] >= 0 &&  balances_XMDDexChain[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_XMDDexChain[this][from][msg.sender] >= 0 && allowed_XMDDexChain[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(XMDDexChain.transferFrom(from, to, value), return == true && balances_XMDDexChain[this][from] == old(balances_XMDDexChain[this][from]) - value && balances_XMDDexChain[this][to] == old(balances_XMDDexChain[this][to]) + value && allowed_XMDDexChain[this][from][msg.sender] == old(allowed_XMDDexChain[this][from][msg.sender]) - value && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this]) && balances_XMDDexChain[this][p1] == old(balances_XMDDexChain[this][p1]) && allowed_XMDDexChain[this][p2][p3] == old(allowed_XMDDexChain[this][p2][p3]) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this]) && name_XMDDexChain[this] == old(name_XMDDexChain[this]) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 09:08:16,911 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( p1!=from_s458 && p1!=to_s458 ) && ( p2!=from_s458 || p3!=msg.sender ) ) && from_s458!=to_s458 ) && tokens_s458<=balances_XMDDexChain[this][from_s458] ) && tokens_s458<=allowed_XMDDexChain[this][from_s458][msg.sender] ) && ( balances_XMDDexChain[this][to_s458] + tokens_s458 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && tokens_s458>=0 ) && tokens_s458<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_XMDDexChain[this][to_s458]>=0 ) && balances_XMDDexChain[this][to_s458]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && balances_XMDDexChain[this][from_s458]>=0 ) && balances_XMDDexChain[this][from_s458]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && allowed_XMDDexChain[this][from_s458][msg.sender]>=0 ) && allowed_XMDDexChain[this][from_s458][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]],BinaryExpression[COMPNEQ,IdentifierExpression[p3,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]]],BinaryExpression[COMPNEQ,IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>],IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 09:08:16,919 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( success_s458==true && balances_XMDDexChain[this][from_s458]==( ( old(balances_XMDDexChain[this][from_s458]) ) - tokens_s458 ) ) && balances_XMDDexChain[this][to_s458]==( ( old(balances_XMDDexChain[this][to_s458]) ) + tokens_s458 ) ) && allowed_XMDDexChain[this][from_s458][msg.sender]==( ( old(allowed_XMDDexChain[this][from_s458][msg.sender]) ) - tokens_s458 ) ) && _totalSupply_XMDDexChain[this]==( old(_totalSupply_XMDDexChain[this]) ) ) && balances_XMDDexChain[this][p1]==( old(balances_XMDDexChain[this][p1]) ) ) && allowed_XMDDexChain[this][p2][p3]==( old(allowed_XMDDexChain[this][p2][p3]) ) ) && symbol_XMDDexChain[this]==( old(symbol_XMDDexChain[this]) ) ) && name_XMDDexChain[this]==( old(name_XMDDexChain[this]) ) ) && decimals_XMDDexChain[this]==( old(decimals_XMDDexChain[this]) ) ) && owner_Owned[this]==( old(owner_Owned[this]) ) ) && newOwner_Owned[this]==( old(newOwner_Owned[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[success_s458,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_XMDDexChain>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]]],IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[to_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]]],IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[from_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]]],IdentifierExpression[tokens_s458,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_totalSupply_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_totalSupply_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[balances_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[allowed_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[symbol_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[symbol_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[name_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[name_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[decimals_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[decimals_XMDDexChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[newOwner_Owned,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_XMDDexChain>]]]]]]
[2020-11-25 09:08:16,928 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(XMDDexChain.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= balances_XMDDexChain[this][from] && value <= allowed_XMDDexChain[this][from][msg.sender] && balances_XMDDexChain[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_XMDDexChain[this][to] >= 0 && balances_XMDDexChain[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && balances_XMDDexChain[this][from] >= 0 &&  balances_XMDDexChain[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && allowed_XMDDexChain[this][from][msg.sender] >= 0 && allowed_XMDDexChain[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(XMDDexChain.transferFrom(from, to, value), return == true && balances_XMDDexChain[this][from] == old(balances_XMDDexChain[this][from]) - value && balances_XMDDexChain[this][to] == old(balances_XMDDexChain[this][to]) + value && allowed_XMDDexChain[this][from][msg.sender] == old(allowed_XMDDexChain[this][from][msg.sender]) - value && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this]) && balances_XMDDexChain[this][p1] == old(balances_XMDDexChain[this][p1]) && allowed_XMDDexChain[this][p2][p3] == old(allowed_XMDDexChain[this][p2][p3]) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this]) && name_XMDDexChain[this] == old(name_XMDDexChain[this]) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this]) && owner_Owned[this] == old(owner_Owned[this]) && newOwner_Owned[this] == old(newOwner_Owned[this]))))
[2020-11-25 09:08:16,929 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_XMDDexChain0) ==> ( <>AP(success_transferFrom_XMDDexChain0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 09:08:16,940 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:08:16 PropertyContainer
[2020-11-25 09:08:16,940 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 09:08:16,941 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 09:08:16,941 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 09:08:16,941 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 09:08:16,942 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:08:16" (1/2) ...
[2020-11-25 09:08:16,942 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 09:08:16,942 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 09:08:16,957 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:08:16" (2/2) ...
[2020-11-25 09:08:16,957 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 09:08:16,958 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 09:08:16,958 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 09:08:16,958 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 09:08:16,959 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:08:16" (1/2) ...
[2020-11-25 09:08:17,015 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 09:08:17,016 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 09:08:17,016 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 09:08:17,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 09:08:17,016 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 09:08:17,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath
[2020-11-25 09:08:17,016 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 09:08:17,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath
[2020-11-25 09:08:17,016 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 09:08:17,016 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath
[2020-11-25 09:08:17,017 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 09:08:17,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath
[2020-11-25 09:08:17,017 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 09:08:17,017 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface
[2020-11-25 09:08:17,017 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface
[2020-11-25 09:08:17,017 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Interface
[2020-11-25 09:08:17,017 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Interface
[2020-11-25 09:08:17,017 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20Interface
[2020-11-25 09:08:17,017 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Interface
[2020-11-25 09:08:17,017 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Interface
[2020-11-25 09:08:17,017 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20Interface
[2020-11-25 09:08:17,018 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 09:08:17,018 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 09:08:17,018 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack
[2020-11-25 09:08:17,018 INFO  L130     BoogieDeclarations]: Found specification of procedure receiveApproval~address~uint256~address~bytes_ApproveAndCallFallBack
[2020-11-25 09:08:17,018 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 09:08:17,018 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned
[2020-11-25 09:08:17,018 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned
[2020-11-25 09:08:17,018 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned
[2020-11-25 09:08:17,018 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned
[2020-11-25 09:08:17,019 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned
[2020-11-25 09:08:17,019 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned
[2020-11-25 09:08:17,019 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned
[2020-11-25 09:08:17,019 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned
[2020-11-25 09:08:17,019 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned
[2020-11-25 09:08:17,019 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned
[2020-11-25 09:08:17,019 INFO  L130     BoogieDeclarations]: Found specification of procedure XMDDexChain_XMDDexChain_NoBaseCtor__success
[2020-11-25 09:08:17,019 INFO  L130     BoogieDeclarations]: Found specification of procedure XMDDexChain_XMDDexChain
[2020-11-25 09:08:17,019 INFO  L138     BoogieDeclarations]: Found implementation of procedure XMDDexChain_XMDDexChain
[2020-11-25 09:08:17,019 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_XMDDexChain
[2020-11-25 09:08:17,020 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_XMDDexChain
[2020-11-25 09:08:17,020 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_XMDDexChain
[2020-11-25 09:08:17,020 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_XMDDexChain
[2020-11-25 09:08:17,020 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_XMDDexChain
[2020-11-25 09:08:17,020 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_XMDDexChain
[2020-11-25 09:08:17,020 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_XMDDexChain
[2020-11-25 09:08:17,020 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_XMDDexChain
[2020-11-25 09:08:17,020 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_XMDDexChain
[2020-11-25 09:08:17,020 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_XMDDexChain
[2020-11-25 09:08:17,020 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_XMDDexChain
[2020-11-25 09:08:17,020 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_XMDDexChain
[2020-11-25 09:08:17,021 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_XMDDexChain
[2020-11-25 09:08:17,021 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_XMDDexChain
[2020-11-25 09:08:17,021 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_XMDDexChain__success
[2020-11-25 09:08:17,021 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_XMDDexChain
[2020-11-25 09:08:17,021 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_XMDDexChain
[2020-11-25 09:08:17,021 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_XMDDexChain
[2020-11-25 09:08:17,021 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_XMDDexChain
[2020-11-25 09:08:17,021 INFO  L130     BoogieDeclarations]: Found specification of procedure name_XMDDexChain
[2020-11-25 09:08:17,021 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_XMDDexChain
[2020-11-25 09:08:17,021 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_XMDDexChain
[2020-11-25 09:08:17,022 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_XMDDexChain
[2020-11-25 09:08:17,022 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_XMDDexChain
[2020-11-25 09:08:17,022 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_XMDDexChain
[2020-11-25 09:08:17,022 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 09:08:17,022 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 09:08:17,022 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 09:08:17,022 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 09:08:17,022 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 09:08:17,022 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 09:08:17,022 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Interface
[2020-11-25 09:08:17,023 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Interface
[2020-11-25 09:08:17,023 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 09:08:17,023 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 09:08:17,023 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Owned
[2020-11-25 09:08:17,023 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Owned
[2020-11-25 09:08:17,023 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_XMDDexChain
[2020-11-25 09:08:17,023 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 09:08:17,023 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 09:08:17,023 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 09:08:17,023 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 09:08:17,024 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 09:08:17,024 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 09:08:17,024 INFO  L130     BoogieDeclarations]: Found specification of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 09:08:17,024 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 09:08:17,024 INFO  L130     BoogieDeclarations]: Found specification of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 09:08:17,024 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 09:08:17,024 INFO  L130     BoogieDeclarations]: Found specification of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 09:08:17,024 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 09:08:17,024 INFO  L130     BoogieDeclarations]: Found specification of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 09:08:17,025 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 09:08:17,025 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 09:08:17,025 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 09:08:17,025 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 09:08:17,025 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 09:08:17,025 INFO  L130     BoogieDeclarations]: Found specification of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 09:08:17,025 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 09:08:17,025 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__success
[2020-11-25 09:08:17,025 INFO  L130     BoogieDeclarations]: Found specification of procedure Owned_Owned__fail
[2020-11-25 09:08:17,025 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__success
[2020-11-25 09:08:17,025 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Owned__fail
[2020-11-25 09:08:17,026 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__success
[2020-11-25 09:08:17,026 INFO  L130     BoogieDeclarations]: Found specification of procedure acceptOwnership_Owned__fail
[2020-11-25 09:08:17,026 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__success
[2020-11-25 09:08:17,026 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Owned__fail
[2020-11-25 09:08:17,026 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__success
[2020-11-25 09:08:17,026 INFO  L130     BoogieDeclarations]: Found specification of procedure newOwner_Owned__fail
[2020-11-25 09:08:17,026 INFO  L130     BoogieDeclarations]: Found specification of procedure XMDDexChain_XMDDexChain_NoBaseCtor__fail
[2020-11-25 09:08:17,026 INFO  L130     BoogieDeclarations]: Found specification of procedure XMDDexChain_XMDDexChain__success
[2020-11-25 09:08:17,026 INFO  L130     BoogieDeclarations]: Found specification of procedure XMDDexChain_XMDDexChain__fail
[2020-11-25 09:08:17,027 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_XMDDexChain__success
[2020-11-25 09:08:17,027 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_XMDDexChain__fail
[2020-11-25 09:08:17,027 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_XMDDexChain__success
[2020-11-25 09:08:17,027 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_XMDDexChain__fail
[2020-11-25 09:08:17,027 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_XMDDexChain__success
[2020-11-25 09:08:17,027 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_XMDDexChain__fail
[2020-11-25 09:08:17,027 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_XMDDexChain__success
[2020-11-25 09:08:17,027 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_XMDDexChain__fail
[2020-11-25 09:08:17,027 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_XMDDexChain__success
[2020-11-25 09:08:17,027 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_XMDDexChain__fail
[2020-11-25 09:08:17,028 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_XMDDexChain__success
[2020-11-25 09:08:17,028 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_XMDDexChain__fail
[2020-11-25 09:08:17,028 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_XMDDexChain__success
[2020-11-25 09:08:17,028 INFO  L130     BoogieDeclarations]: Found specification of procedure approveAndCall~address~uint256~bytes_XMDDexChain__fail
[2020-11-25 09:08:17,028 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackMethod_XMDDexChain__fail
[2020-11-25 09:08:17,028 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_XMDDexChain__success
[2020-11-25 09:08:17,028 INFO  L130     BoogieDeclarations]: Found specification of procedure transferAnyERC20Token~address~uint256_XMDDexChain__fail
[2020-11-25 09:08:17,028 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_XMDDexChain__success
[2020-11-25 09:08:17,028 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_XMDDexChain__fail
[2020-11-25 09:08:17,028 INFO  L130     BoogieDeclarations]: Found specification of procedure name_XMDDexChain__success
[2020-11-25 09:08:17,029 INFO  L130     BoogieDeclarations]: Found specification of procedure name_XMDDexChain__fail
[2020-11-25 09:08:17,029 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_XMDDexChain__success
[2020-11-25 09:08:17,029 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_XMDDexChain__fail
[2020-11-25 09:08:17,029 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_XMDDexChain__success
[2020-11-25 09:08:17,029 INFO  L130     BoogieDeclarations]: Found specification of procedure _totalSupply_XMDDexChain__fail
[2020-11-25 09:08:17,029 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 09:08:17,029 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 09:08:17,029 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 09:08:17,029 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 09:08:17,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 09:08:17,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 09:08:17,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 09:08:17,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 09:08:17,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 09:08:17,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 09:08:17,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__fail
[2020-11-25 09:08:17,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeAdd~uint256~uint256_SafeMath__success
[2020-11-25 09:08:17,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__fail
[2020-11-25 09:08:17,030 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeSub~uint256~uint256_SafeMath__success
[2020-11-25 09:08:17,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__fail
[2020-11-25 09:08:17,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeMul~uint256~uint256_SafeMath__success
[2020-11-25 09:08:17,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__fail
[2020-11-25 09:08:17,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure safeDiv~uint256~uint256_SafeMath__success
[2020-11-25 09:08:17,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__fail
[2020-11-25 09:08:17,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface_NoBaseCtor__success
[2020-11-25 09:08:17,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__fail
[2020-11-25 09:08:17,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Interface_ERC20Interface__success
[2020-11-25 09:08:17,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__fail
[2020-11-25 09:08:17,031 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack_NoBaseCtor__success
[2020-11-25 09:08:17,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__fail
[2020-11-25 09:08:17,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure ApproveAndCallFallBack_ApproveAndCallFallBack__success
[2020-11-25 09:08:17,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__fail
[2020-11-25 09:08:17,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned_NoBaseCtor__success
[2020-11-25 09:08:17,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__fail
[2020-11-25 09:08:17,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure Owned_Owned__success
[2020-11-25 09:08:17,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__fail
[2020-11-25 09:08:17,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Owned__success
[2020-11-25 09:08:17,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__fail
[2020-11-25 09:08:17,032 INFO  L138     BoogieDeclarations]: Found implementation of procedure acceptOwnership_Owned__success
[2020-11-25 09:08:17,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__fail
[2020-11-25 09:08:17,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Owned__success
[2020-11-25 09:08:17,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__fail
[2020-11-25 09:08:17,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure newOwner_Owned__success
[2020-11-25 09:08:17,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure XMDDexChain_XMDDexChain_NoBaseCtor__fail
[2020-11-25 09:08:17,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure XMDDexChain_XMDDexChain_NoBaseCtor__success
[2020-11-25 09:08:17,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure XMDDexChain_XMDDexChain__fail
[2020-11-25 09:08:17,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure XMDDexChain_XMDDexChain__success
[2020-11-25 09:08:17,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_XMDDexChain__fail
[2020-11-25 09:08:17,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_XMDDexChain__success
[2020-11-25 09:08:17,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_XMDDexChain__fail
[2020-11-25 09:08:17,033 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_XMDDexChain__success
[2020-11-25 09:08:17,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_XMDDexChain__fail
[2020-11-25 09:08:17,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_XMDDexChain__success
[2020-11-25 09:08:17,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_XMDDexChain__fail
[2020-11-25 09:08:17,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_XMDDexChain__success
[2020-11-25 09:08:17,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_XMDDexChain__fail
[2020-11-25 09:08:17,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_XMDDexChain__success
[2020-11-25 09:08:17,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_XMDDexChain__fail
[2020-11-25 09:08:17,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_XMDDexChain__success
[2020-11-25 09:08:17,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_XMDDexChain__fail
[2020-11-25 09:08:17,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure approveAndCall~address~uint256~bytes_XMDDexChain__success
[2020-11-25 09:08:17,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_XMDDexChain__fail
[2020-11-25 09:08:17,034 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackMethod_XMDDexChain__success
[2020-11-25 09:08:17,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_XMDDexChain__fail
[2020-11-25 09:08:17,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferAnyERC20Token~address~uint256_XMDDexChain__success
[2020-11-25 09:08:17,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_XMDDexChain__fail
[2020-11-25 09:08:17,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_XMDDexChain__success
[2020-11-25 09:08:17,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_XMDDexChain__fail
[2020-11-25 09:08:17,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_XMDDexChain__success
[2020-11-25 09:08:17,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_XMDDexChain__fail
[2020-11-25 09:08:17,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_XMDDexChain__success
[2020-11-25 09:08:17,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_XMDDexChain__fail
[2020-11-25 09:08:17,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure _totalSupply_XMDDexChain__success
[2020-11-25 09:08:17,035 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 09:08:17,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 09:08:17,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 09:08:17,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 09:08:17,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 09:08:17,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 09:08:17,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 09:08:17,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 09:08:17,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 09:08:17,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 09:08:17,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Interface
[2020-11-25 09:08:17,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Interface
[2020-11-25 09:08:17,036 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ApproveAndCallFallBack
[2020-11-25 09:08:17,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ApproveAndCallFallBack
[2020-11-25 09:08:17,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Owned
[2020-11-25 09:08:17,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Owned
[2020-11-25 09:08:17,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_XMDDexChain
[2020-11-25 09:08:17,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 09:08:17,037 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 09:08:17,037 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 09:08:17,364 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:08:17,364 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:08:17,365 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:08:17,511 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 09:08:17,699 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 09:08:17,699 INFO  L286             CfgBuilder]: Removed 5 assue(true) statements.
[2020-11-25 09:08:17,701 INFO  L202        PluginConnector]: Adding new model XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:08:17 BoogieIcfgContainer
[2020-11-25 09:08:17,701 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:08:16" (2/2) ...
[2020-11-25 09:08:17,701 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 09:08:17,701 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@3e630484 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:08:17, skipping insertion in model container
[2020-11-25 09:08:17,701 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 09:08:17,702 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 09:08:17,702 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 09:08:17,703 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 09:08:17,703 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:08:16" (1/3) ...
[2020-11-25 09:08:17,703 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@254d9e73 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:08:17, skipping insertion in model container
[2020-11-25 09:08:17,704 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:08:16" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 09:08:17,747 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:08:17 NWAContainer
[2020-11-25 09:08:17,747 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 09:08:17,748 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 09:08:17,748 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 09:08:17,749 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 09:08:17,750 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:08:17" (3/4) ...
[2020-11-25 09:08:17,752 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@efaf29 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:08:17, skipping insertion in model container
[2020-11-25 09:08:17,752 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:08:17" (4/4) ...
[2020-11-25 09:08:17,759 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 09:08:17,765 INFO  L110   BuchiProductObserver]: Initial RCFG 1566 locations, 1978 edges
[2020-11-25 09:08:17,765 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 09:08:17,776 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 09:08:19,114 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 09:08:19,119 INFO  L110   BuchiProductObserver]: BuchiProgram size 3724 locations, 6408 edges
[2020-11-25 09:08:19,119 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:08:19 BoogieIcfgContainer
[2020-11-25 09:08:19,119 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 09:08:19,119 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 09:08:19,119 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 09:08:19,121 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 09:08:19,121 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:08:19" (1/1) ...
[2020-11-25 09:08:19,205 INFO  L313           BlockEncoder]: Initial Icfg 3724 locations, 6408 edges
[2020-11-25 09:08:19,206 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 09:08:19,206 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 09:08:19,206 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 09:08:19,207 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 09:08:19,219 INFO  L70    emoveInfeasibleEdges]: Removed 90 edges and 13 locations because of local infeasibility
[2020-11-25 09:08:19,229 INFO  L70        RemoveSinkStates]: Removed 38 edges and 25 locations by removing sink states
[2020-11-25 09:08:19,241 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 09:08:19,245 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 09:08:19,248 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 09:08:19,249 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 09:08:19,254 INFO  L313           BlockEncoder]: Encoded RCFG 3664 locations, 6248 edges
[2020-11-25 09:08:19,254 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:08:19 BasicIcfg
[2020-11-25 09:08:19,254 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 09:08:19,254 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 09:08:19,254 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 09:08:19,257 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 09:08:19,257 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:08:19,257 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 09:08:16" (1/6) ...
[2020-11-25 09:08:19,259 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@66fb3c8 and model type XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:08:19, skipping insertion in model container
[2020-11-25 09:08:19,259 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:08:19,259 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 09:08:16" (2/6) ...
[2020-11-25 09:08:19,260 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@66fb3c8 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:08:19, skipping insertion in model container
[2020-11-25 09:08:19,260 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:08:19,260 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 09:08:17" (3/6) ...
[2020-11-25 09:08:19,260 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@66fb3c8 and model type XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 09:08:19, skipping insertion in model container
[2020-11-25 09:08:19,260 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:08:19,260 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 09:08:17" (4/6) ...
[2020-11-25 09:08:19,260 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@66fb3c8 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 09:08:19, skipping insertion in model container
[2020-11-25 09:08:19,261 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:08:19,261 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 09:08:19" (5/6) ...
[2020-11-25 09:08:19,261 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@66fb3c8 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 09:08:19, skipping insertion in model container
[2020-11-25 09:08:19,261 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 09:08:19,261 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 09:08:19" (6/6) ...
[2020-11-25 09:08:19,262 INFO  L404   chiAutomizerObserver]: Analyzing ICFG XMDDexChain_0xa8b0279acc96efebd09955ad8240b2d30b53055e_transferfrom-normal.bpl_BEv2
[2020-11-25 09:08:19,297 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 09:08:19,297 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 09:08:19,297 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 09:08:19,297 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 09:08:19,297 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 09:08:19,297 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 09:08:19,297 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 09:08:19,297 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 09:08:19,297 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 09:08:19,342 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3664 states.
[2020-11-25 09:08:19,391 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:08:19,392 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:08:19,392 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:08:19,399 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:08:19,399 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:08:19,399 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 09:08:19,400 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 3664 states.
[2020-11-25 09:08:19,417 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:08:19,417 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:08:19,417 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:08:19,419 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:08:19,419 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_XMDDexChain0 := false;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == XMDDexChain;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND TRUE   revert
[L794]   RET         call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;

Loop:
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND TRUE   choice == 20
[L4111]              gas := gas - 21000;
[L4112]  COND FALSE  !(gas >= 0)
[L4261]  RET         call CorralChoice_XMDDexChain(this);

[2020-11-25 09:08:19,432 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:08:19,432 INFO  L82        PathProgramCache]: Analyzing trace with hash 1990269265, now seen corresponding path program 1 times
[2020-11-25 09:08:19,435 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:08:19,453 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:08:19,487 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:08:19,489 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:08:19,490 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 09:08:19,679 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:08:19,687 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 09:08:19,688 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 09:08:19,689 INFO  L87              Difference]: Start difference. First operand 3664 states. Second operand 3 states.
[2020-11-25 09:08:19,832 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:08:19,832 INFO  L93              Difference]: Finished difference Result 2517 states and 2746 transitions.
[2020-11-25 09:08:19,832 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 09:08:19,833 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2517 states and 2746 transitions.
[2020-11-25 09:08:19,844 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:08:19,865 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2517 states to 2517 states and 2746 transitions.
[2020-11-25 09:08:19,866 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 09:08:19,868 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 858
[2020-11-25 09:08:19,869 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2517 states and 2746 transitions.
[2020-11-25 09:08:19,875 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:08:19,875 INFO  L728         BuchiCegarLoop]: Abstraction has 2517 states and 2746 transitions.
[2020-11-25 09:08:19,889 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2517 states and 2746 transitions.
[2020-11-25 09:08:19,925 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2517 to 2517.
[2020-11-25 09:08:19,926 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2517 states.
[2020-11-25 09:08:19,931 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2517 states to 2517 states and 2746 transitions.
[2020-11-25 09:08:19,932 INFO  L751         BuchiCegarLoop]: Abstraction has 2517 states and 2746 transitions.
[2020-11-25 09:08:19,932 INFO  L631         BuchiCegarLoop]: Abstraction has 2517 states and 2746 transitions.
[2020-11-25 09:08:19,932 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 09:08:19,932 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2517 states and 2746 transitions.
[2020-11-25 09:08:19,939 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:08:19,939 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:08:19,939 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:08:19,941 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:08:19,941 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_XMDDexChain0 := false;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == XMDDexChain;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND TRUE   revert
[L794]   RET         call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_XMDDexChain0 := true;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == XMDDexChain
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L1995]  COND TRUE   !(b_s45 <= a_s45)
[L1996]              revert := true;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L2451]  COND TRUE   revert
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s458 == true && balances_XMDDexChain[this][from_s458] == old(balances_XMDDexChain[this][from_s458]) - tokens_s458) && balances_XMDDexChain[this][to_s458] == old(balances_XMDDexChain[this][to_s458]) + tokens_s458) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] == old(allowed_XMDDexChain[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this])) && balances_XMDDexChain[this][p1] == old(balances_XMDDexChain[this][p1])) && allowed_XMDDexChain[this][p2][p3] == old(allowed_XMDDexChain[this][p2][p3])) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this])) && name_XMDDexChain[this] == old(name_XMDDexChain[this])) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_XMDDexChain(this);

Loop:
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_XMDDexChain0 := true;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == XMDDexChain
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L1995]  COND TRUE   !(b_s45 <= a_s45)
[L1996]              revert := true;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L2451]  COND TRUE   revert
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s458 == true && balances_XMDDexChain[this][from_s458] == old(balances_XMDDexChain[this][from_s458]) - tokens_s458) && balances_XMDDexChain[this][to_s458] == old(balances_XMDDexChain[this][to_s458]) + tokens_s458) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] == old(allowed_XMDDexChain[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this])) && balances_XMDDexChain[this][p1] == old(balances_XMDDexChain[this][p1])) && allowed_XMDDexChain[this][p2][p3] == old(allowed_XMDDexChain[this][p2][p3])) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this])) && name_XMDDexChain[this] == old(name_XMDDexChain[this])) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_XMDDexChain(this);

[2020-11-25 09:08:19,945 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:08:19,945 INFO  L82        PathProgramCache]: Analyzing trace with hash -220111431, now seen corresponding path program 1 times
[2020-11-25 09:08:19,946 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:08:19,955 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:08:19,974 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:08:19,975 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:08:19,975 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 09:08:19,976 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:08:19,976 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 09:08:19,976 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 09:08:19,976 INFO  L87              Difference]: Start difference. First operand 2517 states and 2746 transitions. cyclomatic complexity: 231 Second operand 4 states.
[2020-11-25 09:08:20,384 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:08:20,385 INFO  L93              Difference]: Finished difference Result 3737 states and 4238 transitions.
[2020-11-25 09:08:20,385 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 09:08:20,385 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3737 states and 4238 transitions.
[2020-11-25 09:08:20,403 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 6
[2020-11-25 09:08:20,421 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3737 states to 3617 states and 4110 transitions.
[2020-11-25 09:08:20,421 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1180
[2020-11-25 09:08:20,422 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1190
[2020-11-25 09:08:20,422 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 3617 states and 4110 transitions.
[2020-11-25 09:08:20,428 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:08:20,428 INFO  L728         BuchiCegarLoop]: Abstraction has 3617 states and 4110 transitions.
[2020-11-25 09:08:20,431 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 3617 states and 4110 transitions.
[2020-11-25 09:08:20,456 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 3617 to 2553.
[2020-11-25 09:08:20,456 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2553 states.
[2020-11-25 09:08:20,458 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2553 states to 2553 states and 2738 transitions.
[2020-11-25 09:08:20,458 INFO  L751         BuchiCegarLoop]: Abstraction has 2553 states and 2738 transitions.
[2020-11-25 09:08:20,458 INFO  L631         BuchiCegarLoop]: Abstraction has 2553 states and 2738 transitions.
[2020-11-25 09:08:20,458 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 09:08:20,459 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2553 states and 2738 transitions.
[2020-11-25 09:08:20,464 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:08:20,464 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:08:20,464 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:08:20,465 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:08:20,465 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_XMDDexChain0 := false;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == XMDDexChain;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_XMDDexChain[this] := -1282837888;
[L2236]              name_XMDDexChain[this] := -1282837888;
[L2237]              decimals_XMDDexChain[this] := 0;
[L2238]              _totalSupply_XMDDexChain[this] := 0;
[L2239]              balances_XMDDexChain[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_XMDDexChain[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_XMDDexChain[this] := 542303379;
[L2245]              name_XMDDexChain[this] := -1719409972;
[L2246]              decimals_XMDDexChain[this] := 8;
[L2247]              _totalSupply_XMDDexChain[this] := 2100000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2249]              balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011] := _totalSupply_XMDDexChain[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2251]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2288]  RET         call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_XMDDexChain0 := true;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_XMDDexChain_lvl0 := alloc_allowed_XMDDexChain_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_XMDDexChain := symbol_XMDDexChain;
[L1064]              __tmp__name_XMDDexChain := name_XMDDexChain;
[L1065]              __tmp__decimals_XMDDexChain := decimals_XMDDexChain;
[L1066]              __tmp___totalSupply_XMDDexChain := _totalSupply_XMDDexChain;
[L1067]              __tmp__balances_XMDDexChain := balances_XMDDexChain;
[L1068]              __tmp__allowed_XMDDexChain := allowed_XMDDexChain;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][from_s458], tokens_s458);
[L1986]  COND TRUE   !(b_s45 <= a_s45)
[L1987]              revert := true;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][from_s458], tokens_s458);
[L2409]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_XMDDexChain(this);

Loop:
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_XMDDexChain0 := true;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_XMDDexChain_lvl0 := alloc_allowed_XMDDexChain_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_XMDDexChain := symbol_XMDDexChain;
[L1064]              __tmp__name_XMDDexChain := name_XMDDexChain;
[L1065]              __tmp__decimals_XMDDexChain := decimals_XMDDexChain;
[L1066]              __tmp___totalSupply_XMDDexChain := _totalSupply_XMDDexChain;
[L1067]              __tmp__balances_XMDDexChain := balances_XMDDexChain;
[L1068]              __tmp__allowed_XMDDexChain := allowed_XMDDexChain;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][from_s458], tokens_s458);
[L1986]  COND TRUE   !(b_s45 <= a_s45)
[L1987]              revert := true;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][from_s458], tokens_s458);
[L2409]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_XMDDexChain(this);

[2020-11-25 09:08:20,469 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:08:20,469 INFO  L82        PathProgramCache]: Analyzing trace with hash 520138603, now seen corresponding path program 1 times
[2020-11-25 09:08:20,470 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:08:20,483 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:08:20,549 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 09:08:20,549 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:08:20,549 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 09:08:20,550 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:08:20,550 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 09:08:20,550 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 09:08:20,550 INFO  L87              Difference]: Start difference. First operand 2553 states and 2738 transitions. cyclomatic complexity: 187 Second operand 7 states.
[2020-11-25 09:08:21,441 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:08:21,441 INFO  L93              Difference]: Finished difference Result 2761 states and 2962 transitions.
[2020-11-25 09:08:21,441 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 09:08:21,441 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2761 states and 2962 transitions.
[2020-11-25 09:08:21,452 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:08:21,462 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2761 states to 2761 states and 2962 transitions.
[2020-11-25 09:08:21,463 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 958
[2020-11-25 09:08:21,463 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 958
[2020-11-25 09:08:21,463 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2761 states and 2962 transitions.
[2020-11-25 09:08:21,466 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:08:21,466 INFO  L728         BuchiCegarLoop]: Abstraction has 2761 states and 2962 transitions.
[2020-11-25 09:08:21,469 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2761 states and 2962 transitions.
[2020-11-25 09:08:21,496 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2761 to 2609.
[2020-11-25 09:08:21,497 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2609 states.
[2020-11-25 09:08:21,500 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2609 states to 2609 states and 2798 transitions.
[2020-11-25 09:08:21,500 INFO  L751         BuchiCegarLoop]: Abstraction has 2609 states and 2798 transitions.
[2020-11-25 09:08:21,500 INFO  L631         BuchiCegarLoop]: Abstraction has 2609 states and 2798 transitions.
[2020-11-25 09:08:21,500 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 09:08:21,500 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2609 states and 2798 transitions.
[2020-11-25 09:08:21,506 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:08:21,506 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:08:21,506 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:08:21,508 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:08:21,508 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_XMDDexChain0 := false;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == XMDDexChain;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_XMDDexChain[this] := -1282837888;
[L2236]              name_XMDDexChain[this] := -1282837888;
[L2237]              decimals_XMDDexChain[this] := 0;
[L2238]              _totalSupply_XMDDexChain[this] := 0;
[L2239]              balances_XMDDexChain[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_XMDDexChain[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_XMDDexChain[this] := 542303379;
[L2245]              name_XMDDexChain[this] := -1719409972;
[L2246]              decimals_XMDDexChain[this] := 8;
[L2247]              _totalSupply_XMDDexChain[this] := 2100000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2249]              balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011] := _totalSupply_XMDDexChain[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2251]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2288]  RET         call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_XMDDexChain0 := true;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == XMDDexChain
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][from_s458];
[L2458]              balances_XMDDexChain[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][from_s458];
[L2460]  COND TRUE   DType[this] == XMDDexChain
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2469]              allowed_XMDDexChain[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == XMDDexChain
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][to_s458];
[L2480]              balances_XMDDexChain[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s458 == true && balances_XMDDexChain[this][from_s458] == old(balances_XMDDexChain[this][from_s458]) - tokens_s458) && balances_XMDDexChain[this][to_s458] == old(balances_XMDDexChain[this][to_s458]) + tokens_s458) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] == old(allowed_XMDDexChain[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this])) && balances_XMDDexChain[this][p1] == old(balances_XMDDexChain[this][p1])) && allowed_XMDDexChain[this][p2][p3] == old(allowed_XMDDexChain[this][p2][p3])) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this])) && name_XMDDexChain[this] == old(name_XMDDexChain[this])) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_XMDDexChain(this);

Loop:
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_XMDDexChain0 := true;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == XMDDexChain
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][from_s458];
[L2458]              balances_XMDDexChain[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][from_s458];
[L2460]  COND TRUE   DType[this] == XMDDexChain
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2469]              allowed_XMDDexChain[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == XMDDexChain
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][to_s458];
[L2480]              balances_XMDDexChain[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s458 == true && balances_XMDDexChain[this][from_s458] == old(balances_XMDDexChain[this][from_s458]) - tokens_s458) && balances_XMDDexChain[this][to_s458] == old(balances_XMDDexChain[this][to_s458]) + tokens_s458) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] == old(allowed_XMDDexChain[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this])) && balances_XMDDexChain[this][p1] == old(balances_XMDDexChain[this][p1])) && allowed_XMDDexChain[this][p2][p3] == old(allowed_XMDDexChain[this][p2][p3])) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this])) && name_XMDDexChain[this] == old(name_XMDDexChain[this])) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_XMDDexChain(this);

[2020-11-25 09:08:21,513 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:08:21,513 INFO  L82        PathProgramCache]: Analyzing trace with hash -996078274, now seen corresponding path program 1 times
[2020-11-25 09:08:21,514 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:08:21,581 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:08:22,203 WARN  L188               SmtUtils]: Spent 124.00 ms on a formula simplification. DAG size of input: 105 DAG size of output: 91
[2020-11-25 09:08:22,453 WARN  L188               SmtUtils]: Spent 105.00 ms on a formula simplification. DAG size of input: 84 DAG size of output: 78
[2020-11-25 09:08:22,766 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 3 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 09:08:22,767 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:08:22,767 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [27] total 27
[2020-11-25 09:08:22,767 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:08:22,767 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 28 interpolants.
[2020-11-25 09:08:22,768 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=66, Invalid=690, Unknown=0, NotChecked=0, Total=756
[2020-11-25 09:08:22,768 INFO  L87              Difference]: Start difference. First operand 2609 states and 2798 transitions. cyclomatic complexity: 191 Second operand 28 states.
[2020-11-25 09:08:29,353 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:08:29,353 INFO  L93              Difference]: Finished difference Result 2702 states and 2917 transitions.
[2020-11-25 09:08:29,353 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 09:08:29,353 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2702 states and 2917 transitions.
[2020-11-25 09:08:29,360 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:08:29,367 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2702 states to 2702 states and 2917 transitions.
[2020-11-25 09:08:29,367 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 926
[2020-11-25 09:08:29,367 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 926
[2020-11-25 09:08:29,367 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2702 states and 2917 transitions.
[2020-11-25 09:08:29,370 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:08:29,370 INFO  L728         BuchiCegarLoop]: Abstraction has 2702 states and 2917 transitions.
[2020-11-25 09:08:29,372 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2702 states and 2917 transitions.
[2020-11-25 09:08:29,389 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2702 to 2685.
[2020-11-25 09:08:29,389 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2685 states.
[2020-11-25 09:08:29,391 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2685 states to 2685 states and 2884 transitions.
[2020-11-25 09:08:29,391 INFO  L751         BuchiCegarLoop]: Abstraction has 2685 states and 2884 transitions.
[2020-11-25 09:08:29,391 INFO  L631         BuchiCegarLoop]: Abstraction has 2685 states and 2884 transitions.
[2020-11-25 09:08:29,391 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 09:08:29,392 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2685 states and 2884 transitions.
[2020-11-25 09:08:29,394 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:08:29,395 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:08:29,395 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:08:29,396 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:08:29,396 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_XMDDexChain0 := false;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == XMDDexChain;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_XMDDexChain[this] := -1282837888;
[L2236]              name_XMDDexChain[this] := -1282837888;
[L2237]              decimals_XMDDexChain[this] := 0;
[L2238]              _totalSupply_XMDDexChain[this] := 0;
[L2239]              balances_XMDDexChain[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_XMDDexChain[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_XMDDexChain[this] := 542303379;
[L2245]              name_XMDDexChain[this] := -1719409972;
[L2246]              decimals_XMDDexChain[this] := 8;
[L2247]              _totalSupply_XMDDexChain[this] := 2100000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2249]              balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011] := _totalSupply_XMDDexChain[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2251]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2288]  RET         call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_XMDDexChain0 := true;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_XMDDexChain_lvl0 := alloc_allowed_XMDDexChain_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_XMDDexChain := symbol_XMDDexChain;
[L1064]              __tmp__name_XMDDexChain := name_XMDDexChain;
[L1065]              __tmp__decimals_XMDDexChain := decimals_XMDDexChain;
[L1066]              __tmp___totalSupply_XMDDexChain := _totalSupply_XMDDexChain;
[L1067]              __tmp__balances_XMDDexChain := balances_XMDDexChain;
[L1068]              __tmp__allowed_XMDDexChain := allowed_XMDDexChain;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][from_s458], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][from_s458], tokens_s458);
[L2409]  COND FALSE  !(revert)
[L2415]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_XMDDexChain[this][from_s458];
[L2416]              __tmp__balances_XMDDexChain[this][from_s458] := __var_5;
[L2417]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_XMDDexChain[this][from_s458];
[L2418]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2419]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L1986]  COND TRUE   !(b_s45 <= a_s45)
[L1987]              revert := true;
[L2419]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L2420]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_XMDDexChain(this);

Loop:
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_XMDDexChain0 := true;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_XMDDexChain_lvl0 := alloc_allowed_XMDDexChain_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_XMDDexChain := symbol_XMDDexChain;
[L1064]              __tmp__name_XMDDexChain := name_XMDDexChain;
[L1065]              __tmp__decimals_XMDDexChain := decimals_XMDDexChain;
[L1066]              __tmp___totalSupply_XMDDexChain := _totalSupply_XMDDexChain;
[L1067]              __tmp__balances_XMDDexChain := balances_XMDDexChain;
[L1068]              __tmp__allowed_XMDDexChain := allowed_XMDDexChain;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][from_s458], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][from_s458], tokens_s458);
[L2409]  COND FALSE  !(revert)
[L2415]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_XMDDexChain[this][from_s458];
[L2416]              __tmp__balances_XMDDexChain[this][from_s458] := __var_5;
[L2417]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_XMDDexChain[this][from_s458];
[L2418]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2419]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L1986]  COND TRUE   !(b_s45 <= a_s45)
[L1987]              revert := true;
[L2419]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L2420]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_XMDDexChain(this);

[2020-11-25 09:08:29,399 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:08:29,399 INFO  L82        PathProgramCache]: Analyzing trace with hash -305319060, now seen corresponding path program 1 times
[2020-11-25 09:08:29,400 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:08:29,408 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:08:29,470 INFO  L134       CoverageAnalysis]: Checked inductivity of 3 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 1 trivial. 0 not checked.
[2020-11-25 09:08:29,470 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:08:29,470 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [13] imperfect sequences [] total 13
[2020-11-25 09:08:29,471 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:08:29,471 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 14 interpolants.
[2020-11-25 09:08:29,471 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=26, Invalid=156, Unknown=0, NotChecked=0, Total=182
[2020-11-25 09:08:29,471 INFO  L87              Difference]: Start difference. First operand 2685 states and 2884 transitions. cyclomatic complexity: 203 Second operand 14 states.
[2020-11-25 09:08:30,719 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:08:30,720 INFO  L93              Difference]: Finished difference Result 2827 states and 3088 transitions.
[2020-11-25 09:08:30,720 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 17 states. 
[2020-11-25 09:08:30,720 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2827 states and 3088 transitions.
[2020-11-25 09:08:30,725 INFO  L131   ngComponentsAnalysis]: Automaton has 5 accepting balls. 10
[2020-11-25 09:08:30,732 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2827 states to 2827 states and 3088 transitions.
[2020-11-25 09:08:30,732 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 989
[2020-11-25 09:08:30,733 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 989
[2020-11-25 09:08:30,733 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2827 states and 3088 transitions.
[2020-11-25 09:08:30,735 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:08:30,735 INFO  L728         BuchiCegarLoop]: Abstraction has 2827 states and 3088 transitions.
[2020-11-25 09:08:30,737 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2827 states and 3088 transitions.
[2020-11-25 09:08:30,753 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2827 to 2761.
[2020-11-25 09:08:30,753 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2761 states.
[2020-11-25 09:08:30,755 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2761 states to 2761 states and 2978 transitions.
[2020-11-25 09:08:30,755 INFO  L751         BuchiCegarLoop]: Abstraction has 2761 states and 2978 transitions.
[2020-11-25 09:08:30,755 INFO  L631         BuchiCegarLoop]: Abstraction has 2761 states and 2978 transitions.
[2020-11-25 09:08:30,755 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 09:08:30,755 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2761 states and 2978 transitions.
[2020-11-25 09:08:30,758 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 09:08:30,758 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:08:30,758 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:08:30,759 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:08:30,759 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_XMDDexChain0 := false;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == XMDDexChain;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_XMDDexChain[this] := -1282837888;
[L2236]              name_XMDDexChain[this] := -1282837888;
[L2237]              decimals_XMDDexChain[this] := 0;
[L2238]              _totalSupply_XMDDexChain[this] := 0;
[L2239]              balances_XMDDexChain[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_XMDDexChain[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_XMDDexChain[this] := 542303379;
[L2245]              name_XMDDexChain[this] := -1719409972;
[L2246]              decimals_XMDDexChain[this] := 8;
[L2247]              _totalSupply_XMDDexChain[this] := 2100000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2249]              balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011] := _totalSupply_XMDDexChain[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2251]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2288]  RET         call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_XMDDexChain0 := true;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_XMDDexChain_lvl0 := alloc_allowed_XMDDexChain_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_XMDDexChain := symbol_XMDDexChain;
[L1064]              __tmp__name_XMDDexChain := name_XMDDexChain;
[L1065]              __tmp__decimals_XMDDexChain := decimals_XMDDexChain;
[L1066]              __tmp___totalSupply_XMDDexChain := _totalSupply_XMDDexChain;
[L1067]              __tmp__balances_XMDDexChain := balances_XMDDexChain;
[L1068]              __tmp__allowed_XMDDexChain := allowed_XMDDexChain;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][from_s458], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][from_s458], tokens_s458);
[L2409]  COND FALSE  !(revert)
[L2415]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_XMDDexChain[this][from_s458];
[L2416]              __tmp__balances_XMDDexChain[this][from_s458] := __var_5;
[L2417]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_XMDDexChain[this][from_s458];
[L2418]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2419]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2419]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L2420]  COND FALSE  !(revert)
[L2426]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] - __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2427]              __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG] := __var_6;
[L2428]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] + __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2429]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2430]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][to_s458], tokens_s458);
[L1968]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1969]  COND TRUE   !(c_s23 >= a_s23)
[L1970]              revert := true;
[L2430]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][to_s458], tokens_s458);
[L2431]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_XMDDexChain(this);

Loop:
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_XMDDexChain0 := true;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_XMDDexChain_lvl0 := alloc_allowed_XMDDexChain_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_XMDDexChain := symbol_XMDDexChain;
[L1064]              __tmp__name_XMDDexChain := name_XMDDexChain;
[L1065]              __tmp__decimals_XMDDexChain := decimals_XMDDexChain;
[L1066]              __tmp___totalSupply_XMDDexChain := _totalSupply_XMDDexChain;
[L1067]              __tmp__balances_XMDDexChain := balances_XMDDexChain;
[L1068]              __tmp__allowed_XMDDexChain := allowed_XMDDexChain;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][from_s458], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][from_s458], tokens_s458);
[L2409]  COND FALSE  !(revert)
[L2415]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_XMDDexChain[this][from_s458];
[L2416]              __tmp__balances_XMDDexChain[this][from_s458] := __var_5;
[L2417]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_XMDDexChain[this][from_s458];
[L2418]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2419]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2419]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L2420]  COND FALSE  !(revert)
[L2426]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] - __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2427]              __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG] := __var_6;
[L2428]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] + __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2429]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2430]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][to_s458], tokens_s458);
[L1968]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1969]  COND TRUE   !(c_s23 >= a_s23)
[L1970]              revert := true;
[L2430]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][to_s458], tokens_s458);
[L2431]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_XMDDexChain(this);

[2020-11-25 09:08:30,762 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:08:30,763 INFO  L82        PathProgramCache]: Analyzing trace with hash -1520790900, now seen corresponding path program 1 times
[2020-11-25 09:08:30,763 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:08:30,772 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:08:30,820 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-25 09:08:30,820 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:08:30,821 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [9] imperfect sequences [] total 9
[2020-11-25 09:08:30,821 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:08:30,821 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 9 interpolants.
[2020-11-25 09:08:30,821 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=16, Invalid=56, Unknown=0, NotChecked=0, Total=72
[2020-11-25 09:08:30,821 INFO  L87              Difference]: Start difference. First operand 2761 states and 2978 transitions. cyclomatic complexity: 223 Second operand 9 states.
[2020-11-25 09:08:31,482 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:08:31,482 INFO  L93              Difference]: Finished difference Result 2841 states and 3089 transitions.
[2020-11-25 09:08:31,482 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 10 states. 
[2020-11-25 09:08:31,483 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2841 states and 3089 transitions.
[2020-11-25 09:08:31,488 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:08:31,494 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2841 states to 2841 states and 3089 transitions.
[2020-11-25 09:08:31,495 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 996
[2020-11-25 09:08:31,495 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 996
[2020-11-25 09:08:31,495 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2841 states and 3089 transitions.
[2020-11-25 09:08:31,497 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:08:31,497 INFO  L728         BuchiCegarLoop]: Abstraction has 2841 states and 3089 transitions.
[2020-11-25 09:08:31,499 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2841 states and 3089 transitions.
[2020-11-25 09:08:31,514 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2841 to 2761.
[2020-11-25 09:08:31,514 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2761 states.
[2020-11-25 09:08:31,517 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2761 states to 2761 states and 2978 transitions.
[2020-11-25 09:08:31,517 INFO  L751         BuchiCegarLoop]: Abstraction has 2761 states and 2978 transitions.
[2020-11-25 09:08:31,517 INFO  L631         BuchiCegarLoop]: Abstraction has 2761 states and 2978 transitions.
[2020-11-25 09:08:31,517 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 09:08:31,517 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2761 states and 2978 transitions.
[2020-11-25 09:08:31,520 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 09:08:31,520 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:08:31,520 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:08:31,521 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:08:31,521 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_XMDDexChain0 := false;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == XMDDexChain;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_XMDDexChain[this] := -1282837888;
[L2236]              name_XMDDexChain[this] := -1282837888;
[L2237]              decimals_XMDDexChain[this] := 0;
[L2238]              _totalSupply_XMDDexChain[this] := 0;
[L2239]              balances_XMDDexChain[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_XMDDexChain[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_XMDDexChain[this] := 542303379;
[L2245]              name_XMDDexChain[this] := -1719409972;
[L2246]              decimals_XMDDexChain[this] := 8;
[L2247]              _totalSupply_XMDDexChain[this] := 2100000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2249]              balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011] := _totalSupply_XMDDexChain[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2251]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2288]  RET         call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_XMDDexChain0 := true;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_XMDDexChain_lvl0 := alloc_allowed_XMDDexChain_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_XMDDexChain := symbol_XMDDexChain;
[L1064]              __tmp__name_XMDDexChain := name_XMDDexChain;
[L1065]              __tmp__decimals_XMDDexChain := decimals_XMDDexChain;
[L1066]              __tmp___totalSupply_XMDDexChain := _totalSupply_XMDDexChain;
[L1067]              __tmp__balances_XMDDexChain := balances_XMDDexChain;
[L1068]              __tmp__allowed_XMDDexChain := allowed_XMDDexChain;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][from_s458], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][from_s458], tokens_s458);
[L2409]  COND FALSE  !(revert)
[L2415]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_XMDDexChain[this][from_s458];
[L2416]              __tmp__balances_XMDDexChain[this][from_s458] := __var_5;
[L2417]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_XMDDexChain[this][from_s458];
[L2418]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2419]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2419]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L2420]  COND FALSE  !(revert)
[L2426]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] - __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2427]              __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG] := __var_6;
[L2428]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] + __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2429]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2430]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][to_s458], tokens_s458);
[L1968]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1969]  COND FALSE  !(!(c_s23 >= a_s23))
[L2430]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][to_s458], tokens_s458);
[L2431]  COND FALSE  !(revert)
[L2437]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_XMDDexChain[this][to_s458];
[L2438]              __tmp__balances_XMDDexChain[this][to_s458] := __var_7;
[L2439]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_XMDDexChain[this][to_s458];
[L2440]              success_s458 := true;
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_XMDDexChain(this);

Loop:
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_XMDDexChain0 := true;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_XMDDexChain_lvl0 := alloc_allowed_XMDDexChain_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_XMDDexChain := symbol_XMDDexChain;
[L1064]              __tmp__name_XMDDexChain := name_XMDDexChain;
[L1065]              __tmp__decimals_XMDDexChain := decimals_XMDDexChain;
[L1066]              __tmp___totalSupply_XMDDexChain := _totalSupply_XMDDexChain;
[L1067]              __tmp__balances_XMDDexChain := balances_XMDDexChain;
[L1068]              __tmp__allowed_XMDDexChain := allowed_XMDDexChain;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][from_s458], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][from_s458], tokens_s458);
[L2409]  COND FALSE  !(revert)
[L2415]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_XMDDexChain[this][from_s458];
[L2416]              __tmp__balances_XMDDexChain[this][from_s458] := __var_5;
[L2417]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_XMDDexChain[this][from_s458];
[L2418]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2419]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2419]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L2420]  COND FALSE  !(revert)
[L2426]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] - __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2427]              __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG] := __var_6;
[L2428]              __tmp__sum_allowed1[from_s458] := __tmp__sum_allowed1[from_s458] + __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2429]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2430]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][to_s458], tokens_s458);
[L1968]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1969]  COND FALSE  !(!(c_s23 >= a_s23))
[L2430]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][to_s458], tokens_s458);
[L2431]  COND FALSE  !(revert)
[L2437]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_XMDDexChain[this][to_s458];
[L2438]              __tmp__balances_XMDDexChain[this][to_s458] := __var_7;
[L2439]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_XMDDexChain[this][to_s458];
[L2440]              success_s458 := true;
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_XMDDexChain(this);

[2020-11-25 09:08:31,525 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:08:31,525 INFO  L82        PathProgramCache]: Analyzing trace with hash -162416568, now seen corresponding path program 1 times
[2020-11-25 09:08:31,525 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:08:31,533 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:08:31,556 INFO  L134       CoverageAnalysis]: Checked inductivity of 4 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 4 trivial. 0 not checked.
[2020-11-25 09:08:31,557 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:08:31,557 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-25 09:08:31,557 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:08:31,557 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-25 09:08:31,557 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-25 09:08:31,557 INFO  L87              Difference]: Start difference. First operand 2761 states and 2978 transitions. cyclomatic complexity: 223 Second operand 5 states.
[2020-11-25 09:08:31,969 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:08:31,970 INFO  L93              Difference]: Finished difference Result 3489 states and 3898 transitions.
[2020-11-25 09:08:31,970 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 09:08:31,970 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 3489 states and 3898 transitions.
[2020-11-25 09:08:31,978 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 8
[2020-11-25 09:08:31,985 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 3489 states to 2680 states and 3086 transitions.
[2020-11-25 09:08:31,986 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 752
[2020-11-25 09:08:31,986 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 752
[2020-11-25 09:08:31,986 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2680 states and 3086 transitions.
[2020-11-25 09:08:31,988 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:08:31,988 INFO  L728         BuchiCegarLoop]: Abstraction has 2680 states and 3086 transitions.
[2020-11-25 09:08:31,990 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2680 states and 3086 transitions.
[2020-11-25 09:08:32,004 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2680 to 1922.
[2020-11-25 09:08:32,004 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1922 states.
[2020-11-25 09:08:32,005 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1922 states to 1922 states and 2081 transitions.
[2020-11-25 09:08:32,005 INFO  L751         BuchiCegarLoop]: Abstraction has 1922 states and 2081 transitions.
[2020-11-25 09:08:32,005 INFO  L631         BuchiCegarLoop]: Abstraction has 1922 states and 2081 transitions.
[2020-11-25 09:08:32,005 INFO  L445         BuchiCegarLoop]: ======== Iteration 8============
[2020-11-25 09:08:32,006 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1922 states and 2081 transitions.
[2020-11-25 09:08:32,008 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:08:32,008 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:08:32,008 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:08:32,009 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:08:32,009 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_XMDDexChain0 := false;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == XMDDexChain;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_XMDDexChain[this] := -1282837888;
[L2236]              name_XMDDexChain[this] := -1282837888;
[L2237]              decimals_XMDDexChain[this] := 0;
[L2238]              _totalSupply_XMDDexChain[this] := 0;
[L2239]              balances_XMDDexChain[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_XMDDexChain[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_XMDDexChain[this] := 542303379;
[L2245]              name_XMDDexChain[this] := -1719409972;
[L2246]              decimals_XMDDexChain[this] := 8;
[L2247]              _totalSupply_XMDDexChain[this] := 2100000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2249]              balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011] := _totalSupply_XMDDexChain[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2251]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2288]  RET         call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND TRUE   choice == 12
[L4168]              gas := gas - 21000;
[L4169]  COND TRUE   gas >= 0
[L4170]              assume tokens_s399 >= 0 && tokens_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4171]              assume msgvalue_MSG == 0;
[L4172]  CALL        call success_s399 := approve~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s399 := approve~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L2394]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_XMDDexChain[this][msgsender_MSG][spender_s399];
[L2395]              allowed_XMDDexChain[this][msgsender_MSG][spender_s399] := tokens_s399;
[L2396]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_XMDDexChain[this][msgsender_MSG][spender_s399];
[L2397]              assert { :EventEmitted "Approval_XMDDexChain" } true;
[L2398]              success_s399 := true;
[L1014]  RET         call success_s399 := approve~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L1015]              assume !revert && gas >= 0;
[L4172]  RET         call success_s399 := approve~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L4261]  RET         call CorralChoice_XMDDexChain(this);
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_XMDDexChain0 := true;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == XMDDexChain
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][from_s458];
[L2458]              balances_XMDDexChain[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][from_s458];
[L2460]  COND TRUE   DType[this] == XMDDexChain
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2469]              allowed_XMDDexChain[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == XMDDexChain
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][to_s458];
[L2480]              balances_XMDDexChain[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s458 == true && balances_XMDDexChain[this][from_s458] == old(balances_XMDDexChain[this][from_s458]) - tokens_s458) && balances_XMDDexChain[this][to_s458] == old(balances_XMDDexChain[this][to_s458]) + tokens_s458) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] == old(allowed_XMDDexChain[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this])) && balances_XMDDexChain[this][p1] == old(balances_XMDDexChain[this][p1])) && allowed_XMDDexChain[this][p2][p3] == old(allowed_XMDDexChain[this][p2][p3])) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this])) && name_XMDDexChain[this] == old(name_XMDDexChain[this])) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_XMDDexChain(this);

Loop:
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND TRUE   choice == 20
[L4111]              gas := gas - 21000;
[L4112]  COND FALSE  !(gas >= 0)
[L4261]  RET         call CorralChoice_XMDDexChain(this);

[2020-11-25 09:08:32,012 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:08:32,012 INFO  L82        PathProgramCache]: Analyzing trace with hash 2087006468, now seen corresponding path program 1 times
[2020-11-25 09:08:32,012 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:08:32,066 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:08:33,294 WARN  L188               SmtUtils]: Spent 365.00 ms on a formula simplification. DAG size of input: 203 DAG size of output: 128
[2020-11-25 09:08:33,858 WARN  L188               SmtUtils]: Spent 491.00 ms on a formula simplification. DAG size of input: 187 DAG size of output: 119
[2020-11-25 09:08:34,328 WARN  L188               SmtUtils]: Spent 406.00 ms on a formula simplification. DAG size of input: 188 DAG size of output: 120
[2020-11-25 09:08:34,782 WARN  L188               SmtUtils]: Spent 393.00 ms on a formula simplification. DAG size of input: 222 DAG size of output: 116
[2020-11-25 09:08:35,168 INFO  L134       CoverageAnalysis]: Checked inductivity of 73 backedges. 2 proven. 1 refuted. 0 times theorem prover too weak. 70 trivial. 0 not checked.
[2020-11-25 09:08:35,168 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:08:35,168 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [33] total 33
[2020-11-25 09:08:35,168 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:08:35,168 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 34 interpolants.
[2020-11-25 09:08:35,169 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=99, Invalid=1023, Unknown=0, NotChecked=0, Total=1122
[2020-11-25 09:08:35,169 INFO  L87              Difference]: Start difference. First operand 1922 states and 2081 transitions. cyclomatic complexity: 163 Second operand 34 states.
[2020-11-25 09:08:38,452 WARN  L188               SmtUtils]: Spent 154.00 ms on a formula simplification. DAG size of input: 150 DAG size of output: 116
[2020-11-25 09:08:38,713 WARN  L188               SmtUtils]: Spent 217.00 ms on a formula simplification. DAG size of input: 131 DAG size of output: 131
[2020-11-25 09:08:38,982 WARN  L188               SmtUtils]: Spent 227.00 ms on a formula simplification. DAG size of input: 132 DAG size of output: 132
[2020-11-25 09:08:42,196 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:08:42,196 INFO  L93              Difference]: Finished difference Result 1961 states and 2153 transitions.
[2020-11-25 09:08:42,196 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 34 states. 
[2020-11-25 09:08:42,196 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1961 states and 2153 transitions.
[2020-11-25 09:08:42,199 INFO  L131   ngComponentsAnalysis]: Automaton has 3 accepting balls. 6
[2020-11-25 09:08:42,203 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1961 states to 1961 states and 2153 transitions.
[2020-11-25 09:08:42,203 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 602
[2020-11-25 09:08:42,204 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 602
[2020-11-25 09:08:42,204 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1961 states and 2153 transitions.
[2020-11-25 09:08:42,205 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:08:42,205 INFO  L728         BuchiCegarLoop]: Abstraction has 1961 states and 2153 transitions.
[2020-11-25 09:08:42,206 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1961 states and 2153 transitions.
[2020-11-25 09:08:42,216 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1961 to 1944.
[2020-11-25 09:08:42,216 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1944 states.
[2020-11-25 09:08:42,218 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1944 states to 1944 states and 2114 transitions.
[2020-11-25 09:08:42,218 INFO  L751         BuchiCegarLoop]: Abstraction has 1944 states and 2114 transitions.
[2020-11-25 09:08:42,218 INFO  L631         BuchiCegarLoop]: Abstraction has 1944 states and 2114 transitions.
[2020-11-25 09:08:42,218 INFO  L445         BuchiCegarLoop]: ======== Iteration 9============
[2020-11-25 09:08:42,218 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1944 states and 2114 transitions.
[2020-11-25 09:08:42,220 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:08:42,220 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:08:42,220 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:08:42,221 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:08:42,221 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_XMDDexChain0 := false;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == XMDDexChain;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_XMDDexChain[this] := -1282837888;
[L2236]              name_XMDDexChain[this] := -1282837888;
[L2237]              decimals_XMDDexChain[this] := 0;
[L2238]              _totalSupply_XMDDexChain[this] := 0;
[L2239]              balances_XMDDexChain[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_XMDDexChain[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_XMDDexChain[this] := 542303379;
[L2245]              name_XMDDexChain[this] := -1719409972;
[L2246]              decimals_XMDDexChain[this] := 8;
[L2247]              _totalSupply_XMDDexChain[this] := 2100000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2249]              balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011] := _totalSupply_XMDDexChain[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2251]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2288]  RET         call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND FALSE  !(choice == 11)
[L4181]  COND FALSE  !(choice == 10)
[L4187]  COND FALSE  !(choice == 9)
[L4193]  COND FALSE  !(choice == 8)
[L4199]  COND FALSE  !(choice == 7)
[L4205]  COND FALSE  !(choice == 6)
[L4211]  COND FALSE  !(choice == 5)
[L4217]  COND FALSE  !(choice == 4)
[L4223]  COND FALSE  !(choice == 3)
[L4229]  COND TRUE   choice == 2
[L4230]              gas := gas - 21000;
[L4231]  COND TRUE   gas >= 0
[L4232]              assume tokens_s517 >= 0 && tokens_s517 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4233]              assume msgvalue_MSG == 0;
[L4234]  CALL        call success_s517 := approveAndCall~address~uint256~bytes_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, spender_s517, tokens_s517, data_s517);
[L1157]              havoc __exception;
[L1158]              revert := false;
[L1159]  COND FALSE  !(__exception)
[L1182]  CALL        call success_s517 := approveAndCall~address~uint256~bytes_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, spender_s517, tokens_s517, data_s517);
[L2520]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_XMDDexChain[this][msgsender_MSG][spender_s517];
[L2521]              allowed_XMDDexChain[this][msgsender_MSG][spender_s517] := tokens_s517;
[L2522]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_XMDDexChain[this][msgsender_MSG][spender_s517];
[L2523]              assert { :EventEmitted "Approval_XMDDexChain" } true;
[L2524]              assume DType[spender_s517] == ApproveAndCallFallBack;
[L2525]              __var_8 := spender_s517;
[L2526]              __var_10 := this;
[L2528]              success_s517 := true;
[L1182]  RET         call success_s517 := approveAndCall~address~uint256~bytes_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, spender_s517, tokens_s517, data_s517);
[L1183]              assume !revert && gas >= 0;
[L4234]  RET         call success_s517 := approveAndCall~address~uint256~bytes_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, spender_s517, tokens_s517, data_s517);
[L4261]  RET         call CorralChoice_XMDDexChain(this);
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_XMDDexChain0 := true;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == XMDDexChain
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][from_s458];
[L2458]              balances_XMDDexChain[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][from_s458];
[L2460]  COND TRUE   DType[this] == XMDDexChain
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2469]              allowed_XMDDexChain[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == XMDDexChain
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][to_s458];
[L2480]              balances_XMDDexChain[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s458 == true && balances_XMDDexChain[this][from_s458] == old(balances_XMDDexChain[this][from_s458]) - tokens_s458) && balances_XMDDexChain[this][to_s458] == old(balances_XMDDexChain[this][to_s458]) + tokens_s458) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] == old(allowed_XMDDexChain[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this])) && balances_XMDDexChain[this][p1] == old(balances_XMDDexChain[this][p1])) && allowed_XMDDexChain[this][p2][p3] == old(allowed_XMDDexChain[this][p2][p3])) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this])) && name_XMDDexChain[this] == old(name_XMDDexChain[this])) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_XMDDexChain(this);

Loop:
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_XMDDexChain0 := true;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_XMDDexChain_lvl0 := alloc_allowed_XMDDexChain_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_XMDDexChain := symbol_XMDDexChain;
[L1064]              __tmp__name_XMDDexChain := name_XMDDexChain;
[L1065]              __tmp__decimals_XMDDexChain := decimals_XMDDexChain;
[L1066]              __tmp___totalSupply_XMDDexChain := _totalSupply_XMDDexChain;
[L1067]              __tmp__balances_XMDDexChain := balances_XMDDexChain;
[L1068]              __tmp__allowed_XMDDexChain := allowed_XMDDexChain;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][from_s458], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][from_s458], tokens_s458);
[L2409]  COND FALSE  !(revert)
[L2415]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_XMDDexChain[this][from_s458];
[L2416]              __tmp__balances_XMDDexChain[this][from_s458] := __var_5;
[L2417]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_XMDDexChain[this][from_s458];
[L2418]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2419]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L1986]  COND TRUE   !(b_s45 <= a_s45)
[L1987]              revert := true;
[L2419]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L2420]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_XMDDexChain(this);

[2020-11-25 09:08:42,224 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:08:42,224 INFO  L82        PathProgramCache]: Analyzing trace with hash -2051621094, now seen corresponding path program 1 times
[2020-11-25 09:08:42,225 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:08:42,258 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:08:42,562 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:08:42,674 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:08:42,675 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:08:43,153 WARN  L188               SmtUtils]: Spent 117.00 ms on a formula simplification. DAG size of input: 147 DAG size of output: 56
[2020-11-25 09:08:43,365 WARN  L188               SmtUtils]: Spent 159.00 ms on a formula simplification. DAG size of input: 199 DAG size of output: 92
[2020-11-25 09:08:43,675 INFO  L134       CoverageAnalysis]: Checked inductivity of 74 backedges. 13 proven. 3 refuted. 0 times theorem prover too weak. 58 trivial. 0 not checked.
[2020-11-25 09:08:43,675 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:08:43,675 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [32] total 32
[2020-11-25 09:08:43,676 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:08:43,676 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 33 interpolants.
[2020-11-25 09:08:43,676 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=113, Invalid=943, Unknown=0, NotChecked=0, Total=1056
[2020-11-25 09:08:43,676 INFO  L87              Difference]: Start difference. First operand 1944 states and 2114 transitions. cyclomatic complexity: 176 Second operand 33 states.
[2020-11-25 09:08:48,826 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:08:48,826 INFO  L93              Difference]: Finished difference Result 1977 states and 2181 transitions.
[2020-11-25 09:08:48,826 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 35 states. 
[2020-11-25 09:08:48,826 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1977 states and 2181 transitions.
[2020-11-25 09:08:48,830 INFO  L131   ngComponentsAnalysis]: Automaton has 4 accepting balls. 8
[2020-11-25 09:08:48,834 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1977 states to 1977 states and 2181 transitions.
[2020-11-25 09:08:48,834 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 602
[2020-11-25 09:08:48,834 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 602
[2020-11-25 09:08:48,834 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1977 states and 2181 transitions.
[2020-11-25 09:08:48,836 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:08:48,836 INFO  L728         BuchiCegarLoop]: Abstraction has 1977 states and 2181 transitions.
[2020-11-25 09:08:48,837 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1977 states and 2181 transitions.
[2020-11-25 09:08:48,847 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1977 to 1944.
[2020-11-25 09:08:48,847 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1944 states.
[2020-11-25 09:08:48,849 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1944 states to 1944 states and 2114 transitions.
[2020-11-25 09:08:48,849 INFO  L751         BuchiCegarLoop]: Abstraction has 1944 states and 2114 transitions.
[2020-11-25 09:08:48,849 INFO  L631         BuchiCegarLoop]: Abstraction has 1944 states and 2114 transitions.
[2020-11-25 09:08:48,849 INFO  L445         BuchiCegarLoop]: ======== Iteration 10============
[2020-11-25 09:08:48,849 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1944 states and 2114 transitions.
[2020-11-25 09:08:48,851 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:08:48,851 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:08:48,851 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:08:48,852 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:08:48,852 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_XMDDexChain0 := false;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == XMDDexChain;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_XMDDexChain[this] := -1282837888;
[L2236]              name_XMDDexChain[this] := -1282837888;
[L2237]              decimals_XMDDexChain[this] := 0;
[L2238]              _totalSupply_XMDDexChain[this] := 0;
[L2239]              balances_XMDDexChain[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_XMDDexChain[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_XMDDexChain[this] := 542303379;
[L2245]              name_XMDDexChain[this] := -1719409972;
[L2246]              decimals_XMDDexChain[this] := 8;
[L2247]              _totalSupply_XMDDexChain[this] := 2100000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2249]              balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011] := _totalSupply_XMDDexChain[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2251]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2288]  RET         call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND TRUE   choice == 12
[L4168]              gas := gas - 21000;
[L4169]  COND TRUE   gas >= 0
[L4170]              assume tokens_s399 >= 0 && tokens_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4171]              assume msgvalue_MSG == 0;
[L4172]  CALL        call success_s399 := approve~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s399 := approve~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L2394]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_XMDDexChain[this][msgsender_MSG][spender_s399];
[L2395]              allowed_XMDDexChain[this][msgsender_MSG][spender_s399] := tokens_s399;
[L2396]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_XMDDexChain[this][msgsender_MSG][spender_s399];
[L2397]              assert { :EventEmitted "Approval_XMDDexChain" } true;
[L2398]              success_s399 := true;
[L1014]  RET         call success_s399 := approve~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L1015]              assume !revert && gas >= 0;
[L4172]  RET         call success_s399 := approve~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L4261]  RET         call CorralChoice_XMDDexChain(this);
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_XMDDexChain0 := true;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_XMDDexChain_lvl0 := alloc_allowed_XMDDexChain_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_XMDDexChain := symbol_XMDDexChain;
[L1064]              __tmp__name_XMDDexChain := name_XMDDexChain;
[L1065]              __tmp__decimals_XMDDexChain := decimals_XMDDexChain;
[L1066]              __tmp___totalSupply_XMDDexChain := _totalSupply_XMDDexChain;
[L1067]              __tmp__balances_XMDDexChain := balances_XMDDexChain;
[L1068]              __tmp__allowed_XMDDexChain := allowed_XMDDexChain;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][from_s458], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][from_s458], tokens_s458);
[L2409]  COND FALSE  !(revert)
[L2415]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_XMDDexChain[this][from_s458];
[L2416]              __tmp__balances_XMDDexChain[this][from_s458] := __var_5;
[L2417]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_XMDDexChain[this][from_s458];
[L2418]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2419]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L1986]  COND TRUE   !(b_s45 <= a_s45)
[L1987]              revert := true;
[L2419]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L2420]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_XMDDexChain(this);

Loop:
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_XMDDexChain0 := true;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND TRUE   __exception
[L1050]              __tmp__Balance := Balance;
[L1051]              __tmp__DType := DType;
[L1052]              __tmp__Alloc := Alloc;
[L1053]              __tmp__balance_ADDR := balance_ADDR;
[L1054]              __tmp__M_Ref_int := M_Ref_int;
[L1055]              __tmp__sum_balances0 := sum_balances0;
[L1056]              __tmp__alloc_allowed_XMDDexChain_lvl0 := alloc_allowed_XMDDexChain_lvl0;
[L1057]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L1058]              __tmp__sum_allowed1 := sum_allowed1;
[L1059]              __tmp__Length := Length;
[L1060]              __tmp__now := now;
[L1061]              __tmp__owner_Owned := owner_Owned;
[L1062]              __tmp__newOwner_Owned := newOwner_Owned;
[L1063]              __tmp__symbol_XMDDexChain := symbol_XMDDexChain;
[L1064]              __tmp__name_XMDDexChain := name_XMDDexChain;
[L1065]              __tmp__decimals_XMDDexChain := decimals_XMDDexChain;
[L1066]              __tmp___totalSupply_XMDDexChain := _totalSupply_XMDDexChain;
[L1067]              __tmp__balances_XMDDexChain := balances_XMDDexChain;
[L1068]              __tmp__allowed_XMDDexChain := allowed_XMDDexChain;
[L1069]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2407]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2408]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][from_s458], tokens_s458);
[L1986]  COND FALSE  !(!(b_s45 <= a_s45))
[L1990]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2408]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__balances_XMDDexChain[this][from_s458], tokens_s458);
[L2409]  COND FALSE  !(revert)
[L2415]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] - __tmp__balances_XMDDexChain[this][from_s458];
[L2416]              __tmp__balances_XMDDexChain[this][from_s458] := __var_5;
[L2417]              __tmp__sum_balances0[this] := __tmp__sum_balances0[this] + __tmp__balances_XMDDexChain[this][from_s458];
[L2418]  COND TRUE   __tmp__DType[this] == XMDDexChain
[L2419]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L1986]  COND TRUE   !(b_s45 <= a_s45)
[L1987]              revert := true;
[L2419]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__fail(this, msgsender_MSG, msgvalue_MSG, __tmp__allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L2420]  COND TRUE   revert
[L1069]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__fail(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1070]              assume revert || gas < 0;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_XMDDexChain(this);

[2020-11-25 09:08:48,856 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:08:48,856 INFO  L82        PathProgramCache]: Analyzing trace with hash 95654066, now seen corresponding path program 1 times
[2020-11-25 09:08:48,857 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:08:48,866 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:08:48,909 INFO  L134       CoverageAnalysis]: Checked inductivity of 72 backedges. 2 proven. 0 refuted. 0 times theorem prover too weak. 70 trivial. 0 not checked.
[2020-11-25 09:08:48,909 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 09:08:48,909 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 09:08:48,909 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:08:48,910 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 09:08:48,910 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 09:08:48,910 INFO  L87              Difference]: Start difference. First operand 1944 states and 2114 transitions. cyclomatic complexity: 176 Second operand 7 states.
[2020-11-25 09:08:49,209 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:08:49,209 INFO  L93              Difference]: Finished difference Result 1988 states and 2180 transitions.
[2020-11-25 09:08:49,209 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 09:08:49,210 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1988 states and 2180 transitions.
[2020-11-25 09:08:49,213 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:08:49,217 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1988 states to 1948 states and 2138 transitions.
[2020-11-25 09:08:49,218 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 612
[2020-11-25 09:08:49,218 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 612
[2020-11-25 09:08:49,218 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1948 states and 2138 transitions.
[2020-11-25 09:08:49,219 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:08:49,219 INFO  L728         BuchiCegarLoop]: Abstraction has 1948 states and 2138 transitions.
[2020-11-25 09:08:49,221 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1948 states and 2138 transitions.
[2020-11-25 09:08:49,229 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1948 to 1864.
[2020-11-25 09:08:49,229 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1864 states.
[2020-11-25 09:08:49,230 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1864 states to 1864 states and 2015 transitions.
[2020-11-25 09:08:49,230 INFO  L751         BuchiCegarLoop]: Abstraction has 1864 states and 2015 transitions.
[2020-11-25 09:08:49,230 INFO  L631         BuchiCegarLoop]: Abstraction has 1864 states and 2015 transitions.
[2020-11-25 09:08:49,230 INFO  L445         BuchiCegarLoop]: ======== Iteration 11============
[2020-11-25 09:08:49,230 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1864 states and 2015 transitions.
[2020-11-25 09:08:49,232 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:08:49,232 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:08:49,232 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:08:49,233 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:08:49,233 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_XMDDexChain0 := false;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == XMDDexChain;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_XMDDexChain[this] := -1282837888;
[L2236]              name_XMDDexChain[this] := -1282837888;
[L2237]              decimals_XMDDexChain[this] := 0;
[L2238]              _totalSupply_XMDDexChain[this] := 0;
[L2239]              balances_XMDDexChain[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_XMDDexChain[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_XMDDexChain[this] := 542303379;
[L2245]              name_XMDDexChain[this] := -1719409972;
[L2246]              decimals_XMDDexChain[this] := 8;
[L2247]              _totalSupply_XMDDexChain[this] := 2100000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2249]              balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011] := _totalSupply_XMDDexChain[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2251]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2288]  RET         call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND TRUE   choice == 13
[L4161]              gas := gas - 21000;
[L4162]  COND TRUE   gas >= 0
[L4163]              assume tokens_s371 >= 0 && tokens_s371 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4164]              assume msgvalue_MSG == 0;
[L4165]  CALL        call success_s371 := transfer~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L933]               havoc __exception;
[L934]               revert := false;
[L935]   COND FALSE  !(__exception)
[L958]   CALL        call success_s371 := transfer~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L2356]  COND TRUE   DType[this] == XMDDexChain
[L2357]  CALL        call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][msgsender_MSG], tokens_s371);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2357]  RET         call __var_3 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][msgsender_MSG], tokens_s371);
[L2358]  COND FALSE  !(revert)
[L2364]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][msgsender_MSG];
[L2365]              balances_XMDDexChain[this][msgsender_MSG] := __var_3;
[L2366]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][msgsender_MSG];
[L2367]  COND TRUE   DType[this] == XMDDexChain
[L2368]  CALL        call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s371], tokens_s371);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2368]  RET         call __var_4 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s371], tokens_s371);
[L2369]  COND FALSE  !(revert)
[L2375]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][to_s371];
[L2376]              balances_XMDDexChain[this][to_s371] := __var_4;
[L2377]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][to_s371];
[L2378]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2379]              success_s371 := true;
[L958]   RET         call success_s371 := transfer~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L959]               assume !revert && gas >= 0;
[L4165]  RET         call success_s371 := transfer~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, to_s371, tokens_s371);
[L4261]  RET         call CorralChoice_XMDDexChain(this);
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_XMDDexChain0 := true;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == XMDDexChain
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][from_s458];
[L2458]              balances_XMDDexChain[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][from_s458];
[L2460]  COND TRUE   DType[this] == XMDDexChain
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2469]              allowed_XMDDexChain[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == XMDDexChain
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][to_s458];
[L2480]              balances_XMDDexChain[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s458 == true && balances_XMDDexChain[this][from_s458] == old(balances_XMDDexChain[this][from_s458]) - tokens_s458) && balances_XMDDexChain[this][to_s458] == old(balances_XMDDexChain[this][to_s458]) + tokens_s458) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] == old(allowed_XMDDexChain[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this])) && balances_XMDDexChain[this][p1] == old(balances_XMDDexChain[this][p1])) && allowed_XMDDexChain[this][p2][p3] == old(allowed_XMDDexChain[this][p2][p3])) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this])) && name_XMDDexChain[this] == old(name_XMDDexChain[this])) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_XMDDexChain(this);

Loop:
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND TRUE   choice == 20
[L4111]              gas := gas - 21000;
[L4112]  COND FALSE  !(gas >= 0)
[L4261]  RET         call CorralChoice_XMDDexChain(this);

[2020-11-25 09:08:49,235 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:08:49,235 INFO  L82        PathProgramCache]: Analyzing trace with hash -1711456658, now seen corresponding path program 1 times
[2020-11-25 09:08:49,236 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:08:49,293 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:08:49,741 INFO  L134       CoverageAnalysis]: Checked inductivity of 72 backedges. 1 proven. 2 refuted. 0 times theorem prover too weak. 69 trivial. 0 not checked.
[2020-11-25 09:08:49,741 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:08:49,741 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [24] total 24
[2020-11-25 09:08:49,741 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:08:49,742 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 25 interpolants.
[2020-11-25 09:08:49,742 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=66, Invalid=534, Unknown=0, NotChecked=0, Total=600
[2020-11-25 09:08:49,742 INFO  L87              Difference]: Start difference. First operand 1864 states and 2015 transitions. cyclomatic complexity: 155 Second operand 25 states.
[2020-11-25 09:08:52,281 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:08:52,281 INFO  L93              Difference]: Finished difference Result 1911 states and 2072 transitions.
[2020-11-25 09:08:52,281 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 27 states. 
[2020-11-25 09:08:52,281 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 1911 states and 2072 transitions.
[2020-11-25 09:08:52,284 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:08:52,288 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 1911 states to 1911 states and 2072 transitions.
[2020-11-25 09:08:52,288 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 585
[2020-11-25 09:08:52,288 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 585
[2020-11-25 09:08:52,288 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 1911 states and 2072 transitions.
[2020-11-25 09:08:52,289 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:08:52,290 INFO  L728         BuchiCegarLoop]: Abstraction has 1911 states and 2072 transitions.
[2020-11-25 09:08:52,291 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 1911 states and 2072 transitions.
[2020-11-25 09:08:52,299 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 1911 to 1868.
[2020-11-25 09:08:52,299 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 1868 states.
[2020-11-25 09:08:52,301 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 1868 states to 1868 states and 2025 transitions.
[2020-11-25 09:08:52,301 INFO  L751         BuchiCegarLoop]: Abstraction has 1868 states and 2025 transitions.
[2020-11-25 09:08:52,301 INFO  L631         BuchiCegarLoop]: Abstraction has 1868 states and 2025 transitions.
[2020-11-25 09:08:52,301 INFO  L445         BuchiCegarLoop]: ======== Iteration 12============
[2020-11-25 09:08:52,301 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 1868 states and 2025 transitions.
[2020-11-25 09:08:52,303 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 09:08:52,303 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:08:52,303 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:08:52,304 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:08:52,304 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_XMDDexChain0 := false;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == XMDDexChain;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_XMDDexChain[this] := -1282837888;
[L2236]              name_XMDDexChain[this] := -1282837888;
[L2237]              decimals_XMDDexChain[this] := 0;
[L2238]              _totalSupply_XMDDexChain[this] := 0;
[L2239]              balances_XMDDexChain[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_XMDDexChain[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_XMDDexChain[this] := 542303379;
[L2245]              name_XMDDexChain[this] := -1719409972;
[L2246]              decimals_XMDDexChain[this] := 8;
[L2247]              _totalSupply_XMDDexChain[this] := 2100000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2249]              balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011] := _totalSupply_XMDDexChain[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2251]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2288]  RET         call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == XMDDexChain
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][from_s458];
[L2458]              balances_XMDDexChain[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][from_s458];
[L2460]  COND TRUE   DType[this] == XMDDexChain
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2469]              allowed_XMDDexChain[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == XMDDexChain
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][to_s458];
[L2480]              balances_XMDDexChain[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s458 == true && balances_XMDDexChain[this][from_s458] == old(balances_XMDDexChain[this][from_s458]) - tokens_s458) && balances_XMDDexChain[this][to_s458] == old(balances_XMDDexChain[this][to_s458]) + tokens_s458) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] == old(allowed_XMDDexChain[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this])) && balances_XMDDexChain[this][p1] == old(balances_XMDDexChain[this][p1])) && allowed_XMDDexChain[this][p2][p3] == old(allowed_XMDDexChain[this][p2][p3])) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this])) && name_XMDDexChain[this] == old(name_XMDDexChain[this])) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_XMDDexChain(this);
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_XMDDexChain0 := true;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == XMDDexChain
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][from_s458];
[L2458]              balances_XMDDexChain[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][from_s458];
[L2460]  COND TRUE   DType[this] == XMDDexChain
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2469]              allowed_XMDDexChain[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == XMDDexChain
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][to_s458];
[L2480]              balances_XMDDexChain[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s458 == true && balances_XMDDexChain[this][from_s458] == old(balances_XMDDexChain[this][from_s458]) - tokens_s458) && balances_XMDDexChain[this][to_s458] == old(balances_XMDDexChain[this][to_s458]) + tokens_s458) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] == old(allowed_XMDDexChain[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this])) && balances_XMDDexChain[this][p1] == old(balances_XMDDexChain[this][p1])) && allowed_XMDDexChain[this][p2][p3] == old(allowed_XMDDexChain[this][p2][p3])) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this])) && name_XMDDexChain[this] == old(name_XMDDexChain[this])) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_XMDDexChain(this);

Loop:
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_XMDDexChain0 := true;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == XMDDexChain
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][from_s458];
[L2458]              balances_XMDDexChain[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][from_s458];
[L2460]  COND TRUE   DType[this] == XMDDexChain
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2469]              allowed_XMDDexChain[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == XMDDexChain
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][to_s458];
[L2480]              balances_XMDDexChain[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s458 == true && balances_XMDDexChain[this][from_s458] == old(balances_XMDDexChain[this][from_s458]) - tokens_s458) && balances_XMDDexChain[this][to_s458] == old(balances_XMDDexChain[this][to_s458]) + tokens_s458) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] == old(allowed_XMDDexChain[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this])) && balances_XMDDexChain[this][p1] == old(balances_XMDDexChain[this][p1])) && allowed_XMDDexChain[this][p2][p3] == old(allowed_XMDDexChain[this][p2][p3])) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this])) && name_XMDDexChain[this] == old(name_XMDDexChain[this])) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_XMDDexChain(this);

[2020-11-25 09:08:52,307 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:08:52,308 INFO  L82        PathProgramCache]: Analyzing trace with hash 703190833, now seen corresponding path program 1 times
[2020-11-25 09:08:52,308 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:08:52,377 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:08:53,090 WARN  L188               SmtUtils]: Spent 143.00 ms on a formula simplification. DAG size of input: 111 DAG size of output: 63
[2020-11-25 09:08:53,298 WARN  L188               SmtUtils]: Spent 184.00 ms on a formula simplification. DAG size of input: 115 DAG size of output: 71
[2020-11-25 09:08:54,182 WARN  L188               SmtUtils]: Spent 351.00 ms on a formula simplification. DAG size of input: 261 DAG size of output: 123
[2020-11-25 09:08:54,508 WARN  L188               SmtUtils]: Spent 251.00 ms on a formula simplification. DAG size of input: 242 DAG size of output: 106
[2020-11-25 09:08:54,693 WARN  L188               SmtUtils]: Spent 128.00 ms on a formula simplification. DAG size of input: 199 DAG size of output: 86
[2020-11-25 09:08:54,883 WARN  L188               SmtUtils]: Spent 132.00 ms on a formula simplification. DAG size of input: 200 DAG size of output: 87
[2020-11-25 09:08:55,352 WARN  L188               SmtUtils]: Spent 360.00 ms on a formula simplification. DAG size of input: 276 DAG size of output: 100
[2020-11-25 09:08:55,723 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:08:55,723 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:08:55,870 WARN  L188               SmtUtils]: Spent 396.00 ms on a formula simplification. DAG size of input: 286 DAG size of output: 89
[2020-11-25 09:08:57,016 WARN  L188               SmtUtils]: Spent 176.00 ms on a formula simplification. DAG size of input: 218 DAG size of output: 97
[2020-11-25 09:08:57,373 WARN  L188               SmtUtils]: Spent 211.00 ms on a formula simplification. DAG size of input: 223 DAG size of output: 104
[2020-11-25 09:08:57,838 WARN  L188               SmtUtils]: Spent 326.00 ms on a formula simplification. DAG size of input: 224 DAG size of output: 105
[2020-11-25 09:08:58,303 WARN  L188               SmtUtils]: Spent 302.00 ms on a formula simplification. DAG size of input: 302 DAG size of output: 94
[2020-11-25 09:08:58,571 WARN  L188               SmtUtils]: Spent 141.00 ms on a formula simplification. DAG size of input: 253 DAG size of output: 41
[2020-11-25 09:08:59,115 INFO  L134       CoverageAnalysis]: Checked inductivity of 87 backedges. 0 proven. 84 refuted. 0 times theorem prover too weak. 3 trivial. 0 not checked.
[2020-11-25 09:08:59,115 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:08:59,115 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [50] total 50
[2020-11-25 09:08:59,116 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:08:59,116 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 51 interpolants.
[2020-11-25 09:08:59,116 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=146, Invalid=2404, Unknown=0, NotChecked=0, Total=2550
[2020-11-25 09:08:59,116 INFO  L87              Difference]: Start difference. First operand 1868 states and 2025 transitions. cyclomatic complexity: 162 Second operand 51 states.
[2020-11-25 09:09:07,670 WARN  L188               SmtUtils]: Spent 478.00 ms on a formula simplification. DAG size of input: 196 DAG size of output: 136
[2020-11-25 09:09:08,273 WARN  L188               SmtUtils]: Spent 498.00 ms on a formula simplification. DAG size of input: 208 DAG size of output: 149
[2020-11-25 09:09:08,557 WARN  L188               SmtUtils]: Spent 176.00 ms on a formula simplification. DAG size of input: 143 DAG size of output: 120
[2020-11-25 09:09:08,833 WARN  L188               SmtUtils]: Spent 194.00 ms on a formula simplification. DAG size of input: 144 DAG size of output: 121
[2020-11-25 09:09:09,127 WARN  L188               SmtUtils]: Spent 192.00 ms on a formula simplification. DAG size of input: 138 DAG size of output: 117
[2020-11-25 09:09:09,450 WARN  L188               SmtUtils]: Spent 228.00 ms on a formula simplification. DAG size of input: 158 DAG size of output: 117
[2020-11-25 09:09:18,729 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:09:18,729 INFO  L93              Difference]: Finished difference Result 2121 states and 2365 transitions.
[2020-11-25 09:09:18,730 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 44 states. 
[2020-11-25 09:09:18,730 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2121 states and 2365 transitions.
[2020-11-25 09:09:18,733 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:09:18,738 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2121 states to 2121 states and 2365 transitions.
[2020-11-25 09:09:18,738 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 690
[2020-11-25 09:09:18,739 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 690
[2020-11-25 09:09:18,739 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2121 states and 2365 transitions.
[2020-11-25 09:09:18,740 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:09:18,740 INFO  L728         BuchiCegarLoop]: Abstraction has 2121 states and 2365 transitions.
[2020-11-25 09:09:18,742 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2121 states and 2365 transitions.
[2020-11-25 09:09:18,751 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2121 to 2079.
[2020-11-25 09:09:18,751 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2079 states.
[2020-11-25 09:09:18,753 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2079 states to 2079 states and 2313 transitions.
[2020-11-25 09:09:18,753 INFO  L751         BuchiCegarLoop]: Abstraction has 2079 states and 2313 transitions.
[2020-11-25 09:09:18,753 INFO  L631         BuchiCegarLoop]: Abstraction has 2079 states and 2313 transitions.
[2020-11-25 09:09:18,753 INFO  L445         BuchiCegarLoop]: ======== Iteration 13============
[2020-11-25 09:09:18,753 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2079 states and 2313 transitions.
[2020-11-25 09:09:18,755 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:09:18,755 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:09:18,755 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:09:18,756 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:09:18,756 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_XMDDexChain0 := false;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == XMDDexChain;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_XMDDexChain[this] := -1282837888;
[L2236]              name_XMDDexChain[this] := -1282837888;
[L2237]              decimals_XMDDexChain[this] := 0;
[L2238]              _totalSupply_XMDDexChain[this] := 0;
[L2239]              balances_XMDDexChain[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_XMDDexChain[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_XMDDexChain[this] := 542303379;
[L2245]              name_XMDDexChain[this] := -1719409972;
[L2246]              decimals_XMDDexChain[this] := 8;
[L2247]              _totalSupply_XMDDexChain[this] := 2100000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2249]              balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011] := _totalSupply_XMDDexChain[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2251]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2288]  RET         call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936);
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == XMDDexChain
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][from_s458];
[L2458]              balances_XMDDexChain[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][from_s458];
[L2460]  COND TRUE   DType[this] == XMDDexChain
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2469]              allowed_XMDDexChain[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == XMDDexChain
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][to_s458];
[L2480]              balances_XMDDexChain[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume ((((((((((success_s458 == true && balances_XMDDexChain[this][from_s458] == old(balances_XMDDexChain[this][from_s458]) - tokens_s458) && balances_XMDDexChain[this][to_s458] == old(balances_XMDDexChain[this][to_s458]) + tokens_s458) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] == old(allowed_XMDDexChain[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this])) && balances_XMDDexChain[this][p1] == old(balances_XMDDexChain[this][p1])) && allowed_XMDDexChain[this][p2][p3] == old(allowed_XMDDexChain[this][p2][p3])) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this])) && name_XMDDexChain[this] == old(name_XMDDexChain[this])) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]);
[L3]                 success_transferFrom_XMDDexChain0 := true;
[L3]                 success_transferFrom_XMDDexChain0 := false;
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_XMDDexChain(this);
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_XMDDexChain0 := true;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == XMDDexChain
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][from_s458];
[L2458]              balances_XMDDexChain[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][from_s458];
[L2460]  COND TRUE   DType[this] == XMDDexChain
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2469]              allowed_XMDDexChain[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == XMDDexChain
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][to_s458];
[L2480]              balances_XMDDexChain[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s458 == true && balances_XMDDexChain[this][from_s458] == old(balances_XMDDexChain[this][from_s458]) - tokens_s458) && balances_XMDDexChain[this][to_s458] == old(balances_XMDDexChain[this][to_s458]) + tokens_s458) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] == old(allowed_XMDDexChain[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this])) && balances_XMDDexChain[this][p1] == old(balances_XMDDexChain[this][p1])) && allowed_XMDDexChain[this][p2][p3] == old(allowed_XMDDexChain[this][p2][p3])) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this])) && name_XMDDexChain[this] == old(name_XMDDexChain[this])) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_XMDDexChain(this);

Loop:
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_XMDDexChain0 := true;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == XMDDexChain
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][from_s458];
[L2458]              balances_XMDDexChain[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][from_s458];
[L2460]  COND TRUE   DType[this] == XMDDexChain
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2469]              allowed_XMDDexChain[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == XMDDexChain
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][to_s458];
[L2480]              balances_XMDDexChain[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s458 == true && balances_XMDDexChain[this][from_s458] == old(balances_XMDDexChain[this][from_s458]) - tokens_s458) && balances_XMDDexChain[this][to_s458] == old(balances_XMDDexChain[this][to_s458]) + tokens_s458) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] == old(allowed_XMDDexChain[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this])) && balances_XMDDexChain[this][p1] == old(balances_XMDDexChain[this][p1])) && allowed_XMDDexChain[this][p2][p3] == old(allowed_XMDDexChain[this][p2][p3])) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this])) && name_XMDDexChain[this] == old(name_XMDDexChain[this])) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_XMDDexChain(this);

[2020-11-25 09:09:18,760 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:09:18,760 INFO  L82        PathProgramCache]: Analyzing trace with hash -336016579, now seen corresponding path program 1 times
[2020-11-25 09:09:18,760 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:09:18,826 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 09:09:19,629 WARN  L188               SmtUtils]: Spent 357.00 ms on a formula simplification. DAG size of input: 235 DAG size of output: 97
[2020-11-25 09:09:19,958 WARN  L188               SmtUtils]: Spent 212.00 ms on a formula simplification. DAG size of input: 248 DAG size of output: 78
[2020-11-25 09:09:20,433 WARN  L250   erpolLogProxyWrapper]: Already inconsistent.
[2020-11-25 09:09:20,668 WARN  L188               SmtUtils]: Spent 140.00 ms on a formula simplification. DAG size of input: 193 DAG size of output: 74
[2020-11-25 09:09:21,125 WARN  L188               SmtUtils]: Spent 341.00 ms on a formula simplification. DAG size of input: 258 DAG size of output: 118
[2020-11-25 09:09:21,408 WARN  L188               SmtUtils]: Spent 197.00 ms on a formula simplification. DAG size of input: 213 DAG size of output: 103
[2020-11-25 09:09:21,694 WARN  L188               SmtUtils]: Spent 205.00 ms on a formula simplification. DAG size of input: 214 DAG size of output: 104
[2020-11-25 09:09:22,148 WARN  L188               SmtUtils]: Spent 358.00 ms on a formula simplification. DAG size of input: 276 DAG size of output: 99
[2020-11-25 09:09:22,376 WARN  L188               SmtUtils]: Spent 138.00 ms on a formula simplification. DAG size of input: 244 DAG size of output: 61
[2020-11-25 09:09:22,789 INFO  L134       CoverageAnalysis]: Checked inductivity of 87 backedges. 0 proven. 8 refuted. 0 times theorem prover too weak. 79 trivial. 0 not checked.
[2020-11-25 09:09:22,789 INFO  L312   seRefinementStrategy]: Constructing automaton from 0 perfect and 1 imperfect interpolant sequences.
[2020-11-25 09:09:22,789 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [] imperfect sequences [40] total 40
[2020-11-25 09:09:22,790 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 09:09:22,790 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 41 interpolants.
[2020-11-25 09:09:22,790 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=117, Invalid=1523, Unknown=0, NotChecked=0, Total=1640
[2020-11-25 09:09:22,790 INFO  L87              Difference]: Start difference. First operand 2079 states and 2313 transitions. cyclomatic complexity: 242 Second operand 41 states.
[2020-11-25 09:09:26,564 WARN  L188               SmtUtils]: Spent 128.00 ms on a formula simplification. DAG size of input: 138 DAG size of output: 104
[2020-11-25 09:09:26,738 WARN  L188               SmtUtils]: Spent 115.00 ms on a formula simplification. DAG size of input: 113 DAG size of output: 105
[2020-11-25 09:09:26,897 WARN  L188               SmtUtils]: Spent 117.00 ms on a formula simplification. DAG size of input: 114 DAG size of output: 106
[2020-11-25 09:09:27,311 WARN  L188               SmtUtils]: Spent 322.00 ms on a formula simplification. DAG size of input: 152 DAG size of output: 146
[2020-11-25 09:09:27,867 WARN  L188               SmtUtils]: Spent 475.00 ms on a formula simplification. DAG size of input: 159 DAG size of output: 139
[2020-11-25 09:09:28,992 WARN  L188               SmtUtils]: Spent 128.00 ms on a formula simplification. DAG size of input: 139 DAG size of output: 104
[2020-11-25 09:09:32,777 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 09:09:32,777 INFO  L93              Difference]: Finished difference Result 2127 states and 2377 transitions.
[2020-11-25 09:09:32,778 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 35 states. 
[2020-11-25 09:09:32,778 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 2127 states and 2377 transitions.
[2020-11-25 09:09:32,782 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:09:32,786 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 2127 states to 2127 states and 2377 transitions.
[2020-11-25 09:09:32,786 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 684
[2020-11-25 09:09:32,787 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 684
[2020-11-25 09:09:32,787 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 2127 states and 2377 transitions.
[2020-11-25 09:09:32,788 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 09:09:32,788 INFO  L728         BuchiCegarLoop]: Abstraction has 2127 states and 2377 transitions.
[2020-11-25 09:09:32,790 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 2127 states and 2377 transitions.
[2020-11-25 09:09:32,799 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 2127 to 2081.
[2020-11-25 09:09:32,799 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 2081 states.
[2020-11-25 09:09:32,801 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 2081 states to 2081 states and 2320 transitions.
[2020-11-25 09:09:32,801 INFO  L751         BuchiCegarLoop]: Abstraction has 2081 states and 2320 transitions.
[2020-11-25 09:09:32,801 INFO  L631         BuchiCegarLoop]: Abstraction has 2081 states and 2320 transitions.
[2020-11-25 09:09:32,801 INFO  L445         BuchiCegarLoop]: ======== Iteration 14============
[2020-11-25 09:09:32,801 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 2081 states and 2320 transitions.
[2020-11-25 09:09:32,803 INFO  L131   ngComponentsAnalysis]: Automaton has 2 accepting balls. 4
[2020-11-25 09:09:32,803 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 09:09:32,803 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 09:09:32,804 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 09:09:32,804 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_XMDDexChain0 := false;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L4251]              assume null == 0;
[L4252]  CALL        call this := FreshRefGenerator__success();
[L1928]              havoc newRef;
[L1929]              assume Alloc[newRef] == false;
[L1930]              Alloc[newRef] := true;
[L1931]              assume newRef != null;
[L4252]  RET         call this := FreshRefGenerator__success();
[L4253]              assume now >= 0;
[L4254]              assume DType[this] == XMDDexChain;
[L4255]              assume msgvalue_MSG == 0;
[L4256]              gas := gas - 53000;
[L4257]  CALL        call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L769]               havoc __exception;
[L770]               revert := false;
[L771]   COND FALSE  !(__exception)
[L794]   CALL        call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L2276]  CALL        call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2064]  CALL        call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2049]              assume msgsender_MSG != null;
[L2050]              Balance[this] := 0;
[L2064]  RET         call ERC20Interface_ERC20Interface_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2065]  COND FALSE  !(revert)
[L2276]  RET         call ERC20Interface_ERC20Interface__success(this, msgsender_MSG, msgvalue_MSG);
[L2277]  COND FALSE  !(revert)
[L2280]  CALL        call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2134]  CALL        call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2116]              assume msgsender_MSG != null;
[L2117]              Balance[this] := 0;
[L2118]              owner_Owned[this] := null;
[L2119]              newOwner_Owned[this] := null;
[L2121]              owner_Owned[this] := msgsender_MSG;
[L2134]  RET         call Owned_Owned_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2135]  COND FALSE  !(revert)
[L2280]  RET         call Owned_Owned__success(this, msgsender_MSG, msgvalue_MSG);
[L2281]  COND FALSE  !(revert)
[L2284]  CALL        call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L1960]  CALL        call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1945]              assume msgsender_MSG != null;
[L1946]              Balance[this] := 0;
[L1960]  RET         call SafeMath_SafeMath_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L1961]  COND FALSE  !(revert)
[L2284]  RET         call SafeMath_SafeMath__success(this, msgsender_MSG, msgvalue_MSG);
[L2285]  COND FALSE  !(revert)
[L2288]  CALL        call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2233]              assume msgsender_MSG != null;
[L2234]              Balance[this] := 0;
[L2235]              symbol_XMDDexChain[this] := -1282837888;
[L2236]              name_XMDDexChain[this] := -1282837888;
[L2237]              decimals_XMDDexChain[this] := 0;
[L2238]              _totalSupply_XMDDexChain[this] := 0;
[L2239]              balances_XMDDexChain[this] := zeroRefintArr();
[L2240]              sum_balances0[this] := 0;
[L2241]              allowed_XMDDexChain[this] := zeroRefRefintArr();
[L2242]              sum_allowed1[this] := 0;
[L2244]              symbol_XMDDexChain[this] := 542303379;
[L2245]              name_XMDDexChain[this] := -1719409972;
[L2246]              decimals_XMDDexChain[this] := 8;
[L2247]              _totalSupply_XMDDexChain[this] := 2100000000000000000;
[L2248]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2249]              balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011] := _totalSupply_XMDDexChain[this];
[L2250]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][-329037191581184949150908255081869838117273532011];
[L2251]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2288]  RET         call XMDDexChain_XMDDexChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L2289]  COND FALSE  !(revert)
[L794]   RET         call XMDDexChain_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG);
[L795]               assume !revert && gas >= 0;
[L4257]  RET         call XMDDexChain_XMDDexChain(this, msgsender_MSG, msgvalue_MSG);
[L4258]              assume !revert && gas >= 0;
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND TRUE   choice == 12
[L4168]              gas := gas - 21000;
[L4169]  COND TRUE   gas >= 0
[L4170]              assume tokens_s399 >= 0 && tokens_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4171]              assume msgvalue_MSG == 0;
[L4172]  CALL        call success_s399 := approve~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s399 := approve~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L2394]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_XMDDexChain[this][msgsender_MSG][spender_s399];
[L2395]              allowed_XMDDexChain[this][msgsender_MSG][spender_s399] := tokens_s399;
[L2396]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_XMDDexChain[this][msgsender_MSG][spender_s399];
[L2397]              assert { :EventEmitted "Approval_XMDDexChain" } true;
[L2398]              success_s399 := true;
[L1014]  RET         call success_s399 := approve~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L1015]              assume !revert && gas >= 0;
[L4172]  RET         call success_s399 := approve~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L4261]  RET         call CorralChoice_XMDDexChain(this);
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND TRUE   choice == 12
[L4168]              gas := gas - 21000;
[L4169]  COND TRUE   gas >= 0
[L4170]              assume tokens_s399 >= 0 && tokens_s399 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4171]              assume msgvalue_MSG == 0;
[L4172]  CALL        call success_s399 := approve~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L989]               havoc __exception;
[L990]               revert := false;
[L991]   COND FALSE  !(__exception)
[L1014]  CALL        call success_s399 := approve~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L2394]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] - allowed_XMDDexChain[this][msgsender_MSG][spender_s399];
[L2395]              allowed_XMDDexChain[this][msgsender_MSG][spender_s399] := tokens_s399;
[L2396]              sum_allowed1[msgsender_MSG] := sum_allowed1[msgsender_MSG] + allowed_XMDDexChain[this][msgsender_MSG][spender_s399];
[L2397]              assert { :EventEmitted "Approval_XMDDexChain" } true;
[L2398]              success_s399 := true;
[L1014]  RET         call success_s399 := approve~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L1015]              assume !revert && gas >= 0;
[L4172]  RET         call success_s399 := approve~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, spender_s399, tokens_s399);
[L4261]  RET         call CorralChoice_XMDDexChain(this);
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_XMDDexChain0 := true;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == XMDDexChain
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][from_s458];
[L2458]              balances_XMDDexChain[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][from_s458];
[L2460]  COND TRUE   DType[this] == XMDDexChain
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2469]              allowed_XMDDexChain[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == XMDDexChain
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][to_s458];
[L2480]              balances_XMDDexChain[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s458 == true && balances_XMDDexChain[this][from_s458] == old(balances_XMDDexChain[this][from_s458]) - tokens_s458) && balances_XMDDexChain[this][to_s458] == old(balances_XMDDexChain[this][to_s458]) + tokens_s458) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] == old(allowed_XMDDexChain[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this])) && balances_XMDDexChain[this][p1] == old(balances_XMDDexChain[this][p1])) && allowed_XMDDexChain[this][p2][p3] == old(allowed_XMDDexChain[this][p2][p3])) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this])) && name_XMDDexChain[this] == old(name_XMDDexChain[this])) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_XMDDexChain(this);

Loop:
[L4261]  CALL        call CorralChoice_XMDDexChain(this);
[L4052]              havoc msgsender_MSG;
[L4053]              havoc msgvalue_MSG;
[L4054]              havoc choice;
[L4055]              havoc a_s23;
[L4056]              havoc b_s23;
[L4057]              havoc c_s23;
[L4058]              havoc a_s45;
[L4059]              havoc b_s45;
[L4060]              havoc c_s45;
[L4061]              havoc a_s73;
[L4062]              havoc b_s73;
[L4063]              havoc c_s73;
[L4064]              havoc a_s95;
[L4065]              havoc b_s95;
[L4066]              havoc c_s95;
[L4067]              havoc __ret_0_totalSupply;
[L4068]              havoc tokenOwner_s328;
[L4069]              havoc balance_s328;
[L4070]              havoc tokenOwner_s474;
[L4071]              havoc spender_s474;
[L4072]              havoc remaining_s474;
[L4073]              havoc to_s371;
[L4074]              havoc tokens_s371;
[L4075]              havoc success_s371;
[L4076]              havoc spender_s399;
[L4077]              havoc tokens_s399;
[L4078]              havoc success_s399;
[L4079]              havoc from_s458;
[L4080]              havoc to_s458;
[L4081]              havoc tokens_s458;
[L4082]              havoc success_s458;
[L4083]              havoc __ret_0_owner;
[L4084]              havoc __ret_0_newOwner;
[L4085]              havoc _newOwner_s217;
[L4086]              havoc __ret_0_symbol;
[L4087]              havoc __ret_0_name;
[L4088]              havoc __ret_0_decimals;
[L4089]              havoc __ret_0__totalSupply;
[L4090]              havoc spender_s517;
[L4091]              havoc tokens_s517;
[L4092]              havoc data_s517;
[L4093]              havoc success_s517;
[L4094]              havoc tokenAddress_s544;
[L4095]              havoc tokens_s544;
[L4096]              havoc success_s544;
[L4097]              havoc tmpNow;
[L4098]              havoc gas;
[L4099]              assume gas > 4000000 && gas <= 8000000;
[L4100]              tmpNow := now;
[L4101]              havoc now;
[L4102]              assume now > tmpNow;
[L4103]              assume msgsender_MSG != null;
[L4104]              assume DType[msgsender_MSG] != SafeMath;
[L4105]              assume DType[msgsender_MSG] != ERC20Interface;
[L4106]              assume DType[msgsender_MSG] != ApproveAndCallFallBack;
[L4107]              assume DType[msgsender_MSG] != Owned;
[L4108]              assume DType[msgsender_MSG] != XMDDexChain;
[L4109]              Alloc[msgsender_MSG] := true;
[L4110]  COND FALSE  !(choice == 20)
[L4118]  COND FALSE  !(choice == 19)
[L4126]  COND FALSE  !(choice == 18)
[L4134]  COND FALSE  !(choice == 17)
[L4142]  COND FALSE  !(choice == 16)
[L4148]  COND FALSE  !(choice == 15)
[L4154]  COND FALSE  !(choice == 14)
[L4160]  COND FALSE  !(choice == 13)
[L4167]  COND FALSE  !(choice == 12)
[L4174]  COND TRUE   choice == 11
[L4175]              gas := gas - 21000;
[L4176]  COND TRUE   gas >= 0
[L4177]              assume tokens_s458 >= 0 && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4178]              assume msgvalue_MSG == 0;
[L4179]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s458 && p1 != to_s458) && (p2 != from_s458 || p3 != msgsender_MSG)) && from_s458 != to_s458) && tokens_s458 <= balances_XMDDexChain[this][from_s458]) && tokens_s458 <= allowed_XMDDexChain[this][from_s458][msgsender_MSG]) && balances_XMDDexChain[this][to_s458] + tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && tokens_s458 >= 0) && tokens_s458 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][to_s458] >= 0) && balances_XMDDexChain[this][to_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && balances_XMDDexChain[this][from_s458] >= 0) && balances_XMDDexChain[this][from_s458] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] >= 0) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_XMDDexChain0 := true;
[L3]                 call_transferFrom_XMDDexChain0 := false;
[L3]                 revert := revert_hold;
[L1047]              havoc __exception;
[L1048]              revert := false;
[L1049]  COND FALSE  !(__exception)
[L1072]  CALL        call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L2449]  COND TRUE   DType[this] == XMDDexChain
[L2450]  CALL        call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2450]  RET         call __var_5 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][from_s458], tokens_s458);
[L2451]  COND FALSE  !(revert)
[L2457]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][from_s458];
[L2458]              balances_XMDDexChain[this][from_s458] := __var_5;
[L2459]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][from_s458];
[L2460]  COND TRUE   DType[this] == XMDDexChain
[L2461]  CALL        call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L1995]  COND FALSE  !(!(b_s45 <= a_s45))
[L1999]              c_s45 := (a_s45 - b_s45) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2461]  RET         call __var_6 := safeSub~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, allowed_XMDDexChain[this][from_s458][msgsender_MSG], tokens_s458);
[L2462]  COND FALSE  !(revert)
[L2468]              sum_allowed1[from_s458] := sum_allowed1[from_s458] - allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2469]              allowed_XMDDexChain[this][from_s458][msgsender_MSG] := __var_6;
[L2470]              sum_allowed1[from_s458] := sum_allowed1[from_s458] + allowed_XMDDexChain[this][from_s458][msgsender_MSG];
[L2471]  COND TRUE   DType[this] == XMDDexChain
[L2472]  CALL        call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s458], tokens_s458);
[L1977]              c_s23 := (a_s23 + b_s23) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L1978]  COND FALSE  !(!(c_s23 >= a_s23))
[L2472]  RET         call __var_7 := safeAdd~uint256~uint256_SafeMath__success(this, msgsender_MSG, msgvalue_MSG, balances_XMDDexChain[this][to_s458], tokens_s458);
[L2473]  COND FALSE  !(revert)
[L2479]              sum_balances0[this] := sum_balances0[this] - balances_XMDDexChain[this][to_s458];
[L2480]              balances_XMDDexChain[this][to_s458] := __var_7;
[L2481]              sum_balances0[this] := sum_balances0[this] + balances_XMDDexChain[this][to_s458];
[L2482]              assert { :EventEmitted "Transfer_XMDDexChain" } true;
[L2483]              success_s458 := true;
[L1072]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain__success(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L1073]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !(((((((((((success_s458 == true && balances_XMDDexChain[this][from_s458] == old(balances_XMDDexChain[this][from_s458]) - tokens_s458) && balances_XMDDexChain[this][to_s458] == old(balances_XMDDexChain[this][to_s458]) + tokens_s458) && allowed_XMDDexChain[this][from_s458][msgsender_MSG] == old(allowed_XMDDexChain[this][from_s458][msgsender_MSG]) - tokens_s458) && _totalSupply_XMDDexChain[this] == old(_totalSupply_XMDDexChain[this])) && balances_XMDDexChain[this][p1] == old(balances_XMDDexChain[this][p1])) && allowed_XMDDexChain[this][p2][p3] == old(allowed_XMDDexChain[this][p2][p3])) && symbol_XMDDexChain[this] == old(symbol_XMDDexChain[this])) && name_XMDDexChain[this] == old(name_XMDDexChain[this])) && decimals_XMDDexChain[this] == old(decimals_XMDDexChain[this])) && owner_Owned[this] == old(owner_Owned[this])) && newOwner_Owned[this] == old(newOwner_Owned[this]));
[L3]                 revert := revert_hold;
[L4179]  RET         call success_s458 := transferFrom~address~address~uint256_XMDDexChain(this, msgsender_MSG, msgvalue_MSG, from_s458, to_s458, tokens_s458);
[L4261]  RET         call CorralChoice_XMDDexChain(this);

[2020-11-25 09:09:32,808 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 09:09:32,808 INFO  L82        PathProgramCache]: Analyzing trace with hash 1322599550, now seen corresponding path program 2 times
[2020-11-25 09:09:32,808 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 09:09:32,856 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
Received shutdown request...
[2020-11-25 09:23:15,487 FATAL L265        ToolchainWalker]: An unrecoverable error occured during an interaction with an SMT solver:
de.uni_freiburg.informatik.ultimate.logic.SMTLIBException: Timeout exceeded
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$MixedLAInterpolator.convert(Interpolator.java:1288)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.cacheConvert(TermTransformer.java:131)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.access$0(TermTransformer.java:127)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer$Convert.walk(TermTransformer.java:79)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.logic.TermTransformer.transform(TermTransformer.java:253)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.mixedPivotLA(Interpolator.java:1478)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.combine(Interpolator.java:359)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.access$2(Interpolator.java:328)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$CombineInterpolants.walk(Interpolator.java:153)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:122)
	at de.uni_freiburg.informatik.ultimate.logic.NonRecursive.run(NonRecursive.java:113)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.interpolate(Interpolator.java:220)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator.getInterpolants(Interpolator.java:201)
	at de.uni_freiburg.informatik.ultimate.smtinterpol.smtlib2.SMTInterpol.getInterpolants(SMTInterpol.java:919)
	at de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt.managedscript.ManagedScript.getInterpolants(ManagedScript.java:200)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.computeCraigInterpolants(NestedInterpolantsBuilder.java:303)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:167)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.NestedInterpolantsBuilder.<init>(NestedInterpolantsBuilder.java:182)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolantsTree(InterpolatingTraceCheckCraig.java:271)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.computeInterpolants(InterpolatingTraceCheckCraig.java:207)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.singletracecheck.InterpolatingTraceCheckCraig.<init>(InterpolatingTraceCheckCraig.java:109)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructCraig(TraceCheckConstructor.java:211)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.constructTraceCheck(TraceCheckConstructor.java:183)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceCheckConstructor.get(TraceCheckConstructor.java:165)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.FixedRefinementStrategy.getTraceCheck(FixedRefinementStrategy.java:134)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.checkFeasibility(BaseRefinementStrategy.java:223)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.BaseRefinementStrategy.executeStrategy(BaseRefinementStrategy.java:197)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction.tracehandling.TraceAbstractionRefinementEngine.<init>(TraceAbstractionRefinementEngine.java:70)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkFeasibilityAndComputeInterpolants(LassoCheck.java:1126)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.checkStemFeasibility(LassoCheck.java:1080)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck$LassoCheckResult.<init>(LassoCheck.java:994)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.LassoCheck.<init>(LassoCheck.java:276)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiCegarLoop.iterate(BuchiCegarLoop.java:479)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.doTerminationAnalysis(BuchiAutomizerObserver.java:153)
	at de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver.finish(BuchiAutomizerObserver.java:413)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runObserver(PluginConnector.java:168)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.runTool(PluginConnector.java:151)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.PluginConnector.run(PluginConnector.java:128)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.executePluginConnector(ToolchainWalker.java:232)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.processPlugin(ToolchainWalker.java:226)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walkUnprotected(ToolchainWalker.java:142)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainWalker.walk(ToolchainWalker.java:104)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.ToolchainManager$Toolchain.processToolchain(ToolchainManager.java:317)
	at de.uni_freiburg.informatik.ultimate.core.coreplugin.toolchain.DefaultToolchainJob.run(DefaultToolchainJob.java:145)
	at org.eclipse.core.internal.jobs.Worker.run(Worker.java:55)
[2020-11-25 09:23:15,489 INFO  L168              Benchmark]: Toolchain (without parser) took 898734.72 ms. Allocated memory was 1.0 GB in the beginning and 6.5 GB in the end (delta: 5.5 GB). Free memory was 935.2 MB in the beginning and 1.3 GB in the end (delta: -364.3 MB). Peak memory consumption was 6.1 GB. Max. memory is 15.3 GB.
[2020-11-25 09:23:15,489 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 09:23:15,489 INFO  L168              Benchmark]: Boogie Preprocessor took 105.87 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
[2020-11-25 09:23:15,489 INFO  L168              Benchmark]: UtopiaSpecLang took 79.39 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:23:15,490 INFO  L168              Benchmark]: Boogie Printer took 16.86 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:23:15,490 INFO  L168              Benchmark]: RCFGBuilder took 743.49 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 806.3 MB in the end (delta: 107.4 MB). Peak memory consumption was 107.4 MB. Max. memory is 15.3 GB.
[2020-11-25 09:23:15,490 INFO  L168              Benchmark]: UtopiaLTL2Aut took 45.79 ms. Allocated memory is still 1.0 GB. Free memory was 806.3 MB in the beginning and 797.4 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
[2020-11-25 09:23:15,490 INFO  L168              Benchmark]: BÃ¼chi Program Product took 1371.62 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 184.0 MB). Free memory was 797.4 MB in the beginning and 985.2 MB in the end (delta: -187.8 MB). Peak memory consumption was 169.8 MB. Max. memory is 15.3 GB.
[2020-11-25 09:23:15,491 INFO  L168              Benchmark]: BlockEncodingV2 took 134.77 ms. Allocated memory is still 1.2 GB. Free memory was 985.2 MB in the beginning and 925.1 MB in the end (delta: 60.1 MB). Peak memory consumption was 60.1 MB. Max. memory is 15.3 GB.
[2020-11-25 09:23:15,491 INFO  L168              Benchmark]: BuchiAutomizer took 896233.94 ms. Allocated memory was 1.2 GB in the beginning and 6.5 GB in the end (delta: 5.3 GB). Free memory was 925.1 MB in the beginning and 1.3 GB in the end (delta: -374.4 MB). Peak memory consumption was 5.9 GB. Max. memory is 15.3 GB.
[2020-11-25 09:23:15,493 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    3724 locations, 6408 edges
  - StatisticsResult: Encoded RCFG
    3664 locations, 6248 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.14 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 105.87 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 924.5 MB in the end (delta: 10.7 MB). Peak memory consumption was 10.7 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 79.39 ms. Allocated memory is still 1.0 GB. Free memory was 924.5 MB in the beginning and 919.1 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 16.86 ms. Allocated memory is still 1.0 GB. Free memory was 919.1 MB in the beginning and 913.7 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 743.49 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 806.3 MB in the end (delta: 107.4 MB). Peak memory consumption was 107.4 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 45.79 ms. Allocated memory is still 1.0 GB. Free memory was 806.3 MB in the beginning and 797.4 MB in the end (delta: 8.9 MB). Peak memory consumption was 8.9 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 1371.62 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 184.0 MB). Free memory was 797.4 MB in the beginning and 985.2 MB in the end (delta: -187.8 MB). Peak memory consumption was 169.8 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 134.77 ms. Allocated memory is still 1.2 GB. Free memory was 985.2 MB in the beginning and 925.1 MB in the end (delta: 60.1 MB). Peak memory consumption was 60.1 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 896233.94 ms. Allocated memory was 1.2 GB in the beginning and 6.5 GB in the end (delta: 5.3 GB). Free memory was 925.1 MB in the beginning and 1.3 GB in the end (delta: -374.4 MB). Peak memory consumption was 5.9 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    1566 locations, 1978 edges
  - StatisticsResult: BuchiProgram size
    3724 locations, 6408 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer:
  - ExceptionOrErrorResult: SMTLIBException: Timeout exceeded
    de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer: SMTLIBException: Timeout exceeded: de.uni_freiburg.informatik.ultimate.smtinterpol.interpolate.Interpolator$IntegerInterpolator.interpolate(Interpolator.java:1432)
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Completed graceful shutdown
