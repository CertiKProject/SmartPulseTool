This is Ultimate 0.1.24-f1553f5-m
[2020-11-24 20:43:25,936 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-24 20:43:25,937 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-24 20:43:25,947 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-24 20:43:25,947 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-24 20:43:25,948 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-24 20:43:25,949 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-24 20:43:25,950 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-24 20:43:25,951 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-24 20:43:25,952 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-24 20:43:25,952 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-24 20:43:25,953 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-24 20:43:25,953 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-24 20:43:25,954 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-24 20:43:25,955 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-24 20:43:25,955 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-24 20:43:25,956 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-24 20:43:25,957 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-24 20:43:25,959 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-24 20:43:25,960 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-24 20:43:25,961 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-24 20:43:25,961 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-24 20:43:25,963 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-24 20:43:25,963 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-24 20:43:25,963 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-24 20:43:25,964 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-24 20:43:25,964 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-24 20:43:25,965 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-24 20:43:25,965 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-24 20:43:25,965 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-24 20:43:25,966 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-24 20:43:25,966 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-24 20:43:25,967 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-24 20:43:25,967 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-24 20:43:25,968 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-24 20:43:25,968 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-24 20:43:25,968 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-24 20:43:25,969 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-24 20:43:25,969 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-24 20:43:25,969 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-24 20:43:25,970 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-24 20:43:25,970 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-24 20:43:25,982 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-24 20:43:25,982 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-24 20:43:25,984 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-24 20:43:25,984 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-24 20:43:25,984 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-24 20:43:25,984 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-24 20:43:25,985 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-24 20:43:25,985 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-24 20:43:25,985 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-24 20:43:25,985 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-24 20:43:25,986 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-24 20:43:25,986 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-24 20:43:25,986 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-24 20:43:25,986 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-24 20:43:25,987 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-24 20:43:25,987 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-24 20:43:25,987 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-24 20:43:25,987 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-24 20:43:25,987 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-24 20:43:25,988 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-24 20:43:25,988 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-24 20:43:25,988 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-24 20:43:25,988 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-24 20:43:25,988 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-24 20:43:25,988 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-24 20:43:25,988 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-24 20:43:26,015 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-24 20:43:26,028 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-24 20:43:26,031 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-24 20:43:26,032 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-24 20:43:26,033 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-24 20:43:26,033 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_totalsupply.bpl
[2020-11-24 20:43:26,033 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_totalsupply.bpl'
[2020-11-24 20:43:26,190 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-24 20:43:26,191 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-24 20:43:26,192 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-24 20:43:26,192 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-24 20:43:26,192 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-24 20:43:26,209 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:43:26" (1/1) ...
[2020-11-24 20:43:26,211 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:43:26" (1/1) ...
[2020-11-24 20:43:26,274 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:43:26" (1/1) ...
[2020-11-24 20:43:26,275 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:43:26" (1/1) ...
[2020-11-24 20:43:26,324 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:43:26" (1/1) ...
[2020-11-24 20:43:26,353 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:43:26" (1/1) ...
[2020-11-24 20:43:26,374 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:43:26" (1/1) ...
[2020-11-24 20:43:26,403 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-24 20:43:26,404 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-24 20:43:26,404 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-24 20:43:26,407 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-24 20:43:26,410 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:43:26" (1/1) ...
[2020-11-24 20:43:26,443 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(BasicToken.totalSupply, totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BasicToken.totalSupply, return == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 20:43:26,449 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(BasicToken.totalSupply, totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BasicToken.totalSupply, return == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 20:43:26,457 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(BasicToken.totalSupply, totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BasicToken.totalSupply, return == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 20:43:26,463 INFO  L636   opiaSpecLangObserver]: Parsed ( totalSupply__BasicToken[this]>=0 && totalSupply__BasicToken[this]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[COMPGEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],IntegerLiteral[0]],BinaryExpression[COMPLT,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-24 20:43:26,466 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( __ret_0_==totalSupply__BasicToken[this] && totalSupply__BasicToken[this]==( old(totalSupply__BasicToken[this]) ) ) && balances_BasicToken[this]==( old(balances_BasicToken[this]) ) ) && allowed_StandardToken[this]==( old(allowed_StandardToken[this]) ) ) && initialized_MainToken[this]==( old(initialized_MainToken[this]) ) ) && paused_Pausable[this]==( old(paused_Pausable[this]) ) ) && mintingFinished_MintableToken[this]==( old(mintingFinished_MintableToken[this]) ) ) && owner_Ownable[this]==( old(owner_Ownable[this]) ) ) && chains_FreezableToken[this]==( old(chains_FreezableToken[this]) ) ) && freezings_FreezableToken[this]==( old(freezings_FreezableToken[this]) ) ) && freezingBalance_FreezableToken[this]==( old(freezingBalance_FreezableToken[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,totalSupply_BasicToken>],ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[totalSupply__BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[balances_BasicToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[allowed_StandardToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[initialized_MainToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[paused_Pausable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[mintingFinished_MintableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[owner_Ownable,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[chains_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezings_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[freezingBalance_FreezableToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,totalSupply_BasicToken>]]]]]]
[2020-11-24 20:43:26,476 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(BasicToken.totalSupply, totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(BasicToken.totalSupply, return == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this]) && balances_BasicToken[this] == old(balances_BasicToken[this]) && allowed_StandardToken[this] == old(allowed_StandardToken[this]) && initialized_MainToken[this] == old(initialized_MainToken[this]) && paused_Pausable[this] == old(paused_Pausable[this]) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this]) && owner_Ownable[this] == old(owner_Ownable[this]) && chains_FreezableToken[this] == old(chains_FreezableToken[this]) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this]) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]))))
[2020-11-24 20:43:26,476 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_totalSupply_BasicToken0) ==> ( <>AP(success_totalSupply_BasicToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-24 20:43:26,503 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:43:26 PropertyContainer
[2020-11-24 20:43:26,503 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-24 20:43:26,503 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-24 20:43:26,503 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-24 20:43:26,503 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-24 20:43:26,504 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:43:26" (1/2) ...
[2020-11-24 20:43:26,505 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-24 20:43:26,505 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-24 20:43:26,538 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:43:26" (2/2) ...
[2020-11-24 20:43:26,539 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-24 20:43:26,539 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-24 20:43:26,539 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-24 20:43:26,539 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-24 20:43:26,540 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:43:26" (1/2) ...
[2020-11-24 20:43:26,596 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-24 20:43:26,597 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 20:43:26,597 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic
[2020-11-24 20:43:26,597 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic
[2020-11-24 20:43:26,597 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20Basic
[2020-11-24 20:43:26,597 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20Basic
[2020-11-24 20:43:26,597 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20Basic
[2020-11-24 20:43:26,597 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:43:26,598 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-24 20:43:26,598 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-24 20:43:26,598 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 20:43:26,598 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 20:43:26,598 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 20:43:26,598 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 20:43:26,598 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 20:43:26,598 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken
[2020-11-24 20:43:26,599 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken
[2020-11-24 20:43:26,599 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken
[2020-11-24 20:43:26,599 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken
[2020-11-24 20:43:26,599 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken
[2020-11-24 20:43:26,599 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken
[2020-11-24 20:43:26,599 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken
[2020-11-24 20:43:26,599 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken
[2020-11-24 20:43:26,599 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 20:43:26,600 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-24 20:43:26,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-24 20:43:26,600 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-24 20:43:26,600 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-24 20:43:26,600 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-24 20:43:26,600 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 20:43:26,600 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken
[2020-11-24 20:43:26,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken
[2020-11-24 20:43:26,600 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 20:43:26,600 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken
[2020-11-24 20:43:26,601 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken
[2020-11-24 20:43:26,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken
[2020-11-24 20:43:26,601 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken
[2020-11-24 20:43:26,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken
[2020-11-24 20:43:26,601 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 20:43:26,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken
[2020-11-24 20:43:26,601 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 20:43:26,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken
[2020-11-24 20:43:26,601 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 20:43:26,601 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable
[2020-11-24 20:43:26,601 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable
[2020-11-24 20:43:26,602 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable
[2020-11-24 20:43:26,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable
[2020-11-24 20:43:26,602 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable
[2020-11-24 20:43:26,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable
[2020-11-24 20:43:26,602 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__success
[2020-11-24 20:43:26,602 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable
[2020-11-24 20:43:26,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable
[2020-11-24 20:43:26,602 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 20:43:26,602 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken
[2020-11-24 20:43:26,602 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken
[2020-11-24 20:43:26,603 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken
[2020-11-24 20:43:26,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken
[2020-11-24 20:43:26,603 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken
[2020-11-24 20:43:26,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken
[2020-11-24 20:43:26,603 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken
[2020-11-24 20:43:26,603 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken
[2020-11-24 20:43:26,603 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 20:43:26,603 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken
[2020-11-24 20:43:26,604 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken
[2020-11-24 20:43:26,604 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken
[2020-11-24 20:43:26,604 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken
[2020-11-24 20:43:26,604 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 20:43:26,604 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken
[2020-11-24 20:43:26,604 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 20:43:26,604 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken
[2020-11-24 20:43:26,604 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken
[2020-11-24 20:43:26,604 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken
[2020-11-24 20:43:26,605 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 20:43:26,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken
[2020-11-24 20:43:26,605 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 20:43:26,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken
[2020-11-24 20:43:26,605 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken
[2020-11-24 20:43:26,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken
[2020-11-24 20:43:26,605 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken
[2020-11-24 20:43:26,605 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken
[2020-11-24 20:43:26,605 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 20:43:26,605 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 20:43:26,606 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 20:43:26,606 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken
[2020-11-24 20:43:26,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken
[2020-11-24 20:43:26,606 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken
[2020-11-24 20:43:26,606 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken
[2020-11-24 20:43:26,606 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 20:43:26,606 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 20:43:26,606 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable
[2020-11-24 20:43:26,607 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable
[2020-11-24 20:43:26,607 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable
[2020-11-24 20:43:26,607 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable
[2020-11-24 20:43:26,607 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable
[2020-11-24 20:43:26,607 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable
[2020-11-24 20:43:26,607 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable
[2020-11-24 20:43:26,607 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable
[2020-11-24 20:43:26,607 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 20:43:26,607 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 20:43:26,607 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken
[2020-11-24 20:43:26,608 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 20:43:26,608 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken
[2020-11-24 20:43:26,608 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 20:43:26,608 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts
[2020-11-24 20:43:26,608 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts
[2020-11-24 20:43:26,608 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts
[2020-11-24 20:43:26,608 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts
[2020-11-24 20:43:26,608 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 20:43:26,608 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts
[2020-11-24 20:43:26,608 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 20:43:26,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts
[2020-11-24 20:43:26,609 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts
[2020-11-24 20:43:26,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts
[2020-11-24 20:43:26,609 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts
[2020-11-24 20:43:26,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts
[2020-11-24 20:43:26,609 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts
[2020-11-24 20:43:26,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts
[2020-11-24 20:43:26,609 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts
[2020-11-24 20:43:26,609 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts
[2020-11-24 20:43:26,610 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts
[2020-11-24 20:43:26,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts
[2020-11-24 20:43:26,610 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 20:43:26,610 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken
[2020-11-24 20:43:26,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken
[2020-11-24 20:43:26,610 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken
[2020-11-24 20:43:26,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken
[2020-11-24 20:43:26,610 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken
[2020-11-24 20:43:26,610 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken
[2020-11-24 20:43:26,611 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken
[2020-11-24 20:43:26,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken
[2020-11-24 20:43:26,611 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 20:43:26,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken
[2020-11-24 20:43:26,611 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken
[2020-11-24 20:43:26,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken
[2020-11-24 20:43:26,611 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__success
[2020-11-24 20:43:26,611 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken
[2020-11-24 20:43:26,611 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken
[2020-11-24 20:43:26,612 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-24 20:43:26,612 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-24 20:43:26,612 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-24 20:43:26,612 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-24 20:43:26,612 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__success
[2020-11-24 20:43:26,612 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__success
[2020-11-24 20:43:26,612 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__success
[2020-11-24 20:43:26,612 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__success
[2020-11-24 20:43:26,612 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Basic
[2020-11-24 20:43:26,613 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Basic
[2020-11-24 20:43:26,613 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-24 20:43:26,613 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-24 20:43:26,613 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BasicToken
[2020-11-24 20:43:26,613 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BasicToken
[2020-11-24 20:43:26,613 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-24 20:43:26,613 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-24 20:43:26,613 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_StandardToken
[2020-11-24 20:43:26,613 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_StandardToken
[2020-11-24 20:43:26,614 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownable
[2020-11-24 20:43:26,614 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownable
[2020-11-24 20:43:26,614 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MintableToken
[2020-11-24 20:43:26,614 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_MintableToken
[2020-11-24 20:43:26,614 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableToken
[2020-11-24 20:43:26,614 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableToken
[2020-11-24 20:43:26,615 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_BurnableToken
[2020-11-24 20:43:26,615 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_BurnableToken
[2020-11-24 20:43:26,615 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Pausable
[2020-11-24 20:43:26,615 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Pausable
[2020-11-24 20:43:26,615 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_FreezableMintableToken
[2020-11-24 20:43:26,616 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_FreezableMintableToken
[2020-11-24 20:43:26,616 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Consts
[2020-11-24 20:43:26,616 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Consts
[2020-11-24 20:43:26,616 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_MainToken
[2020-11-24 20:43:26,616 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-24 20:43:26,616 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-24 20:43:26,617 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 20:43:26,617 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 20:43:26,617 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 20:43:26,617 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:43:26,617 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-24 20:43:26,617 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-24 20:43:26,617 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 20:43:26,618 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 20:43:26,618 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 20:43:26,618 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 20:43:26,618 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 20:43:26,618 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__success
[2020-11-24 20:43:26,618 INFO  L130     BoogieDeclarations]: Found specification of procedure BasicToken_BasicToken__fail
[2020-11-24 20:43:26,619 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__success
[2020-11-24 20:43:26,619 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_BasicToken__fail
[2020-11-24 20:43:26,619 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 20:43:26,619 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 20:43:26,619 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__success
[2020-11-24 20:43:26,619 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_BasicToken__fail
[2020-11-24 20:43:26,619 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 20:43:26,620 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-24 20:43:26,620 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-24 20:43:26,620 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 20:43:26,620 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__success
[2020-11-24 20:43:26,620 INFO  L130     BoogieDeclarations]: Found specification of procedure StandardToken_StandardToken__fail
[2020-11-24 20:43:26,620 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 20:43:26,620 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 20:43:26,621 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__success
[2020-11-24 20:43:26,621 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 20:43:26,621 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__success
[2020-11-24 20:43:26,621 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_StandardToken__fail
[2020-11-24 20:43:26,621 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 20:43:26,621 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 20:43:26,622 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 20:43:26,622 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 20:43:26,622 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 20:43:26,622 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__success
[2020-11-24 20:43:26,622 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownable_Ownable__fail
[2020-11-24 20:43:26,622 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__success
[2020-11-24 20:43:26,622 INFO  L130     BoogieDeclarations]: Found specification of procedure renounceOwnership_Ownable__fail
[2020-11-24 20:43:26,623 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__success
[2020-11-24 20:43:26,623 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownable__fail
[2020-11-24 20:43:26,623 INFO  L130     BoogieDeclarations]: Found specification of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 20:43:26,623 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__success
[2020-11-24 20:43:26,623 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownable__fail
[2020-11-24 20:43:26,623 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 20:43:26,624 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__success
[2020-11-24 20:43:26,624 INFO  L130     BoogieDeclarations]: Found specification of procedure MintableToken_MintableToken__fail
[2020-11-24 20:43:26,624 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__success
[2020-11-24 20:43:26,624 INFO  L130     BoogieDeclarations]: Found specification of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 20:43:26,624 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__success
[2020-11-24 20:43:26,624 INFO  L130     BoogieDeclarations]: Found specification of procedure finishMinting_MintableToken__fail
[2020-11-24 20:43:26,624 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__success
[2020-11-24 20:43:26,625 INFO  L130     BoogieDeclarations]: Found specification of procedure mintingFinished_MintableToken__fail
[2020-11-24 20:43:26,625 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 20:43:26,625 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__success
[2020-11-24 20:43:26,625 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableToken_FreezableToken__fail
[2020-11-24 20:43:26,625 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__success
[2020-11-24 20:43:26,625 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 20:43:26,625 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 20:43:26,626 INFO  L130     BoogieDeclarations]: Found specification of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 20:43:26,626 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 20:43:26,626 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 20:43:26,626 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__success
[2020-11-24 20:43:26,626 INFO  L130     BoogieDeclarations]: Found specification of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 20:43:26,626 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 20:43:26,627 INFO  L130     BoogieDeclarations]: Found specification of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 20:43:26,627 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 20:43:26,627 INFO  L130     BoogieDeclarations]: Found specification of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 20:43:26,627 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__success
[2020-11-24 20:43:26,627 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseOnce_FreezableToken__fail
[2020-11-24 20:43:26,628 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__success
[2020-11-24 20:43:26,628 INFO  L130     BoogieDeclarations]: Found specification of procedure releaseAll_FreezableToken__fail
[2020-11-24 20:43:26,628 INFO  L130     BoogieDeclarations]: Found specification of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 20:43:26,628 INFO  L130     BoogieDeclarations]: Found specification of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 20:43:26,628 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 20:43:26,628 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__success
[2020-11-24 20:43:26,629 INFO  L130     BoogieDeclarations]: Found specification of procedure BurnableToken_BurnableToken__fail
[2020-11-24 20:43:26,629 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__success
[2020-11-24 20:43:26,629 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_BurnableToken__fail
[2020-11-24 20:43:26,629 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 20:43:26,629 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 20:43:26,629 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__success
[2020-11-24 20:43:26,629 INFO  L130     BoogieDeclarations]: Found specification of procedure Pausable_Pausable__fail
[2020-11-24 20:43:26,629 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__success
[2020-11-24 20:43:26,630 INFO  L130     BoogieDeclarations]: Found specification of procedure pause_Pausable__fail
[2020-11-24 20:43:26,630 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__success
[2020-11-24 20:43:26,630 INFO  L130     BoogieDeclarations]: Found specification of procedure unpause_Pausable__fail
[2020-11-24 20:43:26,630 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__success
[2020-11-24 20:43:26,630 INFO  L130     BoogieDeclarations]: Found specification of procedure paused_Pausable__fail
[2020-11-24 20:43:26,630 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 20:43:26,630 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 20:43:26,631 INFO  L130     BoogieDeclarations]: Found specification of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 20:43:26,631 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 20:43:26,631 INFO  L130     BoogieDeclarations]: Found specification of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 20:43:26,631 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 20:43:26,631 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__success
[2020-11-24 20:43:26,631 INFO  L130     BoogieDeclarations]: Found specification of procedure Consts_Consts__fail
[2020-11-24 20:43:26,631 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 20:43:26,632 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 20:43:26,632 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 20:43:26,632 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 20:43:26,632 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 20:43:26,633 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 20:43:26,634 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__success
[2020-11-24 20:43:26,634 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_NAME_Consts__fail
[2020-11-24 20:43:26,634 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 20:43:26,634 INFO  L130     BoogieDeclarations]: Found specification of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 20:43:26,634 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__success
[2020-11-24 20:43:26,634 INFO  L130     BoogieDeclarations]: Found specification of procedure PAUSED_Consts__fail
[2020-11-24 20:43:26,634 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__success
[2020-11-24 20:43:26,635 INFO  L130     BoogieDeclarations]: Found specification of procedure TARGET_USER_Consts__fail
[2020-11-24 20:43:26,635 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 20:43:26,635 INFO  L130     BoogieDeclarations]: Found specification of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 20:43:26,635 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 20:43:26,635 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__success
[2020-11-24 20:43:26,635 INFO  L130     BoogieDeclarations]: Found specification of procedure MainToken_MainToken__fail
[2020-11-24 20:43:26,635 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__success
[2020-11-24 20:43:26,636 INFO  L130     BoogieDeclarations]: Found specification of procedure name_MainToken__fail
[2020-11-24 20:43:26,636 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__success
[2020-11-24 20:43:26,636 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_MainToken__fail
[2020-11-24 20:43:26,636 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__success
[2020-11-24 20:43:26,636 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_MainToken__fail
[2020-11-24 20:43:26,636 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 20:43:26,636 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 20:43:26,636 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__success
[2020-11-24 20:43:26,637 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 20:43:26,637 INFO  L130     BoogieDeclarations]: Found specification of procedure init_MainToken__fail
[2020-11-24 20:43:26,637 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__success
[2020-11-24 20:43:26,637 INFO  L130     BoogieDeclarations]: Found specification of procedure initialized_MainToken__fail
[2020-11-24 20:43:26,637 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-24 20:43:26,637 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-24 20:43:26,637 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-24 20:43:26,637 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-24 20:43:26,638 INFO  L130     BoogieDeclarations]: Found specification of procedure canMint_pre__fail
[2020-11-24 20:43:26,638 INFO  L130     BoogieDeclarations]: Found specification of procedure hasMintPermission_pre__fail
[2020-11-24 20:43:26,638 INFO  L130     BoogieDeclarations]: Found specification of procedure whenNotPaused_pre__fail
[2020-11-24 20:43:26,638 INFO  L130     BoogieDeclarations]: Found specification of procedure whenPaused_pre__fail
[2020-11-24 20:43:26,638 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-24 20:43:26,638 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-24 20:43:26,638 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__fail
[2020-11-24 20:43:26,638 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic_NoBaseCtor__success
[2020-11-24 20:43:26,638 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__fail
[2020-11-24 20:43:26,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Basic_ERC20Basic__success
[2020-11-24 20:43:26,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-24 20:43:26,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-24 20:43:26,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-24 20:43:26,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-24 20:43:26,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-24 20:43:26,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-24 20:43:26,639 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-24 20:43:26,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-24 20:43:26,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__fail
[2020-11-24 20:43:26,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256_SafeMath__success
[2020-11-24 20:43:26,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-24 20:43:26,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-24 20:43:26,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__fail
[2020-11-24 20:43:26,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken_NoBaseCtor__success
[2020-11-24 20:43:26,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__fail
[2020-11-24 20:43:26,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure BasicToken_BasicToken__success
[2020-11-24 20:43:26,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__fail
[2020-11-24 20:43:26,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_BasicToken__success
[2020-11-24 20:43:26,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__fail
[2020-11-24 20:43:26,640 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_BasicToken__success
[2020-11-24 20:43:26,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__fail
[2020-11-24 20:43:26,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_BasicToken__success
[2020-11-24 20:43:26,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-24 20:43:26,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-24 20:43:26,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-24 20:43:26,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-24 20:43:26,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__fail
[2020-11-24 20:43:26,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken_NoBaseCtor__success
[2020-11-24 20:43:26,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__fail
[2020-11-24 20:43:26,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure StandardToken_StandardToken__success
[2020-11-24 20:43:26,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__fail
[2020-11-24 20:43:26,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_StandardToken__success
[2020-11-24 20:43:26,641 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__fail
[2020-11-24 20:43:26,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_StandardToken__success
[2020-11-24 20:43:26,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__fail
[2020-11-24 20:43:26,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_StandardToken__success
[2020-11-24 20:43:26,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__fail
[2020-11-24 20:43:26,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseApproval~address~uint256_StandardToken__success
[2020-11-24 20:43:26,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__fail
[2020-11-24 20:43:26,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseApproval~address~uint256_StandardToken__success
[2020-11-24 20:43:26,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__fail
[2020-11-24 20:43:26,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable_NoBaseCtor__success
[2020-11-24 20:43:26,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__fail
[2020-11-24 20:43:26,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownable_Ownable__success
[2020-11-24 20:43:26,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__fail
[2020-11-24 20:43:26,642 INFO  L138     BoogieDeclarations]: Found implementation of procedure renounceOwnership_Ownable__success
[2020-11-24 20:43:26,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__fail
[2020-11-24 20:43:26,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownable__success
[2020-11-24 20:43:26,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__fail
[2020-11-24 20:43:26,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transferOwnership~address_Ownable__success
[2020-11-24 20:43:26,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__fail
[2020-11-24 20:43:26,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownable__success
[2020-11-24 20:43:26,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__fail
[2020-11-24 20:43:26,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken_NoBaseCtor__success
[2020-11-24 20:43:26,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__fail
[2020-11-24 20:43:26,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure MintableToken_MintableToken__success
[2020-11-24 20:43:26,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__fail
[2020-11-24 20:43:26,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure mint~address~uint256_MintableToken__success
[2020-11-24 20:43:26,643 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__fail
[2020-11-24 20:43:26,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure finishMinting_MintableToken__success
[2020-11-24 20:43:26,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__fail
[2020-11-24 20:43:26,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintingFinished_MintableToken__success
[2020-11-24 20:43:26,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__fail
[2020-11-24 20:43:26,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken_NoBaseCtor__success
[2020-11-24 20:43:26,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__fail
[2020-11-24 20:43:26,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableToken_FreezableToken__success
[2020-11-24 20:43:26,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__fail
[2020-11-24 20:43:26,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_FreezableToken__success
[2020-11-24 20:43:26,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__fail
[2020-11-24 20:43:26,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure actualBalanceOf~address_FreezableToken__success
[2020-11-24 20:43:26,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__fail
[2020-11-24 20:43:26,644 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingBalanceOf~address_FreezableToken__success
[2020-11-24 20:43:26,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__fail
[2020-11-24 20:43:26,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezingCount~address_FreezableToken__success
[2020-11-24 20:43:26,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__fail
[2020-11-24 20:43:26,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure getFreezing~address~uint256_FreezableToken__success
[2020-11-24 20:43:26,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__fail
[2020-11-24 20:43:26,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure freezeTo~address~uint256~uint64_FreezableToken__success
[2020-11-24 20:43:26,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__fail
[2020-11-24 20:43:26,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseOnce_FreezableToken__success
[2020-11-24 20:43:26,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__fail
[2020-11-24 20:43:26,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure releaseAll_FreezableToken__success
[2020-11-24 20:43:26,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__fail
[2020-11-24 20:43:26,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure toKey~address~uint256_FreezableToken__success
[2020-11-24 20:43:26,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__fail
[2020-11-24 20:43:26,645 INFO  L138     BoogieDeclarations]: Found implementation of procedure freeze~address~uint64_FreezableToken__success
[2020-11-24 20:43:26,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__fail
[2020-11-24 20:43:26,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken_NoBaseCtor__success
[2020-11-24 20:43:26,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__fail
[2020-11-24 20:43:26,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure BurnableToken_BurnableToken__success
[2020-11-24 20:43:26,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__fail
[2020-11-24 20:43:26,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_BurnableToken__success
[2020-11-24 20:43:26,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__fail
[2020-11-24 20:43:26,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_BurnableToken__success
[2020-11-24 20:43:26,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__fail
[2020-11-24 20:43:26,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable_NoBaseCtor__success
[2020-11-24 20:43:26,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__fail
[2020-11-24 20:43:26,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure Pausable_Pausable__success
[2020-11-24 20:43:26,646 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__fail
[2020-11-24 20:43:26,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure pause_Pausable__success
[2020-11-24 20:43:26,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__fail
[2020-11-24 20:43:26,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure unpause_Pausable__success
[2020-11-24 20:43:26,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__fail
[2020-11-24 20:43:26,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure paused_Pausable__success
[2020-11-24 20:43:26,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__fail
[2020-11-24 20:43:26,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success
[2020-11-24 20:43:26,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__fail
[2020-11-24 20:43:26,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreezableMintableToken_FreezableMintableToken__success
[2020-11-24 20:43:26,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__fail
[2020-11-24 20:43:26,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure mintAndFreeze~address~uint256~uint64_FreezableMintableToken__success
[2020-11-24 20:43:26,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__fail
[2020-11-24 20:43:26,647 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts_NoBaseCtor__success
[2020-11-24 20:43:26,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__fail
[2020-11-24 20:43:26,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure Consts_Consts__success
[2020-11-24 20:43:26,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__fail
[2020-11-24 20:43:26,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_Consts__success
[2020-11-24 20:43:26,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__fail
[2020-11-24 20:43:26,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMALS_UINT8_Consts__success
[2020-11-24 20:43:26,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__fail
[2020-11-24 20:43:26,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_DECIMAL_MULTIPLIER_Consts__success
[2020-11-24 20:43:26,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__fail
[2020-11-24 20:43:26,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_NAME_Consts__success
[2020-11-24 20:43:26,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__fail
[2020-11-24 20:43:26,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure TOKEN_SYMBOL_Consts__success
[2020-11-24 20:43:26,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__fail
[2020-11-24 20:43:26,648 INFO  L138     BoogieDeclarations]: Found implementation of procedure PAUSED_Consts__success
[2020-11-24 20:43:26,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__fail
[2020-11-24 20:43:26,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure TARGET_USER_Consts__success
[2020-11-24 20:43:26,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__fail
[2020-11-24 20:43:26,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure CONTINUE_MINTING_Consts__success
[2020-11-24 20:43:26,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__fail
[2020-11-24 20:43:26,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken_NoBaseCtor__success
[2020-11-24 20:43:26,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__fail
[2020-11-24 20:43:26,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure MainToken_MainToken__success
[2020-11-24 20:43:26,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__fail
[2020-11-24 20:43:26,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_MainToken__success
[2020-11-24 20:43:26,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__fail
[2020-11-24 20:43:26,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_MainToken__success
[2020-11-24 20:43:26,649 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__fail
[2020-11-24 20:43:26,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_MainToken__success
[2020-11-24 20:43:26,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__fail
[2020-11-24 20:43:26,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_MainToken__success
[2020-11-24 20:43:26,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__fail
[2020-11-24 20:43:26,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_MainToken__success
[2020-11-24 20:43:26,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__fail
[2020-11-24 20:43:26,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure init_MainToken__success
[2020-11-24 20:43:26,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__fail
[2020-11-24 20:43:26,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure initialized_MainToken__success
[2020-11-24 20:43:26,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-24 20:43:26,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-24 20:43:26,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-24 20:43:26,650 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-24 20:43:26,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-24 20:43:26,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-24 20:43:26,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-24 20:43:26,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-24 20:43:26,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__fail
[2020-11-24 20:43:26,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure canMint_pre__success
[2020-11-24 20:43:26,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__fail
[2020-11-24 20:43:26,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure hasMintPermission_pre__success
[2020-11-24 20:43:26,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__fail
[2020-11-24 20:43:26,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenNotPaused_pre__success
[2020-11-24 20:43:26,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__fail
[2020-11-24 20:43:26,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure whenPaused_pre__success
[2020-11-24 20:43:26,651 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Basic
[2020-11-24 20:43:26,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Basic
[2020-11-24 20:43:26,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-24 20:43:26,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-24 20:43:26,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BasicToken
[2020-11-24 20:43:26,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BasicToken
[2020-11-24 20:43:26,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-24 20:43:26,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-24 20:43:26,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_StandardToken
[2020-11-24 20:43:26,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_StandardToken
[2020-11-24 20:43:26,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownable
[2020-11-24 20:43:26,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownable
[2020-11-24 20:43:26,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MintableToken
[2020-11-24 20:43:26,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_MintableToken
[2020-11-24 20:43:26,652 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableToken
[2020-11-24 20:43:26,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableToken
[2020-11-24 20:43:26,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_BurnableToken
[2020-11-24 20:43:26,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_BurnableToken
[2020-11-24 20:43:26,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Pausable
[2020-11-24 20:43:26,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Pausable
[2020-11-24 20:43:26,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_FreezableMintableToken
[2020-11-24 20:43:26,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_FreezableMintableToken
[2020-11-24 20:43:26,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Consts
[2020-11-24 20:43:26,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Consts
[2020-11-24 20:43:26,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_MainToken
[2020-11-24 20:43:26,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-24 20:43:26,653 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-24 20:43:26,653 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-24 20:43:27,912 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:43:27,912 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:43:27,912 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-24 20:43:28,308 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-24 20:43:28,308 INFO  L286             CfgBuilder]: Removed 13 assue(true) statements.
[2020-11-24 20:43:28,312 INFO  L202        PluginConnector]: Adding new model MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:43:28 BoogieIcfgContainer
[2020-11-24 20:43:28,312 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:43:26" (2/2) ...
[2020-11-24 20:43:28,312 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-24 20:43:28,312 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@58407d88 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:43:28, skipping insertion in model container
[2020-11-24 20:43:28,312 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-24 20:43:28,313 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-24 20:43:28,313 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-24 20:43:28,314 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-24 20:43:28,314 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:43:26" (1/3) ...
[2020-11-24 20:43:28,315 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@56d1f829 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:43:28, skipping insertion in model container
[2020-11-24 20:43:28,315 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:43:26" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-24 20:43:28,350 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:43:28 NWAContainer
[2020-11-24 20:43:28,350 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-24 20:43:28,350 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-24 20:43:28,351 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-24 20:43:28,351 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-24 20:43:28,352 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:43:28" (3/4) ...
[2020-11-24 20:43:28,353 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@2c6561c6 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:43:28, skipping insertion in model container
[2020-11-24 20:43:28,353 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:43:28" (4/4) ...
[2020-11-24 20:43:28,355 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-24 20:43:28,364 INFO  L110   BuchiProductObserver]: Initial RCFG 5478 locations, 7654 edges
[2020-11-24 20:43:28,364 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-24 20:43:28,380 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-24 20:43:32,645 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-24 20:43:32,662 INFO  L110   BuchiProductObserver]: BuchiProgram size 13636 locations, 24999 edges
[2020-11-24 20:43:32,662 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:43:32 BoogieIcfgContainer
[2020-11-24 20:43:32,663 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-24 20:43:32,663 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-24 20:43:32,663 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-24 20:43:32,664 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-24 20:43:32,665 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:43:32" (1/1) ...
[2020-11-24 20:43:32,966 INFO  L313           BlockEncoder]: Initial Icfg 13636 locations, 24999 edges
[2020-11-24 20:43:32,967 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-24 20:43:32,967 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-24 20:43:32,967 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-24 20:43:32,968 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-24 20:43:32,990 INFO  L70    emoveInfeasibleEdges]: Removed 315 edges and 29 locations because of local infeasibility
[2020-11-24 20:43:33,013 INFO  L70        RemoveSinkStates]: Removed 170 edges and 113 locations by removing sink states
[2020-11-24 20:43:33,048 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-24 20:43:33,058 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-24 20:43:33,070 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-24 20:43:33,070 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-24 20:43:33,077 INFO  L313           BlockEncoder]: Encoded RCFG 13426 locations, 24413 edges
[2020-11-24 20:43:33,078 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:43:33 BasicIcfg
[2020-11-24 20:43:33,078 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-24 20:43:33,079 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-24 20:43:33,079 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-24 20:43:33,081 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-24 20:43:33,081 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:43:33,081 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_totalsupply.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 24.11 08:43:26" (1/6) ...
[2020-11-24 20:43:33,083 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@15f31329 and model type MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:43:33, skipping insertion in model container
[2020-11-24 20:43:33,083 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:43:33,083 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 24.11 08:43:26" (2/6) ...
[2020-11-24 20:43:33,083 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@15f31329 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:43:33, skipping insertion in model container
[2020-11-24 20:43:33,083 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:43:33,083 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 24.11 08:43:28" (3/6) ...
[2020-11-24 20:43:33,084 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@15f31329 and model type MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_totalsupply.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:43:33, skipping insertion in model container
[2020-11-24 20:43:33,084 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:43:33,084 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 24.11 08:43:28" (4/6) ...
[2020-11-24 20:43:33,084 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@15f31329 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 24.11 08:43:33, skipping insertion in model container
[2020-11-24 20:43:33,084 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:43:33,084 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 24.11 08:43:32" (5/6) ...
[2020-11-24 20:43:33,084 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@15f31329 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 24.11 08:43:33, skipping insertion in model container
[2020-11-24 20:43:33,085 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-24 20:43:33,085 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 24.11 08:43:33" (6/6) ...
[2020-11-24 20:43:33,086 INFO  L404   chiAutomizerObserver]: Analyzing ICFG MainToken_0x062f90480551379791FBe2ED74C1fe69821b30d3_totalsupply.bpl_BEv2
[2020-11-24 20:43:33,125 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-24 20:43:33,125 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-24 20:43:33,125 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-24 20:43:33,125 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-24 20:43:33,126 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-24 20:43:33,126 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-24 20:43:33,126 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-24 20:43:33,126 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-24 20:43:33,126 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-24 20:43:33,227 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13426 states.
[2020-11-24 20:43:33,338 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:43:33,338 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:43:33,338 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:43:33,349 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:43:33,349 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:43:33,349 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-24 20:43:33,349 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 13426 states.
[2020-11-24 20:43:33,410 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:43:33,410 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:43:33,410 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:43:33,412 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:43:33,412 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_totalSupply_BasicToken0 := false;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND TRUE   revert
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND TRUE   revert
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND TRUE   choice == 38
[L14662]              gas := gas - 21000;
[L14663]  COND FALSE  !(gas >= 0)
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:43:33,431 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:43:33,432 INFO  L82        PathProgramCache]: Analyzing trace with hash 1015567334, now seen corresponding path program 1 times
[2020-11-24 20:43:33,437 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:43:33,465 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:43:33,512 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:43:33,514 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:43:33,514 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:43:33,992 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:43:34,000 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:43:34,000 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:43:34,001 INFO  L87              Difference]: Start difference. First operand 13426 states. Second operand 4 states.
[2020-11-24 20:43:35,314 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:43:35,314 INFO  L93              Difference]: Finished difference Result 8370 states and 9785 transitions.
[2020-11-24 20:43:35,314 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:43:35,315 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8370 states and 9785 transitions.
[2020-11-24 20:43:35,348 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:43:35,390 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8370 states to 8366 states and 9777 transitions.
[2020-11-24 20:43:35,391 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-24 20:43:35,394 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1857
[2020-11-24 20:43:35,394 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8366 states and 9777 transitions.
[2020-11-24 20:43:35,412 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:43:35,412 INFO  L728         BuchiCegarLoop]: Abstraction has 8366 states and 9777 transitions.
[2020-11-24 20:43:35,437 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8366 states and 9777 transitions.
[2020-11-24 20:43:35,565 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8366 to 8366.
[2020-11-24 20:43:35,565 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8366 states.
[2020-11-24 20:43:35,582 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8366 states to 8366 states and 9777 transitions.
[2020-11-24 20:43:35,583 INFO  L751         BuchiCegarLoop]: Abstraction has 8366 states and 9777 transitions.
[2020-11-24 20:43:35,583 INFO  L631         BuchiCegarLoop]: Abstraction has 8366 states and 9777 transitions.
[2020-11-24 20:43:35,583 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-24 20:43:35,583 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8366 states and 9777 transitions.
[2020-11-24 20:43:35,600 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:43:35,600 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:43:35,600 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:43:35,603 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:43:35,603 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_totalSupply_BasicToken0 := false;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND TRUE   revert
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND TRUE   choice == 38
[L14662]              gas := gas - 21000;
[L14663]  COND TRUE   gas >= 0
[L14664]              assume msgvalue_MSG == 0;
[L14665]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_BasicToken0 := true;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]                  revert := revert_hold;
[L379]                havoc __exception;
[L380]                revert := false;
[L381]    COND FALSE  !(__exception)
[L420]    CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6908]               __ret_0_ := totalSupply__BasicToken[this];
[L420]    RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L421]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14665]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND TRUE   choice == 38
[L14662]              gas := gas - 21000;
[L14663]  COND TRUE   gas >= 0
[L14664]              assume msgvalue_MSG == 0;
[L14665]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_BasicToken0 := true;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]                  revert := revert_hold;
[L379]                havoc __exception;
[L380]                revert := false;
[L381]    COND FALSE  !(__exception)
[L420]    CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6908]               __ret_0_ := totalSupply__BasicToken[this];
[L420]    RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L421]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14665]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:43:35,608 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:43:35,608 INFO  L82        PathProgramCache]: Analyzing trace with hash 1491781122, now seen corresponding path program 1 times
[2020-11-24 20:43:35,610 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:43:35,623 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:43:35,655 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-24 20:43:35,655 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:43:35,656 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:43:35,657 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:43:35,657 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:43:35,657 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:43:35,657 INFO  L87              Difference]: Start difference. First operand 8366 states and 9777 transitions. cyclomatic complexity: 1431 Second operand 3 states.
[2020-11-24 20:43:35,851 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:43:35,851 INFO  L93              Difference]: Finished difference Result 9830 states and 11237 transitions.
[2020-11-24 20:43:35,851 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:43:35,852 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9830 states and 11237 transitions.
[2020-11-24 20:43:35,880 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:43:35,928 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9830 states to 9830 states and 11237 transitions.
[2020-11-24 20:43:35,928 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2275
[2020-11-24 20:43:35,929 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2275
[2020-11-24 20:43:35,929 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9830 states and 11237 transitions.
[2020-11-24 20:43:35,939 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:43:35,939 INFO  L728         BuchiCegarLoop]: Abstraction has 9830 states and 11237 transitions.
[2020-11-24 20:43:35,947 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9830 states and 11237 transitions.
[2020-11-24 20:43:36,027 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9830 to 8742.
[2020-11-24 20:43:36,027 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8742 states.
[2020-11-24 20:43:36,038 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8742 states to 8742 states and 9883 transitions.
[2020-11-24 20:43:36,038 INFO  L751         BuchiCegarLoop]: Abstraction has 8742 states and 9883 transitions.
[2020-11-24 20:43:36,038 INFO  L631         BuchiCegarLoop]: Abstraction has 8742 states and 9883 transitions.
[2020-11-24 20:43:36,038 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-24 20:43:36,039 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8742 states and 9883 transitions.
[2020-11-24 20:43:36,052 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-24 20:43:36,052 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:43:36,052 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:43:36,059 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:43:36,059 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_totalSupply_BasicToken0 := false;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9849]   COND TRUE   !!initialized_MainToken[this]
[L9850]               revert := true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND TRUE   revert
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND TRUE   choice == 38
[L14662]              gas := gas - 21000;
[L14663]  COND TRUE   gas >= 0
[L14664]              assume msgvalue_MSG == 0;
[L14665]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_BasicToken0 := true;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]                  revert := revert_hold;
[L379]                havoc __exception;
[L380]                revert := false;
[L381]    COND FALSE  !(__exception)
[L420]    CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6908]               __ret_0_ := totalSupply__BasicToken[this];
[L420]    RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L421]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14665]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND TRUE   choice == 38
[L14662]              gas := gas - 21000;
[L14663]  COND TRUE   gas >= 0
[L14664]              assume msgvalue_MSG == 0;
[L14665]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_BasicToken0 := true;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]                  revert := revert_hold;
[L379]                havoc __exception;
[L380]                revert := false;
[L381]    COND FALSE  !(__exception)
[L420]    CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6908]               __ret_0_ := totalSupply__BasicToken[this];
[L420]    RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L421]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14665]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:43:36,070 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:43:36,071 INFO  L82        PathProgramCache]: Analyzing trace with hash 2016722666, now seen corresponding path program 1 times
[2020-11-24 20:43:36,072 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:43:36,107 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:43:36,709 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 20:43:36,709 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:43:36,710 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-24 20:43:36,711 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:43:36,711 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-24 20:43:36,711 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-24 20:43:36,711 INFO  L87              Difference]: Start difference. First operand 8742 states and 9883 transitions. cyclomatic complexity: 1161 Second operand 3 states.
[2020-11-24 20:43:36,834 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:43:36,834 INFO  L93              Difference]: Finished difference Result 9824 states and 11067 transitions.
[2020-11-24 20:43:36,834 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-24 20:43:36,834 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 9824 states and 11067 transitions.
[2020-11-24 20:43:36,854 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:43:36,880 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 9824 states to 9476 states and 10659 transitions.
[2020-11-24 20:43:36,880 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2152
[2020-11-24 20:43:36,881 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2181
[2020-11-24 20:43:36,881 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 9476 states and 10659 transitions.
[2020-11-24 20:43:36,889 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:43:36,889 INFO  L728         BuchiCegarLoop]: Abstraction has 9476 states and 10659 transitions.
[2020-11-24 20:43:36,897 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 9476 states and 10659 transitions.
[2020-11-24 20:43:36,953 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 9476 to 8789.
[2020-11-24 20:43:36,953 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8789 states.
[2020-11-24 20:43:36,963 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8789 states to 8789 states and 9790 transitions.
[2020-11-24 20:43:36,963 INFO  L751         BuchiCegarLoop]: Abstraction has 8789 states and 9790 transitions.
[2020-11-24 20:43:36,963 INFO  L631         BuchiCegarLoop]: Abstraction has 8789 states and 9790 transitions.
[2020-11-24 20:43:36,963 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-24 20:43:36,963 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8789 states and 9790 transitions.
[2020-11-24 20:43:36,973 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:43:36,973 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:43:36,973 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:43:36,977 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:43:36,978 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_totalSupply_BasicToken0 := false;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9849]   COND FALSE  !(!!initialized_MainToken[this])
[L9853]               initialized_MainToken[this] := true;
[L9854]   COND FALSE  !(PAUSED_Consts[this])
[L9864]               havoc addresses_s1781;
[L9865]               __var_57 := ConstantToRef(-481593942550298128599927049417317332772408653794);
[L9866]               M_int_Ref[addresses_s1781][0] := __var_57;
[L9867]               __var_58 := ConstantToRef(697186226852612065377415878656999996930001387153);
[L9868]               M_int_Ref[addresses_s1781][1] := __var_58;
[L9869]               __var_59 := ConstantToRef(297413183667852998860644194754359575022930056944);
[L9870]               M_int_Ref[addresses_s1781][2] := __var_59;
[L9871]               __var_60 := ConstantToRef(-440302603447299485898809968810872871712299912076);
[L9872]               M_int_Ref[addresses_s1781][3] := __var_60;
[L9873]               __var_61 := ConstantToRef(-511200360814626244642515311160573267211612270929);
[L9874]               M_int_Ref[addresses_s1781][4] := __var_61;
[L9875]               havoc amounts_s1781;
[L9876]               __var_62 := 10000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9877]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][0];
[L9878]               M_int_int[amounts_s1781][0] := __var_62;
[L9879]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][0];
[L9880]               __var_63 := 2000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9881]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][1];
[L9882]               M_int_int[amounts_s1781][1] := __var_63;
[L9883]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][1];
[L9884]               __var_64 := 6100000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9885]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][2];
[L9886]               M_int_int[amounts_s1781][2] := __var_64;
[L9887]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][2];
[L9888]               __var_65 := 2500000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9889]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][3];
[L9890]               M_int_int[amounts_s1781][3] := __var_65;
[L9891]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][3];
[L9892]               __var_66 := 11400000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9893]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][4];
[L9894]               M_int_int[amounts_s1781][4] := __var_66;
[L9895]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][4];
[L9896]               havoc freezes_s1781;
[L9897]               __var_67 := 1631905201 % 18446744073709551616;
[L9898]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][0];
[L9899]               M_int_int[freezes_s1781][0] := __var_67;
[L9900]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][0];
[L9901]               __var_68 := 0 % 18446744073709551616;
[L9902]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][1];
[L9903]               M_int_int[freezes_s1781][1] := __var_68;
[L9904]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][1];
[L9905]               __var_69 := 1758135601 % 18446744073709551616;
[L9906]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][2];
[L9907]               M_int_int[freezes_s1781][2] := __var_69;
[L9908]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][2];
[L9909]               __var_70 := 0 % 18446744073709551616;
[L9910]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][3];
[L9911]               M_int_int[freezes_s1781][3] := __var_70;
[L9912]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][3];
[L9913]               __var_71 := 0 % 18446744073709551616;
[L9914]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][4];
[L9915]               M_int_int[freezes_s1781][4] := __var_71;
[L9916]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][4];
[L9917]               i_s1781 := 0;
[L9918]   COND FALSE  !(i_s1781 < Length[addresses_s1781])
[L9942]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9952]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND TRUE   choice == 38
[L14662]              gas := gas - 21000;
[L14663]  COND TRUE   gas >= 0
[L14664]              assume msgvalue_MSG == 0;
[L14665]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_BasicToken0 := true;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]                  revert := revert_hold;
[L379]                havoc __exception;
[L380]                revert := false;
[L381]    COND FALSE  !(__exception)
[L420]    CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6908]               __ret_0_ := totalSupply__BasicToken[this];
[L420]    RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L421]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14665]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND TRUE   choice == 38
[L14662]              gas := gas - 21000;
[L14663]  COND TRUE   gas >= 0
[L14664]              assume msgvalue_MSG == 0;
[L14665]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_BasicToken0 := true;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]                  revert := revert_hold;
[L379]                havoc __exception;
[L380]                revert := false;
[L381]    COND FALSE  !(__exception)
[L420]    CALL        call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6908]               __ret_0_ := totalSupply__BasicToken[this];
[L420]    RET         call __ret_0_ := totalSupply_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L421]                assume !revert && gas >= 0;
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume !((((((((((__ret_0_ == totalSupply__BasicToken[this] && totalSupply__BasicToken[this] == old(totalSupply__BasicToken[this])) && balances_BasicToken[this] == old(balances_BasicToken[this])) && allowed_StandardToken[this] == old(allowed_StandardToken[this])) && initialized_MainToken[this] == old(initialized_MainToken[this])) && paused_Pausable[this] == old(paused_Pausable[this])) && mintingFinished_MintableToken[this] == old(mintingFinished_MintableToken[this])) && owner_Ownable[this] == old(owner_Ownable[this])) && chains_FreezableToken[this] == old(chains_FreezableToken[this])) && freezings_FreezableToken[this] == old(freezings_FreezableToken[this])) && freezingBalance_FreezableToken[this] == old(freezingBalance_FreezableToken[this]));
[L2]                  revert := revert_hold;
[L14665]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L14919]  RET         call CorralChoice_MainToken(this);

[2020-11-24 20:43:36,987 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:43:36,987 INFO  L82        PathProgramCache]: Analyzing trace with hash 1684732506, now seen corresponding path program 1 times
[2020-11-24 20:43:36,988 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:43:37,024 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:43:37,589 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 20:43:37,589 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:43:37,590 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-24 20:43:37,591 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:43:37,591 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-24 20:43:37,591 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-24 20:43:37,591 INFO  L87              Difference]: Start difference. First operand 8789 states and 9790 transitions. cyclomatic complexity: 1021 Second operand 4 states.
[2020-11-24 20:43:37,725 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:43:37,725 INFO  L93              Difference]: Finished difference Result 8790 states and 9789 transitions.
[2020-11-24 20:43:37,726 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-24 20:43:37,726 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 8790 states and 9789 transitions.
[2020-11-24 20:43:37,748 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:43:37,772 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 8790 states to 8780 states and 9779 transitions.
[2020-11-24 20:43:37,772 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 2064
[2020-11-24 20:43:37,773 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 2064
[2020-11-24 20:43:37,773 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 8780 states and 9779 transitions.
[2020-11-24 20:43:37,778 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:43:37,779 INFO  L728         BuchiCegarLoop]: Abstraction has 8780 states and 9779 transitions.
[2020-11-24 20:43:37,786 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 8780 states and 9779 transitions.
[2020-11-24 20:43:37,834 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 8780 to 8778.
[2020-11-24 20:43:37,834 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 8778 states.
[2020-11-24 20:43:37,842 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 8778 states to 8778 states and 9777 transitions.
[2020-11-24 20:43:37,842 INFO  L751         BuchiCegarLoop]: Abstraction has 8778 states and 9777 transitions.
[2020-11-24 20:43:37,842 INFO  L631         BuchiCegarLoop]: Abstraction has 8778 states and 9777 transitions.
[2020-11-24 20:43:37,842 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-24 20:43:37,842 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 8778 states and 9777 transitions.
[2020-11-24 20:43:37,850 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-24 20:43:37,850 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-24 20:43:37,850 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-24 20:43:37,853 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [38, 38, 38, 38, 38, 38, 38, 38, 38, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-24 20:43:37,853 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L2]                  success_totalSupply_BasicToken0 := false;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]      CALL        call main();
[L14909]              assume null == 0;
[L14910]  CALL        call this := FreshRefGenerator__success();
[L6721]               havoc newRef;
[L6722]               assume Alloc[newRef] == false;
[L6723]               Alloc[newRef] := true;
[L6724]               assume newRef != null;
[L14910]  RET         call this := FreshRefGenerator__success();
[L14911]              assume now >= 0;
[L14912]              assume DType[this] == MainToken;
[L14913]              assume msgvalue_MSG == 0;
[L14914]              gas := gas - 53000;
[L14915]  CALL        call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L4391]               havoc __exception;
[L4392]               revert := false;
[L4393]   COND FALSE  !(__exception)
[L4432]   CALL        call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9530]   CALL        call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9332]   CALL        call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9308]               assume msgsender_MSG != null;
[L9309]               Balance[this] := 0;
[L9310]               TOKEN_DECIMALS_Consts[this] := 18;
[L9311]               TOKEN_DECIMALS_UINT8_Consts[this] := 18;
[L9312]               TOKEN_DECIMAL_MULTIPLIER_Consts[this] := nonlinearPow(10, TOKEN_DECIMALS_Consts[this]) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9313]               TOKEN_NAME_Consts[this] := -1350554499;
[L9314]               TOKEN_SYMBOL_Consts[this] := -1350554499;
[L9315]               PAUSED_Consts[this] := false;
[L9316]               __var_52 := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9317]               TARGET_USER_Consts[this] := ConstantToRef(-539724433074790209717737725607633009395537384718);
[L9318]               CONTINUE_MINTING_Consts[this] := false;
[L9332]   RET         call Consts_Consts_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9333]   COND FALSE  !(revert)
[L9530]   RET         call Consts_Consts__success(this, msgsender_MSG, msgvalue_MSG);
[L9531]   COND FALSE  !(revert)
[L9534]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9534]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9535]   COND FALSE  !(revert)
[L9538]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9538]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9539]   COND FALSE  !(revert)
[L9542]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9542]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9543]   COND FALSE  !(revert)
[L9546]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9546]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9547]   COND FALSE  !(revert)
[L9550]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9550]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9551]   COND FALSE  !(revert)
[L9554]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9554]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9555]   COND FALSE  !(revert)
[L9558]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9558]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9559]   COND FALSE  !(revert)
[L9562]   CALL        call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9117]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L9117]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L9118]   COND FALSE  !(revert)
[L9121]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L9121]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L9122]   COND FALSE  !(revert)
[L9125]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L9125]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9126]   COND FALSE  !(revert)
[L9129]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L9129]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9130]   COND FALSE  !(revert)
[L9133]   CALL        call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7678]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7678]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7679]   COND FALSE  !(revert)
[L7682]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7682]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7683]   COND FALSE  !(revert)
[L7686]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7686]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7687]   COND FALSE  !(revert)
[L7690]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7690]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7691]   COND FALSE  !(revert)
[L7694]   CALL        call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7641]               assume msgsender_MSG != null;
[L7642]               Balance[this] := 0;
[L7643]               chains_FreezableToken[this] := zerointintArr();
[L7644]               sum_chains2[this] := 0;
[L7645]               freezings_FreezableToken[this] := zerointintArr();
[L7646]               sum_freezings3[this] := 0;
[L7647]               freezingBalance_FreezableToken[this] := zeroRefintArr();
[L7648]               sum_freezingBalance4[this] := 0;
[L7694]   RET         call FreezableToken_FreezableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7695]   COND FALSE  !(revert)
[L9133]   RET         call FreezableToken_FreezableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9134]   COND FALSE  !(revert)
[L9137]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L9137]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L9138]   COND FALSE  !(revert)
[L9141]   CALL        call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7497]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7497]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7498]   COND FALSE  !(revert)
[L7501]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7501]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7502]   COND FALSE  !(revert)
[L7505]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7505]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7506]   COND FALSE  !(revert)
[L7509]   CALL        call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7071]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7071]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7072]   COND FALSE  !(revert)
[L7075]   CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7019]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L7019]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L7020]   COND FALSE  !(revert)
[L7023]   CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7000]               assume msgsender_MSG != null;
[L7001]               Balance[this] := 0;
[L7023]   RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7024]   COND FALSE  !(revert)
[L7075]   RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L7076]   COND FALSE  !(revert)
[L7079]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L7079]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7080]   COND FALSE  !(revert)
[L7083]   CALL        call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7042]               assume msgsender_MSG != null;
[L7043]               Balance[this] := 0;
[L7044]               allowed_StandardToken[this] := zeroRefRefintArr();
[L7045]               sum_allowed1[this] := 0;
[L7083]   RET         call StandardToken_StandardToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7084]   COND FALSE  !(revert)
[L7509]   RET         call StandardToken_StandardToken__success(this, msgsender_MSG, msgvalue_MSG);
[L7510]   COND FALSE  !(revert)
[L7513]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L7513]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7514]   COND FALSE  !(revert)
[L7517]   CALL        call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7461]               assume msgsender_MSG != null;
[L7462]               Balance[this] := 0;
[L7463]               mintingFinished_MintableToken[this] := false;
[L7517]   RET         call MintableToken_MintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7518]   COND FALSE  !(revert)
[L9141]   RET         call MintableToken_MintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9142]   COND FALSE  !(revert)
[L9145]   CALL        call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9074]               assume msgsender_MSG != null;
[L9075]               Balance[this] := 0;
[L9145]   RET         call FreezableMintableToken_FreezableMintableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9146]   COND FALSE  !(revert)
[L9562]   RET         call FreezableMintableToken_FreezableMintableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9563]   COND FALSE  !(revert)
[L9566]   CALL        call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8861]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L8861]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L8862]   COND FALSE  !(revert)
[L8865]   CALL        call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L6890]   CALL        call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6753]   CALL        call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6738]               assume msgsender_MSG != null;
[L6739]               Balance[this] := 0;
[L6753]   RET         call ERC20Basic_ERC20Basic_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6754]   COND FALSE  !(revert)
[L6890]   RET         call ERC20Basic_ERC20Basic__success(this, msgsender_MSG, msgvalue_MSG);
[L6891]   COND FALSE  !(revert)
[L6894]   CALL        call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6868]               assume msgsender_MSG != null;
[L6869]               Balance[this] := 0;
[L6870]               balances_BasicToken[this] := zeroRefintArr();
[L6871]               sum_balances0[this] := 0;
[L6872]               totalSupply__BasicToken[this] := 0;
[L6894]   RET         call BasicToken_BasicToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L6895]   COND FALSE  !(revert)
[L8865]   RET         call BasicToken_BasicToken__success(this, msgsender_MSG, msgvalue_MSG);
[L8866]   COND FALSE  !(revert)
[L8869]   CALL        call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8838]               assume msgsender_MSG != null;
[L8839]               Balance[this] := 0;
[L8869]   RET         call BurnableToken_BurnableToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8870]   COND FALSE  !(revert)
[L9566]   RET         call BurnableToken_BurnableToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9567]   COND FALSE  !(revert)
[L9570]   CALL        call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L8987]   CALL        call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L7313]   CALL        call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7296]               assume msgsender_MSG != null;
[L7297]               Balance[this] := 0;
[L7298]               owner_Ownable[this] := null;
[L7300]               owner_Ownable[this] := msgsender_MSG;
[L7313]   RET         call Ownable_Ownable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L7314]   COND FALSE  !(revert)
[L8987]   RET         call Ownable_Ownable__success(this, msgsender_MSG, msgvalue_MSG);
[L8988]   COND FALSE  !(revert)
[L8991]   CALL        call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8967]               assume msgsender_MSG != null;
[L8968]               Balance[this] := 0;
[L8969]               paused_Pausable[this] := false;
[L8991]   RET         call Pausable_Pausable_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L8992]   COND FALSE  !(revert)
[L9570]   RET         call Pausable_Pausable__success(this, msgsender_MSG, msgvalue_MSG);
[L9571]   COND FALSE  !(revert)
[L9574]   CALL        call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9458]               assume msgsender_MSG != null;
[L9459]               Balance[this] := 0;
[L9460]               initialized_MainToken[this] := false;
[L9462]   CALL        call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9849]   COND FALSE  !(!!initialized_MainToken[this])
[L9853]               initialized_MainToken[this] := true;
[L9854]   COND FALSE  !(PAUSED_Consts[this])
[L9864]               havoc addresses_s1781;
[L9865]               __var_57 := ConstantToRef(-481593942550298128599927049417317332772408653794);
[L9866]               M_int_Ref[addresses_s1781][0] := __var_57;
[L9867]               __var_58 := ConstantToRef(697186226852612065377415878656999996930001387153);
[L9868]               M_int_Ref[addresses_s1781][1] := __var_58;
[L9869]               __var_59 := ConstantToRef(297413183667852998860644194754359575022930056944);
[L9870]               M_int_Ref[addresses_s1781][2] := __var_59;
[L9871]               __var_60 := ConstantToRef(-440302603447299485898809968810872871712299912076);
[L9872]               M_int_Ref[addresses_s1781][3] := __var_60;
[L9873]               __var_61 := ConstantToRef(-511200360814626244642515311160573267211612270929);
[L9874]               M_int_Ref[addresses_s1781][4] := __var_61;
[L9875]               havoc amounts_s1781;
[L9876]               __var_62 := 10000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9877]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][0];
[L9878]               M_int_int[amounts_s1781][0] := __var_62;
[L9879]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][0];
[L9880]               __var_63 := 2000000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9881]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][1];
[L9882]               M_int_int[amounts_s1781][1] := __var_63;
[L9883]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][1];
[L9884]               __var_64 := 6100000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9885]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][2];
[L9886]               M_int_int[amounts_s1781][2] := __var_64;
[L9887]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][2];
[L9888]               __var_65 := 2500000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9889]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][3];
[L9890]               M_int_int[amounts_s1781][3] := __var_65;
[L9891]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][3];
[L9892]               __var_66 := 11400000000000000000000 % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L9893]               sum[amounts_s1781] := sum[amounts_s1781] - M_int_int[amounts_s1781][4];
[L9894]               M_int_int[amounts_s1781][4] := __var_66;
[L9895]               sum[amounts_s1781] := sum[amounts_s1781] + M_int_int[amounts_s1781][4];
[L9896]               havoc freezes_s1781;
[L9897]               __var_67 := 1631905201 % 18446744073709551616;
[L9898]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][0];
[L9899]               M_int_int[freezes_s1781][0] := __var_67;
[L9900]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][0];
[L9901]               __var_68 := 0 % 18446744073709551616;
[L9902]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][1];
[L9903]               M_int_int[freezes_s1781][1] := __var_68;
[L9904]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][1];
[L9905]               __var_69 := 1758135601 % 18446744073709551616;
[L9906]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][2];
[L9907]               M_int_int[freezes_s1781][2] := __var_69;
[L9908]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][2];
[L9909]               __var_70 := 0 % 18446744073709551616;
[L9910]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][3];
[L9911]               M_int_int[freezes_s1781][3] := __var_70;
[L9912]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][3];
[L9913]               __var_71 := 0 % 18446744073709551616;
[L9914]               sum[freezes_s1781] := sum[freezes_s1781] - M_int_int[freezes_s1781][4];
[L9915]               M_int_int[freezes_s1781][4] := __var_71;
[L9916]               sum[freezes_s1781] := sum[freezes_s1781] + M_int_int[freezes_s1781][4];
[L9917]               i_s1781 := 0;
[L9918]   COND FALSE  !(i_s1781 < Length[addresses_s1781])
[L9942]   COND FALSE  !(!CONTINUE_MINTING_Consts[this])
[L9952]               assert { :EventEmitted "Initialized_MainToken" } true;
[L9462]   RET         call init_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L9463]   COND FALSE  !(revert)
[L9466]   COND TRUE   DType[this] == MainToken
[L9467]   CALL        call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L7380]   CALL        call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L12863]  COND FALSE  !(!(msgsender_MSG == owner_Ownable[this]))
[L7380]   RET         call onlyOwner_pre__success(this, msgsender_MSG, msgvalue_MSG);
[L7381]   COND FALSE  !(revert)
[L7384]   COND TRUE   DType[this] == MainToken
[L7385]   CALL        call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7428]               __var_11 := null;
[L7429]   COND FALSE  !(!(_newOwner_s581 != null))
[L7433]               assert { :EventEmitted "OwnershipTransferred_Ownable" } true;
[L7434]               owner_Ownable[this] := _newOwner_s581;
[L7385]   RET         call _transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, _newOwner_s558);
[L7386]   COND FALSE  !(revert)
[L9467]   RET         call transferOwnership~address_Ownable__success(this, msgsender_MSG, msgvalue_MSG, TARGET_USER_Consts[this]);
[L9468]   COND FALSE  !(revert)
[L9574]   RET         call MainToken_MainToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L9575]   COND FALSE  !(revert)
[L4432]   RET         call MainToken_MainToken__success(this, msgsender_MSG, msgvalue_MSG);
[L4433]               assume !revert && gas >= 0;
[L14915]  RET         call MainToken_MainToken(this, msgsender_MSG, msgvalue_MSG);
[L14916]              assume !revert && gas >= 0;
[L14919]  CALL        call CorralChoice_MainToken(this);
[L14576]              havoc msgsender_MSG;
[L14577]              havoc msgvalue_MSG;
[L14578]              havoc choice;
[L14579]              havoc __ret_0_totalSupply;
[L14580]              havoc _owner_s729;
[L14581]              havoc balance_s729;
[L14582]              havoc _to_s1572;
[L14583]              havoc _value_s1572;
[L14584]              havoc _success_s1572;
[L14585]              havoc _owner_s395;
[L14586]              havoc _spender_s395;
[L14587]              havoc __ret_0_allowance;
[L14588]              havoc _from_s1551;
[L14589]              havoc _to_s1551;
[L14590]              havoc _value_s1551;
[L14591]              havoc _success_s1551;
[L14592]              havoc _spender_s379;
[L14593]              havoc _value_s379;
[L14594]              havoc __ret_0_approve;
[L14595]              havoc _spender_s437;
[L14596]              havoc _addedValue_s437;
[L14597]              havoc __ret_0_increaseApproval;
[L14598]              havoc _spender_s497;
[L14599]              havoc _subtractedValue_s497;
[L14600]              havoc __ret_0_decreaseApproval;
[L14601]              havoc __ret_0_owner;
[L14602]              havoc _newOwner_s558;
[L14603]              havoc __ret_0_mintingFinished;
[L14604]              havoc _to_s664;
[L14605]              havoc _amount_s664;
[L14606]              havoc __ret_0_mint;
[L14607]              havoc __ret_0_finishMinting;
[L14608]              havoc _owner_s742;
[L14609]              havoc balance_s742;
[L14610]              havoc _owner_s754;
[L14611]              havoc balance_s754;
[L14612]              havoc _addr_s792;
[L14613]              havoc count_s792;
[L14614]              havoc _addr_s849;
[L14615]              havoc _index_s849;
[L14616]              havoc _release_s849;
[L14617]              havoc _balance_s849;
[L14618]              havoc _to_s938;
[L14619]              havoc _amount_s938;
[L14620]              havoc _until_s938;
[L14621]              havoc tokens_s1107;
[L14622]              havoc _value_s1261;
[L14623]              havoc __ret_0_paused;
[L14624]              havoc _to_s1449;
[L14625]              havoc _amount_s1449;
[L14626]              havoc _until_s1449;
[L14627]              havoc __ret_0_mintAndFreeze;
[L14628]              havoc __ret_0_TOKEN_DECIMALS;
[L14629]              havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]              havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]              havoc __ret_0_TOKEN_NAME;
[L14632]              havoc __ret_0_TOKEN_SYMBOL;
[L14633]              havoc __ret_0_PAUSED;
[L14634]              havoc __ret_0_TARGET_USER;
[L14635]              havoc __ret_0_CONTINUE_MINTING;
[L14636]              havoc __ret_0_initialized;
[L14637]              havoc _name_s1511;
[L14638]              havoc _symbol_s1519;
[L14639]              havoc _decimals_s1527;
[L14640]              havoc tmpNow;
[L14641]              havoc gas;
[L14642]              assume gas > 4000000 && gas <= 8000000;
[L14643]              tmpNow := now;
[L14644]              havoc now;
[L14645]              assume now > tmpNow;
[L14646]              assume msgsender_MSG != null;
[L14647]              assume DType[msgsender_MSG] != ERC20Basic;
[L14648]              assume DType[msgsender_MSG] != SafeMath;
[L14649]              assume DType[msgsender_MSG] != BasicToken;
[L14650]              assume DType[msgsender_MSG] != ERC20;
[L14651]              assume DType[msgsender_MSG] != StandardToken;
[L14652]              assume DType[msgsender_MSG] != Ownable;
[L14653]              assume DType[msgsender_MSG] != MintableToken;
[L14654]              assume DType[msgsender_MSG] != FreezableToken;
[L14655]              assume DType[msgsender_MSG] != BurnableToken;
[L14656]              assume DType[msgsender_MSG] != Pausable;
[L14657]              assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]              assume DType[msgsender_MSG] != Consts;
[L14659]              assume DType[msgsender_MSG] != MainToken;
[L14660]              Alloc[msgsender_MSG] := true;
[L14661]  COND TRUE   choice == 38
[L14662]              gas := gas - 21000;
[L14663]  COND TRUE   gas >= 0
[L14664]              assume msgvalue_MSG == 0;
[L14665]  CALL        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                  revert_hold := revert;
[L2]                  revert := false;
[L2]                  assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                  call_totalSupply_BasicToken0 := true;
[L2]                  call_totalSupply_BasicToken0 := false;
[L2]                  revert := revert_hold;
[L379]                havoc __exception;
[L380]                revert := false;
[L381]    COND TRUE   __exception
[L382]                __tmp__Balance := Balance;
[L383]                __tmp__DType := DType;
[L384]                __tmp__Alloc := Alloc;
[L385]                __tmp__balance_ADDR := balance_ADDR;
[L386]                __tmp__M_Ref_int := M_Ref_int;
[L387]                __tmp__sum_balances0 := sum_balances0;
[L388]                __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L389]                __tmp__M_Ref_Ref := M_Ref_Ref;
[L390]                __tmp__sum_allowed1 := sum_allowed1;
[L391]                __tmp__M_int_int := M_int_int;
[L392]                __tmp__sum_chains2 := sum_chains2;
[L393]                __tmp__sum_freezings3 := sum_freezings3;
[L394]                __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L395]                __tmp__M_int_Ref := M_int_Ref;
[L396]                __tmp__sum := sum;
[L397]                __tmp__Length := Length;
[L398]                __tmp__now := now;
[L399]                __tmp__balances_BasicToken := balances_BasicToken;
[L400]                __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L401]                __tmp__allowed_StandardToken := allowed_StandardToken;
[L402]                __tmp__owner_Ownable := owner_Ownable;
[L403]                __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L404]                __tmp__chains_FreezableToken := chains_FreezableToken;
[L405]                __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L406]                __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L407]                __tmp__paused_Pausable := paused_Pausable;
[L408]                __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L409]                __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L410]                __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L411]                __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L412]                __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L413]                __tmp__PAUSED_Consts := PAUSED_Consts;
[L414]                __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L415]                __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L416]                __tmp__initialized_MainToken := initialized_MainToken;
[L417]    CALL        call __ret_0_ := totalSupply_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6902]               __ret_0_ := __tmp__totalSupply__BasicToken[this];
[L417]    RET         call __ret_0_ := totalSupply_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L418]                assume revert || gas < 0;
[L14665]  RET         call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L14919]  RET         call CorralChoice_MainToken(this);

Loop:
[L14919]  CALL       call CorralChoice_MainToken(this);
[L14576]             havoc msgsender_MSG;
[L14577]             havoc msgvalue_MSG;
[L14578]             havoc choice;
[L14579]             havoc __ret_0_totalSupply;
[L14580]             havoc _owner_s729;
[L14581]             havoc balance_s729;
[L14582]             havoc _to_s1572;
[L14583]             havoc _value_s1572;
[L14584]             havoc _success_s1572;
[L14585]             havoc _owner_s395;
[L14586]             havoc _spender_s395;
[L14587]             havoc __ret_0_allowance;
[L14588]             havoc _from_s1551;
[L14589]             havoc _to_s1551;
[L14590]             havoc _value_s1551;
[L14591]             havoc _success_s1551;
[L14592]             havoc _spender_s379;
[L14593]             havoc _value_s379;
[L14594]             havoc __ret_0_approve;
[L14595]             havoc _spender_s437;
[L14596]             havoc _addedValue_s437;
[L14597]             havoc __ret_0_increaseApproval;
[L14598]             havoc _spender_s497;
[L14599]             havoc _subtractedValue_s497;
[L14600]             havoc __ret_0_decreaseApproval;
[L14601]             havoc __ret_0_owner;
[L14602]             havoc _newOwner_s558;
[L14603]             havoc __ret_0_mintingFinished;
[L14604]             havoc _to_s664;
[L14605]             havoc _amount_s664;
[L14606]             havoc __ret_0_mint;
[L14607]             havoc __ret_0_finishMinting;
[L14608]             havoc _owner_s742;
[L14609]             havoc balance_s742;
[L14610]             havoc _owner_s754;
[L14611]             havoc balance_s754;
[L14612]             havoc _addr_s792;
[L14613]             havoc count_s792;
[L14614]             havoc _addr_s849;
[L14615]             havoc _index_s849;
[L14616]             havoc _release_s849;
[L14617]             havoc _balance_s849;
[L14618]             havoc _to_s938;
[L14619]             havoc _amount_s938;
[L14620]             havoc _until_s938;
[L14621]             havoc tokens_s1107;
[L14622]             havoc _value_s1261;
[L14623]             havoc __ret_0_paused;
[L14624]             havoc _to_s1449;
[L14625]             havoc _amount_s1449;
[L14626]             havoc _until_s1449;
[L14627]             havoc __ret_0_mintAndFreeze;
[L14628]             havoc __ret_0_TOKEN_DECIMALS;
[L14629]             havoc __ret_0_TOKEN_DECIMALS_UINT8;
[L14630]             havoc __ret_0_TOKEN_DECIMAL_MULTIPLIER;
[L14631]             havoc __ret_0_TOKEN_NAME;
[L14632]             havoc __ret_0_TOKEN_SYMBOL;
[L14633]             havoc __ret_0_PAUSED;
[L14634]             havoc __ret_0_TARGET_USER;
[L14635]             havoc __ret_0_CONTINUE_MINTING;
[L14636]             havoc __ret_0_initialized;
[L14637]             havoc _name_s1511;
[L14638]             havoc _symbol_s1519;
[L14639]             havoc _decimals_s1527;
[L14640]             havoc tmpNow;
[L14641]             havoc gas;
[L14642]             assume gas > 4000000 && gas <= 8000000;
[L14643]             tmpNow := now;
[L14644]             havoc now;
[L14645]             assume now > tmpNow;
[L14646]             assume msgsender_MSG != null;
[L14647]             assume DType[msgsender_MSG] != ERC20Basic;
[L14648]             assume DType[msgsender_MSG] != SafeMath;
[L14649]             assume DType[msgsender_MSG] != BasicToken;
[L14650]             assume DType[msgsender_MSG] != ERC20;
[L14651]             assume DType[msgsender_MSG] != StandardToken;
[L14652]             assume DType[msgsender_MSG] != Ownable;
[L14653]             assume DType[msgsender_MSG] != MintableToken;
[L14654]             assume DType[msgsender_MSG] != FreezableToken;
[L14655]             assume DType[msgsender_MSG] != BurnableToken;
[L14656]             assume DType[msgsender_MSG] != Pausable;
[L14657]             assume DType[msgsender_MSG] != FreezableMintableToken;
[L14658]             assume DType[msgsender_MSG] != Consts;
[L14659]             assume DType[msgsender_MSG] != MainToken;
[L14660]             Alloc[msgsender_MSG] := true;
[L14661]  COND TRUE  choice == 38
[L14662]             gas := gas - 21000;
[L14663]  COND TRUE  gas >= 0
[L14664]             assume msgvalue_MSG == 0;
[L14665]  CALL       call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L2]                 revert_hold := revert;
[L2]                 revert := false;
[L2]                 assume totalSupply__BasicToken[this] >= 0 && totalSupply__BasicToken[this] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L2]                 call_totalSupply_BasicToken0 := true;
[L2]                 call_totalSupply_BasicToken0 := false;
[L2]                 revert := revert_hold;
[L379]               havoc __exception;
[L380]               revert := false;
[L381]    COND TRUE  __exception
[L382]               __tmp__Balance := Balance;
[L383]               __tmp__DType := DType;
[L384]               __tmp__Alloc := Alloc;
[L385]               __tmp__balance_ADDR := balance_ADDR;
[L386]               __tmp__M_Ref_int := M_Ref_int;
[L387]               __tmp__sum_balances0 := sum_balances0;
[L388]               __tmp__alloc_allowed_StandardToken_lvl0 := alloc_allowed_StandardToken_lvl0;
[L389]               __tmp__M_Ref_Ref := M_Ref_Ref;
[L390]               __tmp__sum_allowed1 := sum_allowed1;
[L391]               __tmp__M_int_int := M_int_int;
[L392]               __tmp__sum_chains2 := sum_chains2;
[L393]               __tmp__sum_freezings3 := sum_freezings3;
[L394]               __tmp__sum_freezingBalance4 := sum_freezingBalance4;
[L395]               __tmp__M_int_Ref := M_int_Ref;
[L396]               __tmp__sum := sum;
[L397]               __tmp__Length := Length;
[L398]               __tmp__now := now;
[L399]               __tmp__balances_BasicToken := balances_BasicToken;
[L400]               __tmp__totalSupply__BasicToken := totalSupply__BasicToken;
[L401]               __tmp__allowed_StandardToken := allowed_StandardToken;
[L402]               __tmp__owner_Ownable := owner_Ownable;
[L403]               __tmp__mintingFinished_MintableToken := mintingFinished_MintableToken;
[L404]               __tmp__chains_FreezableToken := chains_FreezableToken;
[L405]               __tmp__freezings_FreezableToken := freezings_FreezableToken;
[L406]               __tmp__freezingBalance_FreezableToken := freezingBalance_FreezableToken;
[L407]               __tmp__paused_Pausable := paused_Pausable;
[L408]               __tmp__TOKEN_DECIMALS_Consts := TOKEN_DECIMALS_Consts;
[L409]               __tmp__TOKEN_DECIMALS_UINT8_Consts := TOKEN_DECIMALS_UINT8_Consts;
[L410]               __tmp__TOKEN_DECIMAL_MULTIPLIER_Consts := TOKEN_DECIMAL_MULTIPLIER_Consts;
[L411]               __tmp__TOKEN_NAME_Consts := TOKEN_NAME_Consts;
[L412]               __tmp__TOKEN_SYMBOL_Consts := TOKEN_SYMBOL_Consts;
[L413]               __tmp__PAUSED_Consts := PAUSED_Consts;
[L414]               __tmp__TARGET_USER_Consts := TARGET_USER_Consts;
[L415]               __tmp__CONTINUE_MINTING_Consts := CONTINUE_MINTING_Consts;
[L416]               __tmp__initialized_MainToken := initialized_MainToken;
[L417]    CALL       call __ret_0_ := totalSupply_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L6902]              __ret_0_ := __tmp__totalSupply__BasicToken[this];
[L417]    RET        call __ret_0_ := totalSupply_BasicToken__fail(this, msgsender_MSG, msgvalue_MSG);
[L418]               assume revert || gas < 0;
[L14665]  RET        call __ret_0_totalSupply := totalSupply_BasicToken(this, msgsender_MSG, msgvalue_MSG);
[L14919]  RET        call CorralChoice_MainToken(this);

[2020-11-24 20:43:37,861 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-24 20:43:37,862 INFO  L82        PathProgramCache]: Analyzing trace with hash 1927258321, now seen corresponding path program 1 times
[2020-11-24 20:43:37,862 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-24 20:43:37,897 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-24 20:43:38,408 INFO  L134       CoverageAnalysis]: Checked inductivity of 9823 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 9823 trivial. 0 not checked.
[2020-11-24 20:43:38,409 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-24 20:43:38,409 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [5] imperfect sequences [] total 5
[2020-11-24 20:43:38,409 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-24 20:43:38,410 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 5 interpolants.
[2020-11-24 20:43:38,410 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=7, Invalid=13, Unknown=0, NotChecked=0, Total=20
[2020-11-24 20:43:38,410 INFO  L87              Difference]: Start difference. First operand 8778 states and 9777 transitions. cyclomatic complexity: 1019 Second operand 5 states.
[2020-11-24 20:43:39,038 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-24 20:43:39,038 INFO  L93              Difference]: Finished difference Result 6145 states and 6861 transitions.
[2020-11-24 20:43:39,038 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-24 20:43:39,039 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 6145 states and 6861 transitions.
[2020-11-24 20:43:39,049 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 20:43:39,049 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 6145 states to 0 states and 0 transitions.
[2020-11-24 20:43:39,050 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 0
[2020-11-24 20:43:39,050 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 0
[2020-11-24 20:43:39,050 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 0 states and 0 transitions.
[2020-11-24 20:43:39,050 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-24 20:43:39,050 INFO  L728         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 20:43:39,050 INFO  L751         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 20:43:39,050 INFO  L631         BuchiCegarLoop]: Abstraction has 0 states and 0 transitions.
[2020-11-24 20:43:39,050 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-24 20:43:39,050 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 0 states and 0 transitions.
[2020-11-24 20:43:39,050 INFO  L131   ngComponentsAnalysis]: Automaton has 0 accepting balls. 0
[2020-11-24 20:43:39,050 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is true
[2020-11-24 20:43:39,053 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 24.11 08:43:39 BasicIcfg
[2020-11-24 20:43:39,053 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-24 20:43:39,053 INFO  L168              Benchmark]: Toolchain (without parser) took 12862.66 ms. Allocated memory was 1.0 GB in the beginning and 3.4 GB in the end (delta: 2.3 GB). Free memory was 913.7 MB in the beginning and 1.8 GB in the end (delta: -919.7 MB). Peak memory consumption was 1.4 GB. Max. memory is 15.3 GB.
[2020-11-24 20:43:39,055 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-24 20:43:39,055 INFO  L168              Benchmark]: Boogie Preprocessor took 211.96 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 886.7 MB in the end (delta: 27.0 MB). Peak memory consumption was 27.0 MB. Max. memory is 15.3 GB.
[2020-11-24 20:43:39,055 INFO  L168              Benchmark]: UtopiaSpecLang took 98.82 ms. Allocated memory is still 1.0 GB. Free memory was 886.7 MB in the beginning and 870.6 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-24 20:43:39,056 INFO  L168              Benchmark]: Boogie Printer took 35.50 ms. Allocated memory is still 1.0 GB. Free memory was 870.6 MB in the beginning and 859.5 MB in the end (delta: 11.1 MB). Peak memory consumption was 11.1 MB. Max. memory is 15.3 GB.
[2020-11-24 20:43:39,056 INFO  L168              Benchmark]: RCFGBuilder took 1773.59 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 179.3 MB). Free memory was 859.5 MB in the beginning and 1.1 GB in the end (delta: -211.4 MB). Peak memory consumption was 246.4 MB. Max. memory is 15.3 GB.
[2020-11-24 20:43:39,056 INFO  L168              Benchmark]: UtopiaLTL2Aut took 37.58 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 8.0 MB). Peak memory consumption was 8.0 MB. Max. memory is 15.3 GB.
[2020-11-24 20:43:39,056 INFO  L168              Benchmark]: BÃ¼chi Program Product took 4312.20 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 341.8 MB). Free memory was 1.1 GB in the beginning and 735.2 MB in the end (delta: 327.7 MB). Peak memory consumption was 784.4 MB. Max. memory is 15.3 GB.
[2020-11-24 20:43:39,057 INFO  L168              Benchmark]: BlockEncodingV2 took 415.36 ms. Allocated memory was 1.6 GB in the beginning and 2.0 GB in the end (delta: 423.1 MB). Free memory was 735.2 MB in the beginning and 1.6 GB in the end (delta: -911.9 MB). Peak memory consumption was 174.9 MB. Max. memory is 15.3 GB.
[2020-11-24 20:43:39,057 INFO  L168              Benchmark]: BuchiAutomizer took 5974.46 ms. Allocated memory was 2.0 GB in the beginning and 3.4 GB in the end (delta: 1.4 GB). Free memory was 1.6 GB in the beginning and 1.8 GB in the end (delta: -186.3 MB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
[2020-11-24 20:43:39,059 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    13636 locations, 24999 edges
  - StatisticsResult: Encoded RCFG
    13426 locations, 24413 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.16 ms. Allocated memory is still 1.0 GB. Free memory is still 951.3 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 211.96 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 886.7 MB in the end (delta: 27.0 MB). Peak memory consumption was 27.0 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 98.82 ms. Allocated memory is still 1.0 GB. Free memory was 886.7 MB in the beginning and 870.6 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 35.50 ms. Allocated memory is still 1.0 GB. Free memory was 870.6 MB in the beginning and 859.5 MB in the end (delta: 11.1 MB). Peak memory consumption was 11.1 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1773.59 ms. Allocated memory was 1.0 GB in the beginning and 1.2 GB in the end (delta: 179.3 MB). Free memory was 859.5 MB in the beginning and 1.1 GB in the end (delta: -211.4 MB). Peak memory consumption was 246.4 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 37.58 ms. Allocated memory is still 1.2 GB. Free memory was 1.1 GB in the beginning and 1.1 GB in the end (delta: 8.0 MB). Peak memory consumption was 8.0 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 4312.20 ms. Allocated memory was 1.2 GB in the beginning and 1.6 GB in the end (delta: 341.8 MB). Free memory was 1.1 GB in the beginning and 735.2 MB in the end (delta: 327.7 MB). Peak memory consumption was 784.4 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 415.36 ms. Allocated memory was 1.6 GB in the beginning and 2.0 GB in the end (delta: 423.1 MB). Free memory was 735.2 MB in the beginning and 1.6 GB in the end (delta: -911.9 MB). Peak memory consumption was 174.9 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 5974.46 ms. Allocated memory was 2.0 GB in the beginning and 3.4 GB in the end (delta: 1.4 GB). Free memory was 1.6 GB in the beginning and 1.8 GB in the end (delta: -186.3 MB). Peak memory consumption was 1.2 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    5478 locations, 7654 edges
  - StatisticsResult: BuchiProgram size
    13636 locations, 24999 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 5 terminating modules (5 trivial, 0 deterministic, 0 nondeterministic). 5 modules have a trivial ranking function, the largest among these consists of 5 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 5.9s and 6 iterations.  TraceHistogramMax:38. Analysis of lassos took 2.4s. Construction of modules took 1.6s. BÃ¼chi inclusion checks took 0.8s. Highest rank in rank-based complementation 0. Minimization of det autom 5. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 4 MinimizatonAttempts, 1777 StatesRemovedByMinimization, 3 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 8789 states and ocurred in iteration 3.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 45008 SDtfs, 29257 SDslu, 43560 SDs, 0 SdLazy, 5826 SolverSat, 6730 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 1.6s Time	LassoAnalysisResults: nont0 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU5 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - AllSpecificationsHoldResult: All specifications hold
    Buchi Automizer proved that the LTL property ! ( ( []( (call_totalSupply_(success_totalSupply_BasicToken0)asicToken0) ==> ( <>(success_totalSupply_BasicToken0) ) ) )) holds
RESULT: Ultimate proved your program to be correct!
Received shutdown request...
