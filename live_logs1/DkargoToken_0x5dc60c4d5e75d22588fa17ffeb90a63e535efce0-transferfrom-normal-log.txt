This is Ultimate 0.1.24-f1553f5-m
[2020-11-25 14:16:28,154 INFO  L170        SettingsManager]: Resetting all preferences to default values...
[2020-11-25 14:16:28,155 INFO  L174        SettingsManager]: Resetting UltimateCore preferences to default values
[2020-11-25 14:16:28,162 INFO  L177        SettingsManager]: Ultimate Commandline Interface provides no preferences, ignoring...
[2020-11-25 14:16:28,163 INFO  L174        SettingsManager]: Resetting Boogie Preprocessor preferences to default values
[2020-11-25 14:16:28,163 INFO  L174        SettingsManager]: Resetting Boogie Procedure Inliner preferences to default values
[2020-11-25 14:16:28,164 INFO  L174        SettingsManager]: Resetting Abstract Interpretation preferences to default values
[2020-11-25 14:16:28,165 INFO  L174        SettingsManager]: Resetting LassoRanker preferences to default values
[2020-11-25 14:16:28,166 INFO  L174        SettingsManager]: Resetting Reaching Definitions preferences to default values
[2020-11-25 14:16:28,166 INFO  L174        SettingsManager]: Resetting SyntaxChecker preferences to default values
[2020-11-25 14:16:28,167 INFO  L177        SettingsManager]: BÃ¼chi Program Product provides no preferences, ignoring...
[2020-11-25 14:16:28,167 INFO  L174        SettingsManager]: Resetting LTL2Aut preferences to default values
[2020-11-25 14:16:28,168 INFO  L174        SettingsManager]: Resetting PEA to Boogie preferences to default values
[2020-11-25 14:16:28,168 INFO  L174        SettingsManager]: Resetting BlockEncodingV2 preferences to default values
[2020-11-25 14:16:28,169 INFO  L174        SettingsManager]: Resetting ChcToBoogie preferences to default values
[2020-11-25 14:16:28,169 INFO  L174        SettingsManager]: Resetting AutomataScriptInterpreter preferences to default values
[2020-11-25 14:16:28,170 INFO  L174        SettingsManager]: Resetting BuchiAutomizer preferences to default values
[2020-11-25 14:16:28,170 INFO  L174        SettingsManager]: Resetting CACSL2BoogieTranslator preferences to default values
[2020-11-25 14:16:28,171 INFO  L174        SettingsManager]: Resetting CodeCheck preferences to default values
[2020-11-25 14:16:28,172 INFO  L174        SettingsManager]: Resetting InvariantSynthesis preferences to default values
[2020-11-25 14:16:28,173 INFO  L174        SettingsManager]: Resetting RCFGBuilder preferences to default values
[2020-11-25 14:16:28,173 INFO  L174        SettingsManager]: Resetting TraceAbstraction preferences to default values
[2020-11-25 14:16:28,175 INFO  L177        SettingsManager]: TraceAbstractionConcurrent provides no preferences, ignoring...
[2020-11-25 14:16:28,175 INFO  L177        SettingsManager]: TraceAbstractionWithAFAs provides no preferences, ignoring...
[2020-11-25 14:16:28,175 INFO  L174        SettingsManager]: Resetting TreeAutomizer preferences to default values
[2020-11-25 14:16:28,175 INFO  L174        SettingsManager]: Resetting IcfgToChc preferences to default values
[2020-11-25 14:16:28,176 INFO  L174        SettingsManager]: Resetting IcfgTransformer preferences to default values
[2020-11-25 14:16:28,176 INFO  L177        SettingsManager]: ReqToTest provides no preferences, ignoring...
[2020-11-25 14:16:28,176 INFO  L174        SettingsManager]: Resetting UtopiaLTL2Aut preferences to default values
[2020-11-25 14:16:28,176 INFO  L174        SettingsManager]: Resetting UtopiaSpecLang preferences to default values
[2020-11-25 14:16:28,177 INFO  L174        SettingsManager]: Resetting Boogie Printer preferences to default values
[2020-11-25 14:16:28,177 INFO  L174        SettingsManager]: Resetting ChcSmtPrinter preferences to default values
[2020-11-25 14:16:28,177 INFO  L174        SettingsManager]: Resetting ReqPrinter preferences to default values
[2020-11-25 14:16:28,178 INFO  L174        SettingsManager]: Resetting Witness Printer preferences to default values
[2020-11-25 14:16:28,178 INFO  L177        SettingsManager]: Boogie PL CUP Parser provides no preferences, ignoring...
[2020-11-25 14:16:28,178 INFO  L174        SettingsManager]: Resetting CDTParser preferences to default values
[2020-11-25 14:16:28,179 INFO  L177        SettingsManager]: AutomataScriptParser provides no preferences, ignoring...
[2020-11-25 14:16:28,179 INFO  L177        SettingsManager]: ReqParser provides no preferences, ignoring...
[2020-11-25 14:16:28,179 INFO  L174        SettingsManager]: Resetting SmtParser preferences to default values
[2020-11-25 14:16:28,179 INFO  L174        SettingsManager]: Resetting Witness Parser preferences to default values
[2020-11-25 14:16:28,180 INFO  L181        SettingsManager]: Finished resetting all preferences to default values...
[2020-11-25 14:16:28,180 INFO  L98         SettingsManager]: Beginning loading settings from /mnt/data0/jon/SmartPulseTool/SmartPulse/settings.epf
[2020-11-25 14:16:28,185 INFO  L110        SettingsManager]: Loading preferences was successful
[2020-11-25 14:16:28,186 INFO  L112        SettingsManager]: Preferences different from defaults after loading the file:
[2020-11-25 14:16:28,186 INFO  L131        SettingsManager]: Preferences of LTL2Aut differ from their defaults:
[2020-11-25 14:16:28,186 INFO  L133        SettingsManager]:  * Read property from file=true
[2020-11-25 14:16:28,186 INFO  L133        SettingsManager]:  * Path to LTL*BA executable (LTL2BA, LTL3BA)=/mnt/data0/jon/SmartPulseTool/ltl2ba
[2020-11-25 14:16:28,186 INFO  L131        SettingsManager]: Preferences of BlockEncodingV2 differ from their defaults:
[2020-11-25 14:16:28,186 INFO  L133        SettingsManager]:  * Maximize final states=false
[2020-11-25 14:16:28,187 INFO  L133        SettingsManager]:  * Minimize states even if more edges are added than removed.=true
[2020-11-25 14:16:28,187 INFO  L133        SettingsManager]:  * Minimize states using LBE with the strategy=NONE
[2020-11-25 14:16:28,187 INFO  L131        SettingsManager]: Preferences of BuchiAutomizer differ from their defaults:
[2020-11-25 14:16:28,187 INFO  L133        SettingsManager]:  * Compute Interpolants along a Counterexample=Craig_TreeInterpolation
[2020-11-25 14:16:28,187 INFO  L133        SettingsManager]:  * Use old map elimination=false
[2020-11-25 14:16:28,187 INFO  L133        SettingsManager]:  * Try twofold refinement=false
[2020-11-25 14:16:28,187 INFO  L131        SettingsManager]: Preferences of CACSL2BoogieTranslator differ from their defaults:
[2020-11-25 14:16:28,187 INFO  L133        SettingsManager]:  * Check unreachability of error function in SV-COMP mode=false
[2020-11-25 14:16:28,187 INFO  L133        SettingsManager]:  * Overapproximate operations on floating types=true
[2020-11-25 14:16:28,187 INFO  L133        SettingsManager]:  * Check division by zero=IGNORE
[2020-11-25 14:16:28,187 INFO  L133        SettingsManager]:  * Pointer to allocated memory at dereference=ASSUME
[2020-11-25 14:16:28,187 INFO  L133        SettingsManager]:  * If two pointers are subtracted or compared they have the same base address=ASSUME
[2020-11-25 14:16:28,187 INFO  L133        SettingsManager]:  * Check array bounds for arrays that are off heap=ASSUME
[2020-11-25 14:16:28,187 INFO  L133        SettingsManager]:  * Check if freed pointer was valid=false
[2020-11-25 14:16:28,188 INFO  L133        SettingsManager]:  * Use constant arrays=true
[2020-11-25 14:16:28,188 INFO  L133        SettingsManager]:  * Pointer base address is valid at dereference=ASSUME
[2020-11-25 14:16:28,188 INFO  L131        SettingsManager]: Preferences of RCFGBuilder differ from their defaults:
[2020-11-25 14:16:28,188 INFO  L133        SettingsManager]:  * Size of a code block=SingleStatement
[2020-11-25 14:16:28,188 INFO  L133        SettingsManager]:  * SMT solver=Internal_SMTInterpol
[2020-11-25 14:16:28,204 INFO  L81    nceAwareModelManager]: Repository-Root is: /tmp
[2020-11-25 14:16:28,213 INFO  L259   ainManager$Toolchain]: [Toolchain 1]: Applicable parser(s) successfully (re)initialized
[2020-11-25 14:16:28,215 INFO  L215   ainManager$Toolchain]: [Toolchain 1]: Toolchain selected.
[2020-11-25 14:16:28,216 INFO  L271        PluginConnector]: Initializing Boogie PL CUP Parser...
[2020-11-25 14:16:28,217 INFO  L276        PluginConnector]: Boogie PL CUP Parser initialized
[2020-11-25 14:16:28,217 INFO  L430   ainManager$Toolchain]: [Toolchain 1]: Parsing single file: /mnt/data0/jon/SmartPulseTool/DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-normal.bpl
[2020-11-25 14:16:28,217 INFO  L111           BoogieParser]: Parsing: '/mnt/data0/jon/SmartPulseTool/DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-normal.bpl'
[2020-11-25 14:16:28,319 INFO  L297   ainManager$Toolchain]: ####################### [Toolchain 1] #######################
[2020-11-25 14:16:28,320 INFO  L131        ToolchainWalker]: Walking toolchain with 8 elements.
[2020-11-25 14:16:28,320 INFO  L113        PluginConnector]: ------------------------Boogie Preprocessor----------------------------
[2020-11-25 14:16:28,320 INFO  L271        PluginConnector]: Initializing Boogie Preprocessor...
[2020-11-25 14:16:28,320 INFO  L276        PluginConnector]: Boogie Preprocessor initialized
[2020-11-25 14:16:28,332 INFO  L185        PluginConnector]: Executing the observer EnsureBoogieModelObserver from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:16:28" (1/1) ...
[2020-11-25 14:16:28,333 INFO  L185        PluginConnector]: Executing the observer TypeChecker from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:16:28" (1/1) ...
[2020-11-25 14:16:28,360 INFO  L185        PluginConnector]: Executing the observer ConstExpander from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:16:28" (1/1) ...
[2020-11-25 14:16:28,361 INFO  L185        PluginConnector]: Executing the observer StructExpander from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:16:28" (1/1) ...
[2020-11-25 14:16:28,381 INFO  L185        PluginConnector]: Executing the observer UnstructureCode from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:16:28" (1/1) ...
[2020-11-25 14:16:28,391 INFO  L185        PluginConnector]: Executing the observer FunctionInliner from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:16:28" (1/1) ...
[2020-11-25 14:16:28,400 INFO  L185        PluginConnector]: Executing the observer BoogieSymbolTableConstructor from plugin Boogie Preprocessor for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:16:28" (1/1) ...
[2020-11-25 14:16:28,412 INFO  L132        PluginConnector]: ------------------------ END Boogie Preprocessor----------------------------
[2020-11-25 14:16:28,412 INFO  L113        PluginConnector]: ------------------------UtopiaSpecLang----------------------------
[2020-11-25 14:16:28,413 INFO  L271        PluginConnector]: Initializing UtopiaSpecLang...
[2020-11-25 14:16:28,414 INFO  L276        PluginConnector]: UtopiaSpecLang initialized
[2020-11-25 14:16:28,417 INFO  L185        PluginConnector]: Executing the observer UtopiaSpecLangObserver from plugin UtopiaSpecLang for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:16:28" (1/1) ...
[2020-11-25 14:16:28,434 INFO  L1012  opiaSpecLangObserver]: Parsing LTLPlus Formula to AstNode: [](started(DkargoToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= _balances_ERC20[this][from] && value <= _allowances_ERC20[this][from][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DkargoToken.transferFrom(from, to, value), return == true && _balances_ERC20[this][from] == old(_balances_ERC20[this][from]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _allowances_ERC20[this][from][msg.sender] == old(_allowances_ERC20[this][from][msg.sender]) - value && _supply_ERC20[this] == old(_supply_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _allowances_ERC20[this][p2][p3] == old(_allowances_ERC20[this][p2][p3]) && _name_DkargoToken[this] == old(_name_DkargoToken[this]) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this]) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this]) && _infcs_ERC165[this] == old(_infcs_ERC165[this]) && _slist_AddressChain[this] == old(_slist_AddressChain[this]) && _owner_Ownership[this] == old(_owner_Ownership[this]))))
[2020-11-25 14:16:28,438 INFO  L1016  opiaSpecLangObserver]: Successfully lexed: [](started(DkargoToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= _balances_ERC20[this][from] && value <= _allowances_ERC20[this][from][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DkargoToken.transferFrom(from, to, value), return == true && _balances_ERC20[this][from] == old(_balances_ERC20[this][from]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _allowances_ERC20[this][from][msg.sender] == old(_allowances_ERC20[this][from][msg.sender]) - value && _supply_ERC20[this] == old(_supply_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _allowances_ERC20[this][p2][p3] == old(_allowances_ERC20[this][p2][p3]) && _name_DkargoToken[this] == old(_name_DkargoToken[this]) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this]) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this]) && _infcs_ERC165[this] == old(_infcs_ERC165[this]) && _slist_AddressChain[this] == old(_slist_AddressChain[this]) && _owner_Ownership[this] == old(_owner_Ownership[this]))))
[2020-11-25 14:16:28,444 INFO  L1018  opiaSpecLangObserver]: Successfully parsed: [](started(DkargoToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= _balances_ERC20[this][from] && value <= _allowances_ERC20[this][from][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DkargoToken.transferFrom(from, to, value), return == true && _balances_ERC20[this][from] == old(_balances_ERC20[this][from]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _allowances_ERC20[this][from][msg.sender] == old(_allowances_ERC20[this][from][msg.sender]) - value && _supply_ERC20[this] == old(_supply_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _allowances_ERC20[this][p2][p3] == old(_allowances_ERC20[this][p2][p3]) && _name_DkargoToken[this] == old(_name_DkargoToken[this]) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this]) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this]) && _infcs_ERC165[this] == old(_infcs_ERC165[this]) && _slist_AddressChain[this] == old(_slist_AddressChain[this]) && _owner_Ownership[this] == old(_owner_Ownership[this]))))
[2020-11-25 14:16:28,462 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( ( ( p1!=from_s1311 && p1!=to_s1311 ) && ( p2!=from_s1311 || p3!=msg.sender ) ) && from_s1311!=to_s1311 ) && value_s1311<=_balances_ERC20[this][from_s1311] ) && value_s1311<=_allowances_ERC20[this][from_s1311][msg.sender] ) && ( _balances_ERC20[this][to_s1311] + value_s1311 )<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && value_s1311>=0 ) && value_s1311<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][to_s1311]>=0 ) && _balances_ERC20[this][to_s1311]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _balances_ERC20[this][from_s1311]>=0 ) && _balances_ERC20[this][from_s1311]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) && _allowances_ERC20[this][from_s1311][msg.sender]>=0 ) && _allowances_ERC20[this][from_s1311][msg.sender]<115792089237316195423570985008687907853269984665640564039457584007913129639936 ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[from_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p1,GLOBAL],IdentifierExpression[to_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],BinaryExpression[LOGICOR,BinaryExpression[COMPNEQ,IdentifierExpression[p2,GLOBAL],IdentifierExpression[from_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]],BinaryExpression[COMPNEQ,IdentifierExpression[p3,GLOBAL],IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]]],BinaryExpression[COMPNEQ,IdentifierExpression[from_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>],IdentifierExpression[to_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>],ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[from_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]]]],BinaryExpression[COMPLEQ,IdentifierExpression[value_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>],ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[from_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]]]],BinaryExpression[COMPLT,BinaryExpression[ARITHPLUS,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[to_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],IdentifierExpression[value_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,IdentifierExpression[value_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>],IntegerLiteral[0]]],BinaryExpression[COMPLT,IdentifierExpression[value_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[to_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[to_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[from_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[from_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]],BinaryExpression[COMPGEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[from_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],IntegerLiteral[0]]],BinaryExpression[COMPLT,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[from_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],IntegerLiteral[115792089237316195423570985008687907853269984665640564039457584007913129639936]]]
[2020-11-25 14:16:28,466 INFO  L636   opiaSpecLangObserver]: Parsed ( ( ( ( ( ( ( ( ( ( ( ( __ret_0_==true && _balances_ERC20[this][from_s1311]==( ( old(_balances_ERC20[this][from_s1311]) ) - value_s1311 ) ) && _balances_ERC20[this][to_s1311]==( ( old(_balances_ERC20[this][to_s1311]) ) + value_s1311 ) ) && _allowances_ERC20[this][from_s1311][msg.sender]==( ( old(_allowances_ERC20[this][from_s1311][msg.sender]) ) - value_s1311 ) ) && _supply_ERC20[this]==( old(_supply_ERC20[this]) ) ) && _balances_ERC20[this][p1]==( old(_balances_ERC20[this][p1]) ) ) && _allowances_ERC20[this][p2][p3]==( old(_allowances_ERC20[this][p2][p3]) ) ) && _name_DkargoToken[this]==( old(_name_DkargoToken[this]) ) ) && _symbol_DkargoToken[this]==( old(_symbol_DkargoToken[this]) ) ) && _dkargoPrefix_DkargoPrefix[this]==( old(_dkargoPrefix_DkargoPrefix[this]) ) ) && _infcs_ERC165[this]==( old(_infcs_ERC165[this]) ) ) && _slist_AddressChain[this]==( old(_slist_AddressChain[this]) ) ) && _owner_Ownership[this]==( old(_owner_Ownership[this]) ) ) to BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[LOGICAND,BinaryExpression[COMPEQ,IdentifierExpression[__ret_0_,<IMPLEMENTATION_OUTPARAM,transferFrom~address~address~uint256_DkargoToken>],BooleanLiteral[true]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[from_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[from_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]]],IdentifierExpression[value_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[to_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],BinaryExpression[ARITHPLUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[to_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]]],IdentifierExpression[value_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[from_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],BinaryExpression[ARITHMINUS,UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[from_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[msgsender_MSG,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]]],IdentifierExpression[value_s1311,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_supply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_supply_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[p1,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_balances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[p1,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]],UnaryExpression[OLD,ArrayAccessExpression[ArrayAccessExpression[ArrayAccessExpression[IdentifierExpression[_allowances_ERC20,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],[IdentifierExpression[p2,GLOBAL]]],[IdentifierExpression[p3,GLOBAL]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_name_DkargoToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_name_DkargoToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_symbol_DkargoToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_symbol_DkargoToken,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_dkargoPrefix_DkargoPrefix,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_dkargoPrefix_DkargoPrefix,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_infcs_ERC165,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_infcs_ERC165,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_slist_AddressChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_slist_AddressChain,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]]]]],BinaryExpression[COMPEQ,ArrayAccessExpression[IdentifierExpression[_owner_Ownership,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]],UnaryExpression[OLD,ArrayAccessExpression[IdentifierExpression[_owner_Ownership,GLOBAL],[IdentifierExpression[this,<IMPLEMENTATION_INPARAM,transferFrom~address~address~uint256_DkargoToken>]]]]]]
[2020-11-25 14:16:28,472 INFO  L1005  opiaSpecLangObserver]: Compiling: [](started(DkargoToken.transferFrom(from, to, value), p1 != from && p1 != to && (p2 != from || p3 != msg.sender) && from != to && value <= _balances_ERC20[this][from] && value <= _allowances_ERC20[this][from][msg.sender] && _balances_ERC20[this][to] + value < 0x10000000000000000000000000000000000000000000000000000000000000000 && value >= 0  && value < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][to] >= 0 && _balances_ERC20[this][to] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _balances_ERC20[this][from] >= 0 &&  _balances_ERC20[this][from] < 0x10000000000000000000000000000000000000000000000000000000000000000 && _allowances_ERC20[this][from][msg.sender] >= 0 && _allowances_ERC20[this][from][msg.sender] < 0x10000000000000000000000000000000000000000000000000000000000000000) ==> <>(finished(DkargoToken.transferFrom(from, to, value), return == true && _balances_ERC20[this][from] == old(_balances_ERC20[this][from]) - value && _balances_ERC20[this][to] == old(_balances_ERC20[this][to]) + value && _allowances_ERC20[this][from][msg.sender] == old(_allowances_ERC20[this][from][msg.sender]) - value && _supply_ERC20[this] == old(_supply_ERC20[this]) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1]) && _allowances_ERC20[this][p2][p3] == old(_allowances_ERC20[this][p2][p3]) && _name_DkargoToken[this] == old(_name_DkargoToken[this]) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this]) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this]) && _infcs_ERC165[this] == old(_infcs_ERC165[this]) && _slist_AddressChain[this] == old(_slist_AddressChain[this]) && _owner_Ownership[this] == old(_owner_Ownership[this]))))
[2020-11-25 14:16:28,473 INFO  L1007  opiaSpecLangObserver]: Compiled to ( []( AP(call_transferFrom_DkargoToken0) ==> ( <>AP(success_transferFrom_DkargoToken0) ) ) )
Executed UtopiaSpecLang
[2020-11-25 14:16:28,486 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:16:28 PropertyContainer
[2020-11-25 14:16:28,487 INFO  L132        PluginConnector]: ------------------------ END UtopiaSpecLang----------------------------
[2020-11-25 14:16:28,487 INFO  L113        PluginConnector]: ------------------------Boogie Printer----------------------------
[2020-11-25 14:16:28,487 INFO  L271        PluginConnector]: Initializing Boogie Printer...
[2020-11-25 14:16:28,487 INFO  L276        PluginConnector]: Boogie Printer initialized
[2020-11-25 14:16:28,488 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:16:28" (1/2) ...
[2020-11-25 14:16:28,488 INFO  L116   oogiePrinterObserver]: File already exists and will be overwritten: /tmp/boogiePrinter.bpl
[2020-11-25 14:16:28,488 INFO  L120   oogiePrinterObserver]: Writing to file /tmp/boogiePrinter.bpl
[2020-11-25 14:16:28,508 INFO  L185        PluginConnector]: Executing the observer BoogiePrinterObserver from plugin Boogie Printer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:16:28" (2/2) ...
[2020-11-25 14:16:28,508 INFO  L132        PluginConnector]: ------------------------ END Boogie Printer----------------------------
[2020-11-25 14:16:28,509 INFO  L113        PluginConnector]: ------------------------RCFGBuilder----------------------------
[2020-11-25 14:16:28,509 INFO  L271        PluginConnector]: Initializing RCFGBuilder...
[2020-11-25 14:16:28,509 INFO  L276        PluginConnector]: RCFGBuilder initialized
[2020-11-25 14:16:28,509 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:16:28" (1/2) ...
[2020-11-25 14:16:28,563 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__success
[2020-11-25 14:16:28,563 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeInfo_ctor__success
[2020-11-25 14:16:28,563 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeList_ctor__success
[2020-11-25 14:16:28,563 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix_NoBaseCtor__success
[2020-11-25 14:16:28,563 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix
[2020-11-25 14:16:28,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix
[2020-11-25 14:16:28,563 INFO  L130     BoogieDeclarations]: Found specification of procedure getDkargoPrefix_DkargoPrefix
[2020-11-25 14:16:28,563 INFO  L138     BoogieDeclarations]: Found implementation of procedure getDkargoPrefix_DkargoPrefix
[2020-11-25 14:16:28,564 INFO  L130     BoogieDeclarations]: Found specification of procedure _setDkargoPrefix~string_DkargoPrefix__success
[2020-11-25 14:16:28,564 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership_NoBaseCtor__success
[2020-11-25 14:16:28,564 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership
[2020-11-25 14:16:28,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership
[2020-11-25 14:16:28,564 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownership
[2020-11-25 14:16:28,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownership
[2020-11-25 14:16:28,564 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownership
[2020-11-25 14:16:28,564 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownership
[2020-11-25 14:16:28,564 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownership
[2020-11-25 14:16:28,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownership
[2020-11-25 14:16:28,565 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 14:16:28,565 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath
[2020-11-25 14:16:28,565 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath
[2020-11-25 14:16:28,565 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 14:16:28,565 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 14:16:28,565 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 14:16:28,565 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 14:16:28,565 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 14:16:28,566 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain_NoBaseCtor__success
[2020-11-25 14:16:28,566 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain
[2020-11-25 14:16:28,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain
[2020-11-25 14:16:28,566 INFO  L130     BoogieDeclarations]: Found specification of procedure count_AddressChain
[2020-11-25 14:16:28,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure count_AddressChain
[2020-11-25 14:16:28,566 INFO  L130     BoogieDeclarations]: Found specification of procedure head_AddressChain
[2020-11-25 14:16:28,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure head_AddressChain
[2020-11-25 14:16:28,566 INFO  L130     BoogieDeclarations]: Found specification of procedure tail_AddressChain
[2020-11-25 14:16:28,566 INFO  L138     BoogieDeclarations]: Found implementation of procedure tail_AddressChain
[2020-11-25 14:16:28,566 INFO  L130     BoogieDeclarations]: Found specification of procedure nextOf~address_AddressChain
[2020-11-25 14:16:28,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure nextOf~address_AddressChain
[2020-11-25 14:16:28,567 INFO  L130     BoogieDeclarations]: Found specification of procedure prevOf~address_AddressChain
[2020-11-25 14:16:28,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure prevOf~address_AddressChain
[2020-11-25 14:16:28,567 INFO  L130     BoogieDeclarations]: Found specification of procedure isLinked~address_AddressChain
[2020-11-25 14:16:28,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLinked~address_AddressChain
[2020-11-25 14:16:28,567 INFO  L130     BoogieDeclarations]: Found specification of procedure _linkChain~address_AddressChain__success
[2020-11-25 14:16:28,567 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlinkChain~address_AddressChain__success
[2020-11-25 14:16:28,567 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165_NoBaseCtor__success
[2020-11-25 14:16:28,567 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165
[2020-11-25 14:16:28,567 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165
[2020-11-25 14:16:28,568 INFO  L130     BoogieDeclarations]: Found specification of procedure supportsInterface~bytes4_IERC165
[2020-11-25 14:16:28,568 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165_NoBaseCtor__success
[2020-11-25 14:16:28,568 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165
[2020-11-25 14:16:28,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165
[2020-11-25 14:16:28,568 INFO  L130     BoogieDeclarations]: Found specification of procedure supportsInterface~bytes4_ERC165
[2020-11-25 14:16:28,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure supportsInterface~bytes4_ERC165
[2020-11-25 14:16:28,568 INFO  L130     BoogieDeclarations]: Found specification of procedure _registerInterface~bytes4_ERC165__success
[2020-11-25 14:16:28,568 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 14:16:28,568 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20
[2020-11-25 14:16:28,568 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20
[2020-11-25 14:16:28,568 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_IERC20
[2020-11-25 14:16:28,569 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_IERC20
[2020-11-25 14:16:28,569 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_IERC20
[2020-11-25 14:16:28,569 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_IERC20
[2020-11-25 14:16:28,569 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_IERC20
[2020-11-25 14:16:28,569 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_IERC20
[2020-11-25 14:16:28,569 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 14:16:28,569 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20
[2020-11-25 14:16:28,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20
[2020-11-25 14:16:28,569 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20
[2020-11-25 14:16:28,569 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20
[2020-11-25 14:16:28,570 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20
[2020-11-25 14:16:28,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20
[2020-11-25 14:16:28,570 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 14:16:28,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20
[2020-11-25 14:16:28,570 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20
[2020-11-25 14:16:28,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20
[2020-11-25 14:16:28,570 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20
[2020-11-25 14:16:28,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20
[2020-11-25 14:16:28,570 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20
[2020-11-25 14:16:28,570 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20
[2020-11-25 14:16:28,571 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 14:16:28,571 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 14:16:28,571 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__success
[2020-11-25 14:16:28,571 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__success
[2020-11-25 14:16:28,571 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe_NoBaseCtor__success
[2020-11-25 14:16:28,571 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe
[2020-11-25 14:16:28,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe
[2020-11-25 14:16:28,571 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Safe
[2020-11-25 14:16:28,571 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Safe
[2020-11-25 14:16:28,571 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Safe
[2020-11-25 14:16:28,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Safe
[2020-11-25 14:16:28,572 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Safe
[2020-11-25 14:16:28,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Safe
[2020-11-25 14:16:28,572 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken_NoBaseCtor__success
[2020-11-25 14:16:28,572 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken
[2020-11-25 14:16:28,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken
[2020-11-25 14:16:28,572 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_DkargoToken
[2020-11-25 14:16:28,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_DkargoToken
[2020-11-25 14:16:28,572 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DkargoToken
[2020-11-25 14:16:28,572 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DkargoToken
[2020-11-25 14:16:28,572 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DkargoToken
[2020-11-25 14:16:28,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DkargoToken
[2020-11-25 14:16:28,573 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DkargoToken
[2020-11-25 14:16:28,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DkargoToken
[2020-11-25 14:16:28,573 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DkargoToken
[2020-11-25 14:16:28,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DkargoToken
[2020-11-25 14:16:28,573 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DkargoToken
[2020-11-25 14:16:28,573 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DkargoToken
[2020-11-25 14:16:28,573 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__success
[2020-11-25 14:16:28,573 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__success
[2020-11-25 14:16:28,573 INFO  L130     BoogieDeclarations]: Found specification of procedure send__success
[2020-11-25 14:16:28,573 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__success
[2020-11-25 14:16:28,574 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DkargoPrefix
[2020-11-25 14:16:28,574 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_DkargoPrefix
[2020-11-25 14:16:28,574 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_Ownership
[2020-11-25 14:16:28,574 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_Ownership
[2020-11-25 14:16:28,574 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_SafeMath
[2020-11-25 14:16:28,574 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_SafeMath
[2020-11-25 14:16:28,574 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_AddressChain
[2020-11-25 14:16:28,574 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_AddressChain
[2020-11-25 14:16:28,574 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC165
[2020-11-25 14:16:28,574 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC165
[2020-11-25 14:16:28,575 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC165
[2020-11-25 14:16:28,575 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC165
[2020-11-25 14:16:28,575 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_IERC20
[2020-11-25 14:16:28,575 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_IERC20
[2020-11-25 14:16:28,575 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20
[2020-11-25 14:16:28,575 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20
[2020-11-25 14:16:28,575 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_ERC20Safe
[2020-11-25 14:16:28,575 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralEntry_ERC20Safe
[2020-11-25 14:16:28,575 INFO  L130     BoogieDeclarations]: Found specification of procedure CorralChoice_DkargoToken
[2020-11-25 14:16:28,575 INFO  L130     BoogieDeclarations]: Found specification of procedure main
[2020-11-25 14:16:28,575 INFO  L130     BoogieDeclarations]: Found specification of procedure FreshRefGenerator__fail
[2020-11-25 14:16:28,576 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeInfo_ctor__fail
[2020-11-25 14:16:28,576 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain.NodeList_ctor__fail
[2020-11-25 14:16:28,576 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix_NoBaseCtor__fail
[2020-11-25 14:16:28,576 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix__success
[2020-11-25 14:16:28,576 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoPrefix_DkargoPrefix__fail
[2020-11-25 14:16:28,576 INFO  L130     BoogieDeclarations]: Found specification of procedure getDkargoPrefix_DkargoPrefix__success
[2020-11-25 14:16:28,576 INFO  L130     BoogieDeclarations]: Found specification of procedure getDkargoPrefix_DkargoPrefix__fail
[2020-11-25 14:16:28,576 INFO  L130     BoogieDeclarations]: Found specification of procedure _setDkargoPrefix~string_DkargoPrefix__fail
[2020-11-25 14:16:28,576 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership_NoBaseCtor__fail
[2020-11-25 14:16:28,577 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership__success
[2020-11-25 14:16:28,577 INFO  L130     BoogieDeclarations]: Found specification of procedure Ownership_Ownership__fail
[2020-11-25 14:16:28,577 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownership__success
[2020-11-25 14:16:28,577 INFO  L130     BoogieDeclarations]: Found specification of procedure transferOwnership~address_Ownership__fail
[2020-11-25 14:16:28,577 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownership__success
[2020-11-25 14:16:28,577 INFO  L130     BoogieDeclarations]: Found specification of procedure owner_Ownership__fail
[2020-11-25 14:16:28,577 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownership__success
[2020-11-25 14:16:28,577 INFO  L130     BoogieDeclarations]: Found specification of procedure isOwner_Ownership__fail
[2020-11-25 14:16:28,577 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 14:16:28,577 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__success
[2020-11-25 14:16:28,578 INFO  L130     BoogieDeclarations]: Found specification of procedure SafeMath_SafeMath__fail
[2020-11-25 14:16:28,578 INFO  L130     BoogieDeclarations]: Found specification of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 14:16:28,578 INFO  L130     BoogieDeclarations]: Found specification of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 14:16:28,578 INFO  L130     BoogieDeclarations]: Found specification of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 14:16:28,578 INFO  L130     BoogieDeclarations]: Found specification of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 14:16:28,578 INFO  L130     BoogieDeclarations]: Found specification of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 14:16:28,578 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain_NoBaseCtor__fail
[2020-11-25 14:16:28,578 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain__success
[2020-11-25 14:16:28,578 INFO  L130     BoogieDeclarations]: Found specification of procedure AddressChain_AddressChain__fail
[2020-11-25 14:16:28,578 INFO  L130     BoogieDeclarations]: Found specification of procedure count_AddressChain__success
[2020-11-25 14:16:28,579 INFO  L130     BoogieDeclarations]: Found specification of procedure count_AddressChain__fail
[2020-11-25 14:16:28,579 INFO  L130     BoogieDeclarations]: Found specification of procedure head_AddressChain__success
[2020-11-25 14:16:28,579 INFO  L130     BoogieDeclarations]: Found specification of procedure head_AddressChain__fail
[2020-11-25 14:16:28,579 INFO  L130     BoogieDeclarations]: Found specification of procedure tail_AddressChain__success
[2020-11-25 14:16:28,579 INFO  L130     BoogieDeclarations]: Found specification of procedure tail_AddressChain__fail
[2020-11-25 14:16:28,579 INFO  L130     BoogieDeclarations]: Found specification of procedure nextOf~address_AddressChain__success
[2020-11-25 14:16:28,579 INFO  L130     BoogieDeclarations]: Found specification of procedure nextOf~address_AddressChain__fail
[2020-11-25 14:16:28,579 INFO  L130     BoogieDeclarations]: Found specification of procedure prevOf~address_AddressChain__success
[2020-11-25 14:16:28,580 INFO  L130     BoogieDeclarations]: Found specification of procedure prevOf~address_AddressChain__fail
[2020-11-25 14:16:28,580 INFO  L130     BoogieDeclarations]: Found specification of procedure isLinked~address_AddressChain__success
[2020-11-25 14:16:28,580 INFO  L130     BoogieDeclarations]: Found specification of procedure isLinked~address_AddressChain__fail
[2020-11-25 14:16:28,580 INFO  L130     BoogieDeclarations]: Found specification of procedure _linkChain~address_AddressChain__fail
[2020-11-25 14:16:28,580 INFO  L130     BoogieDeclarations]: Found specification of procedure _unlinkChain~address_AddressChain__fail
[2020-11-25 14:16:28,580 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165_NoBaseCtor__fail
[2020-11-25 14:16:28,580 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165__success
[2020-11-25 14:16:28,580 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC165_IERC165__fail
[2020-11-25 14:16:28,580 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165_NoBaseCtor__fail
[2020-11-25 14:16:28,580 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165__success
[2020-11-25 14:16:28,580 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC165_ERC165__fail
[2020-11-25 14:16:28,580 INFO  L130     BoogieDeclarations]: Found specification of procedure supportsInterface~bytes4_ERC165__success
[2020-11-25 14:16:28,581 INFO  L130     BoogieDeclarations]: Found specification of procedure supportsInterface~bytes4_ERC165__fail
[2020-11-25 14:16:28,581 INFO  L130     BoogieDeclarations]: Found specification of procedure _registerInterface~bytes4_ERC165__fail
[2020-11-25 14:16:28,581 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 14:16:28,581 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__success
[2020-11-25 14:16:28,581 INFO  L130     BoogieDeclarations]: Found specification of procedure IERC20_IERC20__fail
[2020-11-25 14:16:28,581 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 14:16:28,581 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__success
[2020-11-25 14:16:28,581 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20_ERC20__fail
[2020-11-25 14:16:28,581 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__success
[2020-11-25 14:16:28,581 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20__fail
[2020-11-25 14:16:28,581 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__success
[2020-11-25 14:16:28,581 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 14:16:28,581 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 14:16:28,582 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 14:16:28,582 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__success
[2020-11-25 14:16:28,582 INFO  L130     BoogieDeclarations]: Found specification of procedure totalSupply_ERC20__fail
[2020-11-25 14:16:28,582 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__success
[2020-11-25 14:16:28,582 INFO  L130     BoogieDeclarations]: Found specification of procedure balanceOf~address_ERC20__fail
[2020-11-25 14:16:28,582 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__success
[2020-11-25 14:16:28,582 INFO  L130     BoogieDeclarations]: Found specification of procedure allowance~address~address_ERC20__fail
[2020-11-25 14:16:28,582 INFO  L130     BoogieDeclarations]: Found specification of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 14:16:28,582 INFO  L130     BoogieDeclarations]: Found specification of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 14:16:28,582 INFO  L130     BoogieDeclarations]: Found specification of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 14:16:28,582 INFO  L130     BoogieDeclarations]: Found specification of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 14:16:28,582 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe_NoBaseCtor__fail
[2020-11-25 14:16:28,583 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe__success
[2020-11-25 14:16:28,583 INFO  L130     BoogieDeclarations]: Found specification of procedure ERC20Safe_ERC20Safe__fail
[2020-11-25 14:16:28,583 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Safe__success
[2020-11-25 14:16:28,583 INFO  L130     BoogieDeclarations]: Found specification of procedure approve~address~uint256_ERC20Safe__fail
[2020-11-25 14:16:28,583 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Safe__success
[2020-11-25 14:16:28,583 INFO  L130     BoogieDeclarations]: Found specification of procedure increaseAllowance~address~uint256_ERC20Safe__fail
[2020-11-25 14:16:28,583 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Safe__success
[2020-11-25 14:16:28,583 INFO  L130     BoogieDeclarations]: Found specification of procedure decreaseAllowance~address~uint256_ERC20Safe__fail
[2020-11-25 14:16:28,583 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken_NoBaseCtor__fail
[2020-11-25 14:16:28,583 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken__success
[2020-11-25 14:16:28,583 INFO  L130     BoogieDeclarations]: Found specification of procedure DkargoToken_DkargoToken__fail
[2020-11-25 14:16:28,583 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_DkargoToken__success
[2020-11-25 14:16:28,584 INFO  L130     BoogieDeclarations]: Found specification of procedure burn~uint256_DkargoToken__fail
[2020-11-25 14:16:28,584 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DkargoToken__success
[2020-11-25 14:16:28,584 INFO  L130     BoogieDeclarations]: Found specification of procedure transfer~address~uint256_DkargoToken__fail
[2020-11-25 14:16:28,584 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DkargoToken__success
[2020-11-25 14:16:28,584 INFO  L130     BoogieDeclarations]: Found specification of procedure transferFrom~address~address~uint256_DkargoToken__fail
[2020-11-25 14:16:28,584 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DkargoToken__success
[2020-11-25 14:16:28,584 INFO  L130     BoogieDeclarations]: Found specification of procedure name_DkargoToken__fail
[2020-11-25 14:16:28,584 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DkargoToken__success
[2020-11-25 14:16:28,584 INFO  L130     BoogieDeclarations]: Found specification of procedure symbol_DkargoToken__fail
[2020-11-25 14:16:28,584 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DkargoToken__success
[2020-11-25 14:16:28,584 INFO  L130     BoogieDeclarations]: Found specification of procedure decimals_DkargoToken__fail
[2020-11-25 14:16:28,585 INFO  L130     BoogieDeclarations]: Found specification of procedure FallbackDispatch__fail
[2020-11-25 14:16:28,585 INFO  L130     BoogieDeclarations]: Found specification of procedure Fallback_UnknownType__fail
[2020-11-25 14:16:28,585 INFO  L130     BoogieDeclarations]: Found specification of procedure send__fail
[2020-11-25 14:16:28,585 INFO  L130     BoogieDeclarations]: Found specification of procedure onlyOwner_pre__fail
[2020-11-25 14:16:28,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__fail
[2020-11-25 14:16:28,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure FreshRefGenerator__success
[2020-11-25 14:16:28,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeInfo_ctor__fail
[2020-11-25 14:16:28,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeInfo_ctor__success
[2020-11-25 14:16:28,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeList_ctor__fail
[2020-11-25 14:16:28,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain.NodeList_ctor__success
[2020-11-25 14:16:28,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix_NoBaseCtor__fail
[2020-11-25 14:16:28,585 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix_NoBaseCtor__success
[2020-11-25 14:16:28,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix__fail
[2020-11-25 14:16:28,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoPrefix_DkargoPrefix__success
[2020-11-25 14:16:28,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure getDkargoPrefix_DkargoPrefix__fail
[2020-11-25 14:16:28,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure getDkargoPrefix_DkargoPrefix__success
[2020-11-25 14:16:28,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setDkargoPrefix~string_DkargoPrefix__fail
[2020-11-25 14:16:28,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure _setDkargoPrefix~string_DkargoPrefix__success
[2020-11-25 14:16:28,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership_NoBaseCtor__fail
[2020-11-25 14:16:28,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership_NoBaseCtor__success
[2020-11-25 14:16:28,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership__fail
[2020-11-25 14:16:28,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure Ownership_Ownership__success
[2020-11-25 14:16:28,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownership__fail
[2020-11-25 14:16:28,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferOwnership~address_Ownership__success
[2020-11-25 14:16:28,586 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownership__fail
[2020-11-25 14:16:28,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure owner_Ownership__success
[2020-11-25 14:16:28,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownership__fail
[2020-11-25 14:16:28,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure isOwner_Ownership__success
[2020-11-25 14:16:28,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__fail
[2020-11-25 14:16:28,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath_NoBaseCtor__success
[2020-11-25 14:16:28,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__fail
[2020-11-25 14:16:28,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure SafeMath_SafeMath__success
[2020-11-25 14:16:28,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__fail
[2020-11-25 14:16:28,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure add~uint256~uint256_SafeMath__success
[2020-11-25 14:16:28,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__fail
[2020-11-25 14:16:28,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure sub~uint256~uint256~string_SafeMath__success
[2020-11-25 14:16:28,587 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__fail
[2020-11-25 14:16:28,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure mul~uint256~uint256_SafeMath__success
[2020-11-25 14:16:28,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__fail
[2020-11-25 14:16:28,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure div~uint256~uint256_SafeMath__success
[2020-11-25 14:16:28,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__fail
[2020-11-25 14:16:28,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure mod~uint256~uint256_SafeMath__success
[2020-11-25 14:16:28,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain_NoBaseCtor__fail
[2020-11-25 14:16:28,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain_NoBaseCtor__success
[2020-11-25 14:16:28,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain__fail
[2020-11-25 14:16:28,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure AddressChain_AddressChain__success
[2020-11-25 14:16:28,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure count_AddressChain__fail
[2020-11-25 14:16:28,588 INFO  L138     BoogieDeclarations]: Found implementation of procedure count_AddressChain__success
[2020-11-25 14:16:28,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure head_AddressChain__fail
[2020-11-25 14:16:28,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure head_AddressChain__success
[2020-11-25 14:16:28,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure tail_AddressChain__fail
[2020-11-25 14:16:28,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure tail_AddressChain__success
[2020-11-25 14:16:28,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure nextOf~address_AddressChain__fail
[2020-11-25 14:16:28,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure nextOf~address_AddressChain__success
[2020-11-25 14:16:28,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure prevOf~address_AddressChain__fail
[2020-11-25 14:16:28,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure prevOf~address_AddressChain__success
[2020-11-25 14:16:28,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLinked~address_AddressChain__fail
[2020-11-25 14:16:28,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure isLinked~address_AddressChain__success
[2020-11-25 14:16:28,589 INFO  L138     BoogieDeclarations]: Found implementation of procedure _linkChain~address_AddressChain__fail
[2020-11-25 14:16:28,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure _linkChain~address_AddressChain__success
[2020-11-25 14:16:28,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlinkChain~address_AddressChain__fail
[2020-11-25 14:16:28,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure _unlinkChain~address_AddressChain__success
[2020-11-25 14:16:28,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165_NoBaseCtor__fail
[2020-11-25 14:16:28,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165_NoBaseCtor__success
[2020-11-25 14:16:28,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165__fail
[2020-11-25 14:16:28,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC165_IERC165__success
[2020-11-25 14:16:28,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165_NoBaseCtor__fail
[2020-11-25 14:16:28,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165_NoBaseCtor__success
[2020-11-25 14:16:28,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165__fail
[2020-11-25 14:16:28,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC165_ERC165__success
[2020-11-25 14:16:28,590 INFO  L138     BoogieDeclarations]: Found implementation of procedure supportsInterface~bytes4_ERC165__fail
[2020-11-25 14:16:28,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure supportsInterface~bytes4_ERC165__success
[2020-11-25 14:16:28,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure _registerInterface~bytes4_ERC165__fail
[2020-11-25 14:16:28,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure _registerInterface~bytes4_ERC165__success
[2020-11-25 14:16:28,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__fail
[2020-11-25 14:16:28,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20_NoBaseCtor__success
[2020-11-25 14:16:28,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__fail
[2020-11-25 14:16:28,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure IERC20_IERC20__success
[2020-11-25 14:16:28,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__fail
[2020-11-25 14:16:28,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20_NoBaseCtor__success
[2020-11-25 14:16:28,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__fail
[2020-11-25 14:16:28,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20_ERC20__success
[2020-11-25 14:16:28,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__fail
[2020-11-25 14:16:28,591 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20__success
[2020-11-25 14:16:28,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__fail
[2020-11-25 14:16:28,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_ERC20__success
[2020-11-25 14:16:28,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__fail
[2020-11-25 14:16:28,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_ERC20__success
[2020-11-25 14:16:28,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__fail
[2020-11-25 14:16:28,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure totalSupply_ERC20__success
[2020-11-25 14:16:28,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__fail
[2020-11-25 14:16:28,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure balanceOf~address_ERC20__success
[2020-11-25 14:16:28,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__fail
[2020-11-25 14:16:28,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure allowance~address~address_ERC20__success
[2020-11-25 14:16:28,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__fail
[2020-11-25 14:16:28,592 INFO  L138     BoogieDeclarations]: Found implementation of procedure _approve~address~address~uint256_ERC20__success
[2020-11-25 14:16:28,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__fail
[2020-11-25 14:16:28,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure _transfer~address~address~uint256_ERC20__success
[2020-11-25 14:16:28,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__fail
[2020-11-25 14:16:28,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure _mint~address~uint256_ERC20__success
[2020-11-25 14:16:28,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__fail
[2020-11-25 14:16:28,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure _burn~address~uint256_ERC20__success
[2020-11-25 14:16:28,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe_NoBaseCtor__fail
[2020-11-25 14:16:28,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe_NoBaseCtor__success
[2020-11-25 14:16:28,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe__fail
[2020-11-25 14:16:28,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure ERC20Safe_ERC20Safe__success
[2020-11-25 14:16:28,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Safe__fail
[2020-11-25 14:16:28,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure approve~address~uint256_ERC20Safe__success
[2020-11-25 14:16:28,593 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Safe__fail
[2020-11-25 14:16:28,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure increaseAllowance~address~uint256_ERC20Safe__success
[2020-11-25 14:16:28,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Safe__fail
[2020-11-25 14:16:28,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure decreaseAllowance~address~uint256_ERC20Safe__success
[2020-11-25 14:16:28,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken_NoBaseCtor__fail
[2020-11-25 14:16:28,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken_NoBaseCtor__success
[2020-11-25 14:16:28,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken__fail
[2020-11-25 14:16:28,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure DkargoToken_DkargoToken__success
[2020-11-25 14:16:28,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_DkargoToken__fail
[2020-11-25 14:16:28,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure burn~uint256_DkargoToken__success
[2020-11-25 14:16:28,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DkargoToken__fail
[2020-11-25 14:16:28,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure transfer~address~uint256_DkargoToken__success
[2020-11-25 14:16:28,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DkargoToken__fail
[2020-11-25 14:16:28,594 INFO  L138     BoogieDeclarations]: Found implementation of procedure transferFrom~address~address~uint256_DkargoToken__success
[2020-11-25 14:16:28,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DkargoToken__fail
[2020-11-25 14:16:28,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure name_DkargoToken__success
[2020-11-25 14:16:28,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DkargoToken__fail
[2020-11-25 14:16:28,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure symbol_DkargoToken__success
[2020-11-25 14:16:28,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DkargoToken__fail
[2020-11-25 14:16:28,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure decimals_DkargoToken__success
[2020-11-25 14:16:28,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__fail
[2020-11-25 14:16:28,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure FallbackDispatch__success
[2020-11-25 14:16:28,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__fail
[2020-11-25 14:16:28,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure Fallback_UnknownType__success
[2020-11-25 14:16:28,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__fail
[2020-11-25 14:16:28,595 INFO  L138     BoogieDeclarations]: Found implementation of procedure send__success
[2020-11-25 14:16:28,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__fail
[2020-11-25 14:16:28,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure onlyOwner_pre__success
[2020-11-25 14:16:28,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DkargoPrefix
[2020-11-25 14:16:28,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_DkargoPrefix
[2020-11-25 14:16:28,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_Ownership
[2020-11-25 14:16:28,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_Ownership
[2020-11-25 14:16:28,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_SafeMath
[2020-11-25 14:16:28,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_SafeMath
[2020-11-25 14:16:28,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_AddressChain
[2020-11-25 14:16:28,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_AddressChain
[2020-11-25 14:16:28,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC165
[2020-11-25 14:16:28,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC165
[2020-11-25 14:16:28,596 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC165
[2020-11-25 14:16:28,597 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC165
[2020-11-25 14:16:28,597 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_IERC20
[2020-11-25 14:16:28,597 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_IERC20
[2020-11-25 14:16:28,597 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20
[2020-11-25 14:16:28,597 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20
[2020-11-25 14:16:28,597 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_ERC20Safe
[2020-11-25 14:16:28,597 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralEntry_ERC20Safe
[2020-11-25 14:16:28,597 INFO  L138     BoogieDeclarations]: Found implementation of procedure CorralChoice_DkargoToken
[2020-11-25 14:16:28,597 INFO  L138     BoogieDeclarations]: Found implementation of procedure main
[2020-11-25 14:16:28,597 INFO  L130     BoogieDeclarations]: Found specification of procedure ULTIMATE.start
[2020-11-25 14:16:28,597 INFO  L138     BoogieDeclarations]: Found implementation of procedure ULTIMATE.start
[2020-11-25 14:16:28,977 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:16:28,977 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:16:28,978 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:16:29,422 WARN  L745   $ProcedureCfgBuilder]: Label in the middle of a codeblock.
[2020-11-25 14:16:29,635 INFO  L281             CfgBuilder]: Using the 1 location(s) as analysis (start of procedure ULTIMATE.start)
[2020-11-25 14:16:29,636 INFO  L286             CfgBuilder]: Removed 10 assue(true) statements.
[2020-11-25 14:16:29,638 INFO  L202        PluginConnector]: Adding new model DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:16:29 BoogieIcfgContainer
[2020-11-25 14:16:29,638 INFO  L185        PluginConnector]: Executing the observer RCFGBuilderObserver from plugin RCFGBuilder for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:16:28" (2/2) ...
[2020-11-25 14:16:29,638 INFO  L85     RCFGBuilderObserver]: No WrapperNode. Let Ultimate process with next node
[2020-11-25 14:16:29,638 INFO  L205        PluginConnector]: Invalid model from RCFGBuilder for observer de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder.RCFGBuilderObserver@5a172bbc and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:16:29, skipping insertion in model container
[2020-11-25 14:16:29,638 INFO  L132        PluginConnector]: ------------------------ END RCFGBuilder----------------------------
[2020-11-25 14:16:29,639 INFO  L113        PluginConnector]: ------------------------UtopiaLTL2Aut----------------------------
[2020-11-25 14:16:29,639 INFO  L271        PluginConnector]: Initializing UtopiaLTL2Aut...
[2020-11-25 14:16:29,640 INFO  L276        PluginConnector]: UtopiaLTL2Aut initialized
[2020-11-25 14:16:29,640 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:16:28" (1/3) ...
[2020-11-25 14:16:29,641 INFO  L205        PluginConnector]: Invalid model from UtopiaLTL2Aut for observer edu.utexas.cs.utopia.ltl2aut.UtopiaLTL2AutObserver@7c681539 and model type Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:16:29, skipping insertion in model container
[2020-11-25 14:16:29,641 INFO  L185        PluginConnector]: Executing the observer UtopiaLTL2AutObserver from plugin UtopiaLTL2Aut for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:16:28" (2/3) ...
No working directory specified, using /mnt/data0/jon/SmartPulseTool/ltl2ba
Starting monitored process 1 with /mnt/data0/jon/SmartPulseTool/ltl2ba -f ! ( ( [] ( a -> ( <>b ) ) ) )  (exit command is null, workingDir is null)
[2020-11-25 14:16:29,675 INFO  L202        PluginConnector]: Adding new model Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:16:29 NWAContainer
[2020-11-25 14:16:29,676 INFO  L132        PluginConnector]: ------------------------ END UtopiaLTL2Aut----------------------------
[2020-11-25 14:16:29,676 INFO  L113        PluginConnector]: ------------------------BÃ¼chi Program Product----------------------------
[2020-11-25 14:16:29,676 INFO  L271        PluginConnector]: Initializing BÃ¼chi Program Product...
[2020-11-25 14:16:29,677 INFO  L276        PluginConnector]: BÃ¼chi Program Product initialized
[2020-11-25 14:16:29,677 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:16:29" (3/4) ...
[2020-11-25 14:16:29,678 INFO  L205        PluginConnector]: Invalid model from BÃ¼chi Program Product for observer de.uni_freiburg.informatik.ultimate.buchiprogramproduct.BuchiProductObserver@70b7eeb9 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:16:29, skipping insertion in model container
[2020-11-25 14:16:29,678 INFO  L185        PluginConnector]: Executing the observer BuchiProductObserver from plugin BÃ¼chi Program Product for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:16:29" (4/4) ...
[2020-11-25 14:16:29,681 INFO  L104   BuchiProductObserver]: Initial property automaton 2 locations, 3 edges
[2020-11-25 14:16:29,686 INFO  L110   BuchiProductObserver]: Initial RCFG 3097 locations, 4215 edges
[2020-11-25 14:16:29,686 INFO  L93    BuchiProductObserver]: Beginning generation of product automaton
[2020-11-25 14:16:29,699 INFO  L136       ProductGenerator]: The program has no step specification, so we assume maximum atomicity
[2020-11-25 14:16:32,237 INFO  L97    BuchiProductObserver]: Finished generation of product automaton successfully
[2020-11-25 14:16:32,246 INFO  L110   BuchiProductObserver]: BuchiProgram size 7640 locations, 13678 edges
[2020-11-25 14:16:32,247 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:16:32 BoogieIcfgContainer
[2020-11-25 14:16:32,247 INFO  L132        PluginConnector]: ------------------------ END BÃ¼chi Program Product----------------------------
[2020-11-25 14:16:32,247 INFO  L113        PluginConnector]: ------------------------BlockEncodingV2----------------------------
[2020-11-25 14:16:32,247 INFO  L271        PluginConnector]: Initializing BlockEncodingV2...
[2020-11-25 14:16:32,249 INFO  L276        PluginConnector]: BlockEncodingV2 initialized
[2020-11-25 14:16:32,249 INFO  L185        PluginConnector]: Executing the observer BlockEncodingObserver from plugin BlockEncodingV2 for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:16:32" (1/1) ...
[2020-11-25 14:16:32,378 INFO  L313           BlockEncoder]: Initial Icfg 7640 locations, 13678 edges
[2020-11-25 14:16:32,378 INFO  L258           BlockEncoder]: Using Remove infeasible edges
[2020-11-25 14:16:32,379 INFO  L270           BlockEncoder]: Using Minimize states even if more edges are added than removed.=true
[2020-11-25 14:16:32,379 INFO  L296           BlockEncoder]: Using Remove sink states
[2020-11-25 14:16:32,379 INFO  L171           BlockEncoder]: Using Apply optimizations until nothing changes=true
[2020-11-25 14:16:32,396 INFO  L70    emoveInfeasibleEdges]: Removed 288 edges and 23 locations because of local infeasibility
[2020-11-25 14:16:32,414 INFO  L70        RemoveSinkStates]: Removed 200 edges and 133 locations by removing sink states
[2020-11-25 14:16:32,441 INFO  L70    emoveInfeasibleEdges]: Removed 0 edges and 0 locations because of local infeasibility
[2020-11-25 14:16:32,447 INFO  L70        RemoveSinkStates]: Removed 0 edges and 0 locations by removing sink states
[2020-11-25 14:16:32,454 INFO  L237           BlockEncoder]: Using Create parallel compositions if possible
[2020-11-25 14:16:32,454 INFO  L66        ParallelComposer]: Creating parallel compositions
[2020-11-25 14:16:32,460 INFO  L313           BlockEncoder]: Encoded RCFG 7448 locations, 13137 edges
[2020-11-25 14:16:32,460 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:16:32 BasicIcfg
[2020-11-25 14:16:32,461 INFO  L132        PluginConnector]: ------------------------ END BlockEncodingV2----------------------------
[2020-11-25 14:16:32,461 INFO  L113        PluginConnector]: ------------------------BuchiAutomizer----------------------------
[2020-11-25 14:16:32,461 INFO  L271        PluginConnector]: Initializing BuchiAutomizer...
[2020-11-25 14:16:32,463 INFO  L276        PluginConnector]: BuchiAutomizer initialized
[2020-11-25 14:16:32,464 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:16:32,464 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.boogie.parser AST 25.11 02:16:28" (1/6) ...
[2020-11-25 14:16:32,465 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@673a9634 and model type DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:16:32, skipping insertion in model container
[2020-11-25 14:16:32,465 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:16:32,466 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.specLang AST 25.11 02:16:28" (2/6) ...
[2020-11-25 14:16:32,466 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@673a9634 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:16:32, skipping insertion in model container
[2020-11-25 14:16:32,466 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:16:32,466 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.rcfgbuilder CFG 25.11 02:16:29" (3/6) ...
[2020-11-25 14:16:32,466 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@673a9634 and model type DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-normal.bpl de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:16:32, skipping insertion in model container
[2020-11-25 14:16:32,466 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:16:32,466 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "Hardcoded edu.utexas.cs.utopia.ltl2aut AST 25.11 02:16:29" (4/6) ...
[2020-11-25 14:16:32,467 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@673a9634 and model type Hardcoded de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer AST 25.11 02:16:32, skipping insertion in model container
[2020-11-25 14:16:32,467 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:16:32,467 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.buchiprogramproduct OTHER 25.11 02:16:32" (5/6) ...
[2020-11-25 14:16:32,467 INFO  L205        PluginConnector]: Invalid model from BuchiAutomizer for observer de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer.BuchiAutomizerObserver@673a9634 and model type LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer OTHER 25.11 02:16:32, skipping insertion in model container
[2020-11-25 14:16:32,467 INFO  L102         BuchiAutomizer]: Safety of program was proven or not checked, starting termination analysis
[2020-11-25 14:16:32,467 INFO  L185        PluginConnector]: Executing the observer BuchiAutomizerObserver from plugin BuchiAutomizer for "LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.blockencoding CFG 25.11 02:16:32" (6/6) ...
[2020-11-25 14:16:32,468 INFO  L404   chiAutomizerObserver]: Analyzing ICFG DkargoToken_0x5dc60c4d5e75d22588fa17ffeb90a63e535efce0_transferfrom-normal.bpl_BEv2
[2020-11-25 14:16:32,506 INFO  L133   ementStrategyFactory]: Using default assertion order modulation
[2020-11-25 14:16:32,507 INFO  L377         BuchiCegarLoop]: Interprodecural is true
[2020-11-25 14:16:32,507 INFO  L378         BuchiCegarLoop]: Hoare is false
[2020-11-25 14:16:32,507 INFO  L379         BuchiCegarLoop]: Compute interpolants for Craig_TreeInterpolation
[2020-11-25 14:16:32,507 INFO  L380         BuchiCegarLoop]: Backedges is STRAIGHT_LINE
[2020-11-25 14:16:32,507 INFO  L381         BuchiCegarLoop]: Determinization is PREDICATE_ABSTRACTION
[2020-11-25 14:16:32,507 INFO  L382         BuchiCegarLoop]: Difference is false
[2020-11-25 14:16:32,507 INFO  L383         BuchiCegarLoop]: Minimize is MINIMIZE_SEVPA
[2020-11-25 14:16:32,507 INFO  L386         BuchiCegarLoop]: ======== Iteration 0==of CEGAR loop == BuchiCegarLoop========
[2020-11-25 14:16:32,577 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7448 states.
[2020-11-25 14:16:32,643 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:16:32,644 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:16:32,644 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:16:32,651 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:16:32,651 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:16:32,651 INFO  L445         BuchiCegarLoop]: ======== Iteration 1============
[2020-11-25 14:16:32,651 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 7448 states.
[2020-11-25 14:16:32,679 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:16:32,679 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:16:32,679 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:16:32,681 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:16:32,681 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_DkargoToken0 := false;
[L3]                 call_transferFrom_DkargoToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8441]              assume null == 0;
[L8442]  CALL        call this := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L8442]  RET         call this := FreshRefGenerator__success();
[L8443]              assume now >= 0;
[L8444]              assume DType[this] == DkargoToken;
[L8445]              assume msgvalue_MSG == 0;
[L8446]              gas := gas - 53000;
[L8447]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2404]              havoc __exception;
[L2405]              revert := false;
[L2406]  COND FALSE  !(__exception)
[L2439]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5754]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4087]              assume msgsender_MSG != null;
[L4088]              Balance[this] := 0;
[L4089]              _owner_Ownership[this] := null;
[L4091]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4092]              _owner_Ownership[this] := msgsender_MSG;
[L4105]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4106]  COND FALSE  !(revert)
[L5754]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]  COND TRUE   revert
[L2439]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2440]              assume !revert && gas >= 0;
[L8447]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8448]              assume !revert && gas >= 0;

Loop:
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND TRUE   choice == 23
[L8287]              gas := gas - 21000;
[L8288]  COND FALSE  !(gas >= 0)
[L8451]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:16:32,694 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:16:32,694 INFO  L82        PathProgramCache]: Analyzing trace with hash 382664911, now seen corresponding path program 1 times
[2020-11-25 14:16:32,698 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:16:32,727 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:16:32,779 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:16:32,781 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:16:32,782 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 14:16:33,204 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:16:33,213 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:16:33,213 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:16:33,214 INFO  L87              Difference]: Start difference. First operand 7448 states. Second operand 4 states.
[2020-11-25 14:16:33,945 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:16:33,945 INFO  L93              Difference]: Finished difference Result 4742 states and 5540 transitions.
[2020-11-25 14:16:33,946 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 14:16:33,947 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4742 states and 5540 transitions.
[2020-11-25 14:16:33,972 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:16:34,002 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4742 states to 4742 states and 5540 transitions.
[2020-11-25 14:16:34,003 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 4
[2020-11-25 14:16:34,007 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1003
[2020-11-25 14:16:34,007 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4742 states and 5540 transitions.
[2020-11-25 14:16:34,017 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:16:34,017 INFO  L728         BuchiCegarLoop]: Abstraction has 4742 states and 5540 transitions.
[2020-11-25 14:16:34,034 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4742 states and 5540 transitions.
[2020-11-25 14:16:34,095 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4742 to 4742.
[2020-11-25 14:16:34,096 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4742 states.
[2020-11-25 14:16:34,102 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4742 states to 4742 states and 5540 transitions.
[2020-11-25 14:16:34,103 INFO  L751         BuchiCegarLoop]: Abstraction has 4742 states and 5540 transitions.
[2020-11-25 14:16:34,103 INFO  L631         BuchiCegarLoop]: Abstraction has 4742 states and 5540 transitions.
[2020-11-25 14:16:34,103 INFO  L445         BuchiCegarLoop]: ======== Iteration 2============
[2020-11-25 14:16:34,103 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4742 states and 5540 transitions.
[2020-11-25 14:16:34,113 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:16:34,113 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:16:34,113 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:16:34,116 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:16:34,116 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_DkargoToken0 := false;
[L3]                 call_transferFrom_DkargoToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8441]              assume null == 0;
[L8442]  CALL        call this := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L8442]  RET         call this := FreshRefGenerator__success();
[L8443]              assume now >= 0;
[L8444]              assume DType[this] == DkargoToken;
[L8445]              assume msgvalue_MSG == 0;
[L8446]              gas := gas - 53000;
[L8447]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2404]              havoc __exception;
[L2405]              revert := false;
[L2406]  COND FALSE  !(__exception)
[L2439]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5754]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4087]              assume msgsender_MSG != null;
[L4088]              Balance[this] := 0;
[L4089]              _owner_Ownership[this] := null;
[L4091]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4092]              _owner_Ownership[this] := msgsender_MSG;
[L4105]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4106]  COND FALSE  !(revert)
[L5754]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]  COND TRUE   revert
[L2439]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2440]              assume !revert && gas >= 0;
[L8447]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8448]              assume !revert && gas >= 0;
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND FALSE  !(choice == 12)
[L8359]  COND FALSE  !(choice == 11)
[L8366]  COND TRUE   choice == 10
[L8367]              gas := gas - 21000;
[L8368]  COND TRUE   gas >= 0
[L8369]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8370]              assume msgvalue_MSG == 0;
[L8371]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s1311 && p1 != to_s1311) && (p2 != from_s1311 || p3 != msgsender_MSG)) && from_s1311 != to_s1311) && value_s1311 <= _balances_ERC20[this][from_s1311]) && value_s1311 <= _allowances_ERC20[this][from_s1311][msgsender_MSG]) && _balances_ERC20[this][to_s1311] + value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_DkargoToken0 := true;
[L3]                 call_transferFrom_DkargoToken0 := false;
[L3]                 revert := revert_hold;
[L2645]              havoc __exception;
[L2646]              revert := false;
[L2647]  COND FALSE  !(__exception)
[L2680]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6043]  COND TRUE   DType[this] == DkargoToken
[L6044]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5070]  COND TRUE   DType[this] == DkargoToken
[L5071]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5227]              __var_20 := null;
[L5228]  COND TRUE   !(sender_s956 != null)
[L5229]              revert := true;
[L5071]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5072]  COND TRUE   revert
[L6044]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6045]  COND TRUE   revert
[L2680]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2681]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((__ret_0_ == true && _balances_ERC20[this][from_s1311] == old(_balances_ERC20[this][from_s1311]) - value_s1311) && _balances_ERC20[this][to_s1311] == old(_balances_ERC20[this][to_s1311]) + value_s1311) && _allowances_ERC20[this][from_s1311][msgsender_MSG] == old(_allowances_ERC20[this][from_s1311][msgsender_MSG]) - value_s1311) && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowances_ERC20[this][p2][p3] == old(_allowances_ERC20[this][p2][p3])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L3]                 revert := revert_hold;
[L8371]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8451]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND FALSE  !(choice == 12)
[L8359]  COND FALSE  !(choice == 11)
[L8366]  COND TRUE   choice == 10
[L8367]              gas := gas - 21000;
[L8368]  COND TRUE   gas >= 0
[L8369]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8370]              assume msgvalue_MSG == 0;
[L8371]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s1311 && p1 != to_s1311) && (p2 != from_s1311 || p3 != msgsender_MSG)) && from_s1311 != to_s1311) && value_s1311 <= _balances_ERC20[this][from_s1311]) && value_s1311 <= _allowances_ERC20[this][from_s1311][msgsender_MSG]) && _balances_ERC20[this][to_s1311] + value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_DkargoToken0 := true;
[L3]                 call_transferFrom_DkargoToken0 := false;
[L3]                 revert := revert_hold;
[L2645]              havoc __exception;
[L2646]              revert := false;
[L2647]  COND FALSE  !(__exception)
[L2680]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6043]  COND TRUE   DType[this] == DkargoToken
[L6044]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5070]  COND TRUE   DType[this] == DkargoToken
[L5071]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5227]              __var_20 := null;
[L5228]  COND TRUE   !(sender_s956 != null)
[L5229]              revert := true;
[L5071]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5072]  COND TRUE   revert
[L6044]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6045]  COND TRUE   revert
[L2680]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2681]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((__ret_0_ == true && _balances_ERC20[this][from_s1311] == old(_balances_ERC20[this][from_s1311]) - value_s1311) && _balances_ERC20[this][to_s1311] == old(_balances_ERC20[this][to_s1311]) + value_s1311) && _allowances_ERC20[this][from_s1311][msgsender_MSG] == old(_allowances_ERC20[this][from_s1311][msgsender_MSG]) - value_s1311) && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowances_ERC20[this][p2][p3] == old(_allowances_ERC20[this][p2][p3])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L3]                 revert := revert_hold;
[L8371]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8451]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:16:34,121 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:16:34,121 INFO  L82        PathProgramCache]: Analyzing trace with hash 1820892767, now seen corresponding path program 1 times
[2020-11-25 14:16:34,122 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:16:34,132 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:16:34,157 INFO  L134       CoverageAnalysis]: Checked inductivity of 0 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 0 trivial. 0 not checked.
[2020-11-25 14:16:34,157 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:16:34,157 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 14:16:34,158 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:16:34,159 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 14:16:34,159 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 14:16:34,159 INFO  L87              Difference]: Start difference. First operand 4742 states and 5540 transitions. cyclomatic complexity: 800 Second operand 3 states.
[2020-11-25 14:16:34,282 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:16:34,283 INFO  L93              Difference]: Finished difference Result 5886 states and 6841 transitions.
[2020-11-25 14:16:34,283 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 14:16:34,283 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5886 states and 6841 transitions.
[2020-11-25 14:16:34,299 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:16:34,322 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5886 states to 5886 states and 6841 transitions.
[2020-11-25 14:16:34,322 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1269
[2020-11-25 14:16:34,323 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1269
[2020-11-25 14:16:34,323 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5886 states and 6841 transitions.
[2020-11-25 14:16:34,329 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:16:34,329 INFO  L728         BuchiCegarLoop]: Abstraction has 5886 states and 6841 transitions.
[2020-11-25 14:16:34,335 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5886 states and 6841 transitions.
[2020-11-25 14:16:34,385 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5886 to 5200.
[2020-11-25 14:16:34,385 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5200 states.
[2020-11-25 14:16:34,391 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5200 states to 5200 states and 5993 transitions.
[2020-11-25 14:16:34,391 INFO  L751         BuchiCegarLoop]: Abstraction has 5200 states and 5993 transitions.
[2020-11-25 14:16:34,391 INFO  L631         BuchiCegarLoop]: Abstraction has 5200 states and 5993 transitions.
[2020-11-25 14:16:34,391 INFO  L445         BuchiCegarLoop]: ======== Iteration 3============
[2020-11-25 14:16:34,391 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5200 states and 5993 transitions.
[2020-11-25 14:16:34,398 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:16:34,398 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:16:34,398 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:16:34,400 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:16:34,400 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_DkargoToken0 := false;
[L3]                 call_transferFrom_DkargoToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8441]              assume null == 0;
[L8442]  CALL        call this := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L8442]  RET         call this := FreshRefGenerator__success();
[L8443]              assume now >= 0;
[L8444]              assume DType[this] == DkargoToken;
[L8445]              assume msgvalue_MSG == 0;
[L8446]              gas := gas - 53000;
[L8447]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2404]              havoc __exception;
[L2405]              revert := false;
[L2406]  COND FALSE  !(__exception)
[L2439]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5754]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4087]              assume msgsender_MSG != null;
[L4088]              Balance[this] := 0;
[L4089]              _owner_Ownership[this] := null;
[L4091]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4092]              _owner_Ownership[this] := msgsender_MSG;
[L4105]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4106]  COND FALSE  !(revert)
[L5754]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]  COND FALSE  !(revert)
[L5758]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5758]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5759]  COND FALSE  !(revert)
[L5762]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4914]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L4914]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]  COND FALSE  !(revert)
[L4918]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4869]              assume msgsender_MSG != null;
[L4870]              Balance[this] := 0;
[L4871]              _supply_ERC20[this] := 0;
[L4872]              _balances_ERC20[this] := zeroRefintArr();
[L4873]              sum__balances1[this] := 0;
[L4874]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4875]              sum__allowances2[this] := 0;
[L4877]              pebs_s747 := supply_s747;
[L4878]  COND TRUE   DType[this] == DkargoToken
[L4879]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5283]              __var_24 := null;
[L5284]  COND TRUE   !(account_s999 != null)
[L5285]              revert := true;
[L4879]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4880]  COND TRUE   revert
[L4918]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4919]  COND TRUE   revert
[L5762]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5763]  COND TRUE   revert
[L2439]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2440]              assume !revert && gas >= 0;
[L8447]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8448]              assume !revert && gas >= 0;
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND FALSE  !(choice == 12)
[L8359]  COND FALSE  !(choice == 11)
[L8366]  COND TRUE   choice == 10
[L8367]              gas := gas - 21000;
[L8368]  COND TRUE   gas >= 0
[L8369]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8370]              assume msgvalue_MSG == 0;
[L8371]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s1311 && p1 != to_s1311) && (p2 != from_s1311 || p3 != msgsender_MSG)) && from_s1311 != to_s1311) && value_s1311 <= _balances_ERC20[this][from_s1311]) && value_s1311 <= _allowances_ERC20[this][from_s1311][msgsender_MSG]) && _balances_ERC20[this][to_s1311] + value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_DkargoToken0 := true;
[L3]                 call_transferFrom_DkargoToken0 := false;
[L3]                 revert := revert_hold;
[L2645]              havoc __exception;
[L2646]              revert := false;
[L2647]  COND FALSE  !(__exception)
[L2680]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6043]  COND TRUE   DType[this] == DkargoToken
[L6044]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5070]  COND TRUE   DType[this] == DkargoToken
[L5071]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5227]              __var_20 := null;
[L5228]  COND TRUE   !(sender_s956 != null)
[L5229]              revert := true;
[L5071]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5072]  COND TRUE   revert
[L6044]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6045]  COND TRUE   revert
[L2680]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2681]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((__ret_0_ == true && _balances_ERC20[this][from_s1311] == old(_balances_ERC20[this][from_s1311]) - value_s1311) && _balances_ERC20[this][to_s1311] == old(_balances_ERC20[this][to_s1311]) + value_s1311) && _allowances_ERC20[this][from_s1311][msgsender_MSG] == old(_allowances_ERC20[this][from_s1311][msgsender_MSG]) - value_s1311) && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowances_ERC20[this][p2][p3] == old(_allowances_ERC20[this][p2][p3])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L3]                 revert := revert_hold;
[L8371]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8451]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND FALSE  !(choice == 12)
[L8359]  COND FALSE  !(choice == 11)
[L8366]  COND TRUE   choice == 10
[L8367]              gas := gas - 21000;
[L8368]  COND TRUE   gas >= 0
[L8369]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8370]              assume msgvalue_MSG == 0;
[L8371]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s1311 && p1 != to_s1311) && (p2 != from_s1311 || p3 != msgsender_MSG)) && from_s1311 != to_s1311) && value_s1311 <= _balances_ERC20[this][from_s1311]) && value_s1311 <= _allowances_ERC20[this][from_s1311][msgsender_MSG]) && _balances_ERC20[this][to_s1311] + value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_DkargoToken0 := true;
[L3]                 call_transferFrom_DkargoToken0 := false;
[L3]                 revert := revert_hold;
[L2645]              havoc __exception;
[L2646]              revert := false;
[L2647]  COND FALSE  !(__exception)
[L2680]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6043]  COND TRUE   DType[this] == DkargoToken
[L6044]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5070]  COND TRUE   DType[this] == DkargoToken
[L5071]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5227]              __var_20 := null;
[L5228]  COND TRUE   !(sender_s956 != null)
[L5229]              revert := true;
[L5071]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5072]  COND TRUE   revert
[L6044]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6045]  COND TRUE   revert
[L2680]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2681]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((__ret_0_ == true && _balances_ERC20[this][from_s1311] == old(_balances_ERC20[this][from_s1311]) - value_s1311) && _balances_ERC20[this][to_s1311] == old(_balances_ERC20[this][to_s1311]) + value_s1311) && _allowances_ERC20[this][from_s1311][msgsender_MSG] == old(_allowances_ERC20[this][from_s1311][msgsender_MSG]) - value_s1311) && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowances_ERC20[this][p2][p3] == old(_allowances_ERC20[this][p2][p3])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L3]                 revert := revert_hold;
[L8371]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8451]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:16:34,404 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:16:34,404 INFO  L82        PathProgramCache]: Analyzing trace with hash 1095468144, now seen corresponding path program 1 times
[2020-11-25 14:16:34,405 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:16:34,413 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:16:34,458 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 14:16:34,458 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:16:34,458 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [8] imperfect sequences [] total 8
[2020-11-25 14:16:34,458 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:16:34,458 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 8 interpolants.
[2020-11-25 14:16:34,459 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=13, Invalid=43, Unknown=0, NotChecked=0, Total=56
[2020-11-25 14:16:34,459 INFO  L87              Difference]: Start difference. First operand 5200 states and 5993 transitions. cyclomatic complexity: 795 Second operand 8 states.
[2020-11-25 14:16:34,556 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:16:34,556 INFO  L93              Difference]: Finished difference Result 5220 states and 6017 transitions.
[2020-11-25 14:16:34,556 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 8 states. 
[2020-11-25 14:16:34,556 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5220 states and 6017 transitions.
[2020-11-25 14:16:34,570 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:16:34,585 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5220 states to 5199 states and 5991 transitions.
[2020-11-25 14:16:34,586 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1079
[2020-11-25 14:16:34,586 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1079
[2020-11-25 14:16:34,586 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5199 states and 5991 transitions.
[2020-11-25 14:16:34,590 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:16:34,590 INFO  L728         BuchiCegarLoop]: Abstraction has 5199 states and 5991 transitions.
[2020-11-25 14:16:34,595 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5199 states and 5991 transitions.
[2020-11-25 14:16:34,637 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5199 to 5199.
[2020-11-25 14:16:34,637 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5199 states.
[2020-11-25 14:16:34,644 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5199 states to 5199 states and 5991 transitions.
[2020-11-25 14:16:34,644 INFO  L751         BuchiCegarLoop]: Abstraction has 5199 states and 5991 transitions.
[2020-11-25 14:16:34,644 INFO  L631         BuchiCegarLoop]: Abstraction has 5199 states and 5991 transitions.
[2020-11-25 14:16:34,644 INFO  L445         BuchiCegarLoop]: ======== Iteration 4============
[2020-11-25 14:16:34,644 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5199 states and 5991 transitions.
[2020-11-25 14:16:34,654 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:16:34,654 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:16:34,654 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:16:34,656 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:16:34,656 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_DkargoToken0 := false;
[L3]                 call_transferFrom_DkargoToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8441]              assume null == 0;
[L8442]  CALL        call this := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L8442]  RET         call this := FreshRefGenerator__success();
[L8443]              assume now >= 0;
[L8444]              assume DType[this] == DkargoToken;
[L8445]              assume msgvalue_MSG == 0;
[L8446]              gas := gas - 53000;
[L8447]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2404]              havoc __exception;
[L2405]              revert := false;
[L2406]  COND FALSE  !(__exception)
[L2439]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5754]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4087]              assume msgsender_MSG != null;
[L4088]              Balance[this] := 0;
[L4089]              _owner_Ownership[this] := null;
[L4091]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4092]              _owner_Ownership[this] := msgsender_MSG;
[L4105]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4106]  COND FALSE  !(revert)
[L5754]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]  COND FALSE  !(revert)
[L5758]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5758]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5759]  COND FALSE  !(revert)
[L5762]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4914]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L4914]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]  COND FALSE  !(revert)
[L4918]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4869]              assume msgsender_MSG != null;
[L4870]              Balance[this] := 0;
[L4871]              _supply_ERC20[this] := 0;
[L4872]              _balances_ERC20[this] := zeroRefintArr();
[L4873]              sum__balances1[this] := 0;
[L4874]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4875]              sum__allowances2[this] := 0;
[L4877]              pebs_s747 := supply_s747;
[L4878]  COND FALSE  !(DType[this] == DkargoToken)
[L4883]  COND TRUE   DType[this] == ERC20Safe
[L4884]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5283]              __var_24 := null;
[L5284]  COND FALSE  !(!(account_s999 != null))
[L5288]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND TRUE   !(c_s130 >= a_s130)
[L4215]              revert := true;
[L5288]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5289]  COND TRUE   revert
[L4884]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4885]  COND TRUE   revert
[L4918]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4919]  COND TRUE   revert
[L5762]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5763]  COND TRUE   revert
[L2439]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2440]              assume !revert && gas >= 0;
[L8447]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8448]              assume !revert && gas >= 0;
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND FALSE  !(choice == 12)
[L8359]  COND FALSE  !(choice == 11)
[L8366]  COND TRUE   choice == 10
[L8367]              gas := gas - 21000;
[L8368]  COND TRUE   gas >= 0
[L8369]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8370]              assume msgvalue_MSG == 0;
[L8371]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s1311 && p1 != to_s1311) && (p2 != from_s1311 || p3 != msgsender_MSG)) && from_s1311 != to_s1311) && value_s1311 <= _balances_ERC20[this][from_s1311]) && value_s1311 <= _allowances_ERC20[this][from_s1311][msgsender_MSG]) && _balances_ERC20[this][to_s1311] + value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_DkargoToken0 := true;
[L3]                 call_transferFrom_DkargoToken0 := false;
[L3]                 revert := revert_hold;
[L2645]              havoc __exception;
[L2646]              revert := false;
[L2647]  COND FALSE  !(__exception)
[L2680]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6043]  COND TRUE   DType[this] == DkargoToken
[L6044]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5070]  COND TRUE   DType[this] == DkargoToken
[L5071]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5227]              __var_20 := null;
[L5228]  COND TRUE   !(sender_s956 != null)
[L5229]              revert := true;
[L5071]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5072]  COND TRUE   revert
[L6044]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6045]  COND TRUE   revert
[L2680]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2681]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((__ret_0_ == true && _balances_ERC20[this][from_s1311] == old(_balances_ERC20[this][from_s1311]) - value_s1311) && _balances_ERC20[this][to_s1311] == old(_balances_ERC20[this][to_s1311]) + value_s1311) && _allowances_ERC20[this][from_s1311][msgsender_MSG] == old(_allowances_ERC20[this][from_s1311][msgsender_MSG]) - value_s1311) && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowances_ERC20[this][p2][p3] == old(_allowances_ERC20[this][p2][p3])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L3]                 revert := revert_hold;
[L8371]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8451]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND FALSE  !(choice == 12)
[L8359]  COND FALSE  !(choice == 11)
[L8366]  COND TRUE   choice == 10
[L8367]              gas := gas - 21000;
[L8368]  COND TRUE   gas >= 0
[L8369]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8370]              assume msgvalue_MSG == 0;
[L8371]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s1311 && p1 != to_s1311) && (p2 != from_s1311 || p3 != msgsender_MSG)) && from_s1311 != to_s1311) && value_s1311 <= _balances_ERC20[this][from_s1311]) && value_s1311 <= _allowances_ERC20[this][from_s1311][msgsender_MSG]) && _balances_ERC20[this][to_s1311] + value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_DkargoToken0 := true;
[L3]                 call_transferFrom_DkargoToken0 := false;
[L3]                 revert := revert_hold;
[L2645]              havoc __exception;
[L2646]              revert := false;
[L2647]  COND FALSE  !(__exception)
[L2680]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6043]  COND TRUE   DType[this] == DkargoToken
[L6044]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5070]  COND TRUE   DType[this] == DkargoToken
[L5071]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5227]              __var_20 := null;
[L5228]  COND TRUE   !(sender_s956 != null)
[L5229]              revert := true;
[L5071]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5072]  COND TRUE   revert
[L6044]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6045]  COND TRUE   revert
[L2680]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2681]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((__ret_0_ == true && _balances_ERC20[this][from_s1311] == old(_balances_ERC20[this][from_s1311]) - value_s1311) && _balances_ERC20[this][to_s1311] == old(_balances_ERC20[this][to_s1311]) + value_s1311) && _allowances_ERC20[this][from_s1311][msgsender_MSG] == old(_allowances_ERC20[this][from_s1311][msgsender_MSG]) - value_s1311) && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowances_ERC20[this][p2][p3] == old(_allowances_ERC20[this][p2][p3])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L3]                 revert := revert_hold;
[L8371]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8451]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:16:34,660 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:16:34,660 INFO  L82        PathProgramCache]: Analyzing trace with hash -518388586, now seen corresponding path program 1 times
[2020-11-25 14:16:34,661 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:16:34,670 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:16:34,737 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 14:16:34,737 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:16:34,738 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [7] imperfect sequences [] total 7
[2020-11-25 14:16:34,738 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:16:34,738 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 7 interpolants.
[2020-11-25 14:16:34,738 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=11, Invalid=31, Unknown=0, NotChecked=0, Total=42
[2020-11-25 14:16:34,738 INFO  L87              Difference]: Start difference. First operand 5199 states and 5991 transitions. cyclomatic complexity: 794 Second operand 7 states.
[2020-11-25 14:16:34,859 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:16:34,859 INFO  L93              Difference]: Finished difference Result 5243 states and 6046 transitions.
[2020-11-25 14:16:34,859 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 7 states. 
[2020-11-25 14:16:34,859 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5243 states and 6046 transitions.
[2020-11-25 14:16:34,869 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:16:34,884 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5243 states to 5185 states and 5969 transitions.
[2020-11-25 14:16:34,884 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1079
[2020-11-25 14:16:34,885 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1079
[2020-11-25 14:16:34,885 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5185 states and 5969 transitions.
[2020-11-25 14:16:34,888 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:16:34,888 INFO  L728         BuchiCegarLoop]: Abstraction has 5185 states and 5969 transitions.
[2020-11-25 14:16:34,892 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5185 states and 5969 transitions.
[2020-11-25 14:16:34,920 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5185 to 5185.
[2020-11-25 14:16:34,921 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 5185 states.
[2020-11-25 14:16:34,926 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 5185 states to 5185 states and 5969 transitions.
[2020-11-25 14:16:34,926 INFO  L751         BuchiCegarLoop]: Abstraction has 5185 states and 5969 transitions.
[2020-11-25 14:16:34,926 INFO  L631         BuchiCegarLoop]: Abstraction has 5185 states and 5969 transitions.
[2020-11-25 14:16:34,926 INFO  L445         BuchiCegarLoop]: ======== Iteration 5============
[2020-11-25 14:16:34,926 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 5185 states and 5969 transitions.
[2020-11-25 14:16:34,931 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:16:34,931 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:16:34,931 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:16:34,933 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:16:34,933 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_DkargoToken0 := false;
[L3]                 call_transferFrom_DkargoToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8441]              assume null == 0;
[L8442]  CALL        call this := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L8442]  RET         call this := FreshRefGenerator__success();
[L8443]              assume now >= 0;
[L8444]              assume DType[this] == DkargoToken;
[L8445]              assume msgvalue_MSG == 0;
[L8446]              gas := gas - 53000;
[L8447]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2404]              havoc __exception;
[L2405]              revert := false;
[L2406]  COND FALSE  !(__exception)
[L2439]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5754]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4087]              assume msgsender_MSG != null;
[L4088]              Balance[this] := 0;
[L4089]              _owner_Ownership[this] := null;
[L4091]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4092]              _owner_Ownership[this] := msgsender_MSG;
[L4105]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4106]  COND FALSE  !(revert)
[L5754]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]  COND FALSE  !(revert)
[L5758]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5758]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5759]  COND FALSE  !(revert)
[L5762]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4914]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L4914]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]  COND FALSE  !(revert)
[L4918]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4869]              assume msgsender_MSG != null;
[L4870]              Balance[this] := 0;
[L4871]              _supply_ERC20[this] := 0;
[L4872]              _balances_ERC20[this] := zeroRefintArr();
[L4873]              sum__balances1[this] := 0;
[L4874]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4875]              sum__allowances2[this] := 0;
[L4877]              pebs_s747 := supply_s747;
[L4878]  COND TRUE   DType[this] == DkargoToken
[L4879]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5283]              __var_24 := null;
[L5284]  COND FALSE  !(!(account_s999 != null))
[L5288]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND TRUE   !(c_s130 >= a_s130)
[L4215]              revert := true;
[L5288]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5289]  COND TRUE   revert
[L4879]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4880]  COND TRUE   revert
[L4918]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4919]  COND TRUE   revert
[L5762]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5763]  COND TRUE   revert
[L2439]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2440]              assume !revert && gas >= 0;
[L8447]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8448]              assume !revert && gas >= 0;
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND FALSE  !(choice == 12)
[L8359]  COND FALSE  !(choice == 11)
[L8366]  COND TRUE   choice == 10
[L8367]              gas := gas - 21000;
[L8368]  COND TRUE   gas >= 0
[L8369]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8370]              assume msgvalue_MSG == 0;
[L8371]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s1311 && p1 != to_s1311) && (p2 != from_s1311 || p3 != msgsender_MSG)) && from_s1311 != to_s1311) && value_s1311 <= _balances_ERC20[this][from_s1311]) && value_s1311 <= _allowances_ERC20[this][from_s1311][msgsender_MSG]) && _balances_ERC20[this][to_s1311] + value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_DkargoToken0 := true;
[L3]                 call_transferFrom_DkargoToken0 := false;
[L3]                 revert := revert_hold;
[L2645]              havoc __exception;
[L2646]              revert := false;
[L2647]  COND FALSE  !(__exception)
[L2680]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6043]  COND TRUE   DType[this] == DkargoToken
[L6044]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5070]  COND TRUE   DType[this] == DkargoToken
[L5071]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5227]              __var_20 := null;
[L5228]  COND TRUE   !(sender_s956 != null)
[L5229]              revert := true;
[L5071]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5072]  COND TRUE   revert
[L6044]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6045]  COND TRUE   revert
[L2680]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2681]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((__ret_0_ == true && _balances_ERC20[this][from_s1311] == old(_balances_ERC20[this][from_s1311]) - value_s1311) && _balances_ERC20[this][to_s1311] == old(_balances_ERC20[this][to_s1311]) + value_s1311) && _allowances_ERC20[this][from_s1311][msgsender_MSG] == old(_allowances_ERC20[this][from_s1311][msgsender_MSG]) - value_s1311) && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowances_ERC20[this][p2][p3] == old(_allowances_ERC20[this][p2][p3])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L3]                 revert := revert_hold;
[L8371]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8451]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND FALSE  !(choice == 12)
[L8359]  COND FALSE  !(choice == 11)
[L8366]  COND TRUE   choice == 10
[L8367]              gas := gas - 21000;
[L8368]  COND TRUE   gas >= 0
[L8369]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8370]              assume msgvalue_MSG == 0;
[L8371]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s1311 && p1 != to_s1311) && (p2 != from_s1311 || p3 != msgsender_MSG)) && from_s1311 != to_s1311) && value_s1311 <= _balances_ERC20[this][from_s1311]) && value_s1311 <= _allowances_ERC20[this][from_s1311][msgsender_MSG]) && _balances_ERC20[this][to_s1311] + value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_DkargoToken0 := true;
[L3]                 call_transferFrom_DkargoToken0 := false;
[L3]                 revert := revert_hold;
[L2645]              havoc __exception;
[L2646]              revert := false;
[L2647]  COND FALSE  !(__exception)
[L2680]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6043]  COND TRUE   DType[this] == DkargoToken
[L6044]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5070]  COND TRUE   DType[this] == DkargoToken
[L5071]  CALL        call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5227]              __var_20 := null;
[L5228]  COND TRUE   !(sender_s956 != null)
[L5229]              revert := true;
[L5071]  RET         call _transfer~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5072]  COND TRUE   revert
[L6044]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L6045]  COND TRUE   revert
[L2680]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2681]              assume !revert && gas >= 0;
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume !((((((((((((__ret_0_ == true && _balances_ERC20[this][from_s1311] == old(_balances_ERC20[this][from_s1311]) - value_s1311) && _balances_ERC20[this][to_s1311] == old(_balances_ERC20[this][to_s1311]) + value_s1311) && _allowances_ERC20[this][from_s1311][msgsender_MSG] == old(_allowances_ERC20[this][from_s1311][msgsender_MSG]) - value_s1311) && _supply_ERC20[this] == old(_supply_ERC20[this])) && _balances_ERC20[this][p1] == old(_balances_ERC20[this][p1])) && _allowances_ERC20[this][p2][p3] == old(_allowances_ERC20[this][p2][p3])) && _name_DkargoToken[this] == old(_name_DkargoToken[this])) && _symbol_DkargoToken[this] == old(_symbol_DkargoToken[this])) && _dkargoPrefix_DkargoPrefix[this] == old(_dkargoPrefix_DkargoPrefix[this])) && _infcs_ERC165[this] == old(_infcs_ERC165[this])) && _slist_AddressChain[this] == old(_slist_AddressChain[this])) && _owner_Ownership[this] == old(_owner_Ownership[this]));
[L3]                 revert := revert_hold;
[L8371]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8451]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:16:34,937 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:16:34,937 INFO  L82        PathProgramCache]: Analyzing trace with hash -2034461414, now seen corresponding path program 1 times
[2020-11-25 14:16:34,938 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:16:34,947 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:16:34,971 INFO  L134       CoverageAnalysis]: Checked inductivity of 10 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 10 trivial. 0 not checked.
[2020-11-25 14:16:34,972 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:16:34,972 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [3] imperfect sequences [] total 3
[2020-11-25 14:16:34,972 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:16:34,972 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 3 interpolants.
[2020-11-25 14:16:34,972 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=3, Invalid=3, Unknown=0, NotChecked=0, Total=6
[2020-11-25 14:16:34,972 INFO  L87              Difference]: Start difference. First operand 5185 states and 5969 transitions. cyclomatic complexity: 786 Second operand 3 states.
[2020-11-25 14:16:35,048 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:16:35,048 INFO  L93              Difference]: Finished difference Result 5871 states and 6635 transitions.
[2020-11-25 14:16:35,048 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 3 states. 
[2020-11-25 14:16:35,048 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 5871 states and 6635 transitions.
[2020-11-25 14:16:35,060 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 4
[2020-11-25 14:16:35,077 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 5871 states to 5508 states and 6197 transitions.
[2020-11-25 14:16:35,077 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1197
[2020-11-25 14:16:35,078 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1259
[2020-11-25 14:16:35,078 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 5508 states and 6197 transitions.
[2020-11-25 14:16:35,082 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:16:35,083 INFO  L728         BuchiCegarLoop]: Abstraction has 5508 states and 6197 transitions.
[2020-11-25 14:16:35,087 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 5508 states and 6197 transitions.
[2020-11-25 14:16:35,117 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 5508 to 4890.
[2020-11-25 14:16:35,117 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4890 states.
[2020-11-25 14:16:35,122 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4890 states to 4890 states and 5417 transitions.
[2020-11-25 14:16:35,122 INFO  L751         BuchiCegarLoop]: Abstraction has 4890 states and 5417 transitions.
[2020-11-25 14:16:35,122 INFO  L631         BuchiCegarLoop]: Abstraction has 4890 states and 5417 transitions.
[2020-11-25 14:16:35,122 INFO  L445         BuchiCegarLoop]: ======== Iteration 6============
[2020-11-25 14:16:35,122 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4890 states and 5417 transitions.
[2020-11-25 14:16:35,127 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:16:35,127 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:16:35,127 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:16:35,129 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:16:35,129 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_DkargoToken0 := false;
[L3]                 call_transferFrom_DkargoToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8441]              assume null == 0;
[L8442]  CALL        call this := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L8442]  RET         call this := FreshRefGenerator__success();
[L8443]              assume now >= 0;
[L8444]              assume DType[this] == DkargoToken;
[L8445]              assume msgvalue_MSG == 0;
[L8446]              gas := gas - 53000;
[L8447]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2404]              havoc __exception;
[L2405]              revert := false;
[L2406]  COND FALSE  !(__exception)
[L2439]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5754]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4087]              assume msgsender_MSG != null;
[L4088]              Balance[this] := 0;
[L4089]              _owner_Ownership[this] := null;
[L4091]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4092]              _owner_Ownership[this] := msgsender_MSG;
[L4105]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4106]  COND FALSE  !(revert)
[L5754]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]  COND FALSE  !(revert)
[L5758]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5758]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5759]  COND FALSE  !(revert)
[L5762]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4914]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L4914]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]  COND FALSE  !(revert)
[L4918]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4869]              assume msgsender_MSG != null;
[L4870]              Balance[this] := 0;
[L4871]              _supply_ERC20[this] := 0;
[L4872]              _balances_ERC20[this] := zeroRefintArr();
[L4873]              sum__balances1[this] := 0;
[L4874]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4875]              sum__allowances2[this] := 0;
[L4877]              pebs_s747 := supply_s747;
[L4878]  COND TRUE   DType[this] == DkargoToken
[L4879]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5283]              __var_24 := null;
[L5284]  COND FALSE  !(!(account_s999 != null))
[L5288]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L5288]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5289]  COND FALSE  !(revert)
[L5292]              _supply_ERC20[this] := __var_25;
[L5293]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L5293]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5294]  COND FALSE  !(revert)
[L5297]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5298]              _balances_ERC20[this][account_s999] := __var_26;
[L5299]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5300]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4879]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4880]  COND FALSE  !(revert)
[L4918]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4919]  COND FALSE  !(revert)
[L5762]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5763]  COND FALSE  !(revert)
[L5766]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5382]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5383]  COND FALSE  !(revert)
[L5386]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]              assume msgsender_MSG != null;
[L5364]              Balance[this] := 0;
[L5386]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5387]  COND FALSE  !(revert)
[L5766]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]  COND FALSE  !(revert)
[L5770]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4341]              assume msgsender_MSG != null;
[L4342]              Balance[this] := 0;
[L4344]  CALL        call __var_3 := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L4344]  RET         call __var_3 := FreshRefGenerator__success();
[L4345]  COND FALSE  !(revert)
[L4348]              _slist_AddressChain[this] := __var_3;
[L4362]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4363]  COND FALSE  !(revert)
[L5770]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5771]  COND FALSE  !(revert)
[L5774]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4675]              assume msgsender_MSG != null;
[L4676]              Balance[this] := 0;
[L4690]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4691]  COND FALSE  !(revert)
[L5774]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5775]  COND FALSE  !(revert)
[L5778]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4675]              assume msgsender_MSG != null;
[L4676]              Balance[this] := 0;
[L4690]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4691]  COND FALSE  !(revert)
[L4760]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4761]  COND FALSE  !(revert)
[L4764]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4724]              assume msgsender_MSG != null;
[L4725]              Balance[this] := 0;
[L4726]              _infcs_ERC165[this] := zerointboolArr();
[L4728]              __var_16 := 33540519;
[L4729]  COND TRUE   DType[this] == DkargoToken
[L4730]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4793]  COND FALSE  !(!(infcid_s644 != -1))
[L4797]              _infcs_ERC165[this][infcid_s644] := true;
[L4730]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4731]  COND FALSE  !(revert)
[L4764]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4765]  COND FALSE  !(revert)
[L5778]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5779]  COND FALSE  !(revert)
[L5782]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4030]              assume msgsender_MSG != null;
[L4031]              Balance[this] := 0;
[L4032]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4046]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4047]  COND FALSE  !(revert)
[L5782]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]  COND FALSE  !(revert)
[L5786]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5676]              assume msgsender_MSG != null;
[L5677]              Balance[this] := 0;
[L5678]              _name_DkargoToken[this] := -1676636045;
[L5679]              _symbol_DkargoToken[this] := -1676636045;
[L5681]  COND TRUE   DType[this] == DkargoToken
[L5682]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4071]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5682]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5683]  COND FALSE  !(revert)
[L5689]              __var_39 := -1804674067;
[L5690]  COND TRUE   DType[this] == DkargoToken
[L5691]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4793]  COND FALSE  !(!(infcid_s644 != -1))
[L4797]              _infcs_ERC165[this][infcid_s644] := true;
[L5691]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5692]  COND FALSE  !(revert)
[L5698]              _name_DkargoToken[this] := name_s1191;
[L5699]              _symbol_DkargoToken[this] := symbol_s1191;
[L5700]  COND TRUE   DType[this] == DkargoToken
[L5701]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4505]              __var_6 := null;
[L4506]  COND FALSE  !(!(node_s455 != null))
[L4510]  COND TRUE   DType[this] == DkargoToken
[L4511]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4447]  COND TRUE   (count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376
[L4448]              __ret_0_ := true;
[L4511]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4512]  COND FALSE  !(revert)
[L4523]  COND FALSE  !(!!__var_7)
[L4527]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4528]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4529]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4535]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L4535]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4536]  COND FALSE  !(revert)
[L4539]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4540]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5701]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5702]  COND FALSE  !(revert)
[L5786]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5787]  COND FALSE  !(revert)
[L2439]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2440]              assume !revert && gas >= 0;
[L8447]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8448]              assume !revert && gas >= 0;
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND FALSE  !(choice == 12)
[L8359]  COND FALSE  !(choice == 11)
[L8366]  COND TRUE   choice == 10
[L8367]              gas := gas - 21000;
[L8368]  COND TRUE   gas >= 0
[L8369]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8370]              assume msgvalue_MSG == 0;
[L8371]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s1311 && p1 != to_s1311) && (p2 != from_s1311 || p3 != msgsender_MSG)) && from_s1311 != to_s1311) && value_s1311 <= _balances_ERC20[this][from_s1311]) && value_s1311 <= _allowances_ERC20[this][from_s1311][msgsender_MSG]) && _balances_ERC20[this][to_s1311] + value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_DkargoToken0 := true;
[L3]                 call_transferFrom_DkargoToken0 := false;
[L3]                 revert := revert_hold;
[L2645]              havoc __exception;
[L2646]              revert := false;
[L2647]  COND TRUE   __exception
[L2648]              __tmp__Balance := Balance;
[L2649]              __tmp__DType := DType;
[L2650]              __tmp__Alloc := Alloc;
[L2651]              __tmp__balance_ADDR := balance_ADDR;
[L2652]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2653]              __tmp__sum := sum;
[L2654]              __tmp__M_int_bool := M_int_bool;
[L2655]              __tmp__sum__infcs0 := sum__infcs0;
[L2656]              __tmp__M_Ref_int := M_Ref_int;
[L2657]              __tmp__sum__balances1 := sum__balances1;
[L2658]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2659]              __tmp__sum__allowances2 := sum__allowances2;
[L2660]              __tmp__Length := Length;
[L2661]              __tmp__now := now;
[L2662]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2663]              __tmp___owner_Ownership := _owner_Ownership;
[L2664]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2665]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2666]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2667]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2668]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2669]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2670]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2671]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2672]              __tmp___supply_ERC20 := _supply_ERC20;
[L2673]              __tmp___balances_ERC20 := _balances_ERC20;
[L2674]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2675]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2676]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2677]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5970]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5971]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5023]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5024]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5195]              __var_20 := null;
[L5196]  COND TRUE   !(sender_s956 != null)
[L5197]              revert := true;
[L5024]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5025]  COND TRUE   revert
[L5971]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5972]  COND TRUE   revert
[L2677]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2678]              assume revert || gas < 0;
[L8371]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8451]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND FALSE  !(choice == 12)
[L8359]  COND FALSE  !(choice == 11)
[L8366]  COND TRUE   choice == 10
[L8367]              gas := gas - 21000;
[L8368]  COND TRUE   gas >= 0
[L8369]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8370]              assume msgvalue_MSG == 0;
[L8371]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s1311 && p1 != to_s1311) && (p2 != from_s1311 || p3 != msgsender_MSG)) && from_s1311 != to_s1311) && value_s1311 <= _balances_ERC20[this][from_s1311]) && value_s1311 <= _allowances_ERC20[this][from_s1311][msgsender_MSG]) && _balances_ERC20[this][to_s1311] + value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_DkargoToken0 := true;
[L3]                 call_transferFrom_DkargoToken0 := false;
[L3]                 revert := revert_hold;
[L2645]              havoc __exception;
[L2646]              revert := false;
[L2647]  COND TRUE   __exception
[L2648]              __tmp__Balance := Balance;
[L2649]              __tmp__DType := DType;
[L2650]              __tmp__Alloc := Alloc;
[L2651]              __tmp__balance_ADDR := balance_ADDR;
[L2652]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2653]              __tmp__sum := sum;
[L2654]              __tmp__M_int_bool := M_int_bool;
[L2655]              __tmp__sum__infcs0 := sum__infcs0;
[L2656]              __tmp__M_Ref_int := M_Ref_int;
[L2657]              __tmp__sum__balances1 := sum__balances1;
[L2658]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2659]              __tmp__sum__allowances2 := sum__allowances2;
[L2660]              __tmp__Length := Length;
[L2661]              __tmp__now := now;
[L2662]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2663]              __tmp___owner_Ownership := _owner_Ownership;
[L2664]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2665]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2666]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2667]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2668]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2669]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2670]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2671]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2672]              __tmp___supply_ERC20 := _supply_ERC20;
[L2673]              __tmp___balances_ERC20 := _balances_ERC20;
[L2674]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2675]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2676]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2677]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5970]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5971]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5023]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5024]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5195]              __var_20 := null;
[L5196]  COND TRUE   !(sender_s956 != null)
[L5197]              revert := true;
[L5024]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5025]  COND TRUE   revert
[L5971]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5972]  COND TRUE   revert
[L2677]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2678]              assume revert || gas < 0;
[L8371]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8451]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:16:35,134 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:16:35,134 INFO  L82        PathProgramCache]: Analyzing trace with hash -2140839836, now seen corresponding path program 1 times
[2020-11-25 14:16:35,135 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:16:35,152 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is unsat
[2020-11-25 14:16:35,218 INFO  L134       CoverageAnalysis]: Checked inductivity of 65 backedges. 0 proven. 0 refuted. 0 times theorem prover too weak. 65 trivial. 0 not checked.
[2020-11-25 14:16:35,218 INFO  L312   seRefinementStrategy]: Constructing automaton from 1 perfect and 0 imperfect interpolant sequences.
[2020-11-25 14:16:35,218 INFO  L327   seRefinementStrategy]: Number of different interpolants: perfect sequences [4] imperfect sequences [] total 4
[2020-11-25 14:16:35,219 INFO  L996   eck$LassoCheckResult]: stem already infeasible
[2020-11-25 14:16:35,219 INFO  L142   InterpolantAutomaton]: Constructing interpolant automaton starting with 4 interpolants.
[2020-11-25 14:16:35,219 INFO  L144   InterpolantAutomaton]: CoverageRelationStatistics Valid=5, Invalid=7, Unknown=0, NotChecked=0, Total=12
[2020-11-25 14:16:35,219 INFO  L87              Difference]: Start difference. First operand 4890 states and 5417 transitions. cyclomatic complexity: 529 Second operand 4 states.
[2020-11-25 14:16:35,242 INFO  L144             Difference]: Subtrahend was deterministic. Have not used determinization.
[2020-11-25 14:16:35,243 INFO  L93              Difference]: Finished difference Result 4904 states and 5445 transitions.
[2020-11-25 14:16:35,243 INFO  L142   InterpolantAutomaton]: Switched to read-only mode: deterministic interpolant automaton has 4 states. 
[2020-11-25 14:16:35,243 INFO  L82        GeneralOperation]: Start removeNonLiveStates. Operand 4904 states and 5445 transitions.
[2020-11-25 14:16:35,252 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:16:35,265 INFO  L88        GeneralOperation]: Finished removeNonLiveStates. Reduced from 4904 states to 4894 states and 5433 transitions.
[2020-11-25 14:16:35,265 INFO  L87         BuchiClosureNwa]: Accepting states before buchiClosure: 1097
[2020-11-25 14:16:35,266 INFO  L106        BuchiClosureNwa]: Accepting states after buchiClosure: 1097
[2020-11-25 14:16:35,266 INFO  L73         IsDeterministic]: Start isDeterministic. Operand 4894 states and 5433 transitions.
[2020-11-25 14:16:35,269 INFO  L80         IsDeterministic]: Finished isDeterministic. Operand is deterministic.
[2020-11-25 14:16:35,269 INFO  L728         BuchiCegarLoop]: Abstraction has 4894 states and 5433 transitions.
[2020-11-25 14:16:35,273 INFO  L82        GeneralOperation]: Start minimizeSevpa. Operand 4894 states and 5433 transitions.
[2020-11-25 14:16:35,311 INFO  L88        GeneralOperation]: Finished minimizeSevpa. Reduced states from 4894 to 4894.
[2020-11-25 14:16:35,311 INFO  L82        GeneralOperation]: Start removeUnreachable. Operand 4894 states.
[2020-11-25 14:16:35,316 INFO  L88        GeneralOperation]: Finished removeUnreachable. Reduced from 4894 states to 4894 states and 5433 transitions.
[2020-11-25 14:16:35,316 INFO  L751         BuchiCegarLoop]: Abstraction has 4894 states and 5433 transitions.
[2020-11-25 14:16:35,316 INFO  L631         BuchiCegarLoop]: Abstraction has 4894 states and 5433 transitions.
[2020-11-25 14:16:35,316 INFO  L445         BuchiCegarLoop]: ======== Iteration 7============
[2020-11-25 14:16:35,316 INFO  L72            BuchiIsEmpty]: Start buchiIsEmpty. Operand 4894 states and 5433 transitions.
[2020-11-25 14:16:35,321 INFO  L131   ngComponentsAnalysis]: Automaton has 1 accepting balls. 2
[2020-11-25 14:16:35,321 INFO  L87            BuchiIsEmpty]: Finished buchiIsEmpty Result is false
[2020-11-25 14:16:35,321 INFO  L119           BuchiIsEmpty]: Starting construction of run
[2020-11-25 14:16:35,322 INFO  L889         BuchiCegarLoop]: Counterexample stem histogram [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
[2020-11-25 14:16:35,322 INFO  L890         BuchiCegarLoop]: Counterexample loop histogram [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
Stem:
[L3]                 success_transferFrom_DkargoToken0 := false;
[L3]                 call_transferFrom_DkargoToken0 := false;
[L3]     CALL        call main();
[L3]                 havoc p3;
[L3]                 havoc p2;
[L3]                 havoc p1;
[L8441]              assume null == 0;
[L8442]  CALL        call this := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L8442]  RET         call this := FreshRefGenerator__success();
[L8443]              assume now >= 0;
[L8444]              assume DType[this] == DkargoToken;
[L8445]              assume msgvalue_MSG == 0;
[L8446]              gas := gas - 53000;
[L8447]  CALL        call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2404]              havoc __exception;
[L2405]              revert := false;
[L2406]  COND FALSE  !(__exception)
[L2439]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5754]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4087]              assume msgsender_MSG != null;
[L4088]              Balance[this] := 0;
[L4089]              _owner_Ownership[this] := null;
[L4091]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4092]              _owner_Ownership[this] := msgsender_MSG;
[L4105]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4106]  COND FALSE  !(revert)
[L5754]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]  COND FALSE  !(revert)
[L5758]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5758]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5759]  COND FALSE  !(revert)
[L5762]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4914]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L4914]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]  COND FALSE  !(revert)
[L4918]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4869]              assume msgsender_MSG != null;
[L4870]              Balance[this] := 0;
[L4871]              _supply_ERC20[this] := 0;
[L4872]              _balances_ERC20[this] := zeroRefintArr();
[L4873]              sum__balances1[this] := 0;
[L4874]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4875]              sum__allowances2[this] := 0;
[L4877]              pebs_s747 := supply_s747;
[L4878]  COND TRUE   DType[this] == DkargoToken
[L4879]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5283]              __var_24 := null;
[L5284]  COND FALSE  !(!(account_s999 != null))
[L5288]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L5288]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5289]  COND FALSE  !(revert)
[L5292]              _supply_ERC20[this] := __var_25;
[L5293]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L5293]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5294]  COND FALSE  !(revert)
[L5297]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5298]              _balances_ERC20[this][account_s999] := __var_26;
[L5299]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5300]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4879]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4880]  COND FALSE  !(revert)
[L4918]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4919]  COND FALSE  !(revert)
[L5762]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5763]  COND FALSE  !(revert)
[L5766]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5382]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5383]  COND FALSE  !(revert)
[L5386]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]              assume msgsender_MSG != null;
[L5364]              Balance[this] := 0;
[L5386]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5387]  COND FALSE  !(revert)
[L5766]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]  COND FALSE  !(revert)
[L5770]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4341]              assume msgsender_MSG != null;
[L4342]              Balance[this] := 0;
[L4344]  CALL        call __var_3 := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L4344]  RET         call __var_3 := FreshRefGenerator__success();
[L4345]  COND FALSE  !(revert)
[L4348]              _slist_AddressChain[this] := __var_3;
[L4362]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4363]  COND FALSE  !(revert)
[L5770]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5771]  COND FALSE  !(revert)
[L5774]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4675]              assume msgsender_MSG != null;
[L4676]              Balance[this] := 0;
[L4690]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4691]  COND FALSE  !(revert)
[L5774]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5775]  COND FALSE  !(revert)
[L5778]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4675]              assume msgsender_MSG != null;
[L4676]              Balance[this] := 0;
[L4690]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4691]  COND FALSE  !(revert)
[L4760]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4761]  COND FALSE  !(revert)
[L4764]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4724]              assume msgsender_MSG != null;
[L4725]              Balance[this] := 0;
[L4726]              _infcs_ERC165[this] := zerointboolArr();
[L4728]              __var_16 := 33540519;
[L4729]  COND TRUE   DType[this] == DkargoToken
[L4730]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4793]  COND FALSE  !(!(infcid_s644 != -1))
[L4797]              _infcs_ERC165[this][infcid_s644] := true;
[L4730]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4731]  COND FALSE  !(revert)
[L4764]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4765]  COND FALSE  !(revert)
[L5778]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5779]  COND FALSE  !(revert)
[L5782]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4030]              assume msgsender_MSG != null;
[L4031]              Balance[this] := 0;
[L4032]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4046]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4047]  COND FALSE  !(revert)
[L5782]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]  COND FALSE  !(revert)
[L5786]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5676]              assume msgsender_MSG != null;
[L5677]              Balance[this] := 0;
[L5678]              _name_DkargoToken[this] := -1676636045;
[L5679]              _symbol_DkargoToken[this] := -1676636045;
[L5681]  COND TRUE   DType[this] == DkargoToken
[L5682]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4071]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5682]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5683]  COND FALSE  !(revert)
[L5689]              __var_39 := -1804674067;
[L5690]  COND TRUE   DType[this] == DkargoToken
[L5691]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4793]  COND FALSE  !(!(infcid_s644 != -1))
[L4797]              _infcs_ERC165[this][infcid_s644] := true;
[L5691]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5692]  COND FALSE  !(revert)
[L5698]              _name_DkargoToken[this] := name_s1191;
[L5699]              _symbol_DkargoToken[this] := symbol_s1191;
[L5700]  COND TRUE   DType[this] == DkargoToken
[L5701]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4505]              __var_6 := null;
[L4506]  COND FALSE  !(!(node_s455 != null))
[L4510]  COND TRUE   DType[this] == DkargoToken
[L4511]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4447]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4451]              __var_4 := null;
[L4452]              __var_5 := null;
[L4453]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4511]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4512]  COND FALSE  !(revert)
[L4523]  COND FALSE  !(!!__var_7)
[L4527]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4528]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4529]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4535]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L4535]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4536]  COND FALSE  !(revert)
[L4539]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4540]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5701]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5702]  COND FALSE  !(revert)
[L5786]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5787]  COND FALSE  !(revert)
[L2439]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2440]              assume !revert && gas >= 0;
[L8447]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L8448]              assume !revert && gas >= 0;
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND FALSE  !(choice == 12)
[L8359]  COND FALSE  !(choice == 11)
[L8366]  COND TRUE   choice == 10
[L8367]              gas := gas - 21000;
[L8368]  COND TRUE   gas >= 0
[L8369]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8370]              assume msgvalue_MSG == 0;
[L8371]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s1311 && p1 != to_s1311) && (p2 != from_s1311 || p3 != msgsender_MSG)) && from_s1311 != to_s1311) && value_s1311 <= _balances_ERC20[this][from_s1311]) && value_s1311 <= _allowances_ERC20[this][from_s1311][msgsender_MSG]) && _balances_ERC20[this][to_s1311] + value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_DkargoToken0 := true;
[L3]                 call_transferFrom_DkargoToken0 := false;
[L3]                 revert := revert_hold;
[L2645]              havoc __exception;
[L2646]              revert := false;
[L2647]  COND TRUE   __exception
[L2648]              __tmp__Balance := Balance;
[L2649]              __tmp__DType := DType;
[L2650]              __tmp__Alloc := Alloc;
[L2651]              __tmp__balance_ADDR := balance_ADDR;
[L2652]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2653]              __tmp__sum := sum;
[L2654]              __tmp__M_int_bool := M_int_bool;
[L2655]              __tmp__sum__infcs0 := sum__infcs0;
[L2656]              __tmp__M_Ref_int := M_Ref_int;
[L2657]              __tmp__sum__balances1 := sum__balances1;
[L2658]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2659]              __tmp__sum__allowances2 := sum__allowances2;
[L2660]              __tmp__Length := Length;
[L2661]              __tmp__now := now;
[L2662]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2663]              __tmp___owner_Ownership := _owner_Ownership;
[L2664]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2665]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2666]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2667]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2668]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2669]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2670]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2671]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2672]              __tmp___supply_ERC20 := _supply_ERC20;
[L2673]              __tmp___balances_ERC20 := _balances_ERC20;
[L2674]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2675]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2676]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2677]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5970]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5971]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5023]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5024]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5195]              __var_20 := null;
[L5196]  COND TRUE   !(sender_s956 != null)
[L5197]              revert := true;
[L5024]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5025]  COND TRUE   revert
[L5971]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5972]  COND TRUE   revert
[L2677]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2678]              assume revert || gas < 0;
[L8371]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8451]  RET         call CorralChoice_DkargoToken(this);

Loop:
[L8451]  CALL        call CorralChoice_DkargoToken(this);
[L8221]              havoc msgsender_MSG;
[L8222]              havoc msgvalue_MSG;
[L8223]              havoc choice;
[L8224]              havoc __ret_0_getDkargoPrefix;
[L8225]              havoc expected_s84;
[L8226]              havoc __ret_0_owner;
[L8227]              havoc __ret_0_isOwner;
[L8228]              havoc __ret_0_count;
[L8229]              havoc __ret_0_head;
[L8230]              havoc __ret_0_tail;
[L8231]              havoc node_s309;
[L8232]              havoc __ret_0_nextOf;
[L8233]              havoc node_s323;
[L8234]              havoc __ret_0_prevOf;
[L8235]              havoc node_s376;
[L8236]              havoc __ret_0_isLinked;
[L8237]              havoc infcid_s625;
[L8238]              havoc __ret_0_supportsInterface;
[L8239]              havoc to_s1257;
[L8240]              havoc value_s1257;
[L8241]              havoc __ret_0_transfer;
[L8242]              havoc spender_s1084;
[L8243]              havoc amount_s1084;
[L8244]              havoc __ret_0_approve;
[L8245]              havoc from_s1311;
[L8246]              havoc to_s1311;
[L8247]              havoc value_s1311;
[L8248]              havoc __ret_0_transferFrom;
[L8249]              havoc __ret_0_totalSupply;
[L8250]              havoc account_s841;
[L8251]              havoc __ret_0_balanceOf;
[L8252]              havoc approver_s857;
[L8253]              havoc spender_s857;
[L8254]              havoc __ret_0_allowance;
[L8255]              havoc spender_s1111;
[L8256]              havoc addedValue_s1111;
[L8257]              havoc __ret_0_increaseAllowance;
[L8258]              havoc spender_s1139;
[L8259]              havoc subtractedValue_s1139;
[L8260]              havoc __ret_0_decreaseAllowance;
[L8261]              havoc name_s1191;
[L8262]              havoc symbol_s1191;
[L8263]              havoc supply_s1191;
[L8264]              havoc amount_s1203;
[L8265]              havoc __ret_0_name;
[L8266]              havoc __ret_0_symbol;
[L8267]              havoc __ret_0_decimals;
[L8268]              havoc tmpNow;
[L8269]              havoc gas;
[L8270]              assume gas > 4000000 && gas <= 8000000;
[L8271]              tmpNow := now;
[L8272]              havoc now;
[L8273]              assume now > tmpNow;
[L8274]              assume msgsender_MSG != null;
[L8275]              assume DType[msgsender_MSG] != DkargoPrefix;
[L8276]              assume DType[msgsender_MSG] != Ownership;
[L8277]              assume DType[msgsender_MSG] != SafeMath;
[L8278]              assume DType[msgsender_MSG] != AddressChain;
[L8279]              assume DType[msgsender_MSG] != IERC165;
[L8280]              assume DType[msgsender_MSG] != ERC165;
[L8281]              assume DType[msgsender_MSG] != IERC20;
[L8282]              assume DType[msgsender_MSG] != ERC20;
[L8283]              assume DType[msgsender_MSG] != ERC20Safe;
[L8284]              assume DType[msgsender_MSG] != DkargoToken;
[L8285]              Alloc[msgsender_MSG] := true;
[L8286]  COND FALSE  !(choice == 23)
[L8292]  COND FALSE  !(choice == 22)
[L8298]  COND FALSE  !(choice == 21)
[L8304]  COND FALSE  !(choice == 20)
[L8310]  COND FALSE  !(choice == 19)
[L8316]  COND FALSE  !(choice == 18)
[L8322]  COND FALSE  !(choice == 17)
[L8328]  COND FALSE  !(choice == 16)
[L8334]  COND FALSE  !(choice == 15)
[L8340]  COND FALSE  !(choice == 14)
[L8346]  COND FALSE  !(choice == 13)
[L8352]  COND FALSE  !(choice == 12)
[L8359]  COND FALSE  !(choice == 11)
[L8366]  COND TRUE   choice == 10
[L8367]              gas := gas - 21000;
[L8368]  COND TRUE   gas >= 0
[L8369]              assume value_s1311 >= 0 && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L8370]              assume msgvalue_MSG == 0;
[L8371]  CALL        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L3]                 revert_hold := revert;
[L3]                 revert := false;
[L3]                 assume (((((((((((((p1 != from_s1311 && p1 != to_s1311) && (p2 != from_s1311 || p3 != msgsender_MSG)) && from_s1311 != to_s1311) && value_s1311 <= _balances_ERC20[this][from_s1311]) && value_s1311 <= _allowances_ERC20[this][from_s1311][msgsender_MSG]) && _balances_ERC20[this][to_s1311] + value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                 call_transferFrom_DkargoToken0 := true;
[L3]                 call_transferFrom_DkargoToken0 := false;
[L3]                 revert := revert_hold;
[L2645]              havoc __exception;
[L2646]              revert := false;
[L2647]  COND TRUE   __exception
[L2648]              __tmp__Balance := Balance;
[L2649]              __tmp__DType := DType;
[L2650]              __tmp__Alloc := Alloc;
[L2651]              __tmp__balance_ADDR := balance_ADDR;
[L2652]              __tmp__M_Ref_Ref := M_Ref_Ref;
[L2653]              __tmp__sum := sum;
[L2654]              __tmp__M_int_bool := M_int_bool;
[L2655]              __tmp__sum__infcs0 := sum__infcs0;
[L2656]              __tmp__M_Ref_int := M_Ref_int;
[L2657]              __tmp__sum__balances1 := sum__balances1;
[L2658]              __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2659]              __tmp__sum__allowances2 := sum__allowances2;
[L2660]              __tmp__Length := Length;
[L2661]              __tmp__now := now;
[L2662]              __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2663]              __tmp___owner_Ownership := _owner_Ownership;
[L2664]              __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2665]              __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2666]              __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2667]              __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2668]              __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2669]              __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2670]              __tmp___slist_AddressChain := _slist_AddressChain;
[L2671]              __tmp___infcs_ERC165 := _infcs_ERC165;
[L2672]              __tmp___supply_ERC20 := _supply_ERC20;
[L2673]              __tmp___balances_ERC20 := _balances_ERC20;
[L2674]              __tmp___allowances_ERC20 := _allowances_ERC20;
[L2675]              __tmp___name_DkargoToken := _name_DkargoToken;
[L2676]              __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2677]  CALL        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5970]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5971]  CALL        call ret_s1311 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5023]  COND TRUE   __tmp__DType[this] == DkargoToken
[L5024]  CALL        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5195]              __var_20 := null;
[L5196]  COND TRUE   !(sender_s956 != null)
[L5197]              revert := true;
[L5024]  RET         call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5025]  COND TRUE   revert
[L5971]  RET         call ret_s1311 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5972]  COND TRUE   revert
[L2677]  RET         call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2678]              assume revert || gas < 0;
[L8371]  RET         call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L8451]  RET         call CorralChoice_DkargoToken(this);

[2020-11-25 14:16:35,327 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:16:35,327 INFO  L82        PathProgramCache]: Analyzing trace with hash 437633202, now seen corresponding path program 1 times
[2020-11-25 14:16:35,328 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:16:35,355 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:16:35,383 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:16:35,478 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:16:35,478 INFO  L82        PathProgramCache]: Analyzing trace with hash -1385065579, now seen corresponding path program 1 times
[2020-11-25 14:16:35,479 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:16:35,485 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:16:35,491 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:16:35,505 INFO  L144       PredicateUnifier]: Initialized classic predicate unifier
[2020-11-25 14:16:35,505 INFO  L82        PathProgramCache]: Analyzing trace with hash -505685754, now seen corresponding path program 1 times
[2020-11-25 14:16:35,506 INFO  L69    tionRefinementEngine]: Using refinement strategy FixedRefinementStrategy
[2020-11-25 14:16:35,532 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:16:35,564 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 139 to 277
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #5: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #4: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 619 to 1237
[2020-11-25 14:16:36,036 WARN  L188               SmtUtils]: Spent 248.00 ms on a formula simplification. DAG size of input: 216 DAG size of output: 209
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2503 to 5003
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 3517 to 7027
Garbage collection #8: 7027 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 7027 to 14051
[2020-11-25 14:16:36,291 WARN  L188               SmtUtils]: Spent 220.00 ms on a formula simplification. DAG size of input: 147 DAG size of output: 141
[2020-11-25 14:16:36,516 WARN  L188               SmtUtils]: Spent 223.00 ms on a formula simplification that was a NOOP. DAG size: 361
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.001s / 0.002s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.001s / 0.003s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.002s / 0.005s total
Resizing node table from 9181 to 18353
[2020-11-25 14:16:37,716 WARN  L188               SmtUtils]: Spent 1.17 s on a formula simplification. DAG size of input: 297 DAG size of output: 297
[2020-11-25 14:16:39,177 WARN  L188               SmtUtils]: Spent 1.46 s on a formula simplification. DAG size of input: 394 DAG size of output: 351
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
Garbage collection #8: 16103 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 16103 to 32203
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #8: 9973 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9973 to 19937
[2020-11-25 14:16:39,625 WARN  L188               SmtUtils]: Spent 413.00 ms on a formula simplification. DAG size of input: 224 DAG size of output: 213
[2020-11-25 14:16:40,157 WARN  L188               SmtUtils]: Spent 529.00 ms on a formula simplification that was a NOOP. DAG size: 436
Garbage collection #1: 179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 179 to 353
Garbage collection #2: 353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 353 to 701
Garbage collection #3: 701 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 701 to 1399
Garbage collection #4: 1399 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1399 to 2797
Garbage collection #5: 2797 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2797 to 5591
Garbage collection #6: 5591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5591 to 11177
Garbage collection #7: 11177 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11177 to 22349
[2020-11-25 14:16:41,053 WARN  L188               SmtUtils]: Spent 871.00 ms on a formula simplification. DAG size of input: 351 DAG size of output: 344
[2020-11-25 14:16:41,504 WARN  L188               SmtUtils]: Spent 448.00 ms on a formula simplification that was a NOOP. DAG size: 344
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
Garbage collection #8: 16103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 16103 to 32203
Garbage collection #1: 97 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 97 to 193
Garbage collection #2: 193 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 193 to 383
Garbage collection #3: 383 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 383 to 761
Garbage collection #4: 761 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 761 to 1511
Garbage collection #5: 1511 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1511 to 3019
Garbage collection #6: 3019 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3019 to 6037
Garbage collection #7: 6037 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6037 to 12073
[2020-11-25 14:16:42,009 WARN  L188               SmtUtils]: Spent 475.00 ms on a formula simplification. DAG size of input: 262 DAG size of output: 231
[2020-11-25 14:16:42,021 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 7 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7 to 13
Garbage collection #2: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #5: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #1: 11 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 11 to 19
Garbage collection #2: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #3: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #1: 17 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 17 to 31
Garbage collection #2: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #3: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #4: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 47 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 47 to 89
Garbage collection #2: 89 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 89 to 173
Garbage collection #3: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #4: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #5: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #1: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #2: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #3: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #4: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #5: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
[2020-11-25 14:16:43,114 WARN  L188               SmtUtils]: Spent 399.00 ms on a formula simplification. DAG size of input: 317 DAG size of output: 292
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #1: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #2: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #3: 277 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 277 to 547
Garbage collection #4: 547 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 547 to 1093
Garbage collection #5: 1093 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1093 to 2179
Garbage collection #6: 2179 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2179 to 4357
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
[2020-11-25 14:16:43,412 WARN  L188               SmtUtils]: Spent 117.00 ms on a formula simplification. DAG size of input: 185 DAG size of output: 184
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #1: 31 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 31 to 61
Garbage collection #2: 61 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 61 to 113
Garbage collection #3: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #4: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #5: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
[2020-11-25 14:16:43,630 WARN  L188               SmtUtils]: Spent 186.00 ms on a formula simplification that was a NOOP. DAG size: 366
Garbage collection #1: 137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 137 to 271
Garbage collection #2: 271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 271 to 541
Garbage collection #3: 541 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 541 to 1069
Garbage collection #4: 1069 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1069 to 2137
Garbage collection #5: 2137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2137 to 4273
Garbage collection #6: 4273 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4273 to 8543
Garbage collection #7: 8543 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8543 to 17077
Garbage collection #1: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #2: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #3: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #4: 883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 883 to 1759
Garbage collection #5: 1759 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1759 to 3517
Garbage collection #6: 3517 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3517 to 7027
[2020-11-25 14:16:43,783 WARN  L188               SmtUtils]: Spent 149.00 ms on a formula simplification that was a NOOP. DAG size: 328
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 19 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 19 to 37
Garbage collection #2: 37 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 37 to 73
Garbage collection #3: 73 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 73 to 139
Garbage collection #4: 139 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 139 to 277
Garbage collection #1: 29 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 29 to 53
Garbage collection #2: 53 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 53 to 103
Garbage collection #3: 103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 103 to 199
Garbage collection #4: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #1: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #2: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #3: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #4: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #5: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #1: 13 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13 to 23
Garbage collection #2: 23 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 23 to 43
Garbage collection #3: 43 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 43 to 83
Garbage collection #4: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #1: 41 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 41 to 79
Garbage collection #2: 79 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 79 to 157
Garbage collection #3: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #4: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #5: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
[2020-11-25 14:16:43,946 WARN  L188               SmtUtils]: Spent 100.00 ms on a formula simplification. DAG size of input: 216 DAG size of output: 209
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #1: 59 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 59 to 113
Garbage collection #2: 113 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 113 to 223
Garbage collection #3: 223 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 223 to 443
Garbage collection #4: 443 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 443 to 883
Garbage collection #5: 883 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 883 to 1759
Garbage collection #6: 1759 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 1759 to 3517
Garbage collection #7: 3517 nodes / 0 free / 0.0s / 0.001s total
Resizing node table from 3517 to 7027
[2020-11-25 14:16:44,085 WARN  L188               SmtUtils]: Spent 127.00 ms on a formula simplification. DAG size of input: 147 DAG size of output: 141
[2020-11-25 14:16:44,313 WARN  L188               SmtUtils]: Spent 226.00 ms on a formula simplification that was a NOOP. DAG size: 361
Garbage collection #1: 149 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 149 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
[2020-11-25 14:16:45,285 WARN  L188               SmtUtils]: Spent 928.00 ms on a formula simplification. DAG size of input: 297 DAG size of output: 297
[2020-11-25 14:16:46,508 WARN  L188               SmtUtils]: Spent 1.22 s on a formula simplification. DAG size of input: 393 DAG size of output: 351
Garbage collection #1: 131 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 131 to 257
Garbage collection #2: 257 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 257 to 509
Garbage collection #3: 509 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 509 to 1013
Garbage collection #4: 1013 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1013 to 2017
Garbage collection #5: 2017 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2017 to 4027
Garbage collection #6: 4027 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4027 to 8053
Garbage collection #7: 8053 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 8053 to 16103
Garbage collection #8: 16103 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 16103 to 32203
Garbage collection #9: 32203 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 32203 to 64403
Garbage collection #1: 83 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 83 to 163
Garbage collection #2: 163 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 163 to 317
Garbage collection #3: 317 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 317 to 631
Garbage collection #4: 631 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 631 to 1259
Garbage collection #5: 1259 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1259 to 2503
Garbage collection #6: 2503 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2503 to 5003
Garbage collection #7: 5003 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5003 to 9973
Garbage collection #8: 9973 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9973 to 19937
[2020-11-25 14:16:46,852 WARN  L188               SmtUtils]: Spent 317.00 ms on a formula simplification. DAG size of input: 216 DAG size of output: 210
[2020-11-25 14:16:47,234 WARN  L188               SmtUtils]: Spent 380.00 ms on a formula simplification that was a NOOP. DAG size: 433
Garbage collection #1: 173 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 173 to 337
Garbage collection #2: 337 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 337 to 673
Garbage collection #3: 673 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 673 to 1327
Garbage collection #4: 1327 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1327 to 2647
Garbage collection #5: 2647 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2647 to 5281
Garbage collection #6: 5281 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 5281 to 10559
Garbage collection #7: 10559 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 10559 to 21107
Garbage collection #8: 21107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 21107 to 42209
[2020-11-25 14:16:47,988 WARN  L188               SmtUtils]: Spent 735.00 ms on a formula simplification. DAG size of input: 342 DAG size of output: 342
[2020-11-25 14:16:50,203 WARN  L188               SmtUtils]: Spent 2.21 s on a formula simplification. DAG size of input: 632 DAG size of output: 616
Garbage collection #1: 241 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 241 to 479
Garbage collection #2: 479 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 479 to 953
Garbage collection #3: 953 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 953 to 1901
Garbage collection #4: 1901 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1901 to 3797
Garbage collection #5: 3797 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3797 to 7591
Garbage collection #6: 7591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 7591 to 15173
Garbage collection #7: 15173 nodes / 0 free / 0.001s / 0.001s total
Resizing node table from 15173 to 30341
Garbage collection #1: 101 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 101 to 199
Garbage collection #2: 199 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 199 to 397
Garbage collection #3: 397 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 397 to 787
Garbage collection #4: 787 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 787 to 1571
Garbage collection #5: 1571 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1571 to 3137
Garbage collection #6: 3137 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3137 to 6271
Garbage collection #7: 6271 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6271 to 12541
[2020-11-25 14:16:51,262 WARN  L188               SmtUtils]: Spent 1.03 s on a formula simplification. DAG size of input: 308 DAG size of output: 287
[2020-11-25 14:16:51,691 WARN  L188               SmtUtils]: Spent 398.00 ms on a formula simplification that was a NOOP. DAG size: 435
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9883 to 19763
Garbage collection #1: 107 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 107 to 211
Garbage collection #2: 211 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 211 to 421
Garbage collection #3: 421 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 421 to 839
Garbage collection #4: 839 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 839 to 1669
Garbage collection #5: 1669 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1669 to 3331
Garbage collection #6: 3331 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 3331 to 6661
Garbage collection #7: 6661 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 6661 to 13313
Garbage collection #8: 13313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 13313 to 26597
Garbage collection #9: 26597 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 26597 to 53189
[2020-11-25 14:16:52,755 WARN  L188               SmtUtils]: Spent 981.00 ms on a formula simplification. DAG size of input: 302 DAG size of output: 287
[2020-11-25 14:16:53,601 WARN  L188               SmtUtils]: Spent 844.00 ms on a formula simplification. DAG size of input: 437 DAG size of output: 436
Garbage collection #1: 157 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 157 to 313
Garbage collection #2: 313 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 313 to 619
Garbage collection #3: 619 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 619 to 1237
Garbage collection #4: 1237 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1237 to 2473
Garbage collection #5: 2473 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2473 to 4943
Garbage collection #6: 4943 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4943 to 9883
Garbage collection #7: 9883 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9883 to 19763
Garbage collection #1: 151 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 151 to 293
Garbage collection #2: 293 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 293 to 577
Garbage collection #3: 577 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 577 to 1153
Garbage collection #4: 1153 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 1153 to 2297
Garbage collection #5: 2297 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 2297 to 4591
Garbage collection #6: 4591 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 4591 to 9181
Garbage collection #7: 9181 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 9181 to 18353
Garbage collection #8: 18353 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 18353 to 36697
Garbage collection #9: 36697 nodes / 0 free / 0.0s / 0.0s total
Resizing node table from 36697 to 73387
Garbage collection #10: 73387 nodes / 0 free / 0.002s / 0.002s total
Resizing node table from 73387 to 123379
[2020-11-25 14:16:55,769 WARN  L188               SmtUtils]: Spent 2.14 s on a formula simplification. DAG size of input: 448 DAG size of output: 431
[2020-11-25 14:16:55,791 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:16:55,820 INFO  L140    AnnotateAndAsserter]: Conjunction of SSA is sat
[2020-11-25 14:16:55,833 INFO  L202        PluginConnector]: Adding new model LTL+Program Product de.uni_freiburg.informatik.ultimate.plugins.generator.buchiautomizer CFG 25.11 02:16:55 BasicIcfg
[2020-11-25 14:16:55,833 INFO  L132        PluginConnector]: ------------------------ END BuchiAutomizer----------------------------
[2020-11-25 14:16:55,834 INFO  L168              Benchmark]: Toolchain (without parser) took 27514.68 ms. Allocated memory was 1.0 GB in the beginning and 2.9 GB in the end (delta: 1.9 GB). Free memory was 935.2 MB in the beginning and 1.8 GB in the end (delta: -852.5 MB). Peak memory consumption was 1.9 GB. Max. memory is 15.3 GB.
[2020-11-25 14:16:55,834 INFO  L168              Benchmark]: Boogie PL CUP Parser took 0.13 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
[2020-11-25 14:16:55,834 INFO  L168              Benchmark]: Boogie Preprocessor took 92.35 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 913.7 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
[2020-11-25 14:16:55,835 INFO  L168              Benchmark]: UtopiaSpecLang took 74.21 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 897.6 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
[2020-11-25 14:16:55,836 INFO  L168              Benchmark]: Boogie Printer took 21.43 ms. Allocated memory is still 1.0 GB. Free memory was 897.6 MB in the beginning and 892.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
[2020-11-25 14:16:55,836 INFO  L168              Benchmark]: RCFGBuilder took 1129.95 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 54.5 MB). Free memory was 892.2 MB in the beginning and 909.5 MB in the end (delta: -17.3 MB). Peak memory consumption was 178.9 MB. Max. memory is 15.3 GB.
[2020-11-25 14:16:55,836 INFO  L168              Benchmark]: UtopiaLTL2Aut took 36.89 ms. Allocated memory is still 1.1 GB. Free memory was 909.5 MB in the beginning and 900.1 MB in the end (delta: 9.3 MB). Peak memory consumption was 9.3 MB. Max. memory is 15.3 GB.
[2020-11-25 14:16:55,837 INFO  L168              Benchmark]: BÃ¼chi Program Product took 2571.15 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 198.2 MB). Free memory was 900.1 MB in the beginning and 959.6 MB in the end (delta: -59.4 MB). Peak memory consumption was 467.5 MB. Max. memory is 15.3 GB.
[2020-11-25 14:16:55,837 INFO  L168              Benchmark]: BlockEncodingV2 took 213.49 ms. Allocated memory is still 1.3 GB. Free memory was 959.6 MB in the beginning and 847.9 MB in the end (delta: 111.6 MB). Peak memory consumption was 111.6 MB. Max. memory is 15.3 GB.
[2020-11-25 14:16:55,837 INFO  L168              Benchmark]: BuchiAutomizer took 23372.58 ms. Allocated memory was 1.3 GB in the beginning and 2.9 GB in the end (delta: 1.6 GB). Free memory was 847.9 MB in the beginning and 1.8 GB in the end (delta: -939.8 MB). Peak memory consumption was 1.6 GB. Max. memory is 15.3 GB.
[2020-11-25 14:16:55,840 INFO  L337   ainManager$Toolchain]: #######################  End [Toolchain 1] #######################
 --- Results ---
 * Results from de.uni_freiburg.informatik.ultimate.plugins.blockencoding:
  - StatisticsResult: Initial Icfg
    7640 locations, 13678 edges
  - StatisticsResult: Encoded RCFG
    7448 locations, 13137 edges
 * Results from de.uni_freiburg.informatik.ultimate.core:
  - StatisticsResult: Toolchain Benchmarks
    Benchmark results are:
 * Boogie PL CUP Parser took 0.13 ms. Allocated memory is still 1.0 GB. Free memory is still 956.7 MB. There was no memory consumed. Max. memory is 15.3 GB.
 * Boogie Preprocessor took 92.35 ms. Allocated memory is still 1.0 GB. Free memory was 935.2 MB in the beginning and 913.7 MB in the end (delta: 21.5 MB). Peak memory consumption was 21.5 MB. Max. memory is 15.3 GB.
 * UtopiaSpecLang took 74.21 ms. Allocated memory is still 1.0 GB. Free memory was 913.7 MB in the beginning and 897.6 MB in the end (delta: 16.1 MB). Peak memory consumption was 16.1 MB. Max. memory is 15.3 GB.
 * Boogie Printer took 21.43 ms. Allocated memory is still 1.0 GB. Free memory was 897.6 MB in the beginning and 892.2 MB in the end (delta: 5.4 MB). Peak memory consumption was 5.4 MB. Max. memory is 15.3 GB.
 * RCFGBuilder took 1129.95 ms. Allocated memory was 1.0 GB in the beginning and 1.1 GB in the end (delta: 54.5 MB). Free memory was 892.2 MB in the beginning and 909.5 MB in the end (delta: -17.3 MB). Peak memory consumption was 178.9 MB. Max. memory is 15.3 GB.
 * UtopiaLTL2Aut took 36.89 ms. Allocated memory is still 1.1 GB. Free memory was 909.5 MB in the beginning and 900.1 MB in the end (delta: 9.3 MB). Peak memory consumption was 9.3 MB. Max. memory is 15.3 GB.
 * BÃ¼chi Program Product took 2571.15 ms. Allocated memory was 1.1 GB in the beginning and 1.3 GB in the end (delta: 198.2 MB). Free memory was 900.1 MB in the beginning and 959.6 MB in the end (delta: -59.4 MB). Peak memory consumption was 467.5 MB. Max. memory is 15.3 GB.
 * BlockEncodingV2 took 213.49 ms. Allocated memory is still 1.3 GB. Free memory was 959.6 MB in the beginning and 847.9 MB in the end (delta: 111.6 MB). Peak memory consumption was 111.6 MB. Max. memory is 15.3 GB.
 * BuchiAutomizer took 23372.58 ms. Allocated memory was 1.3 GB in the beginning and 2.9 GB in the end (delta: 1.6 GB). Free memory was 847.9 MB in the beginning and 1.8 GB in the end (delta: -939.8 MB). Peak memory consumption was 1.6 GB. Max. memory is 15.3 GB.
 * Results from de.uni_freiburg.informatik.ultimate.buchiprogramproduct:
  - StatisticsResult: Initial property automaton
    2 locations, 3 edges
  - StatisticsResult: Initial RCFG
    3097 locations, 4215 edges
  - StatisticsResult: BuchiProgram size
    7640 locations, 13678 edges
 * Results from de.uni_freiburg.informatik.ultimate.plugins.generator.traceabstraction:
  - StatisticsResult: Constructed decomposition of program
    Your program was decomposed into 6 terminating modules (6 trivial, 0 deterministic, 0 nondeterministic) and one nonterminating remainder module.6 modules have a trivial ranking function, the largest among these consists of 8 locations. The remainder module has 4894 locations.
  - StatisticsResult: Timing statistics
    BÃ¼chiAutomizer plugin needed 23.3s and 7 iterations.  TraceHistogramMax:3. Analysis of lassos took 21.3s. Construction of modules took 0.6s. BÃ¼chi inclusion checks took 0.5s. Highest rank in rank-based complementation 0. Minimization of det autom 6. Minimization of nondet autom 0. Automata minimization 0.3s AutomataMinimizationTime, 6 MinimizatonAttempts, 1304 StatesRemovedByMinimization, 2 NontrivialMinimizations. Non-live state removal took 0.2s Buchi closure took 0.0s. Biggest automaton had 5200 states and ocurred in iteration 2.	Nontrivial modules had stage [0, 0, 0, 0, 0].	InterpolantCoveringCapabilityFinite: 0/0	InterpolantCoveringCapabilityBuchi: 0/0	HoareTripleCheckerStatistics: 33323 SDtfs, 11862 SDslu, 79596 SDs, 0 SdLazy, 3337 SolverSat, 3119 SolverUnsat, 0 SolverUnknown, 0 SolverNotchecked, 0.6s Time	LassoAnalysisResults: nont1 unkn0 SFLI0 SFLT0 conc0 concLT0 SILN0 SILU6 SILI0 SILT0 lasso0 LassoPreprocessingBenchmarks: LassoTerminationAnalysisBenchmarks: not availableLassoTerminationAnalysisBenchmarks: LassoNonterminationAnalysisSatFixpoint: 0	LassoNonterminationAnalysisSatUnbounded: 0	LassoNonterminationAnalysisUnsat: 0	LassoNonterminationAnalysisUnknown: 0	LassoNonterminationAnalysisTime: 0.0s	
  - TransactionCounterexample: Violation of LTL property LTL
    Found an infinite, lasso-shaped execution that violates the LTL property LTL.
Stem:
address(115792089237316195423570985008687907853269984665640564039457584007913129639967) = (new DkargoToken)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639970, name : 115792089237316195423570985008687907853269984665640564039457584007913129639965, symbol : 115792089237316195423570985008687907853269984665640564039457584007913129639966, supply : 115792089237316195423570985008687907853269984665640564039457584007913129639937});
[L2404]              havoc __exception;
[L2405]              revert := false;
[L2406]  COND FALSE  !(__exception)
[L2439]  CALL        call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5754]  CALL        call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L4105]  CALL        call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4087]              assume msgsender_MSG != null;
[L4088]              Balance[this] := 0;
[L4089]              _owner_Ownership[this] := null;
[L4091]              assert { :EventEmitted "OwnershipTransferred_Ownership" } true;
[L4092]              _owner_Ownership[this] := msgsender_MSG;
[L4105]  RET         call Ownership_Ownership_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4106]  COND FALSE  !(revert)
[L5754]  RET         call Ownership_Ownership__success(this, msgsender_MSG, msgvalue_MSG);
[L5755]  COND FALSE  !(revert)
[L5758]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5758]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5759]  COND FALSE  !(revert)
[L5762]  CALL        call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L4914]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L4914]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4915]  COND FALSE  !(revert)
[L4918]  CALL        call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4869]              assume msgsender_MSG != null;
[L4870]              Balance[this] := 0;
[L4871]              _supply_ERC20[this] := 0;
[L4872]              _balances_ERC20[this] := zeroRefintArr();
[L4873]              sum__balances1[this] := 0;
[L4874]              _allowances_ERC20[this] := zeroRefRefintArr();
[L4875]              sum__allowances2[this] := 0;
[L4877]              pebs_s747 := supply_s747;
[L4878]  COND TRUE   DType[this] == DkargoToken
[L4879]  CALL        call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L5283]              __var_24 := null;
[L5284]  COND FALSE  !(!(account_s999 != null))
[L5288]  CALL        call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L5288]  RET         call __var_25 := add~uint256~uint256_SafeMath__success(this, this, 0, _supply_ERC20[this], amount_s999);
[L5289]  COND FALSE  !(revert)
[L5292]              _supply_ERC20[this] := __var_25;
[L5293]  CALL        call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L5293]  RET         call __var_26 := add~uint256~uint256_SafeMath__success(this, this, 0, _balances_ERC20[this][account_s999], amount_s999);
[L5294]  COND FALSE  !(revert)
[L5297]              sum__balances1[this] := sum__balances1[this] - _balances_ERC20[this][account_s999];
[L5298]              _balances_ERC20[this][account_s999] := __var_26;
[L5299]              sum__balances1[this] := sum__balances1[this] + _balances_ERC20[this][account_s999];
[L5300]              assert { :EventEmitted "Transfer_ERC20" } true;
[L4879]  RET         call _mint~address~uint256_ERC20__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG, pebs_s747);
[L4880]  COND FALSE  !(revert)
[L4918]  RET         call ERC20_ERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, supply_s747);
[L4919]  COND FALSE  !(revert)
[L5762]  RET         call ERC20_ERC20__success(this, msgsender_MSG, msgvalue_MSG, supply_s1191);
[L5763]  COND FALSE  !(revert)
[L5766]  CALL        call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5382]  CALL        call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L4826]  CALL        call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4811]              assume msgsender_MSG != null;
[L4812]              Balance[this] := 0;
[L4826]  RET         call IERC20_IERC20_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4827]  COND FALSE  !(revert)
[L5382]  RET         call IERC20_IERC20__success(this, msgsender_MSG, msgvalue_MSG);
[L5383]  COND FALSE  !(revert)
[L5386]  CALL        call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5363]              assume msgsender_MSG != null;
[L5364]              Balance[this] := 0;
[L5386]  RET         call ERC20Safe_ERC20Safe_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L5387]  COND FALSE  !(revert)
[L5766]  RET         call ERC20Safe_ERC20Safe__success(this, msgsender_MSG, msgvalue_MSG);
[L5767]  COND FALSE  !(revert)
[L5770]  CALL        call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L4362]  CALL        call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4341]              assume msgsender_MSG != null;
[L4342]              Balance[this] := 0;
[L4344]  CALL        call __var_3 := FreshRefGenerator__success();
[L3984]              havoc newRef;
[L3985]              assume Alloc[newRef] == false;
[L3986]              Alloc[newRef] := true;
[L3987]              assume newRef != null;
[L4344]  RET         call __var_3 := FreshRefGenerator__success();
[L4345]  COND FALSE  !(revert)
[L4348]              _slist_AddressChain[this] := __var_3;
[L4362]  RET         call AddressChain_AddressChain_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4363]  COND FALSE  !(revert)
[L5770]  RET         call AddressChain_AddressChain__success(this, msgsender_MSG, msgvalue_MSG);
[L5771]  COND FALSE  !(revert)
[L5774]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4675]              assume msgsender_MSG != null;
[L4676]              Balance[this] := 0;
[L4690]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4691]  COND FALSE  !(revert)
[L5774]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5775]  COND FALSE  !(revert)
[L5778]  CALL        call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4760]  CALL        call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4690]  CALL        call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4675]              assume msgsender_MSG != null;
[L4676]              Balance[this] := 0;
[L4690]  RET         call IERC165_IERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4691]  COND FALSE  !(revert)
[L4760]  RET         call IERC165_IERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L4761]  COND FALSE  !(revert)
[L4764]  CALL        call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4724]              assume msgsender_MSG != null;
[L4725]              Balance[this] := 0;
[L4726]              _infcs_ERC165[this] := zerointboolArr();
[L4728]              __var_16 := 33540519;
[L4729]  COND TRUE   DType[this] == DkargoToken
[L4730]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4793]  COND FALSE  !(!(infcid_s644 != -1))
[L4797]              _infcs_ERC165[this][infcid_s644] := true;
[L4730]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, 33540519);
[L4731]  COND FALSE  !(revert)
[L4764]  RET         call ERC165_ERC165_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4765]  COND FALSE  !(revert)
[L5778]  RET         call ERC165_ERC165__success(this, msgsender_MSG, msgvalue_MSG);
[L5779]  COND FALSE  !(revert)
[L5782]  CALL        call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L4046]  CALL        call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4030]              assume msgsender_MSG != null;
[L4031]              Balance[this] := 0;
[L4032]              _dkargoPrefix_DkargoPrefix[this] := -1676636045;
[L4046]  RET         call DkargoPrefix_DkargoPrefix_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG);
[L4047]  COND FALSE  !(revert)
[L5782]  RET         call DkargoPrefix_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG);
[L5783]  COND FALSE  !(revert)
[L5786]  CALL        call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5676]              assume msgsender_MSG != null;
[L5677]              Balance[this] := 0;
[L5678]              _name_DkargoToken[this] := -1676636045;
[L5679]              _symbol_DkargoToken[this] := -1676636045;
[L5681]  COND TRUE   DType[this] == DkargoToken
[L5682]  CALL        call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L4071]              _dkargoPrefix_DkargoPrefix[this] := prefix_s21;
[L5682]  RET         call _setDkargoPrefix~string_DkargoPrefix__success(this, msgsender_MSG, msgvalue_MSG, 978340553);
[L5683]  COND FALSE  !(revert)
[L5689]              __var_39 := -1804674067;
[L5690]  COND TRUE   DType[this] == DkargoToken
[L5691]  CALL        call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L4793]  COND FALSE  !(!(infcid_s644 != -1))
[L4797]              _infcs_ERC165[this][infcid_s644] := true;
[L5691]  RET         call _registerInterface~bytes4_ERC165__success(this, msgsender_MSG, msgvalue_MSG, -1804674067);
[L5692]  COND FALSE  !(revert)
[L5698]              _name_DkargoToken[this] := name_s1191;
[L5699]              _symbol_DkargoToken[this] := symbol_s1191;
[L5700]  COND TRUE   DType[this] == DkargoToken
[L5701]  CALL        call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L4505]              __var_6 := null;
[L4506]  COND FALSE  !(!(node_s455 != null))
[L4510]  COND TRUE   DType[this] == DkargoToken
[L4511]  CALL        call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4447]  COND FALSE  !((count_AddressChain.NodeList[_slist_AddressChain[this]] == 1 && head_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376) && tail_AddressChain.NodeList[_slist_AddressChain[this]] == node_s376)
[L4451]              __var_4 := null;
[L4452]              __var_5 := null;
[L4453]              __ret_0_ := (if prev_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null && next_AddressChain.NodeInfo[M_Ref_Ref[map_AddressChain.NodeList[_slist_AddressChain[this]]][node_s376]] == null then false else true);
[L4511]  RET         call __var_7 := isLinked~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, node_s455);
[L4512]  COND FALSE  !(revert)
[L4523]  COND FALSE  !(!!__var_7)
[L4527]  COND TRUE   count_AddressChain.NodeList[_slist_AddressChain[this]] == 0
[L4528]              tail_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4529]              head_AddressChain.NodeList[_slist_AddressChain[this]] := node_s455;
[L4535]  CALL        call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4213]              c_s130 := (a_s130 + b_s130) % 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L4214]  COND FALSE  !(!(c_s130 >= a_s130))
[L4218]              __ret_0_ := c_s130;
[L4535]  RET         call __var_8 := add~uint256~uint256_SafeMath__success(this, this, 0, count_AddressChain.NodeList[_slist_AddressChain[this]], 1);
[L4536]  COND FALSE  !(revert)
[L4539]              count_AddressChain.NodeList[_slist_AddressChain[this]] := __var_8;
[L4540]              assert { :EventEmitted "AddressChainLinked_AddressChain" } true;
[L5701]  RET         call _linkChain~address_AddressChain__success(this, msgsender_MSG, msgvalue_MSG, msgsender_MSG);
[L5702]  COND FALSE  !(revert)
[L5786]  RET         call DkargoToken_DkargoToken_NoBaseCtor__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L5787]  COND FALSE  !(revert)
[L2439]  RET         call DkargoToken_DkargoToken__success(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
[L2440]              assume !revert && gas >= 0;
[L8447]  RET         call DkargoToken_DkargoToken(this, msgsender_MSG, msgvalue_MSG, name_s1191, symbol_s1191, supply_s1191);
DkargoToken(115792089237316195423570985008687907853269984665640564039457584007913129639967).transferFrom~address~address~uint256.gas(3979002)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639963, from : 0, to : 115792089237316195423570985008687907853269984665640564039457584007913129639970, value : 0});
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume (((((((((((((p1 != from_s1311 && p1 != to_s1311) && (p2 != from_s1311 || p3 != msgsender_MSG)) && from_s1311 != to_s1311) && value_s1311 <= _balances_ERC20[this][from_s1311]) && value_s1311 <= _allowances_ERC20[this][from_s1311][msgsender_MSG]) && _balances_ERC20[this][to_s1311] + value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                call_transferFrom_DkargoToken0 := true;
[L3]                call_transferFrom_DkargoToken0 := false;
[L3]                revert := revert_hold;
[L2645]             havoc __exception;
[L2646]             revert := false;
[L2647]  COND TRUE  __exception
[L2648]             __tmp__Balance := Balance;
[L2649]             __tmp__DType := DType;
[L2650]             __tmp__Alloc := Alloc;
[L2651]             __tmp__balance_ADDR := balance_ADDR;
[L2652]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L2653]             __tmp__sum := sum;
[L2654]             __tmp__M_int_bool := M_int_bool;
[L2655]             __tmp__sum__infcs0 := sum__infcs0;
[L2656]             __tmp__M_Ref_int := M_Ref_int;
[L2657]             __tmp__sum__balances1 := sum__balances1;
[L2658]             __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2659]             __tmp__sum__allowances2 := sum__allowances2;
[L2660]             __tmp__Length := Length;
[L2661]             __tmp__now := now;
[L2662]             __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2663]             __tmp___owner_Ownership := _owner_Ownership;
[L2664]             __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2665]             __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2666]             __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2667]             __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2668]             __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2669]             __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2670]             __tmp___slist_AddressChain := _slist_AddressChain;
[L2671]             __tmp___infcs_ERC165 := _infcs_ERC165;
[L2672]             __tmp___supply_ERC20 := _supply_ERC20;
[L2673]             __tmp___balances_ERC20 := _balances_ERC20;
[L2674]             __tmp___allowances_ERC20 := _allowances_ERC20;
[L2675]             __tmp___name_DkargoToken := _name_DkargoToken;
[L2676]             __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2677]  CALL       call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5970]  COND TRUE  __tmp__DType[this] == DkargoToken
[L5971]  CALL       call ret_s1311 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5023]  COND TRUE  __tmp__DType[this] == DkargoToken
[L5024]  CALL       call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5195]             __var_20 := null;
[L5196]  COND TRUE  !(sender_s956 != null)
[L5197]             revert := true;
[L5024]  RET        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5025]  COND TRUE  revert
[L5971]  RET        call ret_s1311 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5972]  COND TRUE  revert
[L2677]  RET        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2678]             assume revert || gas < 0;
[L8371]  RET        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);

Loop:
DkargoToken(115792089237316195423570985008687907853269984665640564039457584007913129639967).transferFrom~address~address~uint256.gas(3979001)({from : 115792089237316195423570985008687907853269984665640564039457584007913129639950, from : 0, to : 115792089237316195423570985008687907853269984665640564039457584007913129639970, value : 0});
[L3]                revert_hold := revert;
[L3]                revert := false;
[L3]                assume (((((((((((((p1 != from_s1311 && p1 != to_s1311) && (p2 != from_s1311 || p3 != msgsender_MSG)) && from_s1311 != to_s1311) && value_s1311 <= _balances_ERC20[this][from_s1311]) && value_s1311 <= _allowances_ERC20[this][from_s1311][msgsender_MSG]) && _balances_ERC20[this][to_s1311] + value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && value_s1311 >= 0) && value_s1311 < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][to_s1311] >= 0) && _balances_ERC20[this][to_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _balances_ERC20[this][from_s1311] >= 0) && _balances_ERC20[this][from_s1311] < 115792089237316195423570985008687907853269984665640564039457584007913129639936) && _allowances_ERC20[this][from_s1311][msgsender_MSG] >= 0) && _allowances_ERC20[this][from_s1311][msgsender_MSG] < 115792089237316195423570985008687907853269984665640564039457584007913129639936;
[L3]                call_transferFrom_DkargoToken0 := true;
[L3]                call_transferFrom_DkargoToken0 := false;
[L3]                revert := revert_hold;
[L2645]             havoc __exception;
[L2646]             revert := false;
[L2647]  COND TRUE  __exception
[L2648]             __tmp__Balance := Balance;
[L2649]             __tmp__DType := DType;
[L2650]             __tmp__Alloc := Alloc;
[L2651]             __tmp__balance_ADDR := balance_ADDR;
[L2652]             __tmp__M_Ref_Ref := M_Ref_Ref;
[L2653]             __tmp__sum := sum;
[L2654]             __tmp__M_int_bool := M_int_bool;
[L2655]             __tmp__sum__infcs0 := sum__infcs0;
[L2656]             __tmp__M_Ref_int := M_Ref_int;
[L2657]             __tmp__sum__balances1 := sum__balances1;
[L2658]             __tmp__alloc__allowances_ERC20_lvl0 := alloc__allowances_ERC20_lvl0;
[L2659]             __tmp__sum__allowances2 := sum__allowances2;
[L2660]             __tmp__Length := Length;
[L2661]             __tmp__now := now;
[L2662]             __tmp___dkargoPrefix_DkargoPrefix := _dkargoPrefix_DkargoPrefix;
[L2663]             __tmp___owner_Ownership := _owner_Ownership;
[L2664]             __tmp__prev_AddressChain.NodeInfo := prev_AddressChain.NodeInfo;
[L2665]             __tmp__next_AddressChain.NodeInfo := next_AddressChain.NodeInfo;
[L2666]             __tmp__count_AddressChain.NodeList := count_AddressChain.NodeList;
[L2667]             __tmp__head_AddressChain.NodeList := head_AddressChain.NodeList;
[L2668]             __tmp__tail_AddressChain.NodeList := tail_AddressChain.NodeList;
[L2669]             __tmp__map_AddressChain.NodeList := map_AddressChain.NodeList;
[L2670]             __tmp___slist_AddressChain := _slist_AddressChain;
[L2671]             __tmp___infcs_ERC165 := _infcs_ERC165;
[L2672]             __tmp___supply_ERC20 := _supply_ERC20;
[L2673]             __tmp___balances_ERC20 := _balances_ERC20;
[L2674]             __tmp___allowances_ERC20 := _allowances_ERC20;
[L2675]             __tmp___name_DkargoToken := _name_DkargoToken;
[L2676]             __tmp___symbol_DkargoToken := _symbol_DkargoToken;
[L2677]  CALL       call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5970]  COND TRUE  __tmp__DType[this] == DkargoToken
[L5971]  CALL       call ret_s1311 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5023]  COND TRUE  __tmp__DType[this] == DkargoToken
[L5024]  CALL       call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5195]             __var_20 := null;
[L5196]  COND TRUE  !(sender_s956 != null)
[L5197]             revert := true;
[L5024]  RET        call _transfer~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, sender_s821, recipient_s821, amount_s821);
[L5025]  COND TRUE  revert
[L5971]  RET        call ret_s1311 := transferFrom~address~address~uint256_ERC20__fail(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L5972]  COND TRUE  revert
[L2677]  RET        call __ret_0_ := transferFrom~address~address~uint256_DkargoToken__fail(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);
[L2678]             assume revert || gas < 0;
[L8371]  RET        call __ret_0_transferFrom := transferFrom~address~address~uint256_DkargoToken(this, msgsender_MSG, msgvalue_MSG, from_s1311, to_s1311, value_s1311);

End of lasso representation.
RESULT: Ultimate could not prove your program: Toolchain returned no result.
Received shutdown request...
